pr_id,id,user,state,submitted_at,body
3119415087,2898385520,ellipsis-dev[bot],COMMENTED,2025-06-04T23:55:46Z,"> [!CAUTION]
> **Changes requested  :x:**
> <details>
> <summary>Reviewed everything up to f099c4127e54996c5333e9621957231f944a0946 in <ellipsistime>1 minute and 7 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `19` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/onlook-dev/settings/code-review) and [rules](https://app.ellipsis.dev/onlook-dev/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>packages/ai/test/apply.test.ts:8</code></summary>
> 
> - **Draft comment:** 
> Using a dynamic 'run' to conditionally skip tests is good. Ensure that the test behavior aligns with available API keys.
> - **Reason this comment was not posted:**
> Confidence changes required: `20%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>packages/ai/test/apply.test.ts:5</code></summary>
> 
> - **Draft comment:** 
> Possible typo: 'RELACE_API_KEY' might be intended as 'REPLACE_API_KEY'. Please check that the environment variable name is correct.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 20% vs. threshold = 50% While RELACE does look like it could be a typo of REPLACE, I have no strong evidence that this is actually incorrect. This could be an intentional API key name for a service called ""Relace"". Without access to the rest of the codebase or documentation, I cannot be certain this is a typo. Making assumptions about API key names without context could lead to incorrect changes. The comment could be correct - RELACE does look unusual and REPLACE would make more sense semantically. The author might appreciate having this potential typo caught. However, we must follow the principle that we need STRONG EVIDENCE to keep a comment. Making assumptions about API key names without context could cause confusion or unnecessary changes. Delete the comment. Without clear evidence that RELACE_API_KEY is incorrect, suggesting a rename could be misleading or harmful.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_PsQmAxG0hSb4zGTm`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=onlook-dev%2Fonlook&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/onlook-dev/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/onlook-dev/code-review/rules).</sup>"
3092262299,2869283193,ellipsis-dev[bot],COMMENTED,2025-05-27T00:42:09Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed 325605e7cf8b2d0be395673323fb4854bb1beda6 in <ellipsistime>41 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `151` lines of code in `4` files
> - Skipped `0` files when reviewing.
> - Skipped posting `1` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern/forge/sdk/routes/credentials.py:72</code></summary>
> 
> - **Draft comment:** 
> The updated TOTP code parsing now always invokes parse_totp_code(data.content) and removes the conditional handling (i.e. using the content directly when its length ≤10) along with the logging of parse failures. Please confirm that this is intended. This change may lead to unnecessary LLM calls when a short, direct code is provided, and the removal of logging could hinder debugging if parsing fails.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `30%` <= threshold `50%` The comment is asking the PR author to confirm their intention regarding the change in TOTP code parsing. It highlights a potential issue with unnecessary LLM calls and the removal of logging, which could hinder debugging. However, it violates the rule against asking the author to confirm their intention. The comment could be rephrased to suggest a specific change or improvement without asking for confirmation.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_ROWIWPjSafAa1lTW`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3092262299,2869283473,ellipsis-dev[bot],COMMENTED,2025-05-27T00:42:37Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 325605e7cf8b2d0be395673323fb4854bb1beda6 in <ellipsistime>1 minute and 7 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `151` lines of code in `4` files
> - Skipped `0` files when reviewing.
> - Skipped posting `4` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern/cli/init_command.py:77</code></summary>
> 
> - **Draft comment:** 
> Removed Docker Compose/Postgres container instructions. Ensure this removal is intentional and that users have alternative guidance if needed.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>skyvern/client/workflows/client.py:113</code></summary>
> 
> - **Draft comment:** 
> Docstring text updated (removed 'definition'); verify that this simplification maintains clarity for users.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>skyvern/forge/sdk/routes/agent_protocol.py:348</code></summary>
> 
> - **Draft comment:** 
> Endpoint tags and summaries have been updated (e.g. get_run now uses tags [""Agent"", ""Workflows""] and summary 'Get a run by id'). Confirm that this reorganization aligns with intended API documentation grouping.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>skyvern/forge/sdk/routes/credentials.py:72</code></summary>
> 
> - **Draft comment:** 
> Removed the conditional check on TOTP content length and direct assignment; now always calling parse_totp_code. Verify this change doesn’t break cases where a raw short code is provided.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment is asking the author to verify that a change doesn't break certain cases, which violates the rule against asking the author to ensure behavior is intended or tested. It doesn't provide a specific suggestion or ask for a specific test to be written.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_cN3210xJnKQ8LxQh`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3152475848,2934568730,ellipsis-dev[bot],COMMENTED,2025-06-17T08:03:26Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed 35fbc4ba0c65eceb17dd54becba12091f4e37585 in <ellipsistime>2 minutes and 49 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `119` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `5` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern/webeye/utils/page.py:91</code></summary>
> 
> - **Draft comment:** 
> Return type updated to tuple (screenshots, positions). Ensure all dependent docs and callers are updated accordingly.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>skyvern/webeye/utils/page.py:151</code></summary>
> 
> - **Draft comment:** 
> In _merge_images_by_position, consider verifying that the 'positions' list is strictly increasing to avoid negative height adjustments.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 0% vs. threshold = 50% Looking at _scrolling_screenshots_helper where positions are generated, they come from scroll_y_px which should naturally increase as we scroll down. The code already has checks to ensure meaningful scrolling (>25px difference). The positions list is used to handle overlaps between screenshots correctly. A decreasing position could cause issues with merged_height calculation. The comment identifies a real potential issue - negative height adjustments could cause problems. However, the scrolling logic already ensures positions increase meaningfully. While the validation could add safety, the existing scroll position checks in _scrolling_screenshots_helper already ensure positions will be increasing. The comment suggests a valid check but it's not strictly necessary given the existing safeguards in the screenshot capture logic.
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>skyvern/webeye/utils/page.py:174</code></summary>
> 
> - **Draft comment:** 
> The variables 'step' and 'overlap' in the merging loop might be ambiguous. Consider renaming or adding comments for clarity.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>skyvern/webeye/utils/page.py:165</code></summary>
> 
> - **Draft comment:** 
> Ensure that the scroll step (difference in positions) does not exceed the screenshot height. Otherwise, the merged height may include unexpected blank space.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 10% vs. threshold = 50% The current code appears correct. If step > image.height, it means there was a gap in scrolling, which should be preserved in the final image. Limiting the step to image.height would incorrectly compress the image. The code already handles overlaps correctly by cropping when needed. The comment seems to misunderstand that gaps between screenshots may be intentional. Could there be edge cases where very large scroll steps cause visual issues? What if the page has dynamic content that changes height between screenshots? The scroll steps are controlled by the browser's scrolling behavior and the page's content. If there are large gaps, they likely represent actual page content. Dynamic content issues would exist regardless of step size limits. The comment should be deleted. The current code correctly handles both overlaps and gaps between screenshots, and limiting the step size could introduce incorrect behavior.
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>skyvern/webeye/utils/page.py:277</code></summary>
> 
> - **Draft comment:** 
> Usage of underscore to discard the positions in take_split_screenshots is acceptable.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_twh7xynUmBfIjghN`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3152475848,2934569110,ellipsis-dev[bot],COMMENTED,2025-06-17T08:03:34Z,"> [!CAUTION]
> **Changes requested  :x:**
> <details>
> <summary>Reviewed everything up to 35fbc4ba0c65eceb17dd54becba12091f4e37585 in <ellipsistime>2 minutes and 55 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `119` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern/webeye/utils/page.py:112</code></summary>
> 
> - **Draft comment:** 
> Ensure that the scroll positions are always strictly increasing. If they aren’t, the computed overlaps and merged layout can be incorrect.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 30% vs. threshold = 50% The comment raises a valid concern - if scroll positions don't increase monotonically, the image merging logic could break. The code assumes increasing positions when calculating merged_height and overlaps. However, the code already has checks to ensure scrolling is working (abs diff > 25) and the scroll_to_next_page() function likely handles proper scrolling internally. I may be overconfident in assuming the scroll_to_next_page() function guarantees forward progress. There could be edge cases where the page scrolls backwards or stays in place. While the concern is valid, adding validation here would be treating a symptom rather than the cause. If scrolling isn't working properly, that should be fixed in scroll_to_next_page(). The comment should be deleted. While it identifies a real potential issue, adding validation here would be the wrong fix - any scrolling issues should be handled within scroll_to_next_page().
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>skyvern/webeye/utils/page.py:277</code></summary>
> 
> - **Draft comment:** 
> Minor: In take_split_screenshots, the unused positions value is discarded (_). This is fine, but consider documenting that the positions are intentionally ignored.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_sdvtPd1O3isLc7yD`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3152475848,2934571185,LawyZheng,APPROVED,2025-06-17T08:04:18Z,
3114736501,2893625482,stephanos,COMMENTED,2025-06-03T18:25:12Z,
3114736501,2893628159,stephanos,COMMENTED,2025-06-03T18:26:02Z,
3114736501,2893629290,stephanos,COMMENTED,2025-06-03T18:26:28Z,
3114736501,2893632236,stephanos,COMMENTED,2025-06-03T18:27:12Z,
3114736501,2893633404,stephanos,COMMENTED,2025-06-03T18:27:37Z,
3114736501,2894134983,stephanos,COMMENTED,2025-06-03T21:12:23Z,
3141190976,2938649014,KAVYANSHTYAGI,COMMENTED,2025-06-18T10:22:09Z,"Thank you for the feedback! I appreciate the emphasis on keeping OpenCV concise and adding features with broad utility.

**References**

""Morphological Image Analysis: Principles and Applications""
    Pierre Soille — Section 3.1.3 covers the diamond (L1-metric) structuring element and its uses.
    [Springer Link](https://link.springer.com/book/10.1007/978-3-662-05088-0)

""Fundamentals of Digital Image Processing""
    Anil K. Jain — Discusses diamond shapes as a basic structuring element.

Lam, Lee, and Suen, “Thinning Methodologies—A Comprehensive Survey,” IEEE TPAMI, 1992.
    Diamond SE is used in skeletonization/thinning algorithms.
    [IEEE Link](https://ieeexplore.ieee.org/document/121791)

“Efficient Implementation of Morphological Operations with Arbitrary Structuring Elements,” IEEE, 1994.
    Efficient algorithms for diamond SE.
    (https://ieeexplore.ieee.org/document/296353)

scikit-image library --- Offers diamond SE as a built-in primitive.

Justification

The diamond structuring element is a standard primitive in mathematical morphology, especially for L1/Manhattan distance operations. It’s widely documented in textbooks and research, and is essential for connectivity based tasks like skeletonization and thinning.

While OpenCV supports custom kernels, having diamond as a built in, well tested option ensures consistency, reduces user error, and matches what’s already standard in libraries like scikit image. This makes foundational morphology algorithms easier to use, reliable, and reproducible across different users and codebases."
3136057497,2916274105,benfdking,COMMENTED,2025-06-11T09:04:56Z,
3136057497,2916275007,benfdking,COMMENTED,2025-06-11T09:05:21Z,
3136057497,2916307805,georgesittas,APPROVED,2025-06-11T09:15:00Z,
3136057497,2916310118,themisvaltinos,APPROVED,2025-06-11T09:15:40Z,
3154179065,2936452521,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-17T17:04:35Z,"## Pull Request Overview

This PR adds support for gzipped files in various filesystem source types while also updating tests and imports for consistency.  
- Adds logic in sources.py to handle gzipped files by extracting the underlying extension.  
- Updates tests in main_test.py to cover gzipped CSV, Parquet, and JSONL file ingestion.  
- Adjusts import order in factory.py for consistency with formatting guidelines.

### Reviewed Changes

Copilot reviewed 3 out of 3 changed files in this pull request and generated 2 comments.

| File                        | Description                                                       |
| --------------------------- | ----------------------------------------------------------------- |
| ingestr/src/sources.py      | Adds gz file handling logic by updating file extension parsing.   |
| ingestr/src/factory.py      | Reorders import entries for TrustpilotSource.                     |
| ingestr/main_test.py        | Adds tests to verify ingestion of gzipped CSV, Parquet, and JSONL.  |



"
3154179065,2936822908,karakanb,APPROVED,2025-06-17T19:17:31Z,
3147246889,2929043826,gemini-code-assist[bot],COMMENTED,2025-06-15T08:31:00Z,"## Summary of Changes

Hello @rgerhards, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request focuses entirely on improving the documentation for the `omsendertrack` module. I've added Doxygen comments to the file header, key internal data structures, and most of the internal functions. This makes the code much easier to understand for anyone reading it or trying to contribute.

### Highlights

* **Documentation**: Added a comprehensive Doxygen file header comment to `omsendertrack.c`, explaining the module's purpose, current proof-of-concept status, and linking to the relevant issue.
* **Documentation**: Added Doxygen comments to the main internal structs (`_instanceData` and `wrkrInstanceData_t`) used within the `omsendertrack` module, detailing their members.
* **Documentation**: Added Doxygen comments to several internal functions (`addSender`, `readSenderStats`, `jsonToHashtable`, `initHashtable`, `writeSenderStats`, `writeSenderInfo`, `bgWriter`, `recordSender`) to explain their purpose, parameters, and return values.
* **Cleanup**: Removed an unused `#include <stdlib.h>` from `omsendertrack.c`.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configureGemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3147246889,2929043957,gemini-code-assist[bot],COMMENTED,2025-06-15T08:31:28Z,"## Code Review

This pull request successfully adds Doxygen comments to the `omsendertrack.c` file, improving the documentation for the module, its structures, and functions. The comments are well-formatted and provide useful information about the code's purpose, parameters, and return values. However, the removal of the `<stdlib.h>` header will cause compilation errors as functions like `malloc` and `free` are still used in the file. This needs to be corrected."
3147246889,2929047664,gemini-code-assist[bot],COMMENTED,2025-06-15T08:46:05Z,"## Code Review

This pull request significantly improves the inline documentation of the `omsendertrack.c` file by adding Doxygen comments. The comments are clear and well-formatted, and enhance the maintainability of the module. 

There are two primary suggestions: 
1. Re-evaluate the removal of the `<stdlib.h>` include, as functions like `calloc` and `free` are used directly within this file. 
2. Enhance the Doxygen comment for the `recordSender` function by adding `@retval` to document its possible return codes."
3147246889,2929488844,gemini-code-assist[bot],COMMENTED,2025-06-15T13:27:26Z,"## Code Review

This pull request adds comprehensive Doxygen comments to the `omsendertrack.c` module, significantly improving its understandability and maintainability. The new comments cover the file's purpose, internal data structures, and functions. The changes are well-executed. My review includes a couple of suggestions to refine the accuracy and completeness of the documentation for specific parameters and function contracts, as well as some minor improvements."
3139007532,2919701718,pullrequest[bot],COMMENTED,2025-06-12T06:31:54Z,":mag: This pull request has been sent to HackerOne's PullRequest review team because our automation detected one or more changes with potential security impact or requires further evaluation. Experts are now being assigned to this review based on relevant expertise and will validate or dismiss any security findings accordingly and post their feedback as comments within this pull request.

:stopwatch: Latest scan covered changes up to commit cacd38ff2cc6150b170dcd9394b3bf6d55f91e52 (latest)
  
*****  
Check the status or cancel this secure code review [here](https://app.pullrequest.com/dash/1/writer)."
3139007532,2919708074,coderabbitai[bot],COMMENTED,2025-06-12T06:34:17Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (4)</summary><blockquote>

<details>
<summary>src/writer/serve.py (2)</summary><blockquote>

`193-195`: **Add/update the docstring for `enable_jobs_api`**

The parameter list was updated, but the docstring still omits `enable_jobs_api`.  A brief note that the Jobs API is now **enabled by default** (and can be disabled by passing `False`) will prevent confusion for downstream users.

```diff
@@
     :param on_shutdown: callback called at shutdown
+    :param enable_jobs_api: enables /private/api/job/* endpoints (default: True)
     :return: ASGI Server
```

---

`979-980`: **Same docstring gap in `serve()`**

`serve()` gained the new default but its docstring still doesn’t mention the flag. Add a one-liner so CLI users know the server already ships with Jobs API active.

</blockquote></details>
<details>
<summary>src/writer/command_line.py (2)</summary><blockquote>

`24-28`: **Nice flag inversion, but clarify help text**

Consider appending “(enabled by default)” to the help string so `writer run --help` instantly tells users the flag flips the default.

```diff
-    help=""Disable the Jobs API, preventing job execution without user interaction."",
+    help=""Disable the Jobs API (enabled by default), preventing job execution without user interaction."",
```

---

`60-64`: **Mirror the wording change in the edit command help**

Same wording tweak as above for consistency.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 0a1fa96bf33c23521d6f34583c3acd778bebeeca and cacd38ff2cc6150b170dcd9394b3bf6d55f91e52.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `src/writer/command_line.py` (5 hunks)
* `src/writer/serve.py` (2 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (18)</summary>

* GitHub Check: build (3.11)
* GitHub Check: build (3.9)
* GitHub Check: build (3.13)
* GitHub Check: build (3.12)
* GitHub Check: build (3.10)
* GitHub Check: build (3.11)
* GitHub Check: build (3.10)
* GitHub Check: build (3.13)
* GitHub Check: build (3.12)
* GitHub Check: build (3.9)
* GitHub Check: build (3.11)
* GitHub Check: tests (chromium)
* GitHub Check: tests (webkit)
* GitHub Check: build (3.12)
* GitHub Check: tests (firefox)
* GitHub Check: build (3.13)
* GitHub Check: build (3.9)
* GitHub Check: build (3.10)

</details>

<details>
<summary>🔇 Additional comments (5)</summary><blockquote>

<details>
<summary>src/writer/serve.py (1)</summary>

`595-598`: **Validate security implications of enabling Jobs API by default**

With the default now set to `True`, every instance exposes `/private/api/job/*`.  
If an application previously relied on the API being off unless explicitly enabled, it may now be unexpectedly reachable.  

Double-check:

1. Internal deployments that should stay locked down are started with `--disable-jobs-api`.
2. Docs / CHANGELOG call this out as a breaking-behaviour change.

</details>
<details>
<summary>src/writer/command_line.py (4)</summary>

`30-31`: **Parameter order & naming LGTM**

The new `disable_jobs_api` parameter lines up with the Click option; positional ordering stays intact.

---

`42-49`: **Correct boolean inversion – good catch**

Forwarding `enable_jobs_api=not disable_jobs_api` keeps backward compatibility inside the server layer.

---

`77-79`: **Signature change propagates cleanly**

All option values map correctly; no further action required.

---

`118-120`: **Consistent inversion here as well – good**

The edit path now correctly respects the disable flag.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3139007532,2919711769,pullrequest[bot],COMMENTED,2025-06-12T06:36:05Z,":white_check_mark: Peter V reviewed all the included code changes and associated automation findings and determined that there were no immediately actionable security flaws. Note that they will continue to be notified of any new commits or comments and follow up as needed throughout the duration of this pull request's lifecycle.
[](#09a40a2c-0126-444c-8847-790a2fb4d689 ""PullRequest Meta [Do Not Modify]"")

![Image of Peter V](https://static.pullrequest.com/avatars/reviewer_profiles/381c8201-f439-4e52-a02d-4421d1b93f3f?v=Z05B5o) **Peter V**
*****
Reviewed with :heart: by [PullRequest](https://www.pullrequest.com)"
3108166481,2887058209,sourcery-ai[bot],COMMENTED,2025-06-02T07:12:38Z,"Hey @mldangelo - I've reviewed your changes - here's some feedback:

- Consider creating a custom `renderWithRouter` helper to DRY up the repeated `MemoryRouter` wrapper across your tests.
- Replace `fireEvent` with `userEvent` for more realistic user interactions and clearer intent in your tests.
- Add a test in the `Navigation` suite to verify that the dark mode toggle button actually calls the provided `onToggleDarkMode` callback.

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3130282110,2910053824,coderabbitai[bot],COMMENTED,2025-06-09T13:20:50Z,"**Actionable comments posted: 2**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 4c85a596496d844abf8787f0476e907461e997e5 and c0167f2818a76c8b7de16d6c753beaffefc9cd67.

</details>

<details>
<summary>📒 Files selected for processing (7)</summary>

* `app/desktop/studio_server/eval_api.py` (2 hunks)
* `app/desktop/studio_server/test_eval_api.py` (8 hunks)
* `app/web_ui/src/lib/api_schema.d.ts` (2 hunks)
* `app/web_ui/src/routes/(app)/evals/[project_id]/[task_id]/[eval_id]/compare_run_methods/+page.svelte` (1 hunks)
* `app/web_ui/src/routes/(app)/run/+page.svelte` (1 hunks)
* `libs/server/kiln_server/run_api.py` (2 hunks)
* `libs/server/kiln_server/test_run_api.py` (9 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 GitHub Actions: Web UI Checks</summary>

<details>
<summary>app/web_ui/src/routes/(app)/evals/[project_id]/[task_id]/[eval_id]/compare_run_methods/+page.svelte</summary>

[error] 379-379: Unused '@ts-expect-error' directive. (ts)

</details>
<details>
<summary>app/web_ui/src/routes/(app)/run/+page.svelte</summary>

[error] 69-69: Object literal may only specify known properties, and 'temperature' does not exist in type '{ model_name: string; model_provider_name: string; prompt_id: string; }'. (ts)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (10)</summary>

* GitHub Check: Web UI Code Format, Lint, Typecheck, Test, and Build
* GitHub Check: Build Desktop Apps (ubuntu-22.04-arm)
* GitHub Check: Build Desktop Apps (macos-latest)
* GitHub Check: Build Desktop Apps (ubuntu-22.04)
* GitHub Check: Build Desktop Apps (macos-13)
* GitHub Check: Build, Typecheck, and Test Python (3.12)
* GitHub Check: Build Desktop Apps (windows-latest)
* GitHub Check: Build, Typecheck, and Test Python (3.13)
* GitHub Check: Build, Typecheck, and Test Python (3.11)
* GitHub Check: Build, Typecheck, and Test Python (3.10)

</details>

<details>
<summary>🔇 Additional comments (17)</summary><blockquote>

<details>
<summary>app/web_ui/src/routes/(app)/evals/[project_id]/[task_id]/[eval_id]/compare_run_methods/+page.svelte (1)</summary>

`377-384`: **LGTM! Request restructuring aligns with API consolidation goals.**

The change correctly nests model and prompt configuration parameters under `run_config_properties`, which aligns with the PR objective to simplify the API by directly validating `RunConfigProperties`. All necessary properties are included and the error handling remains intact.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 GitHub Actions: Web UI Checks</summary>

[error] 379-379: Unused '@ts-expect-error' directive. (ts)

</details>

</details>

</details>
<details>
<summary>app/web_ui/src/lib/api_schema.d.ts (3)</summary>

`1225-1225`: **API schema consolidation looks correct.**

The `CreateTaskRunConfigRequest` interface correctly uses the nested `run_config_properties` structure, which consolidates model and prompt configuration into a single object. This aligns with the PR objective to simplify the API by directly validating `RunConfigProperties`.

Since this is auto-generated from OpenAPI specs, ensure the underlying API definitions have been properly updated to match this schema change.

---

`2295-2311`: **RunConfigProperties schema definition is well-structured.**

The `RunConfigProperties` interface properly defines the consolidated configuration structure with:
- `model_name`: string for the model to use
- `model_provider_name`: string for the provider 
- `prompt_id`: string for the prompt configuration

The field names and types are appropriate for the unified configuration approach.

---

`2337-2337`: <details>
<summary>❓ Verification inconclusive</summary>

**Consistent schema consolidation in RunTaskRequest.**

The `RunTaskRequest` interface correctly mirrors the same `run_config_properties` structure used in `CreateTaskRunConfigRequest`, maintaining consistency across the API schema.

This represents a breaking change from separate fields to nested configuration object, so verify that all frontend callers have been updated accordingly.


---

🏁 Script executed:

```shell
#!/bin/bash
# Search for any remaining usage of old separate config fields in frontend code
echo ""Checking for potential references to old API schema fields...""

# Look for old field patterns that might not have been updated
rg -A 3 -B 3 ""(model_name|model_provider_name|provider|prompt_id).*:"" --type ts --type js

# Check for any direct API calls that might still use old structure
rg -A 5 ""RunTaskRequest|CreateTaskRunConfigRequest"" --type ts --type js
```

Length of output: 28208

---



</details>

**Potential Breaking Usage of Old Run Config Fields Detected**  
It looks like several parts of the frontend still define and consume `model_name`, `model_provider`, etc., directly rather than wrapping them under `run_config_properties`. In particular:  
- `app/web_ui/src/routes/(app)/generate/[project_id]/[task_id]/gen_model.ts` defines `SampleData` with separate `model_name` and `model_provider` fields.  
- No direct imports or usage of the new `RunTaskRequest` type were found outside of the schema definition.  

These findings suggest that existing code paths that assemble and POST run‐time configurations may not have been updated to nest under `run_config_properties`. Please audit all frontend callers of the run/task endpoint and ensure they now send:  
```json
{
  ""run_config_properties"": {
    /* …model_name, model_provider_name, prompt_id, etc.… */
  },
  /* plaintext_input or structured_input */
}
```  
before approving this change.

</details>
<details>
<summary>libs/server/kiln_server/test_run_api.py (2)</summary>

`69-73`: **LGTM: Test data structure properly updated.**

The test setup correctly reflects the new nested `run_config_properties` structure. The field naming changes (`provider` → `model_provider_name`, `ui_prompt_method` → `prompt_id`) are consistent with the API refactor.

---

`1256-1261`: **LGTM: Validation tests properly maintained.**

The temperature and top_p validation tests have been correctly updated to use the new nested structure while preserving the same validation logic and error checking.

</details>
<details>
<summary>app/desktop/studio_server/eval_api.py (2)</summary>

`119-123`: **LGTM: Clean simplification of request model.**

The consolidation of individual configuration fields into a single `run_config_properties` field simplifies the request model and reduces duplication. This aligns well with the overall refactoring objective.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Pylint (3.3.7)</summary>

[refactor] 119-119: Too few public methods (0/2)

(R0903)

</details>

</details>

---

`365-394`: **LGTM: Endpoint logic properly updated for nested structure.**

The function correctly extracts `prompt_id` from the nested `run_config_properties` object and preserves the frozen prompt functionality. The removal of field-by-field construction is appropriate since validation is now handled by the `RunConfigProperties` model.

</details>
<details>
<summary>libs/server/kiln_server/run_api.py (3)</summary>

`54-64`: **LGTM: Request model properly consolidated.**

The refactoring to use a single `run_config_properties` field simplifies the request model and eliminates field duplication. The model config allowing protected namespaces is appropriately retained.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Pylint (3.3.7)</summary>

[refactor] 54-54: Too few public methods (0/2)

(R0903)

</details>

</details>

---

`216-222`: **LGTM: Endpoint logic simplified through delegation.**

The endpoint now correctly delegates configuration handling to the `RunConfigProperties` object, which centralizes validation logic and simplifies the endpoint implementation.

---

`354-357`: <details>
<summary>❌ Incorrect review comment</summary>

**Verify if this helper function is still needed.**

The `model_provider_from_string` function appears to be unused after the refactoring since validation is now handled within `RunConfigProperties`. Consider removing it if it's no longer used elsewhere.

---

🏁 Script executed:

```shell
#!/bin/bash
# Description: Check if model_provider_from_string function is still used anywhere in the codebase
# Expected: Should show usage locations or confirm it's unused

# Search for usage of the function
rg -A 3 ""model_provider_from_string""

# Also search for any imports of this function
rg ""from.*run_api.*import.*model_provider_from_string""
```

Length of output: 3547

---



</details>

**Do not remove `model_provider_from_string` – it’s still in use**  

The helper is imported and invoked in several places outside of `run_api.py`, so removing it will break existing functionality:

• libs/server/kiln_server/test_run_api.py  
• app/desktop/studio_server/repair_api.py  
• app/desktop/studio_server/data_gen_api.py  

Keep this function (or, if you’d like to refactor, deprecate it gradually and update all call sites in a single coordinated change). 

> Likely an incorrect or invalid review comment.

</details>
<details>
<summary>app/desktop/studio_server/test_eval_api.py (6)</summary>

`246-251`: **LGTM: Proper implementation of nested run_config_properties structure.**

The restructuring correctly consolidates the model and prompt configuration parameters into the nested `run_config_properties` object as intended by the API refactoring.

---

`312-316`: **LGTM: Consistent application of the new API structure.**

The test correctly uses the nested `run_config_properties` structure and maintains proper validation of the response format.

---

`601-606`: **LGTM: Validation tests properly updated for new structure.**

The temperature boundary tests correctly use the nested `run_config_properties` format while maintaining proper validation coverage for invalid values.



Also applies to: 618-623

---

`643-648`: **LGTM: Top_p validation tests correctly updated.**

The boundary validation tests for top_p values properly implement the new nested structure while preserving essential validation test coverage.



Also applies to: 660-665

---

`685-691`: **LGTM: Boundary value tests maintain comprehensive coverage.**

The valid boundary tests correctly implement the nested structure and properly validate that both minimum and maximum allowed values work as expected with the new API format.



Also applies to: 704-710

---

`246-710`: **Excellent refactoring: Tests properly updated for API consolidation.**

The comprehensive updates to all test functions correctly implement the new `run_config_properties` nested structure while maintaining:
- Complete test coverage for all scenarios
- Proper validation of boundary conditions
- Consistent error handling assertions
- Appropriate response validation

This refactoring successfully adapts the test suite to the simplified API design without losing any testing functionality.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Pylint (3.3.7)</summary>

[refactor] 414-414: Too many arguments (6/5)

(R0913)

---

[refactor] 414-414: Too many positional arguments (6/5)

(R0917)

---

[refactor] 414-414: Too many local variables (16/15)

(R0914)

---

[refactor] 660-660: Too many arguments (6/5)

(R0913)

---

[refactor] 660-660: Too many positional arguments (6/5)

(R0917)

</details>

</details>

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3092319732,2869336896,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-27T01:39:19Z,"## Pull Request Overview

This PR enhances the keyauth middleware by making the authorization header parsing RFC 6750 compliant and improving error responses with a standard WWW-Authenticate challenge.  
- Implements case-insensitive header scheme comparison and robust whitespace handling in key parsing.  
- Adds an optional Realm configuration and updates the default error handler accordingly.  
- Updates relevant test cases and documentation to reflect these changes.

### Reviewed Changes

Copilot reviewed 4 out of 4 changed files in this pull request and generated 1 comment.

| File                                       | Description                                                                            |
| ------------------------------------------ | -------------------------------------------------------------------------------------- |
| middleware/keyauth/keyauth_test.go         | Added tests to verify case-insensitive handling and default challenge error responses. |
| middleware/keyauth/keyauth.go              | Improved header parsing to support RFC 6750, including trimming and case-insensitive checks. |
| middleware/keyauth/config.go               | Adjusted default configuration to include a configurable Realm and updated the error handler. |
| docs/middleware/keyauth.md                 | Documentation updated to reflect the new behavior and configuration options.          |


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**middleware/keyauth/config.go:90**
* [nitpick] The variable name 'localCfg' could be more descriptive to indicate that it's a configuration copy used in the error handler. Consider renaming it to something like 'cfgCopy' for improved clarity.
```
if localCfg.AuthScheme != """" {
```
</details>

"
3092319732,2869340294,coderabbitai[bot],COMMENTED,2025-05-27T01:42:24Z,"**Actionable comments posted: 2**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>docs/middleware/keyauth.md (1)</summary><blockquote>

`220-220`: **Fix minor grammatical issue in ErrorHandler description.**



```diff
-| ErrorHandler    | `fiber.ErrorHandler`                     | ErrorHandler defines a function which is executed for an invalid key. By default a 401 response with a `WWW-Authenticate` challenge is sent. | `nil`  |
+| ErrorHandler    | `fiber.ErrorHandler`                     | ErrorHandler defines a function which is executed for an invalid key. By default, a 401 response with a `WWW-Authenticate` challenge is sent. | `nil`  |
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[uncategorized] ~220-~220: Did you mean: “By default,”?
Context: ...n which is executed for an invalid key. By default a 401 response with a `WWW-Authenticate...

(BY_DEFAULT_COMMA)

</details>

</details>

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between d756ec1b68dd8d86a4be0c45258c76b448270fb2 and f0b59780a3545b202dc5a0cbb51d992e7cedd34f.

</details>

<details>
<summary>📒 Files selected for processing (4)</summary>

* `docs/middleware/keyauth.md` (2 hunks)
* `middleware/keyauth/config.go` (3 hunks)
* `middleware/keyauth/keyauth.go` (1 hunks)
* `middleware/keyauth/keyauth_test.go` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>middleware/keyauth/config.go (2)</summary><blockquote>

<details>
<summary>constants.go (3)</summary>

* `HeaderAuthorization` (165-165)
* `HeaderWWWAuthenticate` (168-168)
* `StatusUnauthorized` (76-76)

</details>
<details>
<summary>middleware/keyauth/keyauth.go (1)</summary>

* `ErrMissingOrMalformedAPIKey` (23-23)

</details>

</blockquote></details>

</details><details>
<summary>🪛 LanguageTool</summary>

<details>
<summary>docs/middleware/keyauth.md</summary>

[uncategorized] ~220-~220: Did you mean: “By default,”?
Context: ...n which is executed for an invalid key. By default a 401 response with a `WWW-Authenticate...

(BY_DEFAULT_COMMA)

</details>

</details>
<details>
<summary>🪛 GitHub Check: codecov/patch</summary>

<details>
<summary>middleware/keyauth/keyauth.go</summary>

[warning] 141-142: middleware/keyauth/keyauth.go#L141-L142
Added lines #L141 - L142 were not covered by tests

</details>
<details>
<summary>middleware/keyauth/config.go</summary>

[warning] 96-96: middleware/keyauth/config.go#L96
Added line #L96 was not covered by tests

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: unit (1.23.x, windows-latest)
* GitHub Check: unit (1.24.x, windows-latest)
* GitHub Check: unit (1.23.x, macos-13)
* GitHub Check: repeated
* GitHub Check: Compare

</details>

<details>
<summary>🔇 Additional comments (5)</summary><blockquote>

<details>
<summary>middleware/keyauth/config.go (1)</summary>

`47-49`: **LGTM: Well-documented Realm field addition.**

The new `Realm` field is properly documented and follows the existing configuration pattern with a sensible default value.

</details>
<details>
<summary>middleware/keyauth/keyauth_test.go (2)</summary>

`618-638`: **Excellent test for case-insensitive scheme handling.**

This test properly verifies that the middleware correctly handles authorization schemes in a case-insensitive manner (e.g., ""bearer"" vs ""Bearer""), which is important for RFC 6750 compliance.

---

`640-653`: **Well-implemented test for default error handler WWW-Authenticate behavior.**

This test effectively validates that the default error handler:
- Returns a 401 Unauthorized status
- Sets the correct `WWW-Authenticate` header with the default realm
- Uses a validator that always fails to properly trigger the error path

The test design is clean and focused on the specific functionality.

</details>
<details>
<summary>docs/middleware/keyauth.md (2)</summary>

`224-224`: **Well-documented Realm configuration option.**

The new `Realm` field is clearly documented with appropriate description and default value, making it easy for users to understand its purpose in WWW-Authenticate headers.

---

`234-239`: **ConfigDefault example properly updated.**

The default configuration example accurately reflects the new `Realm` field and the changed `ErrorHandler` default value, maintaining consistency with the actual implementation.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3092319732,2869344841,gaby,COMMENTED,2025-05-27T01:46:51Z,
3092319732,2869345071,coderabbitai[bot],COMMENTED,2025-05-27T01:47:09Z,"**Actionable comments posted: 1**

<details>
<summary>🔭 Outside diff range comments (1)</summary><blockquote>

<details>
<summary>middleware/keyauth/keyauth_test.go (1)</summary><blockquote>

`3-13`: _⚠️ Potential issue_

**Fix missing import statement.**

The test file is missing the `errors` package import, which is causing compilation failures across all CI environments.



Add the missing import:

```diff
 import (
 	""context""
+	""errors""
 	""io""
 	""net/http""
 	""net/http/httptest""
 	""net/url""
 	""testing""
 
 	""github.com/gofiber/fiber/v3""
 	""github.com/stretchr/testify/require""
 )
```

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>middleware/keyauth/keyauth_test.go (2)</summary><blockquote>

`656-662`: **Consider improving test readability with better formatting.**

The indentation appears inconsistent compared to other test functions in the file. Consider standardizing the indentation to match the existing code style.



Apply this formatting fix:

```diff
 func Test_DefaultErrorHandlerGenericError(t *testing.T) {
-    app := fiber.New()
-    app.Use(New(Config{
-        AuthScheme: ""Bearer"",
-        Validator: func(_ fiber.Ctx, _ string) (bool, error) {
-            return false, errors.New(""token expired"")
-        },
-    }))
-    app.Get(""/"", func(c fiber.Ctx) error { return c.SendString(""OK"") })
+	app := fiber.New()
+	app.Use(New(Config{
+		AuthScheme: ""Bearer"",
+		Validator: func(_ fiber.Ctx, _ string) (bool, error) {
+			return false, errors.New(""token expired"")
+		},
+	}))
+	app.Get(""/"", func(c fiber.Ctx) error { return c.SendString(""OK"") })
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 GitHub Check: unit (1.23.x, macos-latest)</summary>

[failure] 660-660: 
undefined: errors

</details>
<details>
<summary>🪛 GitHub Check: unit (1.23.x, ubuntu-latest)</summary>

[failure] 660-660: 
undefined: errors

---

[failure] 660-660: 
undefined: errors

</details>
<details>
<summary>🪛 GitHub Check: unit (1.23.x, macos-13)</summary>

[failure] 660-660: 
undefined: errors

</details>
<details>
<summary>🪛 GitHub Check: lint</summary>

[failure] 660-660: 
undefined: errors (typecheck)

</details>
<details>
<summary>🪛 GitHub Actions: golangci-lint</summary>

[error] 660-660: golangci-lint typecheck error: undefined 'errors' identifier

</details>

</details>

---

`665-672`: **Improve test readability and error handling.**

The remaining part of the test function also has inconsistent indentation and could benefit from proper error handling for the body reading operation.



Apply this formatting and error handling improvement:

```diff
-    req := httptest.NewRequest(fiber.MethodGet, ""/"", nil)
-    res, err := app.Test(req)
-    require.NoError(t, err)
-    require.Equal(t, http.StatusUnauthorized, res.StatusCode)
-    body, _ := io.ReadAll(res.Body)
-    require.Equal(t, ""Invalid or expired API Key"", string(body))
-    require.Equal(t, `Bearer realm=""Restricted""`, res.Header.Get(""WWW-Authenticate""))
+	req := httptest.NewRequest(fiber.MethodGet, ""/"", nil)
+	res, err := app.Test(req)
+	require.NoError(t, err)
+	require.Equal(t, http.StatusUnauthorized, res.StatusCode)
+	body, err := io.ReadAll(res.Body)
+	require.NoError(t, err)
+	require.Equal(t, ""Invalid or expired API Key"", string(body))
+	require.Equal(t, `Bearer realm=""Restricted""`, res.Header.Get(""WWW-Authenticate""))
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between f0b59780a3545b202dc5a0cbb51d992e7cedd34f and 3ab85a46fca094df689f22b868b6ae3547d0f18d.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `middleware/keyauth/keyauth_test.go` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>middleware/keyauth/keyauth_test.go (4)</summary><blockquote>

<details>
<summary>middleware/keyauth/keyauth.go (2)</summary>

* `New` (33-67)
* `ErrMissingOrMalformedAPIKey` (23-23)

</details>
<details>
<summary>middleware/keyauth/config.go (1)</summary>

* `Config` (13-50)

</details>
<details>
<summary>ctx_interface_gen.go (1)</summary>

* `Ctx` (17-365)

</details>
<details>
<summary>constants.go (3)</summary>

* `MethodGet` (5-5)
* `StatusOK` (54-54)
* `StatusUnauthorized` (76-76)

</details>

</blockquote></details>

</details><details>
<summary>🪛 GitHub Check: unit (1.23.x, macos-latest)</summary>

<details>
<summary>middleware/keyauth/keyauth_test.go</summary>

[failure] 660-660: 
undefined: errors

</details>

</details>
<details>
<summary>🪛 GitHub Check: unit (1.23.x, ubuntu-latest)</summary>

<details>
<summary>middleware/keyauth/keyauth_test.go</summary>

[failure] 660-660: 
undefined: errors

---

[failure] 660-660: 
undefined: errors

</details>

</details>
<details>
<summary>🪛 GitHub Check: unit (1.23.x, macos-13)</summary>

<details>
<summary>middleware/keyauth/keyauth_test.go</summary>

[failure] 660-660: 
undefined: errors

</details>

</details>
<details>
<summary>🪛 GitHub Check: lint</summary>

<details>
<summary>middleware/keyauth/keyauth_test.go</summary>

[failure] 660-660: 
undefined: errors (typecheck)

</details>

</details>
<details>
<summary>🪛 GitHub Actions: golangci-lint</summary>

<details>
<summary>middleware/keyauth/keyauth_test.go</summary>

[error] 660-660: golangci-lint typecheck error: undefined 'errors' identifier

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (2)</summary>

* GitHub Check: Compare
* GitHub Check: repeated

</details>

<details>
<summary>🔇 Additional comments (2)</summary><blockquote>

<details>
<summary>middleware/keyauth/keyauth_test.go (2)</summary>

`618-638`: **LGTM! Excellent test for case-insensitive scheme handling.**

This test correctly verifies that the middleware treats the authorization header scheme case-insensitively, which aligns with RFC 6750 compliance mentioned in the PR objectives. The test uses ""bearer"" in lowercase and expects successful authentication.

---

`640-653`: **Good test for WWW-Authenticate header verification.**

This test properly verifies that the default error handler sets the correct WWW-Authenticate header when the standard `ErrMissingOrMalformedAPIKey` error is returned. The expected header value `Bearer realm=""Restricted""` aligns with the new Realm configuration mentioned in the PR objectives.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3092319732,2869345826,coderabbitai[bot],COMMENTED,2025-05-27T01:47:48Z,
3092319732,2869350496,github-actions[bot],COMMENTED,2025-05-27T01:52:44Z,"<!-- github-benchmark-action-comment(start): Benchmark Alert -->
# :warning: **Performance Alert** :warning:

Possible performance regression was detected for benchmark.
Benchmark result of this commit is worse than the previous benchmark result exceeding threshold `1.50`.

| Benchmark suite | Current: 8ff31cbe0a75ef95826e67ab86073c95789660d4 | Previous: 23fb15f704a3f888732af3be5866fc4e8d7b806f | Ratio |
|-|-|-|-|
| `Benchmark_GenericParseTypeInts/bench_genericParseTypeInt32s` | `0.0000638` ns/op	       0 B/op	       0 allocs/op | `0.0000229` ns/op	       0 B/op	       0 allocs/op | `2.79` |
| `Benchmark_GenericParseTypeInts/bench_genericParseTypeInt32s - ns/op` | `0.0000638` ns/op | `0.0000229` ns/op | `2.79` |
| `Benchmark_GenericParseTypeInts/bench_genericParseTypeInt16s#06` | `0.0000479` ns/op	       0 B/op	       0 allocs/op | `0.0000316` ns/op	       0 B/op	       0 allocs/op | `1.52` |
| `Benchmark_GenericParseTypeInts/bench_genericParseTypeInt16s#06 - ns/op` | `0.0000479` ns/op | `0.0000316` ns/op | `1.52` |
| `Benchmark_GenericParseTypeInts/bench_genericParseTypeInt32s#08` | `0.000055` ns/op	       0 B/op	       0 allocs/op | `0.0000147` ns/op	       0 B/op	       0 allocs/op | `3.74` |
| `Benchmark_GenericParseTypeInts/bench_genericParseTypeInt32s#08 - ns/op` | `0.000055` ns/op | `0.0000147` ns/op | `3.74` |
| `Benchmark_GenericParseTypeInts/bench_genericParseTypeInt64s#13` | `0.0000456` ns/op	       0 B/op	       0 allocs/op | `0.0000215` ns/op	       0 B/op	       0 allocs/op | `2.12` |
| `Benchmark_GenericParseTypeInts/bench_genericParseTypeInt64s#13 - ns/op` | `0.0000456` ns/op | `0.0000215` ns/op | `2.12` |
| `Benchmark_GenericParseTypeUints/benchmark_genericParseTypeUint16s#03` | `0.0000543` ns/op	       0 B/op	       0 allocs/op | `0.0000359` ns/op	       0 B/op	       0 allocs/op | `1.51` |
| `Benchmark_GenericParseTypeUints/benchmark_genericParseTypeUint16s#03 - ns/op` | `0.0000543` ns/op | `0.0000359` ns/op | `1.51` |
| `Benchmark_GenericParseTypeUints/benchmark_genericParseTypeUint32s#03` | `0.000053` ns/op	       0 B/op	       0 allocs/op | `0.0000312` ns/op	       0 B/op	       0 allocs/op | `1.70` |
| `Benchmark_GenericParseTypeUints/benchmark_genericParseTypeUint32s#03 - ns/op` | `0.000053` ns/op | `0.0000312` ns/op | `1.70` |
| `Benchmark_GenericParseTypeUints/benchmark_genericParseTypeUint32s#06` | `0.0000511` ns/op	       0 B/op	       0 allocs/op | `0.0000328` ns/op	       0 B/op	       0 allocs/op | `1.56` |
| `Benchmark_GenericParseTypeUints/benchmark_genericParseTypeUint32s#06 - ns/op` | `0.0000511` ns/op | `0.0000328` ns/op | `1.56` |
| `Benchmark_GenericParseTypeUints/benchmark_genericParseTypeUint32s#07` | `0.0000454` ns/op	       0 B/op	       0 allocs/op | `0.0000259` ns/op	       0 B/op	       0 allocs/op | `1.75` |
| `Benchmark_GenericParseTypeUints/benchmark_genericParseTypeUint32s#07 - ns/op` | `0.0000454` ns/op | `0.0000259` ns/op | `1.75` |

This comment was automatically generated by [workflow](https://github.com/gofiber/fiber/actions?query=workflow%3ABenchmark) using [github-action-benchmark](https://github.com/marketplace/actions/continuous-benchmark).
<!-- github-benchmark-action-comment(end): Benchmark Alert -->"
3092319732,2869351748,coderabbitai[bot],COMMENTED,2025-05-27T01:54:03Z,"**Actionable comments posted: 1**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 3ab85a46fca094df689f22b868b6ae3547d0f18d and e3848c30caff0cd1a884bb2dd08b9f6cc1b267ae.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `middleware/keyauth/keyauth_test.go` (2 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 GitHub Check: lint</summary>

<details>
<summary>middleware/keyauth/keyauth_test.go</summary>

[failure] 670-670: 
Error return value of `io.ReadAll` is not checked (errcheck)

---

[failure] 657-657: 
File is not properly formatted (gofmt)

</details>

</details>
<details>
<summary>🪛 GitHub Actions: golangci-lint</summary>

<details>
<summary>middleware/keyauth/keyauth_test.go</summary>

[error] 657-657: File is not properly formatted (gofmt)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (2)</summary>

* GitHub Check: Compare
* GitHub Check: repeated

</details>

<details>
<summary>🔇 Additional comments (3)</summary><blockquote>

<details>
<summary>middleware/keyauth/keyauth_test.go (3)</summary>

`5-5`: **LGTM! Import issue resolved.**

The `errors` package import has been correctly added to fix the compilation error identified in previous reviews.

---

`619-639`: **Excellent test for RFC 6750 compliance.**

This test correctly verifies that the middleware handles authorization schemes case-insensitively by using ""bearer"" in lowercase, which aligns with the PR objective of improving RFC 6750 compliance.

---

`641-654`: **Great test for WWW-Authenticate header validation.**

This test correctly verifies that the default error handler returns the proper `WWW-Authenticate` challenge header with the expected format, which aligns with the PR objective of improving HTTP authentication protocol compliance.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3092319732,2869405545,coderabbitai[bot],COMMENTED,2025-05-27T02:42:36Z,"**Actionable comments posted: 1**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between e3848c30caff0cd1a884bb2dd08b9f6cc1b267ae and 51ef60297bfb30d8c29a762544b98e924c1f6af8.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `middleware/keyauth/keyauth.go` (1 hunks)
* `middleware/keyauth/keyauth_test.go` (2 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 GitHub Check: codecov/patch</summary>

<details>
<summary>middleware/keyauth/keyauth.go</summary>

[warning] 148-149: middleware/keyauth/keyauth.go#L148-L149
Added lines #L148 - L149 were not covered by tests

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: unit (1.24.x, macos-latest)
* GitHub Check: unit (1.24.x, windows-latest)
* GitHub Check: unit (1.23.x, windows-latest)
* GitHub Check: repeated
* GitHub Check: Compare

</details>

<details>
<summary>🔇 Additional comments (7)</summary><blockquote>

<details>
<summary>middleware/keyauth/keyauth.go (1)</summary>

`127-152`: <details>
<summary>✅ Verification successful</summary>

**Excellent RFC 6750 compliance improvements with minor test coverage gap.**

The enhanced `KeyFromHeader` function significantly improves authorization header parsing:

✅ **Strengths:**
- Proper whitespace trimming prevents parsing issues
- Case-insensitive scheme matching aligns with HTTP standards  
- Validates space/tab separator after scheme per RFC requirements
- Clear error handling for various malformed header scenarios

⚠️ **Test Coverage Gap:**
The empty token validation logic (lines 148-149) isn't covered by existing tests.




Please add a test case for the empty token scenario to ensure complete coverage:

---

🏁 Script executed:

```shell
#!/bin/bash
# Description: Verify that the empty token case (lines 148-149) is covered by tests

# Search for existing tests that cover empty token after space
rg -A 10 -B 5 ""Bearer\s+$|Token\s+$"" middleware/keyauth/keyauth_test.go

# Check if Test_HeaderSchemeNoToken covers this case adequately
ast-grep --pattern 'func Test_HeaderSchemeNoToken($_) {
  $$$
}'
```

Length of output: 1366

---



</details>

**All set – empty token validation is already covered by tests**

The existing `Test_HeaderSchemeNoToken` in `middleware/keyauth/keyauth_test.go` (lines 723–730) explicitly tests the `""Authorization: Bearer ""` scenario, ensuring lines 148–149 are exercised and returning `ErrMissingOrMalformedAPIKey` as expected.

No further action required.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 GitHub Check: codecov/patch</summary>

[warning] 148-149: middleware/keyauth/keyauth.go#L148-L149
Added lines #L148 - L149 were not covered by tests

</details>

</details>

</details>
<details>
<summary>middleware/keyauth/keyauth_test.go (6)</summary>

`5-5`: **Good addition of errors package import.**

The import of the `errors` package is properly added to support the new test functions that use `errors.New()`.

---

`619-639`: **Excellent test for case-insensitive scheme handling.**

This test correctly verifies that the authorization scheme matching is case-insensitive (using ""bearer"" instead of ""Bearer""), which aligns with HTTP standards and the enhanced `KeyFromHeader` implementation.

---

`641-654`: **Good test for default WWW-Authenticate challenge header.**

This test verifies that the default error handler properly sets the `WWW-Authenticate` header with the realm ""Restricted"" when `ErrMissingOrMalformedAPIKey` occurs, which is essential for RFC 6750 compliance.

---

`656-674`: **Well-structured test for generic error handling.**

This test correctly validates that generic validation errors (non-`ErrMissingOrMalformedAPIKey`) still receive the appropriate `WWW-Authenticate` header and error message, ensuring consistent authentication challenge behavior.

---

`676-696`: **Excellent coverage for multiple spaces handling.**

This test verifies that the enhanced header parsing correctly handles multiple spaces between the scheme and token (""Bearer    "" + token), demonstrating the improved whitespace handling in the `KeyFromHeader` function.

---

`698-713`: **Perfect test for missing space validation.**

This test covers the important scenario where the scheme is immediately followed by the token without a space (""Bearer"" + token), ensuring the validation logic properly rejects malformed headers. This addresses the past review comment about testing the space validation logic.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3092319732,2869432401,coderabbitai[bot],COMMENTED,2025-05-27T02:58:56Z,"**Actionable comments posted: 1**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 51ef60297bfb30d8c29a762544b98e924c1f6af8 and 3b1c3d16ff64812e898e3fbfa300517dae53610b.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `middleware/keyauth/keyauth_test.go` (2 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 GitHub Check: lint</summary>

<details>
<summary>middleware/keyauth/keyauth_test.go</summary>

[failure] 733-733: 
File is not properly formatted (gofmt)

</details>

</details>
<details>
<summary>🪛 GitHub Actions: golangci-lint</summary>

<details>
<summary>middleware/keyauth/keyauth_test.go</summary>

[error] 733-733: File is not properly formatted (gofmt)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (7)</summary>

* GitHub Check: unit (1.24.x, macos-13)
* GitHub Check: unit (1.23.x, macos-latest)
* GitHub Check: unit (1.24.x, windows-latest)
* GitHub Check: unit (1.23.x, windows-latest)
* GitHub Check: unit (1.23.x, macos-13)
* GitHub Check: repeated
* GitHub Check: Compare

</details>

<details>
<summary>🔇 Additional comments (5)</summary><blockquote>

<details>
<summary>middleware/keyauth/keyauth_test.go (5)</summary>

`619-639`: **Excellent test for case-insensitive scheme handling.**

This test properly validates RFC 6750 compliance by ensuring the middleware accepts lowercase ""bearer"" scheme, which is an important improvement for standard compliance.

---

`641-654`: **Good validation of WWW-Authenticate header in default error handler.**

This test confirms that the default error handler properly sets the `WWW-Authenticate` header with the expected realm, which aligns with RFC 6750 requirements for proper authentication challenges.

---

`656-674`: **Comprehensive test for invalid API key error handling.**

This test validates both the error message and WWW-Authenticate header for invalid keys, ensuring proper RFC 6750 compliance in error scenarios.

---

`676-696`: **Well-designed test for multiple spaces handling.**

This test ensures the middleware correctly handles multiple spaces between the scheme and token, demonstrating robust parsing logic.

---

`698-730`: **Thorough coverage of malformed header scenarios.**

These tests (`Test_HeaderSchemeMissingSpace` and `Test_HeaderSchemeNoToken`) properly validate edge cases where headers are malformed, ensuring the middleware correctly rejects invalid formats.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3092319732,2869443530,coderabbitai[bot],COMMENTED,2025-05-27T03:06:24Z,
3092319732,2869444937,gaby,COMMENTED,2025-05-27T03:07:58Z,
3092319732,2869445479,coderabbitai[bot],COMMENTED,2025-05-27T03:08:36Z,
3092319732,2869451577,coderabbitai[bot],COMMENTED,2025-05-27T03:14:50Z,"**Actionable comments posted: 1**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 3b1c3d16ff64812e898e3fbfa300517dae53610b and 542db2310a0a9c634dc03cc7ca6060337d638da6.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `middleware/keyauth/keyauth_test.go` (2 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 GitHub Check: unit (1.24.x, ubuntu-latest)</summary>

<details>
<summary>middleware/keyauth/keyauth_test.go</summary>

[failure] 756-756: 
expected statement, found ','

</details>

</details>
<details>
<summary>🪛 GitHub Check: unit (1.23.x, macos-13)</summary>

<details>
<summary>middleware/keyauth/keyauth_test.go</summary>

[failure] 756-756: 
expected statement, found ','

</details>

</details>
<details>
<summary>🪛 GitHub Check: unit (1.23.x, ubuntu-latest)</summary>

<details>
<summary>middleware/keyauth/keyauth_test.go</summary>

[failure] 756-756: 
expected statement, found ','

---

[failure] 756-756: 
expected statement, found ','

</details>

</details>
<details>
<summary>🪛 GitHub Check: lint</summary>

<details>
<summary>middleware/keyauth/keyauth_test.go</summary>

[failure] 769-769: 
missing ',' in composite literal (typecheck)

---

[failure] 758-758: 
missing ',' in composite literal (typecheck)

---

[failure] 756-756: 
expected statement, found ',' (typecheck)

---

[failure] 756-756: 
syntax error: unexpected comma, expected } (typecheck)

</details>

</details>
<details>
<summary>🪛 GitHub Check: unit (1.23.x, macos-latest)</summary>

<details>
<summary>middleware/keyauth/keyauth_test.go</summary>

[failure] 756-756: 
expected statement, found ','

</details>

</details>
<details>
<summary>🪛 GitHub Actions: golangci-lint</summary>

<details>
<summary>middleware/keyauth/keyauth_test.go</summary>

[error] 756-756: syntax error: unexpected comma, expected } (typecheck)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (2)</summary>

* GitHub Check: Compare
* GitHub Check: repeated

</details>

<details>
<summary>🔇 Additional comments (7)</summary><blockquote>

<details>
<summary>middleware/keyauth/keyauth_test.go (7)</summary>

`619-639`: **Good test for case-insensitive scheme handling.**

This test correctly verifies that the middleware accepts both uppercase and lowercase schemes, which aligns with RFC standards for case-insensitive header scheme handling.

---

`641-654`: **Excellent test for WWW-Authenticate challenge response.**

This test validates the new default error handler behavior that sets the `WWW-Authenticate` header with the proper realm and scheme, ensuring RFC 6750 compliance.

---

`656-674`: **Good test for generic error handling.**

This test properly validates that generic validation errors are handled consistently, returning the standard error message while still setting the appropriate `WWW-Authenticate` header.

---

`676-696`: **Good test for multiple spaces handling.**

This test correctly verifies that the middleware handles multiple spaces between the scheme and token, ensuring robust parsing of Authorization headers.

---

`698-713`: **Good test for missing separator detection.**

This test correctly validates that headers without a space separator between the scheme and token are properly rejected with the appropriate error.

---

`715-730`: **Good test for empty token detection.**

This test correctly validates that headers with only a scheme followed by whitespace are properly rejected. This ensures the middleware doesn't accept empty tokens.

---

`732-749`: **Good test for malformed header detection.**

This test correctly validates that headers with no separator between scheme and token are properly rejected, addressing the coverage gap identified in previous reviews.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3092319732,2870321437,ReneWerner87,APPROVED,2025-05-27T09:16:12Z,"LGTM
@gaby 
- [x] add this to Whatsnew.md"
3092319732,2870645565,ReneWerner87,COMMENTED,2025-05-27T11:11:05Z,
3092319732,2870646154,ReneWerner87,COMMENTED,2025-05-27T11:11:20Z,
3092319732,2870709139,coderabbitai[bot],COMMENTED,2025-05-27T11:34:56Z,"**Actionable comments posted: 1**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 542db2310a0a9c634dc03cc7ca6060337d638da6 and 921857de81e5731e9e0952081d8d2ced553eae5a.

</details>

<details>
<summary>📒 Files selected for processing (3)</summary>

* `docs/whats_new.md` (2 hunks)
* `middleware/keyauth/keyauth.go` (1 hunks)
* `middleware/keyauth/keyauth_test.go` (2 hunks)

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (1)</summary>

* middleware/keyauth/keyauth_test.go

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 GitHub Check: unit (1.24.x, macos-13)</summary>

<details>
<summary>middleware/keyauth/keyauth.go</summary>

[failure] 137-137: 
undefined: utils

---

[failure] 127-127: 
undefined: utils

</details>

</details>
<details>
<summary>🪛 GitHub Check: unit (1.24.x, ubuntu-latest)</summary>

<details>
<summary>middleware/keyauth/keyauth.go</summary>

[failure] 137-137: 
undefined: utils

---

[failure] 127-127: 
undefined: utils

</details>

</details>
<details>
<summary>🪛 GitHub Check: lint</summary>

<details>
<summary>middleware/keyauth/keyauth.go</summary>

[failure] 137-137: 
undefined: utils (typecheck)

---

[failure] 127-127: 
undefined: utils

</details>

</details>
<details>
<summary>🪛 GitHub Check: govulncheck-check</summary>

<details>
<summary>middleware/keyauth/keyauth.go</summary>

[failure] 137-137: 
undefined: utils

---

[failure] 127-127: 
undefined: utils

</details>

</details>
<details>
<summary>🪛 GitHub Actions: Run govulncheck</summary>

<details>
<summary>middleware/keyauth/keyauth.go</summary>

[error] 127-127: Undefined identifier 'utils' at line 127:11.

</details>

</details>
<details>
<summary>🪛 GitHub Actions: golangci-lint</summary>

<details>
<summary>middleware/keyauth/keyauth.go</summary>

[error] 127-127: golangci-lint error: undefined identifier 'utils' at line 127, column 11

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (3)</summary>

* GitHub Check: Compare
* GitHub Check: repeated
* GitHub Check: unit (1.24.x, macos-latest)

</details>

<details>
<summary>🔇 Additional comments (2)</summary><blockquote>

<details>
<summary>docs/whats_new.md (2)</summary>

`39-39`: **LGTM!**

Good addition of KeyAuth to the middleware list for proper navigation.

---

`1024-1027`: **LGTM!**

The documentation accurately describes the KeyAuth middleware enhancement with the configurable `Realm` field for the `WWW-Authenticate` header. The content is concise and appropriate for the ""What's New"" document.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3092319732,2870716806,coderabbitai[bot],COMMENTED,2025-05-27T11:37:27Z,"**Actionable comments posted: 1**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 921857de81e5731e9e0952081d8d2ced553eae5a and 52756edcddaa0abb5f762c4c68714247524e6e17.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `middleware/keyauth/keyauth.go` (2 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 GitHub Check: codecov/patch</summary>

<details>
<summary>middleware/keyauth/keyauth.go</summary>

[warning] 149-150: middleware/keyauth/keyauth.go#L149-L150
Added lines #L149 - L150 were not covered by tests

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (3)</summary>

* GitHub Check: Compare
* GitHub Check: unit (1.24.x, windows-latest)
* GitHub Check: repeated

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>middleware/keyauth/keyauth.go (1)</summary>

`11-11`: **Import addition resolves compilation errors.**

Good fix! The utils package import addresses the compilation errors mentioned in previous reviews.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3092319732,2870763507,ReneWerner87,APPROVED,2025-05-27T11:52:43Z,
3092319732,2870763551,ReneWerner87,APPROVED,2025-05-27T11:52:44Z,
3131225682,2911834918,scosman,COMMENTED,2025-06-10T03:01:32Z,
3131225682,2911903307,leonardmq,COMMENTED,2025-06-10T04:10:04Z,
3131225682,2917706358,scosman,APPROVED,2025-06-11T15:23:46Z,
3131658401,2923120559,chitalian,APPROVED,2025-06-13T00:49:38Z,
3070969963,2848365302,ellipsis-dev[bot],COMMENTED,2025-05-17T18:04:18Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 7cd453be86b124f82db897f81bad31e33e2ce6c4 in <ellipsistime>48 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `180` lines of code in `4` files
> - Skipped `0` files when reviewing.
> - Skipped posting `5` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>cli/README.md:458</code></summary>
> 
> - **Draft comment:** 
> Docs updated: '--definition' now clearly states YAML/JSON support.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>cli/cli-reference.md:213</code></summary>
> 
> - **Draft comment:** 
> CLI reference now indicates that --definition accepts YAML or JSON.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>cli/src/julep_cli/agents.py:17</code></summary>
> 
> - **Draft comment:** 
> Consider improving error reporting in _load_definition if both YAML and JSON parsing fail.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>cli/src/julep_cli/agents.py:295</code></summary>
> 
> - **Draft comment:** 
> For JSON output in the list command, consider aggregating agent data using json.dumps to produce a valid JSON array instead of echoing a Python list of JSON strings.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>documentation/julepcli/commands.mdx:322</code></summary>
> 
> - **Draft comment:** 
> Documentation for the --definition parameter correctly reflects YAML/JSON support.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_kMWn9DJi9Waz9R9C`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3118224125,2897258561,dpschen,COMMENTED,2025-06-04T15:43:09Z,
3118224125,2900609159,kolaente,COMMENTED,2025-06-05T14:34:43Z,
3141103797,2922092939,ff-kamal,APPROVED,2025-06-12T17:39:36Z,
3149111355,2934712347,smhg,APPROVED,2025-06-17T08:40:29Z,
3132841827,2912718331,DTTerastar,COMMENTED,2025-06-10T09:31:57Z,
3132841827,2912719648,DTTerastar,COMMENTED,2025-06-10T09:32:22Z,
3132841827,2912720751,DTTerastar,COMMENTED,2025-06-10T09:32:46Z,
3121850105,2900994626,greptile-apps[bot],COMMENTED,2025-06-05T16:30:03Z,"


<sub>1 file reviewed, no comments</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=promptfoo_4345)</sub>"
3121850105,2901000365,sourcery-ai[bot],COMMENTED,2025-06-05T16:32:00Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3151744953,2936063925,juliendenize,APPROVED,2025-06-17T15:05:50Z,Thanks !
3151744953,2936084794,juliendenize,APPROVED,2025-06-17T15:11:20Z,
3069751471,2942597408,Goga345345,APPROVED,2025-06-19T11:28:31Z,
3070952955,2848358795,ellipsis-dev[bot],COMMENTED,2025-05-17T17:31:57Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 957e053447c983d575501de6a8b3b18af2254707 in <ellipsistime>31 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `12` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `1` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>agents-api/agents_api/queries/projects/__init__.py:10</code></summary>
> 
> - **Draft comment:** 
> Removal of the unnecessary 'ruff: noqa' comment is clean here since the imported names are explicitly exported via __all__. Ensure that no spurious linter warnings appear now.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment is asking the author to ensure that no linter warnings appear after a change. This falls under the rule of not asking the author to ensure behavior is intended or tested. Therefore, this comment should be removed.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_YwvmOtR60fIK9AAF`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3098163794,2879714845,tyranitar,APPROVED,2025-05-29T22:12:36Z,Looks good.
3098163794,2879794981,ndeepak-baseten,COMMENTED,2025-05-29T23:08:49Z,
3098163794,2881984677,marius-baseten,COMMENTED,2025-05-30T17:33:51Z,
3098163794,2881986419,marius-baseten,COMMENTED,2025-05-30T17:34:28Z,
3098163794,2881998659,marius-baseten,COMMENTED,2025-05-30T17:38:21Z,
3135182168,2915412654,seratch,COMMENTED,2025-06-11T01:49:22Z,
3135182168,2915413172,seratch,APPROVED,2025-06-11T01:49:44Z,
3083762165,2861707338,itsababseh,COMMENTED,2025-05-22T15:34:20Z,"My one comment is should the file name be in all caps ""AGENTS.md"""
3083762165,2861742378,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-22T15:45:58Z,"## Pull Request Overview

This PR refines the contribution instructions for the AutoGPT Platform by updating the AGENTS.md file.  
- Added detailed guidelines on directory structure, code style, testing, commit messages, and pull request procedures.  
- Consolidated instructions to provide clear guidance for contributors.



"
3083762165,2861750563,majdyz,DISMISSED,2025-05-22T15:48:39Z,"We need to drop this on the md too:

```
Conventional Commits
I'm seeing a lot of tweak commits, and now also a tool one. I don't think these are necessary in addition to the scopes we already had:
feat: introduces a new feature to the codebase
fix: patches a bug in the codebase
refactor: a code change that neither fixes a bug nor adds a feature; also applies to removing features
ci: changes to our CI config
docs: documentation only changes
dx: improvements to the developer experience

tweak is ambiguous which defeats the purpose of conventional commit messages.
tool is ambiguous in a different way and fits into the dx category in this case.

Also, a reminder/proposal to use this consistent set of base scopes:
platform: integral changes affecting both frontend and backend
frontend
backend
infra
blocks: modifications/additions of individual blocks

Suggestions/examples for subscopes:
backend/executor
backend/db
frontend/builder (includes changes to the block UI component)
infra/prod

Consistency here matters for communication, but also because if we consistently use conventional commit scopes and types, we can easily auto-generate good release notes. 
````"
3083762165,2861769091,majdyz,APPROVED,2025-05-22T15:53:08Z,
3119506748,2898582753,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-05T00:51:45Z,"## Pull Request Overview

This pull request updates the contributor guide by adding and clarifying instructions for setting up the development environment and running the changeset command. Key changes include:
- Providing detailed setup and testing instructions.
- Introducing a new section for PR instructions, including running ""pnpm changeset"".
- Refining existing tips to ensure a consistent contributor experience.


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**AGENTS.md:19**
* [nitpick] Consider adding a brief note or link to further documentation on handling scenarios where no packages are selected, for clarity.
```
Always run `pnpm changeset` to create a changeset for every affected package. Patch versions are typically preferred unless the change warrants a minor or major bump.
```
</details>

"
3137938340,2918486634,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-11T19:50:37Z,"## Pull Request Overview

Bumps `@vanilla-extract/esbuild-plugin` and `esbuild` to their latest patch versions and removes a leftover changeset.

- Updated `@vanilla-extract/esbuild-plugin` from `^2.3.10` to `^2.3.17`
- Updated `esbuild` from `^0.25.0` to `^0.25.5`



"
3073901573,2850823312,marcklingen,COMMENTED,2025-05-19T13:42:34Z,
3073901573,2850827704,marcklingen,COMMENTED,2025-05-19T13:43:59Z,
3138524436,2919155787,coderabbitai[bot],COMMENTED,2025-06-12T02:04:40Z,"**Actionable comments posted: 1**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 05f0630b9c2de492c12e37a64db6e6933a3d7e63 and 536716548ad92c13fb3ef679fb370be8100dc23a.

</details>

<details>
<summary>📒 Files selected for processing (5)</summary>

* `CHANGELOG.md` (11 hunks)
* `tools/udp_test.py` (1 hunks)
* `usermods/pixels_dice_tray/mqtt_client/mqtt_logger.py` (2 hunks)
* `wled00/FX.cpp` (7 hunks)
* `wled00/FX.h` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 Pylint (3.3.7)</summary>

<details>
<summary>tools/udp_test.py</summary>

[refactor] 5-5: Too few public methods (1/2)

(R0903)

</details>

</details>

</details>

<details>
<summary>🔇 Additional comments (14)</summary><blockquote>

<details>
<summary>CHANGELOG.md (1)</summary>

`17-17`: **Typographical corrections in changelog**  
Fixed spelling of ""partition"" and standardized ""buses"" terminology across multiple entries. Documentation improvements only; no functional impact. 


Also applies to: 29-29, 236-236, 608-608, 789-789, 909-909, 1080-1080, 1127-1127

</details>
<details>
<summary>usermods/pixels_dice_tray/mqtt_client/mqtt_logger.py (2)</summary>

`63-67`: **Clarified `--topic` help text**  
Reformatted for readability and corrected ""subscript"" to ""subscribe"". No behavior change.

---

`83-83`: **Fixed comment typo**  
Removed extraneous backtick in the MQTT client creation comment. Improves clarity only.

</details>
<details>
<summary>wled00/FX.h (1)</summary>

`376-377`: **Register new 2D Radial Wave effect**  
Defined `FX_MODE_2DRADIALWAVE` as 218 and updated `MODE_COUNT` to 219. Ensure `setupEffectData()` in FX.cpp registers this new mode.

</details>
<details>
<summary>tools/udp_test.py (4)</summary>

`1-19`: **Dependencies for `udp_test.py`**  
Imports `numpy` and `socket` are appropriate, but confirm `numpy` is declared in tool requirements.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Pylint (3.3.7)</summary>

[refactor] 5-5: Too few public methods (1/2)

(R0903)

</details>

</details>

---

`21-31`: **Efficient pixel change detection**  
Vectorized approach using `numpy` functions preserves functionality and enhances performance.

---

`33-43`: **Packet assembly logic**  
Constructing and sending UDP packets remains logically unchanged; formatting is clear and maintainable.

---

`45-55`: **CLI example block**  
The blink test script invocation under `__main__` is straightforward and effective.

</details>
<details>
<summary>wled00/FX.cpp (6)</summary>

`608-611`: **Typo correction in comment acknowledged**  
The URL spelling fix is correct and has no functional impact.

---

`708-710`: **Typo correction in comment acknowledged**  
No further action required.

---

`730-732`: **Typo correction in comment acknowledged**  
Looks good.

---

`752-753`: **Typo correction in comment acknowledged**  
All good here.

---

`2330-2332`: **Comment improvement acknowledged**  
Switching to the canonical T4A URL is fine.

---

`10796-10797`: **Verify ID/table synchronisation for new effect**  

The effect is registered here, but please double-check that:  
1. `FX_MODE_2DRADIALWAVE` is defined in `FX.h`, and  
2. `MODE_COUNT` was incremented to include the new ID,  
3. Any UI/client arrays that rely on contiguous IDs were likewise updated.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3126161014,2906777528,PTNobel,APPROVED,2025-06-07T05:03:25Z,
3126161014,2907585528,Transurgeon,APPROVED,2025-06-07T16:57:10Z,"wow, first codex PR in cvxpy. Nice work!"
3117830912,2896726197,ArthurSonzogni,COMMENTED,2025-06-04T13:23:22Z,+1
3116549069,2895323282,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-04T05:59:56Z,"## Pull Request Overview

This PR removes the outdated `fair-moons-yell` changeset and consolidates version bumps for Next, React, React DOM, and their type packages across all workspaces via a single `silver-wolves-run` changeset.

- Centralize all dependency version upgrades into one new changeset
- Bump `next`, `react`, `react-dom`, and `@types/*` versions across site, packages, and examples
- Remove the now-unneeded `fair-moons-yell` entry and avoid multiple smaller changesets

### Reviewed Changes

Copilot reviewed 22 out of 22 changed files in this pull request and generated 1 comment.

| File                                 | Description                                                      |
| ------------------------------------ | ---------------------------------------------------------------- |
| site/package.json                    | Upgraded Next, React, and React DOM versions                     |
| packages/rainbowkit/package.json     | Reordered devDependencies, bumped React, React DOM, and added dotenv |
| .changeset/silver-wolves-run.md      | New consolidated changeset listing all affected packages         |



"
3137770721,2918302543,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-11T18:34:26Z,"## Pull Request Overview

This PR introduces docsearch meta tag support by computing an npm tag from the major version and updating relevant documentation.  
- Computes DOCSEARCH_VERSION based on the npm package version and environment  
- Inserts meta tags for docsearch in the docs page  
- Updates locale policy documentation in AGENTS.md

### Reviewed Changes

Copilot reviewed 3 out of 3 changed files in this pull request and generated no comments.

| File                               | Description                                        |
| ---------------------------------- | -------------------------------------------------- |
| site/pages/docs/[slug].tsx         | Added meta tags for docsearch with computed version |
| AGENTS.md                          | Updated locale policy documentation                |
| .changeset/simple-docsearch-meta.md| Created changeset for docsearch meta tags update     |


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**site/pages/docs/[slug].tsx:8**
* [nitpick] Consider renaming the variable 'pckg' to a more descriptive name (e.g., 'rainbowkitPackage') for improved clarity in the code.
```
import pckg from '../../../packages/rainbowkit/package.json';
```
</details>

"
3162089834,2944785448,Skn0tt,APPROVED,2025-06-20T06:56:56Z,incredible that this wasn't caught by typescript!
3119367169,2898335444,ellipsis-dev[bot],COMMENTED,2025-06-04T23:26:36Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to a10aae003bf371738921fcf82fb24f50b493ce58 in <ellipsistime>1 minute and 2 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `13` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `1` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/onlook-dev/settings/code-review) and [rules](https://app.ellipsis.dev/onlook-dev/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>packages/email/src/templates/invite-user.tsx:56</code></summary>
> 
> - **Draft comment:** 
> Fixed grammar: removed the redundant 'the' in the invite message.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is purely informative as it only states a grammar fix without suggesting any code changes or improvements. It doesn't ask for confirmation or suggest any specific action.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_b1xMaq2XFdK9wng9`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=onlook-dev%2Fonlook&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/onlook-dev/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/onlook-dev/code-review/rules).</sup>"
3134877114,2915074271,hinthornw,APPROVED,2025-06-10T21:25:03Z,
3077294586,2855303194,ellipsis-dev[bot],COMMENTED,2025-05-20T19:07:20Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 2b778434a4c506e1c822dedff611edc3c4d0b0d6 in <ellipsistime>48 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `81` lines of code in `2` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>monitoring/README.md:52</code></summary>
> 
> - **Draft comment:** 
> Consider updating the README to mention the additional 'managed' endpoints (e.g. temporal-managed, litellm-managed) if they are intended to be scraped, to ensure consistency with the Prometheus config.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment suggests updating the README, which is not allowed according to the rules. It does not provide a specific code suggestion or ask for a test to be written. It is purely informative and suggests ensuring consistency, which is not allowed.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>monitoring/prometheus/config/prometheus.yml:15</code></summary>
> 
> - **Draft comment:** 
> Consider using YAML anchors or a shared configuration snippet to DRY common fields (scrape_interval, scrape_timeout, metrics_path, scheme, follow_redirects) across scrape jobs.
> - **Reason this comment was not posted:**
> Confidence changes required: `50%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_qZJycnGvDunyohCd`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3119405654,2898370905,ellipsis-dev[bot],COMMENTED,2025-06-04T23:49:22Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 4f980916811570b8b19c0c13946688dca2369f1a in <ellipsistime>1 minute and 21 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `75` lines of code in `3` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/onlook-dev/settings/code-review) and [rules](https://app.ellipsis.dev/onlook-dev/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>packages/utility/test/tailwind.test.ts:4</code></summary>
> 
> - **Draft comment:** 
> Good new tests for isUnit via width translation. Consider adding additional cases (e.g. for 'em', 'rem', and fractional percentages) to further validate unit detection.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 30% vs. threshold = 50% The comment suggests adding more test coverage, which is generally good. However, we don't know if em/rem/fractional percentages are actually supported features in the translator. Without seeing the implementation in ../src/tailwind.ts, we can't be sure if these are valid suggestions or if they would test unsupported features. The existing tests seem to cover the basic cases systematically. I might be too conservative - more test coverage is usually good, and these are common CSS units that probably should be supported. While these units are common, we can't assume they should be supported without seeing the implementation. The comment is speculative without that context. The comment should be deleted as it makes assumptions about required functionality without evidence that these units should be supported.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>packages/utility/src/window-metadata.ts:5</code></summary>
> 
> - **Draft comment:** 
> The conversion using Number() on width/height works for valid numbers. Consider validating inputs to avoid NaN when non‐numeric strings are passed.
> - **Reason this comment was not posted:**
> Confidence changes required: `50%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_Ah3RGkvkJetyvSxa`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=onlook-dev%2Fonlook&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/onlook-dev/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/onlook-dev/code-review/rules).</sup>"
3143711242,2954348981,dgirardi,APPROVED,2025-06-24T15:23:29Z,
3098814326,2876720275,coderabbitai[bot],COMMENTED,2025-05-29T00:03:45Z,"**Actionable comments posted: 1**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 91750eddc6cc3eb20c36b74490d820b92ea5500f and 0db66ad3e967d36aa06993524379f33e3921b583.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/accounts/components/accounts-count.tsx` (2 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: E2E Tests (pnpm, esbuild)
* GitHub Check: E2E Tests (pnpm, webpack)
* GitHub Check: Unit Tests
* GitHub Check: Size
* GitHub Check: E2E Tests (pnpm, vite)
* GitHub Check: Build Packages
* GitHub Check: Lint Packages
* GitHub Check: Analyze (javascript)

</details>

<details>
<summary>🔇 Additional comments (2)</summary><blockquote>

<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/accounts/components/accounts-count.tsx (2)</summary>

`16-20`: **Well-implemented StatCard usage with proper data handling.**

The StatCard props are correctly implemented:
- Safe navigation with fallback: `totalAccountsQuery.data?.toString() || ""0""`
- Proper loading state passing: `isPending={totalAccountsQuery.isPending}`
- Clear, descriptive label: `""Total Accounts""`

This demonstrates good defensive programming practices.

---

`6-6`: <details>
<summary>✅ Verification successful</summary>

**Verify the StatCard import path and component API.**

Ensure that the `StatCard` component exists at the specified path and accepts the expected props (`label`, `value`, `isPending`).

---

🏁 Script executed:

```shell
#!/bin/bash
# Verify StatCard component exists and check its prop types
fd -t f ""stat-card"" --exec cat {} \; | head -20
```

Length of output: 559

---

🏁 Script executed:

```shell
#!/bin/bash
# Locate the StatCard export and show its full signature for prop verification
rg -n --max-count 1 ""export function StatCard"" -C5
```

Length of output: 1472

---



</details>

**StatCard Import and API Verified**

The `StatCard` component is correctly located at `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/overview/components/stat-card.tsx` and exports the expected signature:

```ts
export function StatCard({
  label,
  value,
  isPending,
}: { label: string; value: string; isPending: boolean }) { … }
```

The import path and prop types (`label`, `value`, `isPending`) match the usage in `accounts-count.tsx`. No changes required.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3098814326,2876760340,jnsdls,COMMENTED,2025-05-29T00:45:42Z,
3098814326,2876760821,coderabbitai[bot],COMMENTED,2025-05-29T00:46:11Z,
3098814326,2876770389,gregfromstl,APPROVED,2025-05-29T00:54:41Z,
3148894928,2930963502,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-16T07:41:42Z,"## Pull Request Overview

This PR fixes the sorting behavior in CollectionIterator by updating asort() and ksort() to pass sorting flags to their parent methods and adds tests to verify the changes.
- Fix CollectionIterator::asort() and ksort() to accept and use provided sorting flags.
- Add tests to confirm that sorting methods respect the passed flags.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated no comments.

| File | Description |
| ---- | ----------- |
| tests/Propel/Tests/Runtime/Collection/CollectionIteratorTest.php | Added a new test to validate sorting behavior using SORT_NATURAL flags. |
| src/Propel/Runtime/Collection/CollectionIterator.php        | Updated asort() and ksort() to forward sorting flags to parent methods. |


<details>
<summary>Comments suppressed due to low confidence (3)</summary>

**tests/Propel/Tests/Runtime/Collection/CollectionIteratorTest.php:187**
* Consider adding additional tests using different sorting flags (e.g., SORT_STRING) to ensure sorting behavior covers diverse scenarios.
```
$iterator->asort(SORT_NATURAL);
```
**src/Propel/Runtime/Collection/CollectionIterator.php:256**
* Verify that the parent::asort() method accepts and correctly applies the provided flags; consider updating the method's docblock to reflect the flag parameter usage.
```
parent::asort($flags);
```
**src/Propel/Runtime/Collection/CollectionIterator.php:270**
* Verify that the parent::ksort() method accepts and correctly applies the provided flags; consider updating the method's docblock to reflect the flag parameter usage.
```
parent::ksort($flags);
```
</details>

"
3148894928,2931175299,demkos,APPROVED,2025-06-16T08:47:35Z,
3148894928,2934707418,smhg,APPROVED,2025-06-17T08:38:56Z,
3118873656,2897853682,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-04T19:22:34Z,"## Pull Request Overview

A concise cleanup of the README's bullet formatting to merge a split list item into a single entry.  
- Consolidated the two-line description of Standard Notes Clipper into one properly formatted bullet.



"
3070903485,2848340225,github-actions[bot],DISMISSED,2025-05-17T16:03:05Z,"The PR title does not conform to the '[\<Project\>] Title' format. Please update the PR title. 

 Typical [\<Project\>] values include: 

 * `[stdlib]` — indicates a change to the Mojo standard library code
 * `[docs]` — indicates a change to the documentation 

 It's okay to include multiple labels on a PR that affect multiple areas of work. 

 Thank you for contributing to Mojo!🔥 

 <small> You can also use a tool like www.regex101.com to see why your PR title fails to conform. Use ``` ^(Revert "")?(\[\S.*\]\s?)+\s+[a-zA-Z`].* ``` as the regex to test and ```Fix comment typo``` as the test string.</small>"
3147947387,2946806516,sykhro,COMMENTED,2025-06-20T16:51:38Z,"LGTM, happy to see these go"
3160442436,2943496765,turtleDev,COMMENTED,2025-06-19T15:50:00Z,
3160442436,2943569506,turtleDev,APPROVED,2025-06-19T16:12:05Z,
3152161950,2934229143,gemini-code-assist[bot],COMMENTED,2025-06-17T05:56:32Z,"## Summary of Changes

Hello @rgerhards, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request significantly improves the test coverage for the `omsendertrack` module by adding a dedicated test case that validates its state file loading and persistence mechanisms. This ensures the module reliably tracks sender information across restarts, enhancing the overall stability and correctness of the system.

### Highlights

* **New Test Case for State File Loading**: I've introduced a new test script, `omsendertrack-statefile.sh`, to specifically verify the `omsendertrack` module's ability to correctly load and update its state file. This test initializes a state file with pre-existing sender data, sends new messages, and then asserts that the message counts are accurately incremented in the state file.
* **Valgrind Wrapper for New Test**: A corresponding Valgrind wrapper script, `omsendertrack-statefile-vg.sh`, has been added. This allows the new state file test to be run under Valgrind, enabling comprehensive memory error detection for the `omsendertrack` module's state management.
* **Build System Integration**: I've updated `tests/Makefile.am` to include both `omsendertrack-statefile.sh` and `omsendertrack-statefile-vg.sh` in the project's test suite and distribution. This ensures that these new tests are automatically run during `make check` and are part of the distributed source.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configure Gemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3152161950,2934231169,gemini-code-assist[bot],COMMENTED,2025-06-17T05:57:44Z,"## Code Review

This pull request introduces new tests for `omsendertrack` state file loading and persistence, along with a valgrind wrapper. The main suggestions focus on improving indentation consistency in `tests/Makefile.am`."
3152161950,2934336549,gemini-code-assist[bot],COMMENTED,2025-06-17T06:44:30Z,"## Code Review

The pull request introduces a new test script `omsendertrack-statefile.sh` and its corresponding valgrind wrapper `omsendertrack-statefile-vg.sh`. These tests are correctly registered in `Makefile.am`. The new test script appears well-structured and effectively verifies the `omsendertrack` module's ability to load existing state from a file and correctly update the message count for a sender."
3071874019,2851013727,ChristopherTrimboli,COMMENTED,2025-05-19T14:38:36Z,
3138688916,2919393347,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-12T03:23:30Z,"## Pull Request Overview

This PR introduces a locale-based filtering for DocSearch results within the documentation site. Key changes include:
- Filtering search results by appending a language facet filter based on the current locale.
- Adding a changeset note to document and version the update.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated no comments.

| File | Description |
| ---- | ----------- |
| site/components/Search/Search.tsx | Added a facet filter to limit search results by the current locale |
| .changeset/dcc4c036-docsearch-language.md | Documented the language facet filter update |



"
3087244958,2866029643,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-24T02:11:53Z,"## Pull Request Overview

Improves documentation by clarifying how to run screenshot tests and fixing various typos and formatting issues across guides.

- Added a “Run the tests” section with instructions for screenshot tests.
- Corrected spelling and grammar in tutorial and build docs.
- Refined language in readme and the new-language guide for clarity.

### Reviewed Changes

Copilot reviewed 5 out of 5 changed files in this pull request and generated no comments.

| File                                             | Description                                                    |
|--------------------------------------------------|----------------------------------------------------------------|
| docs/readme_sample.txt                           | Updated contributor credit phrasing.                           |
| docs/QuickTutorial_Tool/QuickTutorial_en.html    | Fixed typos in spelling (e.g., self-explanatory, existence).   |
| docs/HowToAddNewLanguage.md                      | Refined instructions for adding a new language and standardized terminology. |
| docs/Development/HowToBuild.md                   | Added test execution steps and corrected build instruction typos. |


<details>
<summary>Comments suppressed due to low confidence (3)</summary>

**docs/readme_sample.txt:2**
* [nitpick] The phrase ""the contributor"" is ambiguous; consider reverting to ""a contributor"" or specifying which contributor should be credited.
```
We'd appreciate it if you could credit Effekseer and the contributor somewhere in your works.
```
**docs/HowToAddNewLanguage.md:6**
* [nitpick] Inline code snippets use triple backticks here, which may render as a code block; consider using single backticks (e.g., `resources/languages/en`) for inline paths.
```
Copy the directory ```resources/languages/en``` and rename it to
```
**docs/HowToAddNewLanguage.md:16**
* [nitpick] Inline code snippets here use triple backticks; for inline code, single backticks (e.g., `default`, `chinese`) are recommended for proper markdown formatting.
```
You can select from ```default```, ```chinese```, ```korean```, and ```thai```.
```
</details>

"
3101459806,2879596934,pullrequest[bot],COMMENTED,2025-05-29T20:57:48Z,":white_check_mark: This pull request was succesfully scanned and it was determined that it does not contain any changes that present immediate security concerns. If you would still like for it to be reviewed by an expert from our reviewer community, you can submit it manually via the HackerOne PullRequest [dashboard](https://app.pullrequest.com/dash/1/writer).

:stopwatch: Latest scan covered changes up to commit 6fd143efa25dc2d0e0dbbebe189b675e68c97342 (latest)"
3080668353,2868598713,johannaSommer,CHANGES_REQUESTED,2025-05-26T14:23:44Z,Almost there - please also fix the code quality issues
3080668353,2868636931,johannaSommer,COMMENTED,2025-05-26T14:35:21Z,
3080668353,2868819179,johnrachwan123,COMMENTED,2025-05-26T15:58:02Z,
3080668353,2870650376,johannaSommer,APPROVED,2025-05-27T11:12:36Z,LGTM - please fix the Code Quality checks before merging.
3164997210,2947742182,devgony,APPROVED,2025-06-21T11:36:21Z,
3130953351,2953821747,pxor,APPROVED,2025-06-24T13:21:30Z,
3166366433,2948449009,cursor[bot],COMMENTED,2025-06-23T01:34:49Z,"<details open>
<summary><h3>Bug: Fetch Abort Controller Mismatch Bug</h3></summary>

When `flushHeaders()` is called, it creates an `AbortController` and starts an HTTP fetch request using its signal. Later, when `end()` calls `send()`, `send()` unconditionally creates a *new* `AbortController` and overwrites the request's `AbortController` reference. Although the `startFetch()` call within `send()` is guarded (preventing a new fetch), the original fetch request remains associated with the *first* `AbortController`. Consequently, any subsequent `abort()` calls on the request will target the *newly assigned* `AbortController`, failing to abort the actual ongoing network request.

<p></p>

<details>
<summary><code>src/js/node/_http_client.ts#L185-L192</code></summary>

https://github.com/oven-sh/bun/blob/a4283dc3a08c4bedd257b79b6f79db9ad33a68aa/src/js/node/_http_client.ts#L185-L192

</details>

<a href=""https://cursor.com/open?data=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImJ1Z2JvdC12MSJ9.eyJ2ZXJzaW9uIjoxLCJ0eXBlIjoiQlVHQk9UX0ZJWF9JTl9DVVJTT1IiLCJkYXRhIjp7InJlZGlzS2V5IjoiYnVnYm90OmJmMmIwMTllLWYyMDMtNDRkNC1hZDk5LWQyNzY3MTRmNjBkYyIsImVuY3J5cHRpb25LZXkiOiJ4OEl2Ykp6MXNRNzZkR1J5TTdIN0hrWk5UTmFyZnZXTEtONE5oSXlQbFZJIiwiYnJhbmNoIjoiY29kZXgvZml4LWVtcHR5LXJlcXVlc3QtYm9keS1hZnRlci1mbHVzaGhlYWRlcnMtaW4tYnVuLeKJpS0xLjIuOCJ9LCJpYXQiOjE3NTA2NDI0ODgsImV4cCI6MTc1MTI0NzI4OH0.QNIw77MTyyhiKGRE0RCJ3G05c-s7uZ1hLyXdXntaEyBCe8Wwj_IPILm8g5a_TptZeUoUPfmZUvYyXr1J0JYlarFr7Run7VtphaMsI2ODLUC4yBfPHCz3OXGByCcolkBF0elRwQz-HvJtTZUQ6xD3XRFKBqF-lcJijq2tt5Odm7DjsM_VkndYYsmRbkRHTk-I7KYEA5WtJhlb4KXt-pEEDoxhtU_mIjWRd43ViLdFo7nxwQB2yFuWcfNaD_zHIbd9yk_FsaPUSgkzh3pgl7Aer_tRSvvaVARJiZyqV4CsrBidFCyidwBT94YguftA2FcgJoj6W2HuRzVix_q8kyQC6A"">Fix in Cursor</a>

</details>

---

_Was this report helpful? Give feedback by reacting with 👍 or 👎_
"
3166366433,2948484058,cirospaciari,APPROVED,2025-06-23T02:06:31Z,
3166366433,2948487164,cirospaciari,CHANGES_REQUESTED,2025-06-23T02:09:58Z,we need to check if `this[kAbortController]` already exists in `send`  function to avoid creating it twice but LGTM otherwise
3166366433,2948524476,cirospaciari,DISMISSED,2025-06-23T02:50:52Z,
3166366433,2955845689,cirospaciari,APPROVED,2025-06-25T00:54:59Z,
3134294972,2914405472,sydney-runkle,APPROVED,2025-06-10T17:08:24Z,
3136468494,2916744804,coderabbitai[bot],COMMENTED,2025-06-11T11:25:27Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>app/web_ui/src/routes/(app)/run/available_models_dropdown.svelte (2)</summary><blockquote>

`14-26`: **Consider externalising user-facing copy**  
These warning / suggestion strings will appear in several places now. Hard-coding them here makes future wording changes or localisation harder. Moving them to a dedicated i18n / constants module (or even to the backend if you already ship copy from there) would keep the component lean and DRY.

---

`61-76`: **Micro-optimise look-ups & avoid `find` side effects**  
`get_model_warning` scans the `untested_models` / `unsupported_models` arrays with `find`.  
a) You only need boolean membership checks. `some` expresses that intent and avoids creating unused array elements.  
b) If the list grows large (e.g. many fine-tuned models) converting to a `Set` of ids on build of `model_options` would give O(1) look-ups.

```diff
-    if (untested_models.find((m) => m[0] === selected)) {
+    if (untested_models.some((m) => m[0] === selected)) {
...
-    if (unsupported_models.find((m) => m[0] === selected)) {
+    if (unsupported_models.some((m) => m[0] === selected)) {
```
Not critical, but worth tightening while we are here.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between bd8f0269dd0690991dfabd24b3c57a180e537b5d and 80e2e8485e6549942334ca96f047b74b7017a842.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `app/web_ui/src/routes/(app)/run/available_models_dropdown.svelte` (5 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (10)</summary>

* GitHub Check: Format and Lint Python
* GitHub Check: Build Desktop Apps (macos-latest)
* GitHub Check: Build Desktop Apps (ubuntu-22.04)
* GitHub Check: Build Desktop Apps (macos-13)
* GitHub Check: Build Desktop Apps (ubuntu-22.04-arm)
* GitHub Check: Build, Typecheck, and Test Python (3.12)
* GitHub Check: Build, Typecheck, and Test Python (3.13)
* GitHub Check: Build, Typecheck, and Test Python (3.10)
* GitHub Check: Build, Typecheck, and Test Python (3.11)
* GitHub Check: Web UI Code Format, Lint, Typecheck, Test, and Build

</details>

<details>
<summary>🔇 Additional comments (2)</summary><blockquote>

<details>
<summary>app/web_ui/src/routes/(app)/run/available_models_dropdown.svelte (2)</summary>

`77-84`: **Edge-case: model ids containing additional “/”**  
`selected.split(""/"")` assumes exactly one slash separating provider & model id. Several providers (e.g. HuggingFace) surface repo paths that themselves contain “/”. Splitting only on the first slash is safer:

```diff
-    const [provider_id, ...model_parts] = selected.split(""/"")
+    const [provider_id, ...model_parts] = selected.split(""/"", 2)
```

(or `selected.indexOf(""/"")` + `substring`).

---

`96-106`: **`event.target` may not be the `<select>` – confirm with `FormElement`**  
`confirm_model_select` casts `event.target` to `HTMLSelectElement`. If `FormElement` re-dispatches a custom `select` event, `target` will be the Svelte component instance, not the inner `<select>`, and `select.value` will be `undefined`.

```diff
-    const select = event.target as HTMLSelectElement
+    // Prefer currentTarget; falls back if the DOM event bubbles
+    const select = event.currentTarget as HTMLSelectElement
```

Please double-check `FormElement`’s implementation (does it forward `event` or emit its own?) to avoid silent failures where the dialog never appears or the revert logic misfires.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3129055380,2908861140,coderabbitai[bot],COMMENTED,2025-06-09T03:53:45Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>app/desktop/studio_server/settings_api.py (1)</summary><blockquote>

`40-46`: **Consider more specific error handling for better user experience.**

The endpoint implementation is solid with proper try/catch and HTTP error responses. Consider providing more specific error messages for common failure scenarios.


```diff
 @app.post(""/api/open_logs"")
 def open_logs():
     try:
         open_logs_folder()
         return {""message"": ""opened""}
+    except FileNotFoundError:
+        raise HTTPException(status_code=404, detail=""Logs folder not found"")
+    except PermissionError:
+        raise HTTPException(status_code=403, detail=""Permission denied accessing logs folder"")
     except Exception as e:
         raise HTTPException(status_code=500, detail=str(e))
```

</blockquote></details>
<details>
<summary>app/desktop/studio_server/test_settings_api.py (1)</summary><blockquote>

`159-163`: **Well-implemented test with proper mocking.**

The test correctly mocks the `open_logs_folder` function and verifies both the function call and successful response. Consider adding a test for the error handling path as well.



```diff
def test_open_logs_endpoint(client):
    with patch(""app.desktop.studio_server.settings_api.open_logs_folder"") as m:
        response = client.post(""/api/open_logs"")
        assert response.status_code == 200
        m.assert_called_once()

+def test_open_logs_endpoint_error(client):
+    with patch(""app.desktop.studio_server.settings_api.open_logs_folder"") as m:
+        m.side_effect = Exception(""Test error"")
+        response = client.post(""/api/open_logs"")
+        assert response.status_code == 500
+        assert ""Test error"" in response.json()[""detail""]
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 31fb764afa5d6735d9831fecfe02368c7cc932f4 and 501fad0c7a1747b44c7227eabb8e324c89df3ae8.

</details>

<details>
<summary>📒 Files selected for processing (3)</summary>

* `app/desktop/studio_server/settings_api.py` (2 hunks)
* `app/desktop/studio_server/test_settings_api.py` (1 hunks)
* `app/web_ui/src/routes/(app)/settings/+page.svelte` (3 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>app/desktop/studio_server/settings_api.py (3)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/utils/config.py (1)</summary>

* `Config` (28-247)

</details>
<details>
<summary>app/desktop/studio_server/test_settings_api.py (1)</summary>

* `app` (20-23)

</details>
<details>
<summary>app/desktop/log_config.py (2)</summary>

* `log_config` (71-108)
* `get_log_file_path` (25-36)

</details>

</blockquote></details>

</details><details>
<summary>🪛 Pylint (3.3.7)</summary>

<details>
<summary>app/desktop/studio_server/settings_api.py</summary>

[error] 17-17: Module 'os' has no 'startfile' member

(E1101)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (9)</summary>

* GitHub Check: Build Desktop Apps (ubuntu-22.04-arm)
* GitHub Check: Build Desktop Apps (macos-13)
* GitHub Check: Build Desktop Apps (macos-latest)
* GitHub Check: Build, Typecheck, and Test Python (3.12)
* GitHub Check: Build Desktop Apps (windows-latest)
* GitHub Check: Build Desktop Apps (ubuntu-22.04)
* GitHub Check: Build, Typecheck, and Test Python (3.13)
* GitHub Check: Build, Typecheck, and Test Python (3.10)
* GitHub Check: Build, Typecheck, and Test Python (3.11)

</details>

<details>
<summary>🔇 Additional comments (5)</summary><blockquote>

<details>
<summary>app/desktop/studio_server/settings_api.py (2)</summary>

`1-3`: **LGTM: Imports are appropriate for the cross-platform functionality.**

The added imports support the cross-platform file system operations and API error handling needed for the logs folder feature.



Also applies to: 6-6, 9-9

---

`12-19`: **Excellent cross-platform implementation with proper error handling.**

The function correctly handles all major platforms using appropriate system commands. The static analysis warning about `os.startfile` is a false positive - this attribute exists specifically on Windows systems.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Pylint (3.3.7)</summary>

[error] 17-17: Module 'os' has no 'startfile' member

(E1101)

</details>

</details>

</details>
<details>
<summary>app/web_ui/src/routes/(app)/settings/+page.svelte (3)</summary>

`5-15`: **Excellent error handling in the async function.**

The `view_logs` function properly handles both network errors and HTTP response errors with user-friendly alert messages. The async/await pattern is correctly implemented.

---

`44-49`: **Well-structured section configuration.**

The new ""View Logs"" section is properly configured with clear description and uses the `on_click` handler appropriately for the button functionality.

---

`80-97`: **Clean conditional rendering logic for mixed button types.**

The template correctly handles both link-based and click-handler-based sections with proper conditional rendering. The styling consistency is maintained across both button types.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3102274919,2880359585,coderabbitai[bot],COMMENTED,2025-05-30T06:58:53Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>editor/grida-canvas/reducers/tools/snap.ts (1)</summary><blockquote>

`104-105`: **Consider removing unused parameters or document their purpose.**

The `scene_id` and `document` parameters are added to the function signature but are not used in the implementation. This could indicate incomplete implementation or parameters reserved for future use.


If these parameters are intended for future use, consider adding a comment explaining their purpose:

```diff
  {
    document_ctx,
+   // TODO: scene_id and document parameters reserved for future snap enhancements
    scene_id,
    document,
  }: {
```

Alternatively, if they're not needed, consider removing them to keep the interface clean.


Also applies to: 108-109

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 1b108e715301ae874218144d32f828deea62dcac and 6b36daa666843c7fa240c603e33fe3bf3e639548.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `editor/grida-canvas/reducers/tools/snap.ts` (3 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>editor/grida-canvas/reducers/tools/snap.ts (1)</summary><blockquote>

<details>
<summary>packages/grida-canvas-schema/grida.ts (2)</summary>

* `INodesRepositoryRuntimeHierarchyContext` (505-525)
* `Document` (406-409)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>🔇 Additional comments (2)</summary><blockquote>

<details>
<summary>editor/grida-canvas/reducers/tools/snap.ts (2)</summary>

`5-5`: **LGTM! Import needed for the new functionality.**

The import is necessary for accessing `domapi.k.EDITOR_CONTENT_ELEMENT_ID` used in the fallback logic.

---

`125-133`: **Well-implemented fallback logic for root node snapping.**

The logic correctly identifies when all selected nodes are root nodes (have no parent) and provides a fallback snap target using the editor content element. This implementation aligns perfectly with the PR objective of fixing root node snapping.

The approach is sound:
1. Only applies fallback when no other snap targets are available
2. Correctly identifies root nodes using the parent hierarchy context
3. Uses an appropriate DOM element as the snap target

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3141232568,2925909396,AYadrov,APPROVED,2025-06-13T18:27:47Z,"I slightly misunderstand how the code works, but it looks fine to me"
3086654454,2864812323,aymeric-roucher,APPROVED,2025-05-23T15:22:39Z,"Thank you @julien-c!

I think it would be worth keeping a mention that there's some work needed on our side to improve `ToolCallingAgent` for some models, for instance several inference providers do not reliably support neither structured generation nor tool calling yet (internal conversation [here](https://huggingface.slack.com/archives/C089DMDB415/p1747760816355639))"
3081476453,2859193416,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-21T21:42:40Z,"## Pull Request Overview

This PR adds support for FastMCP 1.0 server objects, updating the transport logic, documentation, and tests.  
- Updated FastMCPTransport and infer_transport to accept both FastMCP 2.x and 1.0 servers.  
- Added tests to verify transport inference for FastMCP 1.0 server instances.  
- Revised documentation to reflect the new compatibility.

### Reviewed Changes

Copilot reviewed 4 out of 4 changed files in this pull request and generated no comments.

| File                                | Description                                                           |
| ----------------------------------- | --------------------------------------------------------------------- |
| tests/client/test_client.py         | Added tests for FastMCP and FastMCP 1.0 server transport inference.   |
| src/fastmcp/client/transports.py    | Extended FastMCPTransport and infer_transport to support FastMCP 1.0.   |
| docs/clients/transports.mdx          | Updated documentation for FastMCPTransport compatibility.             |
| docs/clients/client.mdx              | Updated client transport inference documentation.                     |



"
3096300821,2875324889,zilto,CHANGES_REQUESTED,2025-05-28T14:24:14Z,"Does this work on your machine?

Pulling this PR and running `npm start` from the directory `docs/website` brought back the error fixed in #2678

#### Stack trace
```shell
(dlt) ~/projects/dlthub/dlt/docs/website (codex/update-watcher-logic-to-react-to-examples_source_dir)
npm start

> dlt-docs@0.0.0 start
> npm run preprocess-docs && npm run gen-api-ref && concurrently --kill-others ""node tools/preprocess_docs.js --watch"" ""docusaurus start""


> dlt-docs@0.0.0 preprocess-docs
> node tools/preprocess_docs.js

(node:62379) [DEP0040] DeprecationWarning: The `punycode` module is deprecated. Please use a userland alternative instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
Synced 16 examples
Processing docs...
Processed 232 files.
Inserted 66 snippets.
Processed 42 tuba blocks.
Found no errors in md files
(node:62372) [DEP0040] DeprecationWarning: The `punycode` module is deprecated. Please use a userland alternative instead.
(Use `node --trace-deprecation ...` to show where the warning was created)

> dlt-docs@0.0.0 gen-api-ref
> PYTHONPATH=. poetry run pydoc-markdown && poetry run python clean_pydoc_sidebar.py

[0] (node:62509) [DEP0040] DeprecationWarning: The `punycode` module is deprecated. Please use a userland alternative instead.
[0] (Use `node --trace-deprecation ...` to show where the warning was created)
[0] Synced 16 examples
[0] Processing docs...
[0] Processed 232 files.
[0] Inserted 66 snippets.
[0] Processed 42 tuba blocks.
[0] Found no errors in md files
[0] Watching...
[0] (node:62490) [DEP0040] DeprecationWarning: The `punycode` module is deprecated. Please use a userland alternative instead.
[0] (Use `node --trace-deprecation ...` to show where the warning was created)
[1] [INFO] Starting the development server...
[1] [SUCCESS] Docusaurus website is running at: http://localhost:3000/docs/
[1] 
[1] [ERROR] Error: ENOSPC: System limit for number of file watchers reached, watch '/home/tjean/projects/dlthub/dlt/docs/website/docusaurus.config.js'
[1]     at FSWatcher.<computed> (node:internal/fs/watchers:247:19)
[1]     at Object.watch (node:fs:2468:36)
[1]     at createFsWatchInstance (/home/tjean/projects/dlthub/dlt/docs/website/node_modules/chokidar/lib/nodefs-handler.js:119:15)
[1]     at setFsWatchListener (/home/tjean/projects/dlthub/dlt/docs/website/node_modules/chokidar/lib/nodefs-handler.js:166:15)
[1]     at NodeFsHandler._watchWithNodeFs (/home/tjean/projects/dlthub/dlt/docs/website/node_modules/chokidar/lib/nodefs-handler.js:331:14)
[1]     at NodeFsHandler._handleFile (/home/tjean/projects/dlthub/dlt/docs/website/node_modules/chokidar/lib/nodefs-handler.js:395:23)
[1]     at NodeFsHandler._addToNodeFs (/home/tjean/projects/dlthub/dlt/docs/website/node_modules/chokidar/lib/nodefs-handler.js:637:21)
[1]     at async /home/tjean/projects/dlthub/dlt/docs/website/node_modules/chokidar/index.js:451:21
[1]     at async Promise.all (index 0) {
[1]   errno: -28,
[1]   syscall: 'watch',
[1]   code: 'ENOSPC',
[1]   path: '/home/tjean/projects/dlthub/dlt/docs/website/docusaurus.config.js',
[1]   filename: '/home/tjean/projects/dlthub/dlt/docs/website/docusaurus.config.js'
[1] }
[1] [INFO] Docusaurus version: 3.7.0
[1] Node version: v22.12.0
[1] docusaurus start exited with code 1
--> Sending SIGTERM to other processes..
[0] node tools/preprocess_docs.js --watch exited with code SIGTERM
```"
3137373199,2926392021,izeigerman,APPROVED,2025-06-13T20:57:19Z,
3131288298,2911147086,cursor[bot],COMMENTED,2025-06-09T19:44:43Z,"### ✅ BugBot reviewed your changes and found no bugs!

---


**BugBot free trial expires on June 14, 2025**
You have used $0.00 of your $50.00 spend limit so far. Manage your spend limit in the [Cursor dashboard](https://cursor.com/dashboard?tab=integrations).

_Was this report helpful? Give feedback by reacting with 👍 or 👎_
"
3071143061,2848450565,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-17T23:19:36Z,"## Pull Request Overview

This PR adds a new `AGENTS.md` file to document the repository layout, key modules, and preferred developer validation commands.

- Introduces a top-level overview of the FastMCP repo structure.
- Lists major source directories and their responsibilities.
- Provides recommended setup and validation commands.



"
3071582287,2848843952,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-18T09:07:31Z,"## Pull Request Overview

This PR adds a `verbose` flag to the `recognize_vosk` method, allowing callers to receive either plain text or the full parsed JSON response.  
- Introduces `verbose: bool` parameter with proper type overloads and handling in the Vosk recognizer  
- Updates tests to cover both default (text) and verbose (dict) outputs  
- Updates the library reference documentation to include the new parameter and return types

### Reviewed Changes

Copilot reviewed 3 out of 3 changed files in this pull request and generated 1 comment.

| File                                 | Description                                                        |
| ------------------------------------ | ------------------------------------------------------------------ |
| tests/recognizers/test_vosk.py       | Added `pytest` fixture for audio data and tests for verbose output |
| speech_recognition/recognizers/vosk.py | Implemented `verbose` parameter, JSON parsing, and overloads       |
| reference/library-reference.rst      | Updated function signature in docs to reflect `verbose` parameter  |


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**tests/recognizers/test_vosk.py:21**
* It may be helpful to add a test explicitly passing `verbose=False` to verify the method still returns a plain string even when the flag is set.
```
def test_recognize_vosk_verbose(audio_data):
```
**reference/library-reference.rst:283**
* [nitpick] The docs reference `Dict[str, Any]` without importing `Dict` or `Any` in this context. Consider using the built-in `dict` in the signature or adding a note about required typing imports for clarity.
```
``recognizer_instance.recognize_vosk(audio_data: AudioData, *, verbose: bool = False) -> Union[str, Dict[str, Any]]``
```
</details>

"
3071582287,2848849512,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-18T09:16:35Z,"## Pull Request Overview

Adds a `verbose` flag to the Vosk recognizer so callers can choose between receiving just the recognized text or the full result dictionary.

- Introduce `verbose: bool` parameter with overloads and updated return types in `recognize()`.
- Refactor tests to use a pytest fixture and add a `verbose=True` test case.
- Update docstring and library reference to document the new parameter and return signature.

### Reviewed Changes

Copilot reviewed 3 out of 3 changed files in this pull request and generated 2 comments.

| File                                      | Description                                                       |
| ----------------------------------------- | ----------------------------------------------------------------- |
| speech_recognition/recognizers/vosk.py    | Added `verbose` parameter, type overloads, and conditional return of full JSON result or text. |
| tests/recognizers/test_vosk.py            | Created `audio_data` fixture; updated existing test and added verbose mode test. |
| reference/library-reference.rst           | Updated `recognize_vosk` signature to include `verbose` and return type. |


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**speech_recognition/recognizers/vosk.py:4**
* The `os` module is imported but never used in this file. Consider removing this unused import to keep dependencies clean.
```
import os
```
</details>

"
3148003743,2930389349,pakrym-oai,APPROVED,2025-06-16T00:11:27Z,
3153716939,2936139067,ellipsis-dev[bot],COMMENTED,2025-06-17T15:24:32Z,
3153716939,2936278233,ellipsis-dev[bot],COMMENTED,2025-06-17T16:06:47Z,
3088604097,2871371248,Bentlybro,APPROVED,2025-05-27T14:38:39Z,Tested and this works!
3069384523,2847073976,fouad-openai,APPROVED,2025-05-16T16:10:31Z,
3070861080,2848317258,ellipsis-dev[bot],COMMENTED,2025-05-17T15:19:27Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 76d984fd9d719be1a716487fab89aee181671856 in <ellipsistime>43 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `31` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>agents-api/agents_api/env.py:14</code></summary>
> 
> - **Draft comment:** 
> New logger initialization is a good practice. Ensure the application’s logging configuration captures warnings appropriately in production.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>agents-api/agents_api/env.py:91</code></summary>
> 
> - **Draft comment:** 
> Good change: replaced print of API key with a generic logger.warning to avoid exposing sensitive data.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_hPPjHNdSl6IUstl6`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3125407185,2911448033,alpeb,APPROVED,2025-06-09T22:00:40Z,"LGTM, just a nit."
3127143865,2910057418,gemini-code-assist[bot],COMMENTED,2025-06-09T13:22:09Z,"## Code Review
This pull request introduces an optional PCRE-based match function (`pcre_match()`) as a new plugin (`fmpcre`). The changes include moving the prototype module to the `plugins/` directory, updating build scripts (`Makefile.am`, `configure.ac`), adding documentation (`AGENTS.md`, `plugins/fmpcre/README.md`), and providing a regression test (`ffmpcre-basic.sh`).

The implementation of the `fmpcre` plugin appears solid:
*   It correctly uses `pcre_compile()` during initialization and `pcre_exec()` for matching.
*   The compiled regular expression is cached, which is good for performance.
*   Resource management (memory, PCRE objects) seems correct.
*   The module adheres to rsyslog's plugin structure and conventions.
*   Build system integration is properly handled.
*   Documentation and tests are clear and cover the basic functionality.

I have one suggestion for improvement regarding error handling within the `doFunc_pcre_match` function.

Overall, this is a well-executed addition to rsyslog.

### Summary of Findings
* **Error Handling in `doFunc_pcre_match`**: `pcre_exec` can return various error codes. The current implementation treats all errors (any negative `rc`) as a non-match by returning 0. This might hide specific PCRE execution errors from the user. Consider logging an error if `rc < 0 && rc != PCRE_ERROR_NOMATCH` to aid diagnostics.
* **Copyright Year in Test Script**: The copyright year in `tests/ffmpcre-basic.sh` (line 2) is `2025`, which is likely a typo for `2024` for a newly added file. This is a minor issue and was not commented on directly due to review settings.

### Merge Readiness
The pull request is in good shape and introduces a useful feature. The C code is clean, follows rsyslog conventions, and the build integration is correct. The documentation and tests are also well-prepared.

There is one medium-severity suggestion regarding enhanced error reporting in `plugins/fmpcre/fmpcre.c` that should be considered for improved diagnostics. Addressing this would make the module more robust.

As an AI, I am not authorized to approve pull requests. Please ensure this PR is reviewed and approved by a human maintainer before merging."
3145458393,2930584723,devgony,APPROVED,2025-06-16T04:16:22Z,
3148487759,2930589115,obi1kenobi,COMMENTED,2025-06-16T04:22:19Z,
3152206408,2934421221,devgony,APPROVED,2025-06-17T07:14:35Z,
3070852670,2848311883,ellipsis-dev[bot],COMMENTED,2025-05-17T15:14:00Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to e6aaee3ed0147d6e8f0002baafd0b61fc29037cf in <ellipsistime>50 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `12` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>CHANGELOG.md:39</code></summary>
> 
> - **Draft comment:** 
> Changelog entry is clear and consistent. Good use of inline code formatting for `asyncio.to_thread`.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>CHANGELOG.md:42</code></summary>
> 
> - **Draft comment:** 
> Typo detected: ""TyeSpecs"" might be intended to be ""TypeSpecs"". Please confirm and correct if necessary.
> - **Reason this comment was not posted:**
> Comment was on unchanged code.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_FOqvsdazthPbWwFp`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3141112607,2922108539,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-12T17:42:47Z,"## Pull Request Overview

Adds two new video-processing blocks—one for transcribing video audio to text and another for text-driven video editing—along with documentation updates and index entries.

- Introduce `TranscribeVideoBlock` with placeholder implementation and schema
- Introduce `EditVideoByTextBlock` with placeholder editing logic and schema
- Document both blocks and add them to the blocks index

### Reviewed Changes

Copilot reviewed 5 out of 5 changed files in this pull request and generated 4 comments.

<details>
<summary>Show a summary per file</summary>

| File                                            | Description                                                |
|-------------------------------------------------|------------------------------------------------------------|
| docs/content/platform/blocks/transcribe_video.md| New docs for `TranscribeVideoBlock`                        |
| docs/content/platform/blocks/edit_video_by_text.md | New docs for `EditVideoByTextBlock`                     |
| docs/content/platform/blocks/blocks.md          | Added index entries for both new blocks                   |
| autogpt_platform/backend/backend/blocks/transcribe_video.py       | Implementation stub for transcription block         |
| autogpt_platform/backend/backend/blocks/edit_video_by_text.py | Implementation stub for video-editing block            |
</details>



<details>
<summary>Comments suppressed due to low confidence (3)</summary>

**docs/content/platform/blocks/edit_video_by_text.md:17**
* Add the default value (`word`) to the `Split At` input description so users know which setting applies when they omit this field
```
| Split At | Level of precision for transcript matching (""word"" or ""character""). |
```
**docs/content/platform/blocks/transcribe_video.md:21**
* Clarify in the `Error` output row whether the field is always present (empty string on success) or omitted, to set correct expectations in the docs
```
| Error | Error message if the transcription fails. |
```
**autogpt_platform/backend/backend/blocks/transcribe_video.py:40**
* Add a unit test for `run` that mocks `store_media_file` and `get_exec_file_path` to verify both `transcription` and default `error` outputs are produced
```
def run(
```
</details>

"
3141112607,2924707364,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-13T12:53:48Z,"## Pull Request Overview

This PR adds two new multimedia processing blocks with accompanying documentation updates to enhance video transcription and editing capabilities.
- Introduces TranscribeVideoBlock for converting video speech to text.
- Implements EditVideoByTextBlock for editing videos based on transcript changes.
- Updates documentation files and the blocks index to reflect the new blocks.

### Reviewed Changes

Copilot reviewed 5 out of 5 changed files in this pull request and generated no comments.

<details>
<summary>Show a summary per file</summary>

| File | Description |
| ---- | ----------- |
| docs/content/platform/blocks/transcribe_video.md | Adds documentation for video transcription functionality. |
| docs/content/platform/blocks/edit_video_by_text.md | Adds documentation for video editing by text, including a new ""Split At"" parameter description. |
| docs/content/platform/blocks/blocks.md | Updates the blocks index to include the new video blocks. |
| autogpt_platform/backend/backend/blocks/transcribe_video.py | Introduces a new block for video transcription with a placeholder transcription method. |
| autogpt_platform/backend/backend/blocks/edit_video_by_text.py | Implements a new block for editing video based on transcript differences. |
</details>



<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**docs/content/platform/blocks/edit_video_by_text.md:17**
* Consider clarifying in the documentation that the 'Split At' parameter accepts only 'word' or 'character' as valid values.
```
| Split At | Level of precision for transcript matching (""word"" or ""character""). |
```
**autogpt_platform/backend/backend/blocks/transcribe_video.py:32**
* [nitpick] Consider using a consistent data structure (for example, a list of tuples) for test_output definitions across blocks for improved maintainability.
```
test_output=(""transcription"", ""example transcript""),
```
</details>

"
3141112607,2924715643,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-13T12:56:29Z,"## Pull Request Overview

This PR adds two new multimedia blocks for video processing—a transcription block and a text-based video editing block—and updates documentation to include them.

- Introduces `TranscribeVideoBlock` with speech-to-text functionality  
- Adds `EditVideoByTextBlock` to trim videos via edited transcripts  
- Updates docs to list the new blocks

### Reviewed Changes

Copilot reviewed 5 out of 5 changed files in this pull request and generated 1 comment.

<details>
<summary>Show a summary per file</summary>

| File                                              | Description                                         |
|---------------------------------------------------|-----------------------------------------------------|
| docs/content/platform/blocks/transcribe_video.md  | New documentation for Transcribe Video block        |
| docs/content/platform/blocks/edit_video_by_text.md| New documentation for Edit Video by Text block      |
| docs/content/platform/blocks/blocks.md            | Added new blocks to the blocks index                |
| autogpt_platform/backend/backend/blocks/transcribe_video.py      | Implementation scaffold for TranscribeVideoBlock     |
| autogpt_platform/backend/backend/blocks/edit_video_by_text.py    | Implementation scaffold for EditVideoByTextBlock     |
</details>



<details>
<summary>Comments suppressed due to low confidence (3)</summary>

**autogpt_platform/backend/backend/blocks/edit_video_by_text.py:75**
* Wrap the call to `edit_video` in a try/except and yield the `error` field on exception, mirroring the error handling in `TranscribeVideoBlock`.
```
output_path = self.edit_video(abs_path, input_data.transcription, input_data.split_at)
```
**docs/content/platform/blocks/edit_video_by_text.md:17**
* [nitpick] Document the default value for `split_at` (""word"") in the Inputs table to match the block’s schema default.
```
| Split At | Level of precision for transcript matching (""word"" or ""character""). |
```
**docs/content/platform/blocks/blocks.md:96**
* [nitpick] Since `TranscribeVideoBlock` is a multimedia block, move its entry out of the “Miscellaneous” section into the main multimedia category for consistency.
```
| [Transcribe Video](transcribe_video.md#transcribe-video) | Converts speech in a video file to text |
```
</details>

"
3071010253,2848379164,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-17T19:21:25Z,"## Pull Request Overview

This PR corrects the character class in the `stripSpecialCharacters` utility to ensure hyphens, underscores, dots, and whitespace are handled as intended.

- Refines the regex to place the hyphen at the end of the character class for literal interpretation.
- Preserves spaces (via `\s`) before converting them to hyphens.
- Maintains lowercase conversion for consistency.


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**packages/utils/src/index.ts:2**
* [nitpick] The comment currently states that spaces are removed, but the regex actually preserves spaces for later replacement. Consider updating the comment to reflect that spaces are retained and then converted to hyphens.
```
// Remove special characters and spaces, keep alphanumeric, hyphens/underscores, and dots
```
**packages/utils/src/index.ts:4**
* Add or update unit tests for `stripSpecialCharacters` to cover the updated regex behavior and verify that underscores, hyphens, dots, and spaces are handled correctly before being replaced.
```
.replace(/[^a-zA-Z0-9_\s.-]/g, """")
```
</details>

"
3115759878,2926814913,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-13T23:54:06Z,"## Pull Request Overview

This PR adds synchronized tab switching for tab groups and persists the selected tab across pages.

- Adds a `data-tab-group` attribute to tab containers when sync is enabled.
- Implements JavaScript logic to update all grouped tabs and store selection in `localStorage`.
- Updates configuration and documentation to enable and explain the sync feature.

### Reviewed Changes

Copilot reviewed 4 out of 4 changed files in this pull request and generated 2 comments.

| File                                    | Description                                                         |
| --------------------------------------- | ------------------------------------------------------------------- |
| layouts/_shortcodes/tabs.html           | Introduces `$enableSync` and outputs `data-tab-group` on the tabs.  |
| exampleSite/hugo.yaml                   | Enables `page.tabs.sync` under `params` to activate global sync.    |
| exampleSite/content/docs/guide/shortcodes/tabs.md | Adds documentation for the new sync behavior in tabs shortcode.     |
| assets/js/tabs.js                       | Wraps tab logic in an IIFE, adds `updateGroup`, and handles persistence. |


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**assets/js/tabs.js:25**
* The new synchronization logic isn’t covered by any tests. Consider adding unit or integration tests to verify both initial load (from localStorage) and click synchronization behavior.
```
const groups = document.querySelectorAll('[data-tab-group]');
```
</details>

"
3071708085,2848924522,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-18T12:28:21Z,"## Pull Request Overview

This pull request adjusts the layout containers so the sidebar scrolls independently from the main content. Key changes include adding a full viewport height to the parent container, enabling vertical scrolling on the sidebar, and restricting the main content container to vertical scrolling.


<details>
<summary>Comments suppressed due to low confidence (3)</summary>

**apps/app/src/components/animated-layout.tsx:15**
* [nitpick] Adding 'h-screen' ensures the container fills the viewport, but verify that this fixed height suits all responsive scenarios and doesn't adversely affect devices with dynamic toolbars.
```
<div className=""flex w-full h-screen overflow-hidden"">
```
**apps/app/src/components/animated-layout.tsx:18**
* [nitpick] The addition of 'h-full' and 'overflow-y-auto' on the sidebar ensures independent vertical scrolling; ensure that the parent's height is correctly inherited in all cases.
```
""flex-shrink-0 h-full overflow-y-auto border-r bg-background duration-300 ease-in-out hidden md:block"",
```
**apps/app/src/components/animated-layout.tsx:24**
* [nitpick] Switching from 'overflow-auto' to 'overflow-y-auto' restricts scrolling to the vertical direction; verify that horizontal scrolling is not required for this content.
```
<div className=""flex-1 overflow-y-auto bg-backgroundSoft"">
```
</details>

"
3093033729,2870127178,sourcery-ai[bot],COMMENTED,2025-05-27T08:15:58Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟡 **General issues**: 1 issue found
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3151772816,2936052347,juliendenize,APPROVED,2025-06-17T15:03:40Z,Thanks !
3151772816,2936073576,juliendenize,APPROVED,2025-06-17T15:09:44Z,
3071995999,2849370940,sshane,COMMENTED,2025-05-19T04:52:45Z,
3070740875,2848387949,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-17T20:14:05Z,"## Pull Request Overview

This PR fixes the Exa search block results by ensuring that payloads are using camelCase naming conventions. Key changes include:
- Updating both search and similar blocks to convert the contents payload keys to camelCase.
- Adding a utility helper (to_camel_case_dict) in the helpers module to perform the conversion.

### Reviewed Changes

Copilot reviewed 3 out of 3 changed files in this pull request and generated 2 comments.

| File                                                                 | Description                                                        |
|----------------------------------------------------------------------|--------------------------------------------------------------------|
| autogpt_platform/backend/backend/blocks/exa/similar.py               | Uses to_camel_case_dict to convert input_data.contents payload       |
| autogpt_platform/backend/backend/blocks/exa/search.py                | Uses to_camel_case_dict to convert input_data.contents payload       |
| autogpt_platform/backend/backend/blocks/exa/helpers.py               | Adds helper functions (_to_camel_case and to_camel_case_dict)         |



"
3071154500,2848459513,sourcery-ai[bot],COMMENTED,2025-05-17T23:39:25Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3070968398,2848364908,ellipsis-dev[bot],COMMENTED,2025-05-17T18:01:57Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 4124f881a63f946564312628c1a088d63e7a5050 in <ellipsistime>1 minute and 24 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `58` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>cli/src/julep_cli/models.py:3</code></summary>
> 
> - **Draft comment:** 
> Added explicit imports for tool definitions (ApiCallDef, Bash20241022Def, etc.). This improves type clarity. Ensure these autogen models are Pydantic‑compatible, otherwise you might need to adjust their __init__ overloads to satisfy pyright.
> - **Reason this comment was not posted:**
> Comment looked like it was already resolved.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>cli/src/julep_cli/models.py:82</code></summary>
> 
> - **Draft comment:** 
> Replaced generic 'Any' types with explicit definitions (FunctionDef, IntegrationDef, SystemDef, etc.) in CreateToolRequest. Ensure that the initialization signatures of these autogen models match the provided arguments to avoid pyright __init__ errors.
> - **Reason this comment was not posted:**
> Comment looked like it was already resolved.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_mF230drijuURSWMn`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3164572483,2947439556,obi1kenobi,COMMENTED,2025-06-21T00:04:53Z,
3116524279,2895304075,gemini-code-assist[bot],COMMENTED,2025-06-04T05:49:00Z,"Hello @MervinPraison, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

## Summary of Changes
As Gemini, I've reviewed this pull request titled ""Fix redundant tool invocation"". The primary goal of this change is to address what appears to be a redundant block of code within the `chat` method of the `Agent` class. This block was responsible for processing tool calls returned by the initial API response, executing those tools, and then making a second call to `_chat_completion`. The author's description and the code diff suggest that this tool call handling and subsequent API call were likely already being managed within the `_chat_completion` method itself, making this section unnecessary and potentially inefficient.

### Highlights
* **Code Removal**: A significant block of code (lines 1015-1051) has been removed from the `chat` method in `src/praisonai-agents/praisonaiagents/agent/agent.py`. This removed code handled tool call processing and triggered a second call to `_chat_completion`.
* **Efficiency Improvement**: By removing the redundant tool processing and the second API call, the `chat` method should now be more efficient, especially in scenarios involving tool use.

### Changelog
* **src/praisonai-agents/praisonaiagents/agent/agent.py**
  * Removed redundant tool call processing logic and a second `_chat_completion` call from the `chat` method (lines 1015-1051).

<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.
</details>


<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>


[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configure Gemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).

---

> Code block removed,
> Tool calls handled just once now,
> Agent runs faster.

"
3116524279,2895305044,gemini-code-assist[bot],COMMENTED,2025-06-04T05:49:36Z,"## Code Review
This pull request effectively addresses the `TODO` comment regarding a redundant tool invocation block in the `Agent.chat` method. Removing these 36 lines simplifies the `chat` method and prevents duplicate execution of tools, which should improve both clarity and efficiency. This change also seems to align with the goal mentioned in `src/praisonai-agents/praisonaiagents/llm/llm.py:21` to restructure and avoid duplicate calls.

Well done on identifying and removing this redundancy!

One point to note from your PR description is the `pytest -q` failure due to a `KeyboardInterrupt`. While this might be unrelated to the code changes in this PR (as this change removes code, potentially speeding things up), it would be good to investigate and ensure the test suite passes cleanly before merging.

### Summary of Findings
* **Code Simplification and Redundancy Removal**: The primary change in this PR successfully removes a redundant block of code responsible for tool invocation. This was identified by a `TODO` comment and its removal simplifies the `Agent.chat` method and prevents duplicate tool executions. This is a positive change for code maintainability and efficiency.

### Merge Readiness
The code changes in this pull request appear to be correct and beneficial, simplifying the codebase and removing redundancy. The change itself is ready for merging. However, as noted in the pull request description, there's a `pytest -q` failure due to `KeyboardInterrupt`. It's recommended to investigate this test failure to ensure overall stability, even if it's unrelated to these specific code modifications. I am not authorized to approve pull requests, so please ensure further review and approval from other team members."
3071076936,2859412960,ellipsis-dev[bot],COMMENTED,2025-05-21T23:57:57Z,
3071076936,2859413851,ellipsis-dev[bot],COMMENTED,2025-05-21T23:58:47Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to eaf8c2c7eb7e99ff7edbd895c7992da8fa92723b in <ellipsistime>2 minutes and 16 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `4171` lines of code in `29` files
> - Skipped `0` files when reviewing.
> - Skipped posting `5` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/promptfoo/settings/code-review) and [rules](https://app.ellipsis.dev/promptfoo/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>src/app/src/pages/eval/components/ResultsView.test.ts:39</code></summary>
> 
> - **Draft comment:** 
> Duplicate mocks for the '@app/utils/api' module are defined here (lines 39–44). The first mock’s implementation does not return a value (missing a return statement), and then it is re‐mocked below. Consider consolidating these mocks into one to avoid unexpected behavior.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>src/evaluator.ts:380</code></summary>
> 
> - **Draft comment:** 
> Non‐null assertion operators (using the '!' operator) are used when updating token usage (e.g. completionDetails.acceptedPrediction!). Avoid using the non‐null assertion operator; instead initialize these fields with default values or perform explicit null checks to ensure safety.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>src/server/routes/eval.ts:392</code></summary>
> 
> - **Draft comment:** 
> Error responses are logged with detailed messages via dedent. Ensure that these logs do not expose sensitive information, especially in production environments.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>drizzle/0012_late_marten_broadcloak.sql:1</code></summary>
> 
> - **Draft comment:** 
> Typographical issue: The text ""--> statement-breakpoint"" at the end of the SQL statement appears to be a leftover debugging comment and may confuse future readers. Consider removing or properly formatting it as a SQL comment.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 0% vs. threshold = 50% The comment author misunderstood that ""--> statement-breakpoint"" is actually valid and intentional Drizzle ORM syntax used to separate SQL statements in migration files. This is not a typographical issue or debugging leftover. The comment is suggesting to remove something that is actually required for proper functioning. Could there be a case where this syntax is actually incorrect or could be formatted better within Drizzle's conventions? No, this is standard Drizzle syntax for migrations and is correctly formatted according to their documentation and tooling. The comment should be deleted as it incorrectly identifies a valid Drizzle ORM syntax feature as a mistake.
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>src/database/tables.ts:118</code></summary>
> 
> - **Draft comment:** 
> Typo: The index name 'evalIdTestIdxIdx' appears to have an extra 'Idx' (and similarly in the index name string 'eval_result_eval_id_test_idx_idx'). Consider renaming it to something like 'evalIdTestIdx' to avoid the duplication.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 10% vs. threshold = 50% While the comment is technically correct about the redundancy, this seems like a very minor stylistic issue. The index will work exactly the same regardless of its name. There's no clear standard in the codebase for index naming. This kind of nitpick about naming doesn't require a code change and doesn't impact functionality. The redundant suffix could make the code slightly less readable and maintainable. Consistent naming conventions can be important for code quality. While naming consistency is good, this is too minor of an issue to warrant a comment. The index name is still clear and functional despite the redundancy. Delete this comment as it's a minor stylistic issue that doesn't require a code change and doesn't impact functionality.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_9Prk1OyMW560feDz`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=promptfoo%2Fpromptfoo&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/promptfoo/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/promptfoo/code-review/rules).</sup>"
3071076936,2859418475,sourcery-ai[bot],COMMENTED,2025-05-22T00:03:21Z,"Hey @sklein12 - I've reviewed your changes - here's some feedback:

- Eval.getTablePage builds raw SQL using string interpolation—consider using parameterized queries or a query builder to sanitize inputs and improve maintainability.
- ResultsTable has grown quite large with intricate pagination and filtering effects—extracting that logic into custom hooks or smaller components could make it more readable and testable.
- useTableStore mixes state and side-effects (fetchEvalData), making it harder to reason about—consider moving fetch logic into a dedicated service or hook to simplify the store.

<details>
<summary>Here's what I looked at during the review</summary>

- 🟡 **General issues**: 2 issues found
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3071076936,2859558076,ellipsis-dev[bot],COMMENTED,2025-05-22T02:00:04Z,
3071076936,2864820965,will-holley,COMMENTED,2025-05-23T15:26:03Z,
3071076936,2864862640,sklein12,COMMENTED,2025-05-23T15:38:35Z,
3071076936,2864874096,will-holley,COMMENTED,2025-05-23T15:41:39Z,
3071076936,2864914176,will-holley,COMMENTED,2025-05-23T15:54:12Z,
3125277631,2925718463,leoafarias,APPROVED,2025-06-13T17:42:12Z,LGTM
3143079381,2924493802,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-13T11:31:17Z,"## Pull Request Overview

Support for multi-language projects by allowing multiple languages in project configuration, managing per-language servers, and updating symbol search and tests to leverage language-specific behavior.

- ProjectConfig now handles a list of languages (with backward-compatible `language` property) and autogenerates multiple detected languages.
- Introduced `MultiLanguageServer` to start, route, and aggregate requests across multiple LSP servers.
- Updated symbol manager, agent, tooling, and tests to accept an optional language parameter for symbol searches.

### Reviewed Changes

Copilot reviewed 8 out of 8 changed files in this pull request and generated no comments.

<details>
<summary>Show a summary per file</summary>

| File                                               | Description                                                                                   |
|----------------------------------------------------|-----------------------------------------------------------------------------------------------|
| test/serena/test_multi_language_project.py         | Added integration test for symbol lookup across both Python and TypeScript modules.          |
| test/resources/repos/multi/test_repo/ts_mod.ts     | Sample TypeScript module defining `ts_func` for multi-language test repository.               |
| test/resources/repos/multi/test_repo/py_mod.py     | Sample Python module defining `py_func` for multi-language test repository.                   |
| test/resources/repos/multi/test_repo/.serena/project.yml | Defined `languages` list with both `python` and `typescript` for the test project.            |
| src/serena/symbol.py                               | Updated `SymbolManager` to accept `MultiLanguageServer` and propagate `language` to searches. |
| src/serena/resources/project.template.yml          | Switched template key from `language` to `languages` and updated comment to include `php`.    |
| src/serena/multi_language_server.py                | New class to manage, start, and route calls to multiple `SyncLanguageServer` instances.       |
| src/serena/agent.py                                | Refactored agent to spin up multiple language servers and pass `language` param to tools.     |
</details>



<details>
<summary>Comments suppressed due to low confidence (3)</summary>

**src/serena/agent.py:888**
* [nitpick] Consider making a shallow copy of `project_config.ignored_paths` before extending to avoid mutating the original configuration list and introducing side effects.
```
ignored_paths.extend(spec.patterns)
```
**src/serena/multi_language_server.py:154**
* Merging overview dictionaries with `dict.update` may overwrite entries if different language servers return the same keys; consider namespacing per language or merging values into lists to prevent data loss.
```
results.update(server.request_overview(within_relative_path))
```
**src/serena/symbol.py:491**
* [nitpick] MultiLanguageServer is already imported relatively earlier; remove this redundant absolute import to reduce clutter and avoid confusion.
```
from serena.multi_language_server import MultiLanguageServer
```
</details>

"
3110811595,2889117393,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-02T16:17:46Z,"## Pull Request Overview

This PR updates the error handling in the PDF splitting endpoint to throw IllegalArgumentExceptions instead of returning 400 responses directly, in order to leverage global error handling.  
- Changed error handling for negative bookmark levels.  
- Updated behavior when no PDF outline is found.


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**src/main/java/stirling/software/SPDF/controller/api/SplitPdfByChaptersController.java:134**
* Verify that throwing an IllegalArgumentException for negative bookmark levels integrates seamlessly with the global error handling mechanism, ensuring the correct HTTP status code is returned.
```
throw new IllegalArgumentException(""Invalid bookmark level"");
```
**src/main/java/stirling/software/SPDF/controller/api/SplitPdfByChaptersController.java:142**
* [nitpick] Ensure that throwing an IllegalArgumentException when no outline is found is compatible with the global error handling; adding contextual information in the message might improve debugging.
```
throw new IllegalArgumentException(""No outline found"");
```
</details>

"
3110811595,2889224897,reecebrowne,APPROVED,2025-06-02T16:48:28Z,
3110811595,2890040469,DarioGii,APPROVED,2025-06-02T21:50:00Z,
3130847828,2911651641,seratch,APPROVED,2025-06-10T00:07:27Z,
3080749324,2864467413,ihrpr,CHANGES_REQUESTED,2025-05-23T13:39:57Z,"Thank you for working on this fix for issue #577. While the PR addresses the cleanup order issue, there are several concerns that need to be addressed:

  1. task cleanup to prevent memory leaks
  2. document the limitations of the CompatTaskGroup clearly
  3. Add comprehensive tests for the new compatibility layer
  5.  do we need to have this broad change, targeted fix would be safer"
3160287486,2942963864,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-19T13:08:48Z,"## Pull Request Overview

This PR adds support for the Internet Society Pulse source using the rest_api helpers. Key changes include adding a new PulseSource class in sources.py, creating the pulse_source implementation in the pulse module, and updating the factory to register the new source.
- Added new PulseSource in ingestr/src/sources.py with methods for handling incrementality and building the DLT source.
- Introduced pulse_source in ingestr/src/pulse/__init__.py to configure endpoint resources.
- Updated ingestr/src/factory.py to wire the PulseSource into the source mapping.

### Reviewed Changes

Copilot reviewed 3 out of 3 changed files in this pull request and generated no comments.

| File                         | Description                                                          |
| ---------------------------- | -------------------------------------------------------------------- |
| ingestr/src/sources.py        | Added PulseSource class and streamlined error message formatting     |
| ingestr/src/pulse/__init__.py | Implemented the pulse_source function for constructing API resources   |
| ingestr/src/factory.py        | Registered the new PulseSource with its corresponding source alias     |


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**ingestr/src/sources.py:2795**
* Ensure that MissingValueError is properly imported or defined in this module to prevent a runtime NameError.
```
            raise MissingValueError(""token"", ""Internet Society Pulse"")
```
**ingestr/src/sources.py:2813**
* Ensure that UnsupportedResourceError is properly imported or defined in this module to prevent a runtime NameError.
```
                raise UnsupportedResourceError(metric, ""Internet Society Pulse"")
```
</details>

"
3160287486,2953854762,batikankarakan,DISMISSED,2025-06-24T13:29:16Z,
3160287486,2954218543,batikankarakan,APPROVED,2025-06-24T14:49:16Z,
3137583236,2920841875,batikankarakan,APPROVED,2025-06-12T11:58:58Z,
3137583236,2920843652,jbrand-dsp,APPROVED,2025-06-12T11:59:36Z,
3071706518,2848923738,lunary-bot,APPROVED,2025-05-18T12:25:21Z,
3163859982,2946787752,coderabbitai[bot],COMMENTED,2025-06-20T16:41:47Z,"**Actionable comments posted: 1**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>app/web_ui/src/routes/+layout.svelte (1)</summary><blockquote>

`26-35`: **Consider extracting common logic to reduce duplication.**

Both navigation handlers have identical logic for route extraction and URL construction. Consider extracting this into a helper function.



```diff
+ const getRouteInfo = () => {
+   const route_id = get(page).route.id || 'unknown'
+   const url = window.location.origin + (route_id.startsWith('/') ? route_id : '/' + route_id)
+   return { route_id, url }
+ }
+
  if (browser) {
    beforeNavigate(() => {
-     const route_id = get(page).route.id
-     const url = window.location.origin + route_id
+     const { route_id, url } = getRouteInfo()
      posthog.capture(""$pageleave"", { $current_url: url, $pathname: route_id })
    })
    afterNavigate(() => {
-     const route_id = get(page).route.id
-     const url = window.location.origin + route_id
+     const { route_id, url } = getRouteInfo()
      posthog.capture(""$pageview"", { $current_url: url, $pathname: route_id })
    })
  }
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 9f31b3a407d5e920c665fb9290c1caee0e6a2c6c and 1cd2ebe188212799819c6c0abd9e02ec376dec33.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `app/web_ui/src/routes/+layout.svelte` (1 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (10)</summary>

* GitHub Check: Build Desktop Apps (macos-latest)
* GitHub Check: Build Desktop Apps (macos-13)
* GitHub Check: Build Desktop Apps (ubuntu-22.04-arm)
* GitHub Check: Build Desktop Apps (windows-latest)
* GitHub Check: Build Desktop Apps (ubuntu-22.04)
* GitHub Check: Build, Typecheck, and Test Python (3.11)
* GitHub Check: Web UI Code Format, Lint, Typecheck, Test, and Build
* GitHub Check: Build, Typecheck, and Test Python (3.10)
* GitHub Check: Build, Typecheck, and Test Python (3.12)
* GitHub Check: Build, Typecheck, and Test Python (3.13)

</details>

<details>
<summary>🔇 Additional comments (2)</summary><blockquote>

<details>
<summary>app/web_ui/src/routes/+layout.svelte (2)</summary>

`18-18`: **LGTM! Import addition is correct.**

The page store import is properly added and necessary for accessing route information in the navigation handlers.

---

`26-35`: ```shell
#!/bin/bash
# Extend ripgrep to recognize .svelte files and search for sanitization utilities
rg --type-add 'svelte:*.svelte' -t svelte -i 'sanitiz|clean.*route|route.*clean'

# Search for all PostHog capture calls including context in .svelte files
rg --type-add 'svelte:*.svelte' -t svelte -e 'posthog\.capture' -A2 -B2
```

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3119899755,2898927131,coderabbitai[bot],COMMENTED,2025-06-05T05:33:29Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>src/tools/workflow/create.ts (1)</summary><blockquote>

`35-42`: **Consider adding validation for tags parameter consistency.**

The validation for `parsedNodes` and `parsedConnections` is appropriate, but `parsedTags` lacks similar validation. According to the tool definition (lines 101-107), tags should be an array of strings.


Consider adding validation for the tags parameter:

```diff
 // Validate connections if provided
 if (parsedConnections && typeof parsedConnections !== 'object') {
   throw new N8nApiError('Parameter ""connections"" must be an object');
 }
+
+// Validate tags if provided
+if (parsedTags && !Array.isArray(parsedTags)) {
+  throw new N8nApiError('Parameter ""tags"" must be an array');
+}
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between d274146fb0a0de0fe15dcfb6d4c4d2f06e4b496a and 3ad9db0b952288aaccc088fc01fd3f012911fee5.

</details>

<details>
<summary>📒 Files selected for processing (3)</summary>

* `src/tools/workflow/create.ts` (3 hunks)
* `src/utils/json.ts` (1 hunks)
* `tests/unit/utils/json.test.ts` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (3)</summary>

<details>
<summary>src/utils/json.ts (1)</summary><blockquote>

<details>
<summary>src/errors/index.ts (1)</summary>

* `safeJsonParse` (68-74)

</details>

</blockquote></details>
<details>
<summary>src/tools/workflow/create.ts (2)</summary><blockquote>

<details>
<summary>src/utils/json.ts (1)</summary>

* `parseIfJsonString` (7-11)

</details>
<details>
<summary>src/errors/index.ts (1)</summary>

* `N8nApiError` (19-36)

</details>

</blockquote></details>
<details>
<summary>tests/unit/utils/json.test.ts (1)</summary><blockquote>

<details>
<summary>src/utils/json.ts (1)</summary>

* `parseIfJsonString` (7-11)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>🔇 Additional comments (5)</summary><blockquote>

<details>
<summary>src/utils/json.ts (1)</summary>

`7-11`: **Well-designed utility function with robust error handling.**

The implementation correctly handles all input types and edge cases:
- Non-string inputs are returned unchanged
- Valid JSON strings are parsed successfully
- Invalid JSON strings fall back to the original value
- No exceptions are thrown due to the use of `safeJsonParse`

</details>
<details>
<summary>tests/unit/utils/json.test.ts (1)</summary>

`4-20`: **Comprehensive test coverage for all code paths.**

The test suite effectively covers:
- ✅ Valid JSON string parsing
- ✅ Invalid JSON string fallback behavior  
- ✅ Non-string input pass-through

All assertions are appropriate and the test structure follows Jest best practices.

</details>
<details>
<summary>src/tools/workflow/create.ts (3)</summary>

`10-10`: **Proper import of the new utility function.**

The import statement correctly brings in the `parseIfJsonString` utility for use in workflow creation.

---

`26-28`: **Effective use of the parsing utility for JSON string inputs.**

The parsing is applied to the appropriate parameters (`nodes`, `connections`, `tags`) that may be provided as JSON strings, enabling flexible input handling while maintaining type safety through subsequent validation.

---

`51-53`: **Correct assignment of parsed values to workflow data.**

The workflow data object correctly uses the parsed values instead of the raw input, ensuring that JSON strings are properly converted to their respective data types before workflow creation.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3119899755,2904284020,coderabbitai[bot],COMMENTED,2025-06-06T08:59:06Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>tests/unit/tools/workflow/create-handler.test.ts (1)</summary><blockquote>

`19-39`: **Consider improving type safety for mock injection.**

The test correctly verifies JSON string parsing for nodes, connections, and tags. However, the type assertion on line 22 could be improved.



Consider using a more type-safe approach for injecting the mock service:

```diff
-    const handler = new CreateWorkflowHandler();
-    const service = new MockApiService();
-    (handler as any).apiService = service as any;
+    const handler = new CreateWorkflowHandler();
+    const service = new MockApiService();
+    // Use Object.defineProperty for cleaner mock injection
+    Object.defineProperty(handler, 'apiService', {
+      value: service,
+      writable: true
+    });
```

</blockquote></details>
<details>
<summary>src/utils/json.ts (1)</summary><blockquote>

`7-21`: **Consider improving type safety with generics.**

The function logic is correct and handles all edge cases properly. However, the type signature could be enhanced for better type safety.



Consider using generics to provide better type inference:

```diff
-export function parseIfJsonString(
-  value: any,
-  options?: { throwOnError?: boolean; paramName?: string },
-): any {
+export function parseIfJsonString<T = any>(
+  value: T | string,
+  options?: { throwOnError?: boolean; paramName?: string },
+): T | any {
```

This would provide better type inference for callers while maintaining the same runtime behavior.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 04ebb54326d9d7b3cdaed211ba9dc28d3e4fb734 and d86ee517879e2cf4493781f1226c0708f9fad77d.

</details>

<details>
<summary>📒 Files selected for processing (5)</summary>

* `docs/api/workflow-tools.md` (1 hunks)
* `src/tools/workflow/create.ts` (3 hunks)
* `src/utils/json.ts` (1 hunks)
* `tests/unit/tools/workflow/create-handler.test.ts` (1 hunks)
* `tests/unit/utils/json.test.ts` (1 hunks)

</details>

<details>
<summary>✅ Files skipped from review due to trivial changes (1)</summary>

* docs/api/workflow-tools.md

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (2)</summary>

* src/tools/workflow/create.ts
* tests/unit/utils/json.test.ts

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>src/utils/json.ts (1)</summary><blockquote>

<details>
<summary>src/errors/index.ts (2)</summary>

* `safeJsonParse` (68-74)
* `N8nApiError` (19-36)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>🔇 Additional comments (8)</summary><blockquote>

<details>
<summary>tests/unit/tools/workflow/create-handler.test.ts (5)</summary>

`1-2`: **LGTM: Clean imports and test setup.**

The Jest imports and handler import are properly structured for the test file.

---

`4-6`: **LGTM: Well-structured mock service.**

The MockApiService properly mocks the createWorkflow method with Jest's mock function, returning a realistic response structure.

---

`13-17`: **LGTM: Proper test environment setup.**

Environment variables are correctly set up in beforeEach to ensure each test has the required N8N_API_URL and N8N_API_KEY configuration.

---

`41-54`: **LGTM: Comprehensive error handling test.**

This test properly verifies that the handler returns an appropriate error when nodes parameter doesn't parse to an array, which aligns with the expected validation logic.

---

`56-69`: **LGTM: Invalid JSON error handling test.**

This test correctly verifies error handling for malformed JSON input, ensuring the system gracefully handles parsing failures with descriptive error messages.

</details>
<details>
<summary>src/utils/json.ts (3)</summary>

`1-1`: **LGTM: Proper imports for JSON parsing utility.**

The imports correctly bring in the `safeJsonParse` function and `N8nApiError` class needed for the implementation.

---

`3-6`: **LGTM: Clear and concise documentation.**

The JSDoc comment accurately describes the function's behavior and return value logic.

---

`11-21`: **LGTM: Robust implementation with proper error handling.**

The implementation correctly:
- Returns non-string values unchanged
- Uses `safeJsonParse` to handle malformed JSON safely
- Provides configurable error throwing with descriptive messages
- Falls back to returning the original string when parsing fails and `throwOnError` is false

This aligns perfectly with the PR objectives for handling JSON string inputs in workflow creation.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3104252319,2882488659,greptile-apps[bot],COMMENTED,2025-05-30T20:52:56Z,"
## PR Summary

Updates OpenAI chat endpoints to use `/v1/responses` instead of `/v1/chat/completions`, but introduces a critical issue with endpoint validity.

- The new endpoint path `/v1/responses` appears to be incorrect as it's not documented in OpenAI's API reference, which will likely cause API failures
- Both `OpenAIChatEndpoint` and `OpenAIChatStreamingEndpoint` need to maintain the original `/v1/chat/completions` endpoint path
- Comment in code incorrectly references `https://platform.openai.com/docs/api-reference/responses/create` which doesn't exist
- Request and response structures remain unchanged but will fail due to invalid endpoint

<sub>2 file(s) reviewed, 4 comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=onit_251)</sub>"
3079735405,2857167458,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-21T10:26:57Z,"## Pull Request Overview

Fix fallback logic in `is_autocast_available` to avoid `AttributeError` when `torch.cpu` is absent, and ensure related tests cover this scenario  
- Add a guard to check for `torch.cpu` before accessing `torch.cpu.amp`  
- Verify `get_total_memory_windows` tests (no changes shown here)


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**src/tabpfn/utils.py:192**
* Add a unit test for the branch where `torch.cpu` is missing (e.g., monkeypatch `torch.cpu = None`) to verify `is_autocast_available` returns `False` without raising an exception.
```
and (
```
</details>

"
3114602043,2893225417,greptile-apps[bot],COMMENTED,2025-06-03T16:11:00Z,"
## PR Summary

Added Discord integration to the Onit application, including menu bar item and toolbar button with shared invite link functionality.

- `macos/Onit/Menu Bar/Content Rows/MenuJoinDiscord.swift`: Text view missing required `.foregroundStyle(.FG)` for dark mode compatibility
- `macos/Onit/Menu Bar/Content Rows/MenuJoinDiscord.swift`: URL opening logic in view body will execute on render instead of tap - should be moved to button action
- `macos/Onit/Menu Bar/Content Rows/MenuJoinDiscord.swift`: Discord invite link appears temporary (ends in U5g6ABkv) - should use permanent invite
- `macos/Onit/UI/Content/ToolbarRight.swift`: Consider extracting Discord URL to a shared constant to avoid duplication with MenuJoinDiscord

<sub>4 file(s) reviewed, 4 comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=onit_256)</sub>"
3114897844,2897223969,ChrisHuie,APPROVED,2025-06-04T15:33:01Z,
3076155796,2854593325,sourcery-ai[bot],COMMENTED,2025-05-20T15:03:30Z,"Hey @mldangelo - I've reviewed your changes - here's some feedback:

- Add or mock the missing @smithy/node-http-handler dependency (or update the fetchWithProxy mock) so the new vision grading tests pass.
- Refine the GradingConfig/llmRubric types and JSDoc to explicitly allow object values for rubricPrompt, instead of relying on runtime JSON.stringify logic in the handler.
- Centralize the YAML snippet for the image-based rubric prompt (e.g. in a shared example file) so the site docs and example configs don’t drift out of sync.

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3134783539,2914983742,coderabbitai[bot],COMMENTED,2025-06-10T20:40:58Z,"**Actionable comments posted: 6**

<details>
<summary>♻️ Duplicate comments (1)</summary><blockquote>

<details>
<summary>test/providers/openai/util.test.ts (1)</summary><blockquote>

`246-250`: **Same remark applies to the snapshot model test**

See previous comment – pulling the cost from the single source of truth avoids drift.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: ASSERTIVE**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 7724d2cf57a6042e8a3a7e962778fe98e9bfffa4 and 1879d50fb54c0f1cdea8e0f0d06691ce67e97dd5.

</details>

<details>
<summary>📒 Files selected for processing (5)</summary>

* `site/docs/providers/openai.md` (5 hunks)
* `src/providers/openai/responses.ts` (1 hunks)
* `src/providers/openai/util.ts` (1 hunks)
* `test/providers/openai/responses.test.ts` (2 hunks)
* `test/providers/openai/util.test.ts` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>test/providers/openai/util.test.ts (1)</summary><blockquote>

<details>
<summary>src/providers/openai/util.ts (1)</summary>

* `calculateOpenAICost` (285-337)

</details>

</blockquote></details>

</details><details>
<summary>🪛 LanguageTool</summary>

<details>
<summary>site/docs/providers/openai.md</summary>

[style] ~171-~171: This is not the usual sequence for adjectives that have no special emphasis.
Context: ...like `o1`, `o3-mini`, and `o3-pro`, are new large language models trained with reinforcem...

(EN_ADJ_ORDER)

---

[grammar] ~171-~171: This noun or verb “problem-solving” is spelled with a hyphen.
Context: ...easoning. These models excel in complex problem solving, coding, scientific reasoning, and mult...

(PROBLEM_SOLVE_HYPHEN)

---

[misspelling] ~171-~171: This word is normally spelled as one.
Context: ...ving, coding, scientific reasoning, and multi-step planning for agentic workflows.  When u...

(EN_COMPOUNDS_MULTI_STEP)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (22)</summary>

* GitHub Check: Tusk Test Runner
* GitHub Check: Tusk Tester
* GitHub Check: Share Test
* GitHub Check: Test on Node 24.x and macOS-latest
* GitHub Check: Build Docs
* GitHub Check: Test on Node 20.x and ubuntu-latest
* GitHub Check: webui tests
* GitHub Check: Redteam Custom Enterprise Server
* GitHub Check: Test on Node 18.x and windows-latest
* GitHub Check: Test on Node 24.x and ubuntu-latest
* GitHub Check: Test on Node 20.x and windows-latest
* GitHub Check: Test on Node 18.x and macOS-latest
* GitHub Check: Test on Node 22.x and macOS-latest
* GitHub Check: Redteam
* GitHub Check: Test on Node 20.x and macOS-latest
* GitHub Check: Test on Node 18.x and ubuntu-latest
* GitHub Check: Build on Node 22.x
* GitHub Check: Build on Node 24.x
* GitHub Check: Build on Node 20.x
* GitHub Check: Build on Node 18.x
* GitHub Check: Style Check
* GitHub Check: Analyze (javascript-typescript)

</details>

<details>
<summary>🔇 Additional comments (5)</summary><blockquote>

<details>
<summary>src/providers/openai/responses.ts (1)</summary>

`28-30`: **Model list updated correctly**

`o3-pro` variants are now recognised by the provider – looks good and keeps behaviour consistent with `isReasoningModel()`.

</details>
<details>
<summary>test/providers/openai/responses.test.ts (1)</summary>

`25-28`: **Coverage extended – nice**

Adding `o3-pro` to the supported-model assertion keeps the safety-net current.

</details>
<details>
<summary>site/docs/providers/openai.md (3)</summary>

`171-171`: **Approve inclusion of `o3-pro`**  
The narrative correctly references `o3-pro` alongside existing reasoning models.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[style] ~171-~171: This is not the usual sequence for adjectives that have no special emphasis.
Context: ...like `o1`, `o3-mini`, and `o3-pro`, are new large language models trained with reinforcem...

(EN_ADJ_ORDER)

---

[grammar] ~171-~171: This noun or verb “problem-solving” is spelled with a hyphen.
Context: ...easoning. These models excel in complex problem solving, coding, scientific reasoning, and mult...

(PROBLEM_SOLVE_HYPHEN)

---

[misspelling] ~171-~171: This word is normally spelled as one.
Context: ...ving, coding, scientific reasoning, and multi-step planning for agentic workflows.  When u...

(EN_COMPOUNDS_MULTI_STEP)

</details>

</details>

---

`928-928`: **Approve addition of `o3-pro` to supported Responses models**  
The Responses API models list now includes `o3-pro` with an accurate description.

---

`1086-1086`: **Approve update to reasoning models list in Responses API usage**  
The list of reasoning models now includes `o3-pro`, matching the new model support introduced in this PR.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3134783539,2915296191,mldangelo,COMMENTED,2025-06-11T00:09:32Z,
3134783539,2915330704,mldangelo,APPROVED,2025-06-11T00:35:49Z,
3081213025,2898270213,chance-wnb,APPROVED,2025-06-04T22:32:23Z,Looks great. Thank you!
3071155018,2848568209,sourcery-ai[bot],COMMENTED,2025-05-18T01:12:10Z,"Hey @mldangelo - I've reviewed your changes - here's some feedback:

- Update the project’s test scripts or dev dependencies to include Vitest (or remove Jest references) so the new Vitest-based tests run without errors.
- Add evaluateOptions to the evalConfig store’s initial state and its TypeScript interface to ensure it’s always defined and avoid potential undefined behavior.

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3070860351,2848325149,ellipsis-dev[bot],COMMENTED,2025-05-17T15:27:03Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 7702e4a470ba941bafae297aeec3b432cf496baf in <ellipsistime>1 minute and 23 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `172` lines of code in `2` files
> - Skipped `0` files when reviewing.
> - Skipped posting `4` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>cli/src/julep_cli/models.py:81</code></summary>
> 
> - **Draft comment:** 
> Good refactor: CreateToolRequest now uses strong type definitions (FunctionDef, ApiCallDef, etc.) instead of Any. Ensure these models fully cover all expected fields.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>cli/src/julep_cli/tool_models.py:20</code></summary>
> 
> - **Draft comment:** 
> Consider using Optional[str] for 'name' and 'description' in FunctionDef instead of Any for clearer type expectations.
> - **Reason this comment was not posted:**
> Confidence changes required: `50%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>cli/src/julep_cli/tool_models.py:42</code></summary>
> 
> - **Draft comment:** 
> The alias usage for 'schema_' (alias 'schema') and 'json_' (alias 'json') is clever; ensure consumers are aware of these mappings and that documentation reflects the alias behavior.
> - **Reason this comment was not posted:**
> Confidence changes required: `50%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>cli/src/julep_cli/models.py:25</code></summary>
> 
> - **Draft comment:** 
> The docstring for the 'name' field appears to start on this line but is not properly closed. Please add the closing triple quotes to complete the field's documentation.
> - **Reason this comment was not posted:**
> Comment was on unchanged code.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_9cFB6ZpjkcDp80Ct`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3144686827,2926320762,stopachka,APPROVED,2025-06-13T20:32:08Z,Woohoo!
3114878765,2893915283,bcabanes,APPROVED,2025-06-03T19:55:37Z,
3119910557,2898928895,greptile-apps[bot],COMMENTED,2025-06-05T05:35:12Z,"<sub>1 file(s) reviewed, no comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=promptfoo_4329)</sub>"
3119910557,2898931727,sourcery-ai[bot],COMMENTED,2025-06-05T05:36:42Z,"Hey @mldangelo - I've reviewed your changes - here's some feedback:

- Consider using Vitest’s vi.stubEnv to mock VITE_PROMPTFOO_DISABLE_TELEMETRY instead of mutating import.meta.env directly for cleaner environment isolation.
- Rather than only asserting callApi was invoked, also verify it’s called with the expected event type and properties to make the test more robust.

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3157800721,2940976936,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-18T23:02:30Z,"## Pull Request Overview

This PR enhances static middleware behavior by ignoring 404 errors from express.static and adjusting client-side routing to return index.html as a catchall.  
- Added middleware to bypass NotFoundError from express.static  
- Switched from an app.get catchall to an app.use handler for serving index.html


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**src/server/server.ts:253**
* Using app.use as a catchall route may serve index.html for all HTTP methods, including non-GET requests. Consider using app.get to restrict the route to GET requests if that is the intended behavior for client-side routing.
```
  app.use((req: Request, res: Response): void => {
```
</details>

"
3157800721,2940978953,cursor[bot],COMMENTED,2025-06-18T23:04:26Z,"<details open>
<summary><h3>Bug: SPA Routing Breaks Non-GET Requests</h3></summary>

The catch-all route's change from `app.get('/*splat', ...)` to `app.use(...)` causes it to handle all HTTP methods instead of only GET. Consequently, non-GET requests (e.g., POST, PUT, DELETE) to non-existent routes now incorrectly return `index.html` with a 200 status instead of a proper 404 error. This masks API errors, breaks expected API behavior, and is inconsistent with typical SPA routing where `index.html` should only be served for client-side navigation via GET requests.

<p></p>

<details>
<summary><code>src/server/server.ts#L252-L255</code></summary>

https://github.com/promptfoo/promptfoo/blob/b87548eb088f21b3c186e0f0cbb20da89f5aaae3/src/server/server.ts#L252-L255

</details>

<a href=""https://cursor.com/open?data=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImJ1Z2JvdC12MSJ9.eyJ2ZXJzaW9uIjoxLCJ0eXBlIjoiQlVHQk9UX0ZJWF9JTl9DVVJTT1IiLCJkYXRhIjp7InJlZGlzS2V5IjoiYnVnYm90OjcwMmZiZWQ4LTVkZTYtNDIxYy1hNmJkLTVhM2Q5MjJiNzI3NCIsImVuY3J5cHRpb25LZXkiOiJmaDc0aWFXX2dRd0pkdl9fSDBnOGVET2N1X0Y2Y2c3aG53c3pSeTJMeUZNIiwiYnJhbmNoIjoiY29kZXgvZGVidWctbm90Zm91bmRlcnJvci1pbi1wcm9tcHRmb28tdmlldy0jNDUzMyJ9LCJpYXQiOjE3NTAyODc4NjYsImV4cCI6MTc1MDg5MjY2Nn0.aCwQLOTaEjn-YapCvpOgMdeLM0IrkYuF_3GY4jjB7ackBamuN5Sh2-Shu_qERr8bdWfXiDcyxVaKEEJG1ZYeqdHNi_Pp5Vbzh3rOwROf2mciNowa8ehifgeZrnG8pB5TNKdtbk9XzLcGK1ycDKHycIEawCj4I8KLQ1jD27jzmjDBgMRpAe1ww9y9IFsC8GiKhi2Qwba79aA-GJLHxU0Usoqr_3f9_c7wUAKFLDfYNCM8wqDiNwoS8g043bhLAgqNccDFjicbOlDjmC4Ji5V4Va6OkYqzjcYUkvZ87-nrW_8K5Xft1FjV-fByqRerbJ2mkJMkO2w0NXKZu0ElXUaerA"">Fix in Cursor</a>

</details>

---


**BugBot free trial expires on July 22, 2025**
You have used $0.00 of your $50.00 spend limit so far. Manage your spend limit in the [Cursor dashboard](https://cursor.com/dashboard?tab=bugbot).

_Was this report helpful? Give feedback by reacting with 👍 or 👎_
"
3157800721,2940979362,cursor[bot],COMMENTED,2025-06-18T23:04:50Z,"<details open>
<summary><h3>Bug: API Errors Masked by Client-Side Routing</h3></summary>

The client-side routing fallback was changed from `app.get` to `app.use`, causing it to handle all HTTP methods (POST, PUT, DELETE, etc.) instead of just GET. This results in non-GET requests to non-existent API endpoints returning `index.html` (with a 200 OK status) instead of a proper 404 error. This behavior masks API errors, violates REST conventions, and breaks API client expectations, hindering debugging, as client-side routing fallbacks typically only handle GET requests.

<p></p>

<details>
<summary><code>src/server/server.ts#L252-L255</code></summary>

https://github.com/promptfoo/promptfoo/blob/b87548eb088f21b3c186e0f0cbb20da89f5aaae3/src/server/server.ts#L252-L255

</details>

<a href=""https://cursor.com/open?data=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImJ1Z2JvdC12MSJ9.eyJ2ZXJzaW9uIjoxLCJ0eXBlIjoiQlVHQk9UX0ZJWF9JTl9DVVJTT1IiLCJkYXRhIjp7InJlZGlzS2V5IjoiYnVnYm90OjRlMDFiY2U0LTA1YmItNDI2ZC1hNGZkLTNlNTVjZmMwOWRmOCIsImVuY3J5cHRpb25LZXkiOiJUOExNUGdYdVhkNFlSUlZONjY3eUZDRjJ3ZzM5N1FmT1NycXJkR1N6RTFzIiwiYnJhbmNoIjoiY29kZXgvZGVidWctbm90Zm91bmRlcnJvci1pbi1wcm9tcHRmb28tdmlldy0jNDUzMyJ9LCJpYXQiOjE3NTAyODc4OTAsImV4cCI6MTc1MDg5MjY5MH0.e-wP2ruxbGHlFNvLJmfJgcDUyl2tdLwkZfexGx3frZFRoTDVM8D4xCshmSqfkMc6elV4FZ-xB_lo-V1X9oaFOe67XgIXWfJSb_XmCdjjwFtXdcqPi-pTeXwb9BtkU2laebAEKaBjIib7MeLehnuKeQxKeoT6qDXIhdhvNSENTOh0hGM0Zfq6ZUcA-krEYzcGM3jM19sp4IiPjBnoTVVYpVrd3FMb2oQM64HBVz-XHwH-z48o_b_ymGDzlMG16b1xrHe8X_ho-Q5eY-xVXPVxkHPkZ9gJ5m7zlHVvpAO4NyU1IF7TxOsxPRD3bU1YjT8prNJ-5fJkfVZJWjS0-vd6aw"">Fix in Cursor</a>

</details>

---

_Was this report helpful? Give feedback by reacting with 👍 or 👎_
"
3157800721,2940980769,coderabbitai[bot],COMMENTED,2025-06-18T23:05:53Z,"**Actionable comments posted: 2**

<details>
<summary>📜 Review details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between d34991bfe0a5f7c10e8ae451a28e7d496bf07247 and b87548eb088f21b3c186e0f0cbb20da89f5aaae3.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `src/server/server.ts` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>📓 Path-based instructions (1)</summary>

<details>
<summary>`src/**`: - This is a CLI tool so errors need to be handled gracefully and logged with lots of information so the user can give us enough data to fix the issue or pass it to the de...</summary>

> `src/**`: - This is a CLI tool so errors need to be handled gracefully and logged with lots of information so the user can give us enough data to fix the issue or pass it to the developers.
> 

- `src/server/server.ts`

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (21)</summary>

* GitHub Check: Cursor BugBot
* GitHub Check: Analyze (javascript-typescript)
* GitHub Check: Cursor BugBot
* GitHub Check: Style Check
* GitHub Check: Redteam Custom Enterprise Server
* GitHub Check: Test on Node 18.x and windows-latest
* GitHub Check: Build Docs
* GitHub Check: Redteam
* GitHub Check: Test on Node 18.x and macOS-latest
* GitHub Check: Test on Node 22.x and ubuntu-latest
* GitHub Check: Share Test
* GitHub Check: Test on Node 24.x and macOS-latest
* GitHub Check: Test on Node 24.x and ubuntu-latest
* GitHub Check: Test on Node 22.x and macOS-latest
* GitHub Check: Build on Node 20.x
* GitHub Check: Test on Node 20.x and macOS-latest
* GitHub Check: Test on Node 20.x and windows-latest
* GitHub Check: Build on Node 22.x
* GitHub Check: Test on Node 18.x and ubuntu-latest
* GitHub Check: Build on Node 24.x
* GitHub Check: Build on Node 18.x

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3157800721,2943721286,cursor[bot],COMMENTED,2025-06-19T17:40:51Z,"<details open>
<summary><h3>Bug: Error Middleware and Routing Regex Issues</h3></summary>

The new error handling middleware for `express.static` is ineffective for its stated purpose. `express.static` does not throw 404 errors for missing files; it simply calls `next()`. Consequently, the middleware's logic to catch and ignore 404s will never execute, making it dead code for this intent. The accompanying comment ""Ignore NotFoundError from static middleware so client routing can handle it"" is misleading.

Additionally, the client routing regex `/^(?!\/api).*$/` is overly broad. It incorrectly excludes paths that merely *start* with `/api` (e.g., `/apitest`) from being served `index.html`, preventing client-side routing for these non-API routes. It should likely be `/^(?!\/api\/).*$/` to only exclude actual API routes.

<p></p>

<details>
<summary><code>src/server/server.ts#L243-L263</code></summary>

https://github.com/promptfoo/promptfoo/blob/d30afed02e5c2adacd43c4d60cb844a301ac3c3d/src/server/server.ts#L243-L263

</details>

<a href=""https://cursor.com/open?data=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImJ1Z2JvdC12MSJ9.eyJ2ZXJzaW9uIjoxLCJ0eXBlIjoiQlVHQk9UX0ZJWF9JTl9DVVJTT1IiLCJkYXRhIjp7InJlZGlzS2V5IjoiYnVnYm90OmY5ODQyYTY2LWNhYjgtNDkwZS1iOTdmLWY5MzgxODc3ZDg2YiIsImVuY3J5cHRpb25LZXkiOiJmT3Q4V1lxbVZFaXBZMk83cnhfcTk0U09OajU2Yzg2RWRjdzRUcERKVU1ZIiwiYnJhbmNoIjoiY29kZXgvZGVidWctbm90Zm91bmRlcnJvci1pbi1wcm9tcHRmb28tdmlldy0jNDUzMyJ9LCJpYXQiOjE3NTAzNTQ4NTEsImV4cCI6MTc1MDk1OTY1MX0.nUR3RL0mOJqkzTj5nYnHRDqnCNstehbxcml954K0-bLvZSXfFnJSXSsTCFVf_Gbqp4lxCkRuhXdgI2RhbZn5Q6yAreQHQz9U73lTrESnhw35iGut7ZS57NaK5hiSMRUULQa-gujDMkriRU3Gfi7V8iaVofJ8BFgzhv2R6IYo5ymd6M_f6-KlA-KdggCIsolU3FxoGhlpvauGGhAELFvl7nFPgHFYxqgFs2NjQWJEuDO4OyK3m1A6AYiRlIPDGXF9ylb_THvFY168c5MU2DWceXn0LfuUfmxSMOGOFq1bQDV6j60Dl5jdRySsadeddJR7ufxhfkd1AbnauzKeva86Sg"">Fix in Cursor</a>

</details>

---

_Was this report helpful? Give feedback by reacting with 👍 or 👎_
"
3157800721,2944150776,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-19T22:47:23Z,"## Pull Request Overview

This PR refactors the way 404 errors are handled in the static middleware by introducing an error-handling middleware to ignore NotFoundError from express.static and serve index.html for SPA routing. The changes include:
- Adding an error-handling middleware in src/server/server.ts to catch and ignore 404 errors.
- Updating the catch-all route to use a regex that excludes API routes.
- Renaming a test case description and cleaning up redundant test assertions.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated 2 comments.

| File                           | Description                                                       |
| ------------------------------ | ----------------------------------------------------------------- |
| test/server/server.test.ts     | Renamed test description and removed redundant assertions         |
| src/server/server.ts           | Added error-handling middleware to ignore static file 404 errors, and refactored client routing for SPA |



"
3157800721,2944602781,cursor[bot],COMMENTED,2025-06-20T05:26:47Z,"<details open>
<summary><h3>Bug: SPA Fallback Middleware Misroutes Non-GET Requests</h3></summary>

The SPA fallback middleware, changed from `app.get` to `app.use`, now incorrectly serves `index.html` for all HTTP methods (POST, PUT, DELETE, etc.) to non-API routes. SPA fallback should only apply to GET requests; other methods should return appropriate HTTP errors (e.g., 404, 405). Furthermore, the `req.path.startsWith('/api/')` check in this middleware does not match requests to `/api` (without a trailing slash), causing `/api` requests to also incorrectly serve `index.html` instead of an API 404.

<p></p>

<details>
<summary><code>src/server/server.ts#L244-L261</code></summary>

https://github.com/promptfoo/promptfoo/blob/3fcf10e8320530d3c7f10bd1cbda1499606e8c68/src/server/server.ts#L244-L261

</details>

<a href=""https://cursor.com/open?data=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImJ1Z2JvdC12MSJ9.eyJ2ZXJzaW9uIjoxLCJ0eXBlIjoiQlVHQk9UX0ZJWF9JTl9DVVJTT1IiLCJkYXRhIjp7InJlZGlzS2V5IjoiYnVnYm90OjQ3NzJmYjk4LTIzMTktNGNmNC1hNDQ2LTBkODJiZGRhZDc3ZCIsImVuY3J5cHRpb25LZXkiOiJZN1g0ZGI5YXp2eVpndWtza0V0X3dOeWt5RVMyUnhELW5QamFVYWpJSks0IiwiYnJhbmNoIjoiY29kZXgvZGVidWctbm90Zm91bmRlcnJvci1pbi1wcm9tcHRmb28tdmlldy0jNDUzMyJ9LCJpYXQiOjE3NTAzOTcyMDcsImV4cCI6MTc1MTAwMjAwN30.FZo6QFOPmwCV1TC5uMf9YOCbYmu-E7fd-RHO0KAIoCqPaoX6B0WSZJSAlujm_U_7qyD1qfFTGRlNZLgvYtKvbw9J4bPf4qHNLp3xq4RW5q0Lk0hcf1x4yuQvYPOaDXd4k3NsVXlbks3SzCZ2RW4VqQ0AoG3xxMcbPivWmHsqtQgrhvgLJABl8pk5fNTh5rVjczSQs6F7vzRKseX9rsCK22xQjfELUyEHjoYo3mmMhZF3cMWbdli6S2ZCsLGBjvV4LCzhcxNpL3NRV83BJ7WlirURaU9qdwAmptt9LtJdkWIcocIm9NEiawyutKaMXvbyqUGqCpA7OWO7Ko7le84v9A"">Fix in Cursor</a>

</details>

---

_Was this report helpful? Give feedback by reacting with 👍 or 👎_
"
3070375416,2848302519,ellipsis-dev[bot],COMMENTED,2025-05-17T14:47:43Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to a6f8b5d6496dc8a24a4655a52814676156f538c6 in <ellipsistime>51 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `84` lines of code in `4` files
> - Skipped `1` files when reviewing.
> - Skipped posting `4` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>documentation/advanced/architecture-deep-dive.mdx:31</code></summary>
> 
> - **Draft comment:** 
> Consider adding an alt attribute to the <img> tag for improved accessibility.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>documentation/docs.json:128</code></summary>
> 
> - **Draft comment:** 
> Ensure the newly added guide paths match the actual file names for consistency.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>documentation/guides/adding-tool-integration.mdx:8</code></summary>
> 
> - **Draft comment:** 
> Consider adding a sample code snippet demonstrating how to use the Julep SDK to create an integration service.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>documentation/guides/modifying-agent-workflow.mdx:10</code></summary>
> 
> - **Draft comment:** 
> Consider including a YAML snippet example to illustrate modifying an agent workflow.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_5Qoz9zvndCk9IR58`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3091138343,2879309904,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-29T18:58:33Z,"## Pull Request Overview

This PR prevents an `IndexError` when appending to an empty tar archive or output folder by checking for existing file numbers before computing the next step.

- Add guard clauses (`if file_numbers:`) in both `_create_tar_file` and `_check_output_folder`.
- Retain default `self._file_step` when there are no existing files.


<details>
<summary>Comments suppressed due to low confidence (4)</summary>

**netket/logging/state_log.py:152**
* Sorting the entire list only to take the last element has O(n log n) cost; consider using max(file_numbers) to find the largest value in O(n).
```
file_numbers.sort()
```
**netket/logging/state_log.py:164**
* Same pattern here—using max(file_numbers) instead of sorting could reduce overhead for large directories.
```
file_numbers.sort()
```
**netket/logging/state_log.py:148**
* There’s no test for append mode when the archive or folder is initially empty; consider adding a unit test to verify that `self._file_step` remains at its default value.
```
if self._file_mode == ""append"":
```
**netket/logging/state_log.py:150**
* [nitpick] This file-number extraction and increment logic is duplicated in two methods; extracting it into a shared helper would reduce duplication and improve maintainability.
```
file_numbers = [int(file[:-6]) for file in files]
```
</details>

"
3071832691,2849009128,ChristopherTrimboli,APPROVED,2025-05-18T14:44:04Z,
3131133514,2912111238,david-cortes-intel,APPROVED,2025-06-10T06:24:04Z,
3153375782,2935648347,aaronmgdr,APPROVED,2025-06-17T13:18:26Z,
3071817399,2849000253,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-18T14:10:25Z,"## Pull Request Overview

This PR addresses cargo test failures by marking tests that require network access as ignored.  
- Added #[ignore = ""requires network access""] attributes to tests interacting with the Mojang API.  
- Ensures that cargo tests can run without network dependency failures.



"
3074885425,2852930930,raymonddenhaan,CHANGES_REQUESTED,2025-05-20T07:06:13Z,
3074885425,2853111287,sfmskywalker,COMMENTED,2025-05-20T08:00:56Z,
3074885425,2853352780,raymonddenhaan,APPROVED,2025-05-20T09:01:17Z,
3074885425,2853427334,sfmskywalker,COMMENTED,2025-05-20T09:24:11Z,
3127925920,2908122289,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-08T05:00:05Z,"## Pull Request Overview

This PR adds support for summarizing Slack threads by introducing a new `THREAD_SUMMARY` asset, materializing summaries after each message, and updating documentation to describe the workflow.

- Define `THREAD_SUMMARY` asset in `assets.py` and implement the `summarize_thread` materialize function  
- Invoke `summarize_thread` in `api.py` after posting each Slack message  
- Document the new thread summary asset chain in `ASSETS.md`

### Reviewed Changes

Copilot reviewed 3 out of 3 changed files in this pull request and generated no comments.

| File                                                | Description                                       |
| --------------------------------------------------- | ------------------------------------------------- |
| examples/slackbot/src/slackbot/assets.py            | Added `THREAD_SUMMARY` asset and `summarize_thread` function |
| examples/slackbot/src/slackbot/api.py               | Imported and called `summarize_thread` after posting messages |
| examples/slackbot/ASSETS.md                         | Updated documentation to include the thread summary asset chain |


<details>
<summary>Comments suppressed due to low confidence (5)</summary>

**examples/slackbot/src/slackbot/assets.py:25**
* The asset key is static, so multiple thread summaries will collide. Consider parameterizing it with `thread_ts`, e.g., `""summary://slack-thread/{thread_ts}""` to uniquely identify each thread.
```
    key=""summary://slack-thread"",
```
**examples/slackbot/ASSETS.md:86**
* The diagram suggests that `USER_FACTS` depends on `THREAD_SUMMARY`, but the current code does not wire `USER_FACTS` to use the thread summary. Please update the documentation or code to reflect the actual dependency graph.
```
CONVERSATION -> THREAD_SUMMARY -> USER_FACTS
```
**examples/slackbot/src/slackbot/assets.py:68**
* There are no tests covering the new `summarize_thread` materialization. Please add unit tests to validate that summaries are generated and metadata is stored correctly.
```
@materialize(THREAD_SUMMARY, asset_deps=[CONVERSATION])
```
**examples/slackbot/src/slackbot/api.py:109**
* This integration point is not currently tested. Consider adding an end-to-end or mock-based test to ensure `summarize_thread` is invoked correctly after posting a message.
```
        await summarize_thread(thread_ts, conversation)
```
**examples/slackbot/src/slackbot/assets.py:79**
* The code uses `datetime.now()` but `datetime` is not imported at the top of the file, which will cause a NameError. Please add `from datetime import datetime`.
```
    ""timestamp"": datetime.now().isoformat(),
```
</details>

"
3131081177,2912284833,asmorkalov,APPROVED,2025-06-10T07:21:30Z,
3102885246,2919719278,ManInMyVan,CHANGES_REQUESTED,2025-06-12T06:39:40Z,
3114582965,2893223068,coderabbitai[bot],COMMENTED,2025-06-03T16:09:46Z,"**Actionable comments posted: 3**

<details>
<summary>🧹 Nitpick comments (3)</summary><blockquote>

<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(bridge)/onramp/countries/components/server/countries-table.tsx (2)</summary><blockquote>

`10-10`: **Consider using absolute imports for better maintainability.**

The relative import path `../../../../utils` is quite long and prone to breaking when files are moved. Consider using an absolute import path.



```diff
-import { getOnrampCountrySupport } from ""../../../../utils"";
+import { getOnrampCountrySupport } from ""@/app/(app)/(dashboard)/(bridge)/utils"";
```

---

`31-38`: **Add fallback for empty countries list.**

Consider handling the case where no countries are returned for a provider.



```diff
        <TableBody>
+         {countries.length === 0 ? (
+           <TableRow>
+             <TableCell colSpan={2} className=""text-center text-muted-foreground py-8"">
+               No countries found for {props.provider}
+             </TableCell>
+           </TableRow>
+         ) : (
          {countries.map((country) => (
            <TableRow key={country.code} className=""hover:bg-accent/50"">
              <TableCell className=""font-medium"">{country.name}</TableCell>
              <TableCell className=""text-muted-foreground"">
                {country.currencies.join("", "")}
              </TableCell>
            </TableRow>
          ))}
+         )}
        </TableBody>
```

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(bridge)/types/onramp-country.ts (1)</summary><blockquote>

`14-17`: **Strongly-typed `OnrampCountrySupport` union**  
Using a string-literal union for `provider` enforces valid values at compile time. If these provider identifiers are used elsewhere, you might consider extracting them into a shared enum or constant map to avoid duplication.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 6cce31d8287e1a8122c4a3e3ac7fb30b9dd6ed71 and 59934b3249fee2c3db66b342ad8520007b8c25a1.

</details>

<details>
<summary>📒 Files selected for processing (5)</summary>

* `apps/dashboard/src/app/(app)/(dashboard)/(bridge)/onramp/countries/components/client/provider.tsx` (1 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(bridge)/onramp/countries/components/server/countries-table.tsx` (1 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(bridge)/onramp/countries/page.tsx` (1 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(bridge)/types/onramp-country.ts` (1 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(bridge)/utils.ts` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (2)</summary>

<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(bridge)/onramp/countries/components/server/countries-table.tsx (3)</summary><blockquote>

<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(bridge)/onramp/countries/components/client/provider.tsx (1)</summary>

* `OnrampProvider` (8-8)

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(bridge)/utils.ts (1)</summary>

* `getOnrampCountrySupport` (72-92)

</details>
<details>
<summary>apps/portal/src/components/ui/table.tsx (7)</summary>

* `TableContainer` (151-151)
* `Table` (143-143)
* `TableHeader` (144-144)
* `TableRow` (148-148)
* `TableHead` (147-147)
* `TableBody` (145-145)
* `TableCell` (149-149)

</details>

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(bridge)/utils.ts (2)</summary><blockquote>

<details>
<summary>apps/dashboard/src/@/constants/public-envs.ts (1)</summary>

* `NEXT_PUBLIC_THIRDWEB_BRIDGE_HOST` (24-25)

</details>
<details>
<summary>apps/dashboard/src/@/constants/server-envs.ts (1)</summary>

* `DASHBOARD_THIRDWEB_SECRET_KEY` (8-9)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (2)</summary>

* GitHub Check: Size
* GitHub Check: Analyze (javascript)

</details>

<details>
<summary>🔇 Additional comments (8)</summary><blockquote>

<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(bridge)/utils.ts (1)</summary>

`72-92`: **LGTM! Well-implemented utility function.**

The implementation follows excellent patterns:
- Proper error handling with descriptive error messages
- Appropriate caching strategy (1 hour revalidation)
- Type safety with imported type assertion
- Consistent with existing `getRoutes` function patterns
- Secure authentication with secret key headers

The function correctly constructs the URL, handles the provider parameter, and returns properly typed data.

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(bridge)/onramp/countries/page.tsx (2)</summary>

`11-18`: **LGTM! Excellent metadata setup.**

The metadata configuration is comprehensive with proper title, description, and Open Graph tags for social sharing. This will improve SEO and user experience when the page is shared.

---

`27-46`: **Well-structured responsive layout.**

The component layout is well-organized with:
- Responsive flexbox design that adapts to different screen sizes
- Proper spacing and typography hierarchy
- Clean separation between header controls and data display
- Good accessibility with semantic header structure

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(bridge)/onramp/countries/components/client/provider.tsx (3)</summary>

`17-24`: **Excellent URL manipulation with proper optimization.**

The `createPageURL` function is well-implemented with:
- Proper handling of existing search parameters
- Correct use of `useCallback` for performance optimization
- Type-safe provider parameter handling
- Clean URLSearchParams manipulation

---

`28-42`: **Clean provider selection UI implementation.**

The provider selection UI is well-crafted with:
- Dynamic styling based on active state (default vs outline variants)
- Proper key assignment for React list rendering
- Accessible button interactions with router navigation
- Consistent capitalization styling
- Good responsive flex layout

---

`8-8`: <details>
<summary>✅ Verification successful</summary>

**Verify type consistency across the codebase.**

The `OnrampProvider` type definition should be consistent with the provider parameter types used in the utility function.



Let me verify that this type matches the usage in the utils function:

---

🏁 Script executed:

```shell
#!/bin/bash
# Description: Verify OnrampProvider type consistency across files
echo ""Checking OnrampProvider type definitions and usage...""

# Find all OnrampProvider type definitions
rg ""OnrampProvider.*="" -A 1

# Find all provider parameter type definitions in functions
rg ""provider.*stripe.*coinbase.*transak"" -A 1
```

Length of output: 2227

---



</details>

**OnrampProvider type consistency verified**

The `OnrampProvider` union (`""stripe"" | ""coinbase"" | ""transak""`) is used identically in:

- `apps/dashboard/src/app/(app)/(dashboard)/(bridge)/onramp/countries/components/client/provider.tsx`
- `apps/dashboard/src/app/(app)/(dashboard)/(bridge)/utils.ts`
- `apps/dashboard/src/app/(app)/(dashboard)/(bridge)/types/onramp-country.ts`

No discrepancies found—no changes required.

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(bridge)/types/onramp-country.ts (2)</summary>

`1-5`: **Well-defined `OnrampCountryToken` type**  
The `OnrampCountryToken` interface correctly captures `chainId`, `address`, and `symbol`. This will ensure downstream code can safely rely on these fields.

---

`7-12`: **Clear `OnrampCountryDetails` structure**  
This type cleanly models a country’s code, name, supported currencies, and associated tokens. It aligns well with the shape of the API responses and will make the table rendering straightforward.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3138823628,2919529328,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-12T04:44:23Z,"## Pull Request Overview

This patch ensures that anchor reset styles are correctly applied to the Link component when used with Next.js’s Link wrapper.

- Adds the `reset=""a""` prop to the `Box` element rendering the anchor
- Introduces a changeset documenting the patch release

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated no comments.

| File                                | Description                                            |
| ----------------------------------- | ------------------------------------------------------ |
| site/components/Link/Link.tsx       | Added `reset=""a""` prop to the anchor to apply reset styles |
| .changeset/link-next-anchor.md      | Created a new changeset entry for this patch           |


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**site/components/Link/Link.tsx:44**
* Add a unit or integration test that renders the Link component with Next.js Link and asserts the presence of the `reset=""a""` prop on the underlying anchor element to ensure reset styles are applied.
```
reset=""a""
```
</details>

"
3073179861,2850087954,greptile-apps[bot],COMMENTED,2025-05-19T09:33:46Z,"
## PR Summary

Added a new command to close all Safari tabs except the current one, with proper error handling and user feedback via toasts.

- The changelog entry title `## [Update] - 2025-04-20` should use `{PR_MERGE_DATE}` instead of a hardcoded date
- The `showToast` error handling in `close-other-tabs.ts` could be simplified using `showFailureToast` from `@raycast/utils`
- The linting error with `ray not found` needs to be resolved - ensure `@raycast/api` is installed globally or run `npm install` first

<sub>4 file(s) reviewed, 3 comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=extensions_19280)</sub>"
3073179861,2850230877,pernielsentikaer,APPROVED,2025-05-19T10:16:57Z,"Hi 👋 

Looks good to me, approved 🔥"
3129428263,2909191421,ellipsis-dev[bot],COMMENTED,2025-06-09T07:24:32Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed 96eaf5f37e1525e5fb36a1a2eb298b9a2f75f710 in <ellipsistime>50 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `100` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `3` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern-frontend/src/routes/workflows/editor/panels/WorkflowNodeLibraryPanel.tsx:1</code></summary>
> 
> - **Draft comment:** 
> Removed unused imports (useState, Input, and MagnifyingGlassIcon) for search functionality. Confirm that dropping search is intentional.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>skyvern-frontend/src/routes/workflows/editor/panels/WorkflowNodeLibraryPanel.tsx:235</code></summary>
> 
> - **Draft comment:** 
> Search state and filtering logic (including the 'No results found' fallback) have been removed. Ensure this simplification aligns with design requirements.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>skyvern-frontend/src/routes/workflows/editor/panels/WorkflowNodeLibraryPanel.tsx:257</code></summary>
> 
> - **Draft comment:** 
> Inline conditional filtering within nodeLibraryItems.map is functionally correct. For improved readability, consider pre-filtering the items outside the JSX.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_rMutP0Yqghx5WWmd`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3129428263,2909192562,ellipsis-dev[bot],COMMENTED,2025-06-09T07:25:05Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 96eaf5f37e1525e5fb36a1a2eb298b9a2f75f710 in <ellipsistime>1 minute and 23 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `239` lines of code in `3` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern/forge/prompts/skyvern/summarize-max-retries-reason.j2:5</code></summary>
> 
> - **Draft comment:** 
> The JSON sample includes inline comments (e.g. '// Think step by step') which aren’t valid in strict JSON. Consider removing or reformatting them if the output is expected to be parsed as JSON.
> - **Reason this comment was not posted:**
> Based on historical feedback, this comment is too similar to comments previously marked by users as bad.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>skyvern/forge/prompts/skyvern/summarize-max-retries-reason.j2:18</code></summary>
> 
> - **Draft comment:** 
> Consider adding a newline or separator between retry step entries for clarity, so that each 'Retry Step ...' appears on its own line.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 20% vs. threshold = 50% The suggestion would improve readability of the output by putting each retry step on its own line. However, this is a relatively minor formatting issue. The output would still be functionally correct without the newline. The comment is about changed code since this is a new file. The output format may not matter if this is just being parsed programmatically. Also, the current format might be intentional to save space. Even if parsed programmatically, having readable output helps with debugging and maintenance. The space savings would be minimal. While this is a valid suggestion for improved readability, it's not critical enough to warrant a PR comment based on our rules about avoiding obvious/unimportant changes.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_mubRAg8Y0hsMfK7u`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3129428263,2909198336,LawyZheng,APPROVED,2025-06-09T07:28:01Z,
3129428263,2909198815,ellipsis-dev[bot],COMMENTED,2025-06-09T07:28:13Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed b53007e7670d596f481f0cfa52567cb0f03d9b83 in <ellipsistime>47 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `100` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `4` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern-frontend/src/routes/workflows/editor/panels/WorkflowNodeLibraryPanel.tsx:1</code></summary>
> 
> - **Draft comment:** 
> Import additions look fine. Consider grouping third-party icon imports with similar ones for consistency.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>skyvern-frontend/src/routes/workflows/editor/panels/WorkflowNodeLibraryPanel.tsx:240</code></summary>
> 
> - **Draft comment:** 
> Filtering logic is clear. Consider using useMemo to memoize filteredItems for performance if the list grows.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>skyvern-frontend/src/routes/workflows/editor/panels/WorkflowNodeLibraryPanel.tsx:284</code></summary>
> 
> - **Draft comment:** 
> Consider trimming the search input (e.g. event.target.value.trim()) to avoid filtering issues from accidental spaces.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>skyvern-frontend/src/routes/workflows/editor/panels/WorkflowNodeLibraryPanel.tsx:297</code></summary>
> 
> - **Draft comment:** 
> Using item.nodeType as a key works if node types are unique; ensure uniqueness or consider a more unique identifier.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_Qz8PpaONGwDM3omx`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3152320431,2934422633,devgony,APPROVED,2025-06-17T07:15:05Z,
3151880386,2934847269,grzegorz-roboflow,APPROVED,2025-06-17T09:17:13Z,
3151880386,2961767149,grzegorz-roboflow,APPROVED,2025-06-26T11:34:34Z,
3075506520,2852436646,graphite-app[bot],COMMENTED,2025-05-20T18:11:34Z,
3075506520,2855161151,graphite-app[bot],COMMENTED,2025-05-20T18:11:59Z,
3075506520,2855166268,coderabbitai[bot],COMMENTED,2025-05-20T18:14:11Z,"**Actionable comments posted: 0**

<details>
<summary>♻️ Duplicate comments (1)</summary><blockquote>

<details>
<summary>packages/thirdweb/src/react/web/wallets/in-app/InputSelectionUI.tsx (1)</summary><blockquote>

`32-34`: **Improved validation needed for allowedSmsCountryCodes first element.**

While the current implementation checks if `allowedSmsCountryCodes` exists and is non-empty, it doesn't validate that the first element is a valid `SupportedSmsCountry` before passing it to `getCountrySelector`.


Although `getCountrySelector` has a fallback to ""US +1"" if the country is not found, it would be better to add explicit validation:

```diff
-      : props.allowedSmsCountryCodes && props.allowedSmsCountryCodes.length > 0
-        ? getCountrySelector(props.allowedSmsCountryCodes[0])
+      : props.allowedSmsCountryCodes?.length > 0 && props.allowedSmsCountryCodes[0]
+        ? getCountrySelector(props.allowedSmsCountryCodes[0])
         : ""US +1"",
```

This suggestion is based on a previous review comment by graphite-app[bot] and would ensure robust handling of potentially invalid input.

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>packages/thirdweb/src/react/web/wallets/in-app/CountrySelector.tsx (1)</summary><blockquote>

`32-43`: **Implementation looks good!**

The filtering logic correctly handles the `allowedCountryCodes` prop to show only allowed countries when specified. The fallback to all countries (or US as a last resort) maintains backward compatibility.

A minor readability suggestion:

Consider refactoring the nested ternary expression to a more explicit if-else structure for improved readability:

```diff
-  const supportedCountriesForSms =
-    allowedCountryCodes && allowedCountryCodes.length > 0
-      ? supportedSmsCountries.filter((c) =>
-          allowedCountryCodes.includes(c.countryIsoCode as SupportedSmsCountry),
-        )
-      : supportedSmsCountries ?? [
-          {
-            countryIsoCode: ""US"",
-            countryName: ""United States"",
-            phoneNumberCode: 1,
-          },
-        ];
+  let supportedCountriesForSms;
+  if (allowedCountryCodes && allowedCountryCodes.length > 0) {
+    supportedCountriesForSms = supportedSmsCountries.filter((c) =>
+      allowedCountryCodes.includes(c.countryIsoCode as SupportedSmsCountry)
+    );
+  } else {
+    supportedCountriesForSms = supportedSmsCountries ?? [
+      {
+        countryIsoCode: ""US"",
+        countryName: ""United States"",
+        phoneNumberCode: 1,
+      },
+    ];
+  }
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**
**Cache: Disabled due to data retention organization setting**
**Knowledge Base: Disabled due to data retention organization setting**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between a3072c43358febb8b3a419414c7252934ba2d20c and 9fb96350bc7e65517d39fee79fe2f76febd22ba2.

</details>

<details>
<summary>📒 Files selected for processing (7)</summary>

* `.changeset/limited-country-dropdown.md` (1 hunks)
* `packages/thirdweb/src/react/web/wallets/in-app/CountrySelector.tsx` (1 hunks)
* `packages/thirdweb/src/react/web/wallets/in-app/InputSelectionUI.test.tsx` (1 hunks)
* `packages/thirdweb/src/react/web/wallets/in-app/InputSelectionUI.tsx` (2 hunks)
* `packages/thirdweb/src/react/web/wallets/shared/ConnectWalletSocialOptions.tsx` (1 hunks)
* `packages/thirdweb/src/wallets/ecosystem/types.ts` (1 hunks)
* `packages/thirdweb/src/wallets/in-app/core/wallet/types.ts` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>packages/thirdweb/src/react/web/wallets/in-app/InputSelectionUI.tsx (1)</summary><blockquote>

<details>
<summary>packages/thirdweb/src/react/web/wallets/in-app/CountrySelector.tsx (1)</summary>

* `getCountrySelector` (11-19)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: E2E Tests (pnpm, esbuild)
* GitHub Check: Lint Packages
* GitHub Check: E2E Tests (pnpm, vite)
* GitHub Check: Build Packages
* GitHub Check: Analyze (javascript)

</details>

<details>
<summary>🔇 Additional comments (6)</summary><blockquote>

<details>
<summary>.changeset/limited-country-dropdown.md (1)</summary>

`1-5`: **LGTM - Well-structured changeset!**

The changeset properly documents the new feature that allows limiting selectable countries for SMS login using the `allowedSmsCountryCodes` option, clearly indicating it works alongside the existing `defaultSmsCountryCode` option.

</details>
<details>
<summary>packages/thirdweb/src/react/web/wallets/shared/ConnectWalletSocialOptions.tsx (1)</summary>

`454-456`: **LGTM - Properly implemented new feature!**

The implementation correctly passes the `allowedSmsCountryCodes` configuration from the wallet to the `InputSelectionUI` component, following the same pattern as the existing `defaultSmsCountryCode` prop.

</details>
<details>
<summary>packages/thirdweb/src/wallets/ecosystem/types.ts (1)</summary>

`22-26`: **LGTM - Well-documented type addition!**

The addition of the `allowedSmsCountryCodes` property to the `EcosystemWalletCreationOptions` type is well-placed and includes clear JSDoc documentation explaining its purpose. The type `SupportedSmsCountry[]` is appropriate for this use case.

</details>
<details>
<summary>packages/thirdweb/src/wallets/in-app/core/wallet/types.ts (1)</summary>

`86-90`: **LGTM - Consistent type implementation!**

The addition of the `allowedSmsCountryCodes` property to the `InAppWalletCreationOptions` type maintains consistency with the ecosystem wallet implementation. The property is properly typed and documented with clear JSDoc comments.

</details>
<details>
<summary>packages/thirdweb/src/react/web/wallets/in-app/InputSelectionUI.test.tsx (1)</summary>

`46-67`: **Well-structured test for the new feature!**

The test correctly verifies that the country selector filters options based on the `allowedSmsCountryCodes` prop, checking both the inclusion of allowed countries (India, Brazil) and the exclusion of non-allowed countries (United States).

</details>
<details>
<summary>packages/thirdweb/src/react/web/wallets/in-app/InputSelectionUI.tsx (1)</summary>

`75-75`: **LGTM! Properly passing allowedSmsCountryCodes to CountrySelector.**

The component correctly passes the `allowedSmsCountryCodes` prop to the `CountrySelector` component as `allowedCountryCodes`, ensuring the filtering behavior is applied throughout the component hierarchy.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3075506520,2855163960,graphite-app[bot],COMMENTED,2025-05-20T18:19:30Z,
3135421000,2923367586,devgony,APPROVED,2025-06-13T04:15:23Z,
3146466795,2928553323,gemini-code-assist[bot],COMMENTED,2025-06-14T18:13:43Z,"## Summary of Changes

Hello @voku, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request focuses on improving the accuracy and readability of the project's documentation and inline code comments by fixing various typos and minor formatting issues.

### Highlights

* **Documentation Fixes**: Corrected typos and improved clarity in the `SECURITY.md` file and the main documentation base file (`build/docs/base.md`).
* **Code Comment Improvements**: Fixed typos and clarified phrasing in various phpdoc comments within the main `UTF8.php` class file.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configureGemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3146466795,2928555219,coderabbitai[bot],COMMENTED,2025-06-14T18:14:57Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>SECURITY.md (1)</summary><blockquote>

`14-14`: **Consider simplifying phrasing**  
The phrase ""prior to"" could be shortened to ""before"" to improve readability.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[style] ~14-~14: ‘prior to’ might be wordy. Consider a shorter alternative.
Context: ...ulnerabilities  Portable UTF-8 versions prior to 5.4.26 (released 2019-11-05) have an op...

(EN_WORDINESS_PREMIUM_PRIOR_TO)

</details>

</details>

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between c4b377468db50ba8e10ec01ac683271a0ab10c8f and 678df09c2283ce36b197d1e5a2a4ac93471b06b9.

</details>

<details>
<summary>📒 Files selected for processing (3)</summary>

* `SECURITY.md` (1 hunks)
* `build/docs/base.md` (1 hunks)
* `src/voku/helper/UTF8.php` (4 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 LanguageTool</summary>

<details>
<summary>SECURITY.md</summary>

[style] ~14-~14: ‘prior to’ might be wordy. Consider a shorter alternative.
Context: ...ulnerabilities  Portable UTF-8 versions prior to 5.4.26 (released 2019-11-05) have an op...

(EN_WORDINESS_PREMIUM_PRIOR_TO)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (1)</summary>

* GitHub Check: Codacy Static Code Analysis

</details>

<details>
<summary>🔇 Additional comments (6)</summary><blockquote>

<details>
<summary>SECURITY.md (1)</summary>

`14-14`: **Correct article use and fix spelling**  
The change accurately replaces ""a unsecure"" with ""an insecure"" and corrects ""implentation"" to ""implementation"".

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[style] ~14-~14: ‘prior to’ might be wordy. Consider a shorter alternative.
Context: ...ulnerabilities  Portable UTF-8 versions prior to 5.4.26 (released 2019-11-05) have an op...

(EN_WORDINESS_PREMIUM_PRIOR_TO)

</details>

</details>

</details>
<details>
<summary>build/docs/base.md (1)</summary>

`98-98`: **Fix markdown header formatting**  
Removing the empty link syntax cleans up the header and ensures it renders correctly as ""## Why Portable UTF-8?"".

</details>
<details>
<summary>src/voku/helper/UTF8.php (4)</summary>

`1111-1111`: **Fix misspelling 'copy&past' to 'copy&paste'.**  
Corrects the typo in the docblock source attribution.

---

`3089-3089`: **Wrap function name in backticks for clarity.**  
Using inline code formatting around `UTF8::htmlspecialchars()` improves readability in the docblock.

---

`5306-5306`: **Fix misspelling 'copy&past' to 'copy&paste'.**  
Aligns with the Drupal origin URL attribution and other typo fixes.

---

`13366-13366`: **Document the newly introduced `$str_add_on` parameter.**  
The docblock now matches the added function parameter—please verify the method signature includes `$str_add_on` in this position.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3146466795,2928555575,gemini-code-assist[bot],COMMENTED,2025-06-14T18:15:04Z,"## Code Review

This pull request addresses typos and improves documentation clarity across several files."
3151623064,2933794450,coderabbitai[bot],COMMENTED,2025-06-16T23:55:29Z,"**Actionable comments posted: 4**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>test/redteam/commands/crossSessionLeakGenerate.test.ts (1)</summary><blockquote>

`56-63`: **Guard against undefined to silence CI warnings**

`find` can return `undefined`; dereferencing it triggers the static-analysis complaints shown in the pipeline.

```diff
-    const plugin = synthOpts.plugins.find((p: any) => p.id === 'cross-session-leak');
-    expect(plugin.config.excludeStrategies).toEqual(['crescendo', 'goat']);
+    const plugin = synthOpts.plugins.find((p: any) => p.id === 'cross-session-leak');
+    expect(plugin).toBeDefined();
+    expect(plugin!.config.excludeStrategies).toEqual(['crescendo', 'goat']);
```

Minor, but keeps the test type-safe.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 398dae192b48c2dbcf58615c2f0908dc422cb306 and 5a4a01b8b745cf1e211efe733f0be4d14c95d746.

</details>

<details>
<summary>📒 Files selected for processing (5)</summary>

* `site/docs/red-team/plugins/cross-session-leak.md` (1 hunks)
* `src/redteam/commands/generate.ts` (2 hunks)
* `src/redteam/index.ts` (3 hunks)
* `src/redteam/plugins/crossSessionLeak.ts` (2 hunks)
* `test/redteam/commands/crossSessionLeakGenerate.test.ts` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>📓 Path-based instructions (1)</summary>

<details>
<summary>`src/**`: - This is a CLI tool so errors need to be handled gracefully and logged with lots of information so the user can give us enough data to fix the issue or pass it to the de...</summary>

> `src/**`: - This is a CLI tool so errors need to be handled gracefully and logged with lots of information so the user can give us enough data to fix the issue or pass it to the developers.
> 

- `src/redteam/commands/generate.ts`
- `src/redteam/index.ts`
- `src/redteam/plugins/crossSessionLeak.ts`

</details>

</details><details>
<summary>🧬 Code Graph Analysis (2)</summary>

<details>
<summary>src/redteam/index.ts (1)</summary><blockquote>

<details>
<summary>src/types/index.ts (1)</summary>

* `TestCaseWithPlugin` (683-683)

</details>

</blockquote></details>
<details>
<summary>src/redteam/plugins/crossSessionLeak.ts (2)</summary><blockquote>

<details>
<summary>src/redteam/types.ts (1)</summary>

* `PluginConfig` (11-41)

</details>
<details>
<summary>src/types/providers.ts (1)</summary>

* `ApiProvider` (69-86)

</details>

</blockquote></details>

</details><details>
<summary>🪛 GitHub Check: Build on Node 22.x</summary>

<details>
<summary>test/redteam/commands/crossSessionLeakGenerate.test.ts</summary>

[failure] 58-58: 
'plugin.config' is possibly 'undefined'.

---

[failure] 58-58: 
'plugin' is possibly 'undefined'.

</details>
<details>
<summary>src/redteam/index.ts</summary>

[failure] 179-179: 
Property 'excludeStrategies' does not exist on type 'PluginConfig'.

</details>

</details>
<details>
<summary>🪛 GitHub Check: Build on Node 20.x</summary>

<details>
<summary>test/redteam/commands/crossSessionLeakGenerate.test.ts</summary>

[failure] 58-58: 
'plugin.config' is possibly 'undefined'.

---

[failure] 58-58: 
'plugin' is possibly 'undefined'.

</details>
<details>
<summary>src/redteam/index.ts</summary>

[failure] 179-179: 
Property 'excludeStrategies' does not exist on type 'PluginConfig'.

</details>

</details>
<details>
<summary>🪛 GitHub Check: Build on Node 18.x</summary>

<details>
<summary>test/redteam/commands/crossSessionLeakGenerate.test.ts</summary>

[failure] 58-58: 
'plugin.config' is possibly 'undefined'.

---

[failure] 58-58: 
'plugin' is possibly 'undefined'.

</details>
<details>
<summary>src/redteam/index.ts</summary>

[failure] 179-179: 
Property 'excludeStrategies' does not exist on type 'PluginConfig'.

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (10)</summary>

* GitHub Check: webui tests
* GitHub Check: Test on Node 24.x and macOS-latest
* GitHub Check: Style Check
* GitHub Check: Test on Node 24.x and ubuntu-latest
* GitHub Check: Test on Node 18.x and macOS-latest
* GitHub Check: Test on Node 20.x and macOS-latest
* GitHub Check: Test on Node 18.x and windows-latest
* GitHub Check: Test on Node 20.x and windows-latest
* GitHub Check: Build Docs
* GitHub Check: Analyze (javascript-typescript)

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>site/docs/red-team/plugins/cross-session-leak.md (1)</summary>

`30-33`: **Docs look good**

Clear, concise note explaining the automatic exclusions. No action needed.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3151623064,2937294173,coderabbitai[bot],COMMENTED,2025-06-17T23:09:14Z,"**Actionable comments posted: 2**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>test/redteam/plugins/crossSessionLeak.test.ts (1)</summary><blockquote>

`68-82`: **Accessing private state via cast undermines encapsulation**

`(plugin as any).config` reaches inside the class just to read `excludeStrategies`.  
Prefer adding a minimal public getter on the plugin (or base) to expose *read-only* access, e.g.:

```ts
get excludedStrategies(): readonly string[] {
  return this.config.excludeStrategies ?? [];
}
```

Tests then read `plugin.excludedStrategies`, keeping type-safety and encapsulation intact.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 0214b56f5f7a657ff313985f5622de9203733fdf and 617432f6efba202b2a6d982d73bd988c57abae7b.

</details>

<details>
<summary>📒 Files selected for processing (6)</summary>

* `src/redteam/commands/generate.ts` (2 hunks)
* `src/redteam/index.ts` (4 hunks)
* `src/redteam/plugins/base.ts` (2 hunks)
* `src/redteam/plugins/crossSessionLeak.ts` (3 hunks)
* `src/redteam/types.ts` (1 hunks)
* `test/redteam/plugins/crossSessionLeak.test.ts` (3 hunks)

</details>

<details>
<summary>✅ Files skipped from review due to trivial changes (1)</summary>

* src/redteam/commands/generate.ts

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (3)</summary>

* src/redteam/types.ts
* src/redteam/plugins/crossSessionLeak.ts
* src/redteam/index.ts

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>📓 Path-based instructions (1)</summary>

<details>
<summary>`src/**`: - This is a CLI tool so errors need to be handled gracefully and logged with lots of information so the user can give us enough data to fix the issue or pass it to the de...</summary>

> `src/**`: - This is a CLI tool so errors need to be handled gracefully and logged with lots of information so the user can give us enough data to fix the issue or pass it to the developers.
> 

- `src/redteam/plugins/base.ts`

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (4)</summary>

* GitHub Check: Redteam Custom Enterprise Server
* GitHub Check: Test on Node 20.x and windows-latest
* GitHub Check: Test on Node 18.x and windows-latest
* GitHub Check: Build on Node 24.x

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3151623064,2937322066,coderabbitai[bot],COMMENTED,2025-06-17T23:31:56Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (3)</summary><blockquote>

<details>
<summary>test/redteam/plugins/contracts.test.ts (2)</summary><blockquote>

`32-35`: **Prefer partial matching for `metadata.pluginConfig` to avoid brittle tests**

`toEqual` enforces an exact object match, so any future field added to `pluginConfig` (e.g., `graderExamples`, `language`, etc.) will break these assertions even though the behaviour stays correct.  
A more resilient pattern:

```diff
-metadata: {
-  pluginId: 'contracts',
-  pluginConfig: { excludeStrategies: undefined },
-},
+metadata: expect.objectContaining({
+  pluginId: PLUGIN_ID, // keeps it DRY – see next comment
+  pluginConfig: expect.objectContaining({
+    excludeStrategies: undefined,
+  }),
+}),
```

This still guarantees that the property exists and is `undefined` while future-proofing the test.  



Also applies to: 40-43

---

`32-35`: **Use the already-imported `PLUGIN_ID` instead of hard-coding `'contracts'`**

`PLUGIN_ID` is imported at the top of the file; relying on the constant eliminates risk of drifting string literals.

```diff
- pluginId: 'contracts',
+ pluginId: PLUGIN_ID,
```



Also applies to: 40-43

</blockquote></details>
<details>
<summary>test/redteam/plugins/base.test.ts (1)</summary><blockquote>

`63-66`: **Loosen strict equality on `metadata.pluginConfig` across repeated expectations**

The same comment as for `contracts.test.ts` applies here: future plugin config fields will break these assertions. Consider extracting a helper and using `expect.objectContaining`:

```ts
const expectPluginMetadata = (id: string) =>
  expect.objectContaining({
    pluginId: id,
    pluginConfig: expect.objectContaining({ excludeStrategies: undefined }),
  });
```

and then:

```diff
-metadata: {
-  pluginId: 'test-plugin-id',
-  pluginConfig: { excludeStrategies: undefined },
-},
+metadata: expectPluginMetadata('test-plugin-id'),
```

Reduces duplication and hard-coding, increasing maintainability.  



Also applies to: 71-74, 100-103, 108-111, 166-169, 175-177

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 617432f6efba202b2a6d982d73bd988c57abae7b and 7991c7732fe80757342d09ebf55dac6458474f28.

</details>

<details>
<summary>📒 Files selected for processing (4)</summary>

* `src/redteam/plugins/base.ts` (2 hunks)
* `test/redteam/commands/crossSessionLeakGenerate.test.ts` (1 hunks)
* `test/redteam/plugins/base.test.ts` (3 hunks)
* `test/redteam/plugins/contracts.test.ts` (1 hunks)

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (2)</summary>

* test/redteam/commands/crossSessionLeakGenerate.test.ts
* src/redteam/plugins/base.ts

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (20)</summary>

* GitHub Check: Build Docs
* GitHub Check: Share Test
* GitHub Check: Test on Node 24.x and ubuntu-latest
* GitHub Check: Redteam
* GitHub Check: webui tests
* GitHub Check: Redteam Custom Enterprise Server
* GitHub Check: Style Check
* GitHub Check: Test on Node 18.x and ubuntu-latest
* GitHub Check: Test on Node 22.x and macOS-latest
* GitHub Check: Test on Node 20.x and macOS-latest
* GitHub Check: Test on Node 20.x and ubuntu-latest
* GitHub Check: Test on Node 18.x and macOS-latest
* GitHub Check: Test on Node 24.x and macOS-latest
* GitHub Check: Test on Node 20.x and windows-latest
* GitHub Check: Test on Node 18.x and windows-latest
* GitHub Check: Build on Node 18.x
* GitHub Check: Build on Node 24.x
* GitHub Check: Build on Node 20.x
* GitHub Check: Build on Node 22.x
* GitHub Check: Analyze (javascript-typescript)

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3151623064,2944146222,mldangelo,DISMISSED,2025-06-19T22:45:42Z,This looks good! We have another concept already defined called STRATEGY_EXEMPT_PLUGINS. It would be great if we could combine the two together.
3151623064,2946835619,sklein12,COMMENTED,2025-06-20T17:04:42Z,
3151623064,2947208494,MrFlounder,COMMENTED,2025-06-20T20:22:19Z,
3098333977,2876191218,SeungjinYang,APPROVED,2025-05-28T19:23:05Z,LGTM @chatgpt!
3160289208,2943268058,terzioglub,APPROVED,2025-06-19T14:29:48Z,
3083685567,2861742487,Abhi1992002,APPROVED,2025-05-22T15:45:59Z,
3083685567,2861752516,ntindle,APPROVED,2025-05-22T15:49:20Z,
3140225775,2921958762,dgirardi,COMMENTED,2025-06-12T16:50:29Z,
3140225775,2922618958,patmmccann,COMMENTED,2025-06-12T20:51:35Z,
3140225775,2922621350,patmmccann,COMMENTED,2025-06-12T20:52:30Z,
3140225775,2962957663,dgirardi,APPROVED,2025-06-26T17:50:44Z,
3139731537,2922102860,ivanagas,CHANGES_REQUESTED,2025-06-12T17:44:29Z,"Unfortunately, only 3? of these actually are proper replacements. There are some small things that need to be included that prevent us from just using the snippets here"
3091566442,2872978318,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-27T23:11:11Z,"## Pull Request Overview

This PR improves the robustness of configuration file handling by implementing a recovery mechanism when loading the config fails, and by enhancing file operations with additional architecture-specific safeguards.
- Adds recovery logic in NodeDB.cpp to attempt loading from a temporary file if the primary config load fails.
- Updates SafeFile.cpp to conditionally remove the file for non-fullAtomic writes on ARCH_NRF52.
- Refines FSCommon.cpp's renameFile function to support multiple architectures and to fallback to a copy–remove strategy.

### Reviewed Changes

Copilot reviewed 3 out of 3 changed files in this pull request and generated 2 comments.

| File              | Description                                                     |
| ----------------- | --------------------------------------------------------------- |
| src/mesh/NodeDB.cpp| Implements temporary file recovery for config load failures.     |
| src/SafeFile.cpp  | Adjusts file open and close behavior for atomic and non-atomic writes. |
| src/FSCommon.cpp  | Improves file renaming with additional locking and fallback handling. |



"
3128245210,2929215867,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-15T11:45:11Z,"## Pull Request Overview

This PR adds a new comparison guide between PGQueuer and Celery to the documentation and updates navigation links accordingly.

- Introduces a `celery-comparison.md` guide detailing side-by-side usage and feature differences.
- Updates `docs/index.rst` to include the new guide in the toctree.
- Adds a “Comparison with Celery” link to the project’s `README.md`.

### Reviewed Changes

Copilot reviewed 3 out of 3 changed files in this pull request and generated no comments.

| File               | Description                                              |
| ------------------ | -------------------------------------------------------- |
| docs/index.rst     | Added `celery-comparison` entry to the documentation toctree. |
| docs/celery-comparison.md | New Markdown document comparing PGQueuer and Celery.          |
| README.md          | Inserted a “Comparison with Celery” section linking to the new guide. |


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**docs/index.rst:67**
* The toctree entry references the Markdown file without an extension. Verify that your Sphinx setup uses a plugin (e.g., myst-parser) to handle `.md` files; otherwise, either rename the file to `.rst` or include the `.md` extension here.
```
+   celery-comparison
```
**README.md:137**
* On GitHub, relative links often require a `./` prefix. Consider changing `docs/celery-comparison.md` to `./docs/celery-comparison.md` or using an absolute path so the link resolves correctly in the rendered README.
```
+If you're coming from [Celery](https://docs.celeryq.dev/), see the [PGQueuer vs Celery](docs/celery-comparison.md) document for a quick overview…
```
</details>

"
3113639339,2892123166,ChrisHuie,APPROVED,2025-06-03T12:28:29Z,
3084793917,2862840331,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-22T23:50:04Z,"## Pull Request Overview

This PR updates the styling of the pending approval alert in the PolicyOverview component by replacing manual red styling with the new ""destructive"" variant and corresponding CSS classes.  
- Replaces manual ""border-red-500 bg-red-50"" styling with a variant property.  
- Introduces tailored class names for light and dark modes.


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**apps/app/src/app/[locale]/(app)/(dashboard)/[orgId]/policies/[policyId]/components/PolicyOverview.tsx:109**
* Confirm that the new 'variant=""destructive""' prop provides complete and consistent alert styling and that any additional custom classes are necessary rather than duplicating or overriding styles defined by the variant.
```
<Alert variant=""destructive"" className=""rounded-sm bg-destructive/10 dark:bg-destructive/20"">
```
</details>

"
3079900258,2857362401,codeant-ai[bot],COMMENTED,2025-05-21T11:36:46Z,
3079900258,2857387834,serg33v,APPROVED,2025-05-21T11:46:15Z,
3128286096,2908429847,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-08T12:09:13Z,"## Pull Request Overview

This PR fixes a typo in the README by correcting the anchor name for the ""Animation Types and properties"" section.  
- Correct the anchor in the table of contents  
- Update the corresponding anchor definition in the header



"
3148086960,2930342335,obi1kenobi,COMMENTED,2025-06-15T21:39:40Z,
3148086960,2930342587,obi1kenobi,COMMENTED,2025-06-15T21:40:37Z,
3148086960,2930342639,obi1kenobi,COMMENTED,2025-06-15T21:40:55Z,
3148086960,2930342738,obi1kenobi,COMMENTED,2025-06-15T21:41:26Z,
3148086960,2930342902,obi1kenobi,COMMENTED,2025-06-15T21:42:24Z,
3148086960,2937419685,obi1kenobi,COMMENTED,2025-06-18T00:50:18Z,
3111447381,2895909307,sh-rp,COMMENTED,2025-06-04T09:02:36Z,"Please make sure the dbt tests are executed on this PR, they are skipped for some reason."
3111447381,2897097600,sh-rp,APPROVED,2025-06-04T14:55:41Z,when the tests pass (except snowflake) we can merge
3075963167,2853000344,sourcery-ai[bot],COMMENTED,2025-05-20T07:26:38Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3160208448,2947731230,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-21T10:36:18Z,"## Pull Request Overview

This PR adds support for gluesql-redb-storage in the CLI by integrating a new storage option and its corresponding dependency.  
- Added import and branch for Redb storage in the run function  
- Included the gluesql-redb-storage dependency in Cargo.toml

### Reviewed Changes

Copilot reviewed 2 out of 3 changed files in this pull request and generated 1 comment.

| File              | Description                                        |
| ----------------- | -------------------------------------------------- |
| cli/src/lib.rs    | Added Redb storage option in imports, enum, and run match branches |
| cli/Cargo.toml    | Added dependency entry for gluesql-redb-storage    |



"
3160208448,2947732452,devgony,APPROVED,2025-06-21T10:42:22Z,
3134889774,2915085430,hinthornw,APPROVED,2025-06-10T21:31:23Z,
3107786602,2886390498,sourcery-ai[bot],COMMENTED,2025-06-02T01:12:30Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3161310056,2952027252,LiZ-Li-BBL,CHANGES_REQUESTED,2025-06-24T02:55:18Z,I guess you also need to add the logic in GLCanvas3D::on_char
3161310056,2960308608,LiZ-Li-BBL,APPROVED,2025-06-26T02:11:18Z,
3161310056,2960310232,LiZ-Li-BBL,APPROVED,2025-06-26T02:12:30Z,
3161310056,2960310867,LiZ-Li-BBL,APPROVED,2025-06-26T02:13:02Z,
3133087205,2912984484,kolaente,COMMENTED,2025-06-10T10:47:23Z,
3153675491,2937271888,devgony,APPROVED,2025-06-17T22:49:48Z,
3098859735,2876784976,Jarred-Sumner,COMMENTED,2025-05-29T01:08:48Z,
3088606911,2866395058,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-24T17:44:27Z,"## Pull Request Overview

The PR adds support for loading environment variables into Docker Compose services to address issues with missing .env configurations during runtime.  
- Adds an env_file configuration to multiple services in the docker-compose file  
- Ensures consistency across services for environment variable loading



"
3119361825,2898329269,ellipsis-dev[bot],COMMENTED,2025-06-04T23:20:56Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 07f6885b4735e0bbfc6c0a733a55cdedad2f69e4 in <ellipsistime>36 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `47` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `3` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/onlook-dev/settings/code-review) and [rules](https://app.ellipsis.dev/onlook-dev/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>packages/utility/src/window-metadata.ts:8</code></summary>
> 
> - **Draft comment:** 
> Good conversion of width/height to numbers. Consider checking for NaN in case conversion fails.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>packages/utility/src/window-metadata.ts:12</code></summary>
> 
> - **Draft comment:** 
> Fixed lexicographic comparison by using numeric values for orientation computation.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>packages/utility/src/window-metadata.ts:24</code></summary>
> 
> - **Draft comment:** 
> Refactored computeDevice to accept numbers, removing redundant conversions. Consider validating inputs to handle non-numeric cases.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_rCEjpGEhrmjrCFTX`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=onlook-dev%2Fonlook&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/onlook-dev/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/onlook-dev/code-review/rules).</sup>"
3141587291,2922695489,coderabbitai[bot],COMMENTED,2025-06-12T21:22:23Z,"**Actionable comments posted: 2**

<details>
<summary>🧹 Nitpick comments (4)</summary><blockquote>

<details>
<summary>ui/.gitignore (1)</summary><blockquote>

`28-29`: **Also ignore Playwright HTML reports & traces**

Playwright additionally creates `playwright-report/` (HTML report) and `test-results/trace/` folders.  Omitting them can easily bloat the repo with large artefacts if someone checks them in by accident.  


```diff
 test-results/
+playwright-report/
+# optional-zip archives generated via `--output`
+*.zip
```

</blockquote></details>
<details>
<summary>ui/package.json (1)</summary><blockquote>

`17-17`: **Pin Playwright to a fixed minor to prevent unexpected breaking changes**

Playwright ships a new major **every 4 weeks** and occasionally introduces breaking API changes.  
Locking to `""@playwright/test"": ""1.52.x""` (tilde range) makes upgrades an explicit decision instead of an accidental surprise.



```diff
-    ""@playwright/test"": ""^1.52.0"",
+    ""@playwright/test"": ""~1.52.0"",
```

</blockquote></details>
<details>
<summary>ui/tests/basic.spec.ts (1)</summary><blockquote>

`3-25`: **Collapse the four near-identical tests into a data-driven loop**

This removes duplication, shortens the file and makes it trivial to add more pages later.



```diff
-import { test, expect } from '@playwright/test';
-
-test('network page loads', async ({ page }) => {
-  const response = await page.goto('/network');
-  expect(response?.ok()).toBeTruthy();
-  await expect(page.getByRole('heading', { name: /Room Configuration/i })).toBeVisible();
-});
-
-test('devices page loads', async ({ page }) => {
-  const response = await page.goto('/devices');
-  expect(response?.ok()).toBeTruthy();
-  await expect(page.getByRole('heading', { name: /Devices/i })).toBeVisible();
-});
-
-test('fingerprints page loads', async ({ page }) => {
-  const response = await page.goto('/fingerprints');
-  expect(response?.ok()).toBeTruthy();
-  await expect(page.getByRole('heading', { name: /Fingerprints/i })).toBeVisible();
-});
-
-test('settings page loads', async ({ page }) => {
-  const response = await page.goto('/settings');
-  expect(response?.ok()).toBeTruthy();
-  await expect(page.getByRole('heading', { name: /Scanning/i })).toBeVisible();
-});
+import { test, expect } from '@playwright/test';
+
+const pages = [
+  { path: '/network',      heading: /Room Configuration/i },
+  { path: '/devices',      heading: /Devices/i },
+  { path: '/fingerprints', heading: /Fingerprints/i },
+  { path: '/settings',     heading: /Scanning/i },
+] as const;
+
+for (const { path, heading } of pages) {
+  test(`${path} loads`, async ({ page }) => {
+    const response = await page.goto(path);
+    expect(response).not.toBeNull();
+    expect(response!.ok()).toBeTruthy();
+    await expect(page.getByRole('heading', { name: heading })).toBeVisible();
+  });
+}
```

</blockquote></details>
<details>
<summary>ui/playwright.config.ts (1)</summary><blockquote>

`7-17`: **Consider enabling full parallelism & trace collection for easier debugging**

Not blocking, but enabling `fullyParallel: true` and `""trace"": ""on-first-retry""` will speed up suites and automatically gather debugging artefacts on CI failures.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between bd9b3d0bce39c7f5e1d37c377fe3a6b57429eaa4 and 5b747384b49d3c87bd6d3a91c271f980bce712b3.

</details>

<details>
<summary>⛔ Files ignored due to path filters (1)</summary>

* `ui/package-lock.json` is excluded by `!**/package-lock.json`

</details>

<details>
<summary>📒 Files selected for processing (4)</summary>

* `ui/.gitignore` (1 hunks)
* `ui/package.json` (1 hunks)
* `ui/playwright.config.ts` (1 hunks)
* `ui/tests/basic.spec.ts` (1 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (13)</summary>

* GitHub Check: Flawfinder
* GitHub Check: build (macchina-a0)
* GitHub Check: build (m5stickc)
* GitHub Check: build (m5stickc-plus)
* GitHub Check: build (m5atom)
* GitHub Check: build (esp32)
* GitHub Check: build (esp32s3-verbose)
* GitHub Check: build (esp32c3-verbose)
* GitHub Check: build (esp32c3-cdc)
* GitHub Check: build (esp32s3)
* GitHub Check: build (esp32s3-cdc)
* GitHub Check: build (esp32-verbose)
* GitHub Check: build (esp32c3)

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3070936351,2848353234,ellipsis-dev[bot],COMMENTED,2025-05-17T17:02:57Z,
3070936351,2848353313,sourcery-ai[bot],COMMENTED,2025-05-17T17:03:26Z,"Hey @sklein12 - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟡 **General issues**: 2 issues found
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3070936351,2848358236,ellipsis-dev[bot],COMMENTED,2025-05-17T17:29:59Z,
3070936351,2848368146,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-17T18:21:04Z,"## Pull Request Overview

This PR improves the memory usage when sharing eval results by introducing batched fetching of sample results and a new count helper, and by streaming results in chunks.  
- Adds new helper methods on Eval (fetchSampleResults, getResultsCount, clearResults) for efficient results handling  
- Updates the sendChunkedResults flow to stream result batches and improve progress tracking  
- Adjusts tests to include the new methods

### Reviewed Changes

Copilot reviewed 5 out of 5 changed files in this pull request and generated 2 comments.

<details>
<summary>Show a summary per file</summary>

| File                                 | Description                                                             |
| ------------------------------------ | ----------------------------------------------------------------------- |
| test/share.test.ts                   | Adds new mocks for getResultsCount, fetchSampleResults, and fetchResultsBatched |
| test/commands/eval/redteamWarning.test.ts | Adds mock for clearResults                                              |
| src/share.ts                         | Updates sendChunkedResults to use batched streaming and improved error logging |
| src/models/eval.ts                   | Introduces new helper methods and a results loaded flag, and implements clearResults |
| src/commands/eval.ts                 | Clears previous results before evaluation to ensure fresh data          |
</details>




"
3070936351,2850968493,will-holley,COMMENTED,2025-05-19T14:25:15Z,
3070936351,2850997855,will-holley,COMMENTED,2025-05-19T14:33:27Z,
3070936351,2851019136,will-holley,COMMENTED,2025-05-19T14:39:58Z,
3070936351,2851022120,will-holley,COMMENTED,2025-05-19T14:40:55Z,
3070936351,2851028816,will-holley,COMMENTED,2025-05-19T14:43:01Z,
3070936351,2851032866,will-holley,COMMENTED,2025-05-19T14:44:10Z,
3070936351,2851034846,will-holley,COMMENTED,2025-05-19T14:44:44Z,
3070936351,2851185724,will-holley,COMMENTED,2025-05-19T15:24:43Z,I was able to break sharing and evals with a large dataset (5000 test cases w/ base64 encoded image vars) but I believe that's unrelated.  A few small improvements requested but otherwise LGTM.
3070936351,2852014609,sklein12,COMMENTED,2025-05-19T21:15:19Z,
3070936351,2852014856,sklein12,COMMENTED,2025-05-19T21:15:29Z,
3070936351,2852028404,sklein12,COMMENTED,2025-05-19T21:23:54Z,
3070936351,2852031954,sklein12,COMMENTED,2025-05-19T21:26:14Z,
3070936351,2852042733,sklein12,COMMENTED,2025-05-19T21:33:29Z,
3070372539,2848304494,ellipsis-dev[bot],COMMENTED,2025-05-17T14:56:48Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to ec6fc7223215e72d15406a96223cba9a0164be54 in <ellipsistime>1 minute and 5 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `48` lines of code in `1` files
> - Skipped `19` files when reviewing.
> - Skipped posting `3` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>cookbooks/README.md:40</code></summary>
> 
> - **Draft comment:** 
> Good use of a dedicated 'Basics Series' section. Ensure the new basics notebooks exist at 'cookbooks/basics' and the numbering is consistent.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>cookbooks/README.md:50</code></summary>
> 
> - **Draft comment:** 
> The advanced notebooks have been moved under an 'advanced' directory and links updated accordingly. Verify that all Colab links point to the correct path.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>cookbooks/README.md:42</code></summary>
> 
> - **Draft comment:** 
> Consider adding a blank line after section headers for improved markdown readability.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_dQE3MwTiJsSmYXMq`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3148227562,2931014258,coderabbitai[bot],COMMENTED,2025-06-16T07:58:56Z,"**Actionable comments posted: 0**

<details>
<summary>🔭 Outside diff range comments (1)</summary><blockquote>

<details>
<summary>packages/api/src/providers/microsoft-calendar/utils.ts (1)</summary><blockquote>

`35-38`: _⚠️ Potential issue_

**`timeZoneId` does not exist on `Temporal.ZonedDateTime` – will be `undefined`**  

`Temporal.ZonedDateTime` exposes the zone via `.timeZone.id`. The current code risks sending `{ timeZone: undefined }`, which Microsoft Graph accepts but silently interprets as the tenant default. That’s probably not what we want.

```diff
-  return {
-    dateTime: value.toInstant().toString(),
-    timeZone: value.timeZoneId,
-  };
+  return {
+    dateTime: value.toInstant().toString(), // still ISO with Z
+    timeZone: value.timeZone.id,
+  };
```

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>packages/api/src/providers/microsoft-calendar/utils.ts (1)</summary><blockquote>

`24-27`: **Nit: one allocation can be avoided**  

`toZonedDateTimeISO(""UTC"").toPlainDateTime().toString({ fractionalSecondDigits: 7 })` is perfectly valid, but if all you need is an ISO string you can avoid constructing the intermediate `ZonedDateTime` by doing a direct stringify and slicing the trailing `""Z""`:

```diff
-const dateTime = value
-  .toZonedDateTimeISO(""UTC"")
-  .toPlainDateTime()
-  .toString({ fractionalSecondDigits: 7 });
+const dateTime = value
+  .toString({ fractionalSecondDigits: 7 })
+  .replace(/Z$/, """"); // drop the trailing “Z”
```

This is purely optional—choose whichever you think is clearer.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between e9171674c9650f0889500986e41c10165df63c34 and 4f1c7c5096baf1722d6e67ccbd18cf6b4fbbbb8d.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `packages/api/src/providers/microsoft-calendar/utils.ts` (1 hunks)

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>packages/api/src/providers/microsoft-calendar/utils.ts (1)</summary>

`21-33`: **Good job: `Temporal.Instant` now mapped correctly to Microsoft Graph format**  

Converting the `Instant` to UTC, stripping the zone from the string and forcing exactly 7 fractional-second digits aligns with the Graph DateTimeTimeZone contract.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3092755047,2870117850,sourcery-ai[bot],COMMENTED,2025-05-27T08:12:52Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3125497651,2908153260,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-08T06:02:44Z,"## Pull Request Overview

This PR updates the README to enhance project visibility by adding badges. It introduces an npm version badge and a DeepWiki link in the title header.



"
3100483287,2878988202,ChrisHuie,APPROVED,2025-05-29T16:59:49Z,
3131552625,2911507806,seratch,APPROVED,2025-06-09T22:30:22Z,
3147960973,2952651526,dagnelies,APPROVED,2025-06-24T08:44:13Z,"I'll approve this. Most of my comments are just nitpicking but due to formatting changes the logic changes were kind of difficult to spot. I hope this doesn't introduce subtle bugs in edge cases with autocomplete values such as `null`, `''` or `0` as side effect."
3147960973,2954526992,gmercey,COMMENTED,2025-06-24T16:15:37Z,
3147960973,2954668935,dagnelies,APPROVED,2025-06-24T17:10:06Z,LGTM. 🎉 Thank you for your contribution! 👍
3071995028,2849970090,PawelPeczek-Roboflow,APPROVED,2025-05-19T08:53:34Z,
3128289478,2908430576,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-08T12:10:28Z,"## Pull Request Overview

Fixes typos in the pitch rotation animation titles.

- Corrects “pictch” to “pitch” in both horizontal and vertical entries.


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**Example/Gemini/ViewControllers/AnimationListViewController.swift:32**
* Consider adding or updating unit/UI tests to verify that the corrected pitch rotation titles appear as expected in the animation list.
```
""Horizontal pitch up""
```
</details>

"
3070935368,2848352491,greptile-apps[bot],COMMENTED,2025-05-17T17:02:01Z,"
## PR Summary

Fixed a bug in the YouTube extension where opening a video with IINA wasn't adding videos to the recent list due to incorrect function call syntax in `extensions/youtube/src/components/video.tsx`.

- Fixed `OpenWithIINAAction` component by correctly calling `addRecentVideo(video.id)` instead of creating an unused function with `() => addRecentVideo(video.id)`

<sub>1 file(s) reviewed, no comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=extensions_19251)</sub>"
3070935368,2860412854,pernielsentikaer,APPROVED,2025-05-22T09:07:27Z,
3071786488,2848982490,lunary-bot,APPROVED,2025-05-18T13:31:30Z,
3082282170,2867531206,ellipsis-dev[bot],COMMENTED,2025-05-26T07:29:30Z,
3082282170,2867542010,sourcery-ai[bot],COMMENTED,2025-05-26T07:33:54Z,"Hey @mldangelo - I've reviewed your changes and found some issues that need to be addressed.

**Blocking issues**:
- Test for `search_parameters` has critical issues and doesn't validate the core feature. ([link](https://github.com/promptfoo/promptfoo/pull/4123/files#diff-55043f27509449ef8aecd877857ec320656ec84b8796cb7fefec9325711eb0abR27))

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🔴 **Testing**: 1 blocking issue
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3105703473,2884284107,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-31T16:11:04Z,"## Pull Request Overview

This PR fixes subdomain offset handling, ensuring that when an offset exceeds the available subdomains the method returns an empty slice. The changes include updating the test expectations in ctx_test.go and modifying the Subdomains logic in ctx.go to avoid slice bounds errors.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated no comments.

| File        | Description                                                |
|-------------|------------------------------------------------------------|
| ctx_test.go | Updated tests to reflect the corrected subdomain handling. |
| ctx.go      | Modified Subdomains to return an empty slice when the offset makes the slice value non-positive. |


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**ctx.go:1760**
* When the host contains only a single segment (e.g. 'localhost'), the current logic does not return an empty slice even though the new behavior expects it. Consider adding a condition (e.g. if len(subdomains) <= 1 { return [] }) before calculating the offset to ensure consistent subdomain handling.
```
l := len(subdomains) - o
```
</details>

"
3105703473,2884334289,sixcolors,CHANGES_REQUESTED,2025-05-31T17:08:10Z,
3105703473,2884342147,gaby,COMMENTED,2025-05-31T17:09:39Z,
3105703473,2884342214,gaby,COMMENTED,2025-05-31T17:09:59Z,
3105703473,2884343392,gaby,COMMENTED,2025-05-31T17:12:04Z,
3105703473,2884343414,gaby,COMMENTED,2025-05-31T17:12:12Z,
3105703473,2884351326,sixcolors,COMMENTED,2025-05-31T17:19:20Z,
3105703473,2884356736,gaby,COMMENTED,2025-05-31T17:21:34Z,
3105703473,2886227213,github-actions[bot],COMMENTED,2025-06-01T23:01:17Z,"<!-- github-benchmark-action-comment(start): Benchmark Alert -->
# :warning: **Performance Alert** :warning:

Possible performance regression was detected for benchmark.
Benchmark result of this commit is worse than the previous benchmark result exceeding threshold `1.50`.

| Benchmark suite | Current: f12a933097118e2e08060cc8b5a5a69079be09c3 | Previous: 9409e4ff0c62c74a20413d3a63c06c7bdf6b3f08 | Ratio |
|-|-|-|-|
| `Benchmark_GenericParseTypeBytes/benchmark_genericParseTypeBytes#03` | `25.88` ns/op	       0 B/op	       0 allocs/op | `15.49` ns/op	       0 B/op	       0 allocs/op | `1.67` |
| `Benchmark_GenericParseTypeBytes/benchmark_genericParseTypeBytes#03 - ns/op` | `25.88` ns/op | `15.49` ns/op | `1.67` |

This comment was automatically generated by [workflow](https://github.com/gofiber/fiber/actions?query=workflow%3ABenchmark) using [github-action-benchmark](https://github.com/marketplace/actions/continuous-benchmark).
<!-- github-benchmark-action-comment(end): Benchmark Alert -->"
3105703473,2896473090,coderabbitai[bot],COMMENTED,2025-06-04T12:05:04Z,"**Actionable comments posted: 1**

<details>
<summary>🧹 Nitpick comments (3)</summary><blockquote>

<details>
<summary>docs/api/ctx.md (3)</summary><blockquote>

`1347-1352`: **Nit: unify “sub-domain” terminology**  
The term “sub-domain” is hyphenated here, but elsewhere the code and docs use “subdomain” as one word. For consistency and to avoid confusion, consider changing “sub-domain” → “subdomain.”

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[misspelling] ~1347-~1347: This word is normally spelled as one.
Context: ...omains  Returns a slice with the host’s sub-domain labels. The dot-separated parts that pr...

(EN_COMPOUNDS_SUB_DOMAIN)

</details>

</details>

---

`1363-1372`: **Enhance examples to cover edge cases**  
Great interactive example. To fully illustrate the updated logic, add:  
- A case for `offset > count` (e.g., `c.Subdomains(10) // []`)  
- An example with a port in the host (e.g., `Host: ""tobi.ferrets.example.com:8080"" → c.Subdomains() // [""tobi"",""ferrets""]`)  
This will help users understand both the port‐stripping and out‐of‐range behavior.

---

`1600-1602`: **Nit: clarify default filename handling**  
It’s worth noting that the default `filename=` parameter uses the basename of the given path (not the full path). Consider updating to:  
“By default, the `filename=` parameter is set to the file’s basename (e.g., `report-12345.pdf`), not the full path.”

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 0d7da88df4c46e69036743112284144b116332b3 and 3d1b83687a500dd7f72d08168600be2eb125f4b2.

</details>

<details>
<summary>📒 Files selected for processing (3)</summary>

* `ctx.go` (1 hunks)
* `ctx_test.go` (1 hunks)
* `docs/api/ctx.md` (2 hunks)

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (2)</summary>

* ctx.go
* ctx_test.go

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 LanguageTool</summary>

<details>
<summary>docs/api/ctx.md</summary>

[misspelling] ~1347-~1347: This word is normally spelled as one.
Context: ...omains  Returns a slice with the host’s sub-domain labels. The dot-separated parts that pr...

(EN_COMPOUNDS_SUB_DOMAIN)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (3)</summary>

* GitHub Check: unit (1.24.x, windows-latest)
* GitHub Check: repeated
* GitHub Check: Compare

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3105703473,2896476458,gaby,COMMENTED,2025-06-04T12:06:20Z,
3105703473,2896477702,coderabbitai[bot],COMMENTED,2025-06-04T12:06:48Z,
3105703473,2896528404,coderabbitai[bot],COMMENTED,2025-06-04T12:24:38Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>docs/api/ctx.md (1)</summary><blockquote>

`1347-1347`: **Correct compound spelling.**

“sub-domain” should be one word: “subdomain”.  
Apply:
```diff
- Returns a slice with the host’s sub-domain labels.
+ Returns a slice with the host’s subdomain labels.
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[misspelling] ~1347-~1347: This word is normally spelled as one.
Context: ...omains  Returns a slice with the host’s sub-domain labels. The dot-separated parts that pr...

(EN_COMPOUNDS_SUB_DOMAIN)

</details>

</details>

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 3d1b83687a500dd7f72d08168600be2eb125f4b2 and f12a933097118e2e08060cc8b5a5a69079be09c3.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `docs/api/ctx.md` (2 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 LanguageTool</summary>

<details>
<summary>docs/api/ctx.md</summary>

[misspelling] ~1347-~1347: This word is normally spelled as one.
Context: ...omains  Returns a slice with the host’s sub-domain labels. The dot-separated parts that pr...

(EN_COMPOUNDS_SUB_DOMAIN)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (4)</summary>

* GitHub Check: Compare
* GitHub Check: repeated
* GitHub Check: unit (1.24.x, macos-13)
* GitHub Check: unit (1.24.x, windows-latest)

</details>

<details>
<summary>🔇 Additional comments (3)</summary><blockquote>

<details>
<summary>docs/api/ctx.md (3)</summary>

`1349-1354`: **Description and signature update looks good.**

The default offset explanation and the new variadic `offset ...int` signature correctly reflect the implementation.

---

`1356-1363`: **Subdomain offset behavior table is comprehensive.**

The table now clearly covers omitted (default), valid ranges, boundary and invalid cases.

---

`1370-1373`: **Examples accurately reflect new behavior.**

The sample outputs for default, positive, zero and negative offsets match the implementation.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3105703473,2897119987,ReneWerner87,APPROVED,2025-06-04T15:02:10Z,
3102172513,2880346092,nektro,COMMENTED,2025-05-30T06:51:56Z,test indentation is all messed up but change looks good
3102336394,2881214127,jamie-rasmussen,APPROVED,2025-05-30T12:38:23Z,
3102336394,2881988562,neutralino1,APPROVED,2025-05-30T17:35:07Z,
3102336394,2882627414,tssweeney,COMMENTED,2025-05-30T21:51:44Z,
3102336394,2882627458,tssweeney,COMMENTED,2025-05-30T21:51:47Z,
3071701673,2848921555,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-18T12:16:52Z,"## Pull Request Overview

This PR fixes a typo in comment phrasing for ID generation within auth helper modules.
- Updated comment text in three files to correct ""customs ID's"" to ""custom IDs"".

### Reviewed Changes

Copilot reviewed 3 out of 3 changed files in this pull request and generated 3 comments.

| File                                               | Description                                            |
| -------------------------------------------------- | ------------------------------------------------------ |
| apps/portal/src/app/lib/auth.ts                    | Corrected comment phrasing for ID generation.         |
| apps/framework-editor/app/lib/auth.ts              | Corrected comment phrasing for ID generation.         |
| apps/app/src/utils/auth.ts                         | Corrected comment phrasing for ID generation.         |



"
3117580005,2896532687,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-04T12:26:03Z,"## Pull Request Overview

Fixes a typo in the error message when Windows adapter retrieval fails.

- Corrects “did not success” to “did not succeed” in the `GetAdaptersAddresses` error.



"
3156718715,2939039327,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-18T12:38:25Z,"## Pull Request Overview

This PR fixes the logger.warn method by changing the logging call from console.error to console.warn, ensuring that warning messages are logged at the correct log level. It also removes an unnecessary logger test and adds a corresponding changeset for the patch update.
- Replaces console.error with console.warn in logger.warn method
- Removes unnecessary logger test
- Adds changeset file to document the patch update

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated no comments.

| File                                              | Description                                          |
| ------------------------------------------------- | ---------------------------------------------------- |
| packages/mcp-docs-server/src/utils/logger.ts      | Changed logger.warn from console.error to console.warn |
| .changeset/warn-console.md                        | Added changeset entry for the patch update           |



"
3156718715,2939039120,greptile-apps[bot],COMMENTED,2025-06-18T12:38:57Z,"
## PR Summary
Fixed logger's warn method in `packages/mcp-docs-server/src/utils/logger.ts` to correctly use `console.warn` instead of `console.error`, better aligning with standard logging severity levels.

- Changed warn method implementation from `console.error` to `console.warn` for proper severity indication
- Removed redundant logger test to improve maintainability

<sub>1 file reviewed, no comments</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=assistant-ui_2127)</sub>"
3155767625,2938027812,gemini-code-assist[bot],COMMENTED,2025-06-18T07:21:05Z,"## Summary of Changes

Hello @rgerhards, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request enhances the reliability of the test suite by modifying how Kafka-related tests handle failures when attempting to download their external dependencies. Instead of terminating with an error, these tests will now be skipped, preventing false negatives in test runs caused by transient network issues.

### Highlights

* **Improved Test Robustness**: Tests that rely on Kafka and Zookeeper dependencies will now skip gracefully instead of failing outright if the necessary packages cannot be downloaded due to network restrictions or other download issues.
* **Standardized Test Skipping**: The `error_exit` code for dependency download failures has been changed from `1` to `77` within the `download_kafka` function. Exit code `77` is a common convention in some test frameworks to indicate that a test should be skipped.
* **Clearer Error Messages**: Added specific `echo` messages to the console to clearly indicate whether the Zookeeper or Kafka download failed, informing the user that the test is being skipped.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configure Gemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3155767625,2938029109,gemini-code-assist[bot],COMMENTED,2025-06-18T07:21:26Z,"## Code Review

The pull request correctly updates the `download_kafka` function in `tests/diag.sh` to exit with code 77 (SKIP) instead of 1 (FAIL) when the download of Kafka or Zookeeper dependencies fails after a retry. This is a good change for the test suite, allowing tests to be skipped gracefully in environments with network restrictions rather than failing the entire build. My review focused on identifying issues with severity `medium`, `high`, or `critical`. No issues of these severity levels were found in the changes."
3144047608,2926133253,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-13T19:35:34Z,"## Pull Request Overview

This PR ensures that malformed graphs don’t break the entire listing process by validating each graph’s serialization and skipping those that fail.

- Trigger graph serialization (`model_dump`) to detect malformed graphs
- Log errors for invalid graphs and skip them instead of aborting
- Preserve listing of valid graphs even when some are invalid


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**autogpt_platform/backend/backend/data/graph.py:663**
* Consider using `logger.exception(...)` instead of `logger.error` here to automatically include the full stack trace of the underlying error for easier debugging.
```
logger.error(f""Error processing graph {graph.id}: {e}"")
```
**autogpt_platform/backend/backend/data/graph.py:660**
* Add a unit test for `get_graphs` that injects an invalid graph record and verifies it is skipped while valid graphs are still returned, to guard against regressions.
```
graph_model.model_dump()
```
</details>

"
3144047608,2931020666,Swiftyos,APPROVED,2025-06-16T08:01:08Z,Good idea
3086078600,2864202450,ellipsis-dev[bot],COMMENTED,2025-05-23T12:10:43Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 7ad73f39a9c2685c9900772468ac7b904c7af8cd in <ellipsistime>1 minute and 26 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `309` lines of code in `12` files
> - Skipped `2` files when reviewing.
> - Skipped posting `12` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>CHANGELOG.md:59</code></summary>
> 
> - **Draft comment:** 
> Changelog update accurately reflects the breaking change; the removal of DEMO_* credential fallback is clearly documented.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>documentation/advanced/types-of-task-steps.mdx:435</code></summary>
> 
> - **Draft comment:** 
> API key placeholder updated to 'YOUR_BRAVE_API_KEY'; ensure consistency across all docs and cookbooks.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>integrations-service/integrations/utils/integrations/algolia.py:22</code></summary>
> 
> - **Draft comment:** 
> Removed DEMO fallback logic; ensure that 'setup' always provides valid Algolia credentials.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>integrations-service/integrations/utils/integrations/brave.py:22</code></summary>
> 
> - **Draft comment:** 
> Directly using the API key from setup in Brave integration; change is consistent with removal of DEMO fallback.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>integrations-service/integrations/utils/integrations/browserbase.py:34</code></summary>
> 
> - **Draft comment:** 
> Removed DEMO fallback for Browserbase; ensure that valid credentials (including project_id) are provided in 'setup'.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>6. <code>integrations-service/integrations/utils/integrations/cloudinary.py:59</code></summary>
> 
> - **Draft comment:** 
> Removed DEMO fallback for Cloudinary credentials. Consider refactoring the combined async context managers for improved clarity.
> - **Reason this comment was not posted:**
> Confidence changes required: `50%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>7. <code>integrations-service/integrations/utils/integrations/email.py:28</code></summary>
> 
> - **Draft comment:** 
> Removed DEMO fallback for email password; ensure production credentials are available.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>8. <code>integrations-service/integrations/utils/integrations/llama_parse.py:26</code></summary>
> 
> - **Draft comment:** 
> Removed fallback for DEMO_API_KEY in LlamaParse; verify that a proper API key is provided in the setup.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>9. <code>integrations-service/integrations/utils/integrations/mailgun.py:74</code></summary>
> 
> - **Draft comment:** 
> Removed DEMO fallback for Mailgun API key; now solely using setup.api_key.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>10. <code>integrations-service/integrations/utils/integrations/spider.py:29</code></summary>
> 
> - **Draft comment:** 
> Removed DEMO fallback for Spider API key; ensure that the provided key in setup is correct.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>11. <code>integrations-service/integrations/utils/integrations/unstructured.py:27</code></summary>
> 
> - **Draft comment:** 
> Removed DEMO fallback for Unstructured API key; relying on setup.unstructured_api_key directly.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>12. <code>integrations-service/integrations/utils/integrations/weather.py:22</code></summary>
> 
> - **Draft comment:** 
> Removed DEMO fallback for OpenWeatherMap API key; ensure setup.openweathermap_api_key is valid.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_HtiB9bxJRwH3Ty1i`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3131240866,2911101340,ellipsis-dev[bot],COMMENTED,2025-06-09T19:28:17Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 8d36122ce5fc0739e7b3a14895ce10c9bf780ab9 in <ellipsistime>1 minute and 0 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `17` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `1` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/onlook-dev/settings/code-review) and [rules](https://app.ellipsis.dev/onlook-dev/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>apps/web/client/src/app/project/[id]/_hooks/use-chat.tsx:28</code></summary>
> 
> - **Draft comment:** 
> Removed the finishReason conditional to always persist assistant messages. Confirm that this change is compatible with useChat's expected onFinish signature and that persisting messages for all finish reasons is intended.
> - **Reason this comment was not posted:**
> Comment looked like it was already resolved.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_tHlUZXYlxjQkepNi`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=onlook-dev%2Fonlook&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/onlook-dev/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/onlook-dev/code-review/rules).</sup>"
3097032976,2874753854,github-actions[bot],COMMENTED,2025-05-28T12:08:18Z,"<!-- github-benchmark-action-comment(start): Benchmark Alert -->
# :warning: **Performance Alert** :warning:

Possible performance regression was detected for benchmark.
Benchmark result of this commit is worse than the previous benchmark result exceeding threshold `1.50`.

| Benchmark suite | Current: ab6755e1a0ef421d3c7585792ab3d0339f02eae7 | Previous: a779888d4446891e296d8ba670c996ac2c94e56a | Ratio |
|-|-|-|-|
| `Benchmark_Ctx_IsProxyTrusted/NoProxyCheckParallel` | `1.421` ns/op	       0 B/op	       0 allocs/op | `0.9416` ns/op	       0 B/op	       0 allocs/op | `1.51` |
| `Benchmark_Ctx_IsProxyTrusted/NoProxyCheckParallel - ns/op` | `1.421` ns/op | `0.9416` ns/op | `1.51` |

This comment was automatically generated by [workflow](https://github.com/gofiber/fiber/actions?query=workflow%3ABenchmark) using [github-action-benchmark](https://github.com/marketplace/actions/continuous-benchmark).
<!-- github-benchmark-action-comment(end): Benchmark Alert -->"
3097032976,2875011443,ReneWerner87,APPROVED,2025-05-28T13:12:22Z,
3081110111,2869211261,michaelneale,CHANGES_REQUESTED,2025-05-27T00:00:26Z,some questions inline on changes - and also needs to do secret checking for the routes for goose-server - but close! hopefully lets get this in today.
3081110111,2869263043,Kvadratni,COMMENTED,2025-05-27T00:11:14Z,
3081110111,2869264995,Kvadratni,COMMENTED,2025-05-27T00:14:38Z,
3081110111,2869265257,Kvadratni,COMMENTED,2025-05-27T00:15:04Z,
3081110111,2869265687,Kvadratni,COMMENTED,2025-05-27T00:15:45Z,
3081110111,2869265841,Kvadratni,COMMENTED,2025-05-27T00:15:59Z,
3081110111,2869266325,Kvadratni,COMMENTED,2025-05-27T00:16:44Z,
3081110111,2869266467,Kvadratni,COMMENTED,2025-05-27T00:16:57Z,
3081110111,2869268107,Kvadratni,COMMENTED,2025-05-27T00:19:20Z,
3081110111,2869268783,Kvadratni,COMMENTED,2025-05-27T00:20:28Z,
3081110111,2870086263,michaelneale,APPROVED,2025-05-27T08:06:24Z,"once feedback is addressed for critical things, yeah lets get it in (as it is alpha flagged off)"
3079735939,2857166226,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-21T10:26:27Z,"## Pull Request Overview

Removes an outdated note in the README about using a `TabPFNRegressor`.

- Deleted a comment that assumed `TabPFNRegressor` availability.
- No functional code changes.


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**README.md:78**
* [nitpick] Now that the assumption comment is removed, consider adding a brief note or link explaining how to install or configure `TabPFNRegressor`, or suggest an alternative regressor if it's not available.
```
from tabpfn import TabPFNRegressor
```
</details>

"
3086427872,2864710544,dandavison,APPROVED,2025-05-23T14:52:41Z,"Nice, we'll get there eventually!"
3085149115,2867204964,mldangelo,COMMENTED,2025-05-26T04:46:58Z,
3085149115,2867205881,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-26T04:47:33Z,"## Pull Request Overview

This PR refactors the categorization of plugins in the redteam setup UI by separating plugins into agentic and dataset exemptions, and updates the UI to display corresponding labels.  
- Introduces AGENTIC_EXEMPT_PLUGINS and DATASET_EXEMPT_PLUGINS in constants.ts.  
- Combines the exemptions into a unified STRATEGY_EXEMPT_PLUGINS list.  
- Updates the Plugins.tsx UI to render labels for agentic and dataset exempt plugins.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated 1 comment.

| File | Description |
| ---- | ----------- |
| src/redteam/constants.ts | Refactored plugin exemption constants and types for improved categorization. |
| src/app/src/pages/redteam/setup/components/Plugins.tsx | Updated the plugin display to include labels and adjusted spacing for better UI clarity. |


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**src/app/src/pages/redteam/setup/components/Plugins.tsx:501**
* [nitpick] The label 'no strategies' may be unclear; consider using a term such as 'dataset' for consistency with 'agentic' if that better reflects the exemption type.
```
no strategies
```
</details>

"
3085149115,2867254882,ellipsis-dev[bot],COMMENTED,2025-05-26T05:25:36Z,
3085149115,2867257352,sourcery-ai[bot],COMMENTED,2025-05-26T05:26:18Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟡 **General issues**: 1 issue found
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3121482672,2900757350,ChrisHuie,APPROVED,2025-06-05T15:14:41Z,
3101574684,2879708586,ellipsis-dev[bot],COMMENTED,2025-05-29T21:58:52Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed 1a35dd42c1c077699fa835159c0994ba8320fe06 in <ellipsistime>2 minutes and 0 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `915` lines of code in `39` files
> - Skipped `0` files when reviewing.
> - Skipped posting `7` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern-frontend/src/components/ModelSelector.tsx:43</code></summary>
> 
> - **Draft comment:** 
> The ModelSelector’s value is read as value?.model and onValueChange wraps the new value as { model: value }. Consider if a flatter model state would simplify usage, or add comments to clarify the nested structure.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 20% vs. threshold = 50% While the comment identifies a real pattern in the code, suggesting to ""flatten"" the model state is speculative without understanding the broader codebase context. The WorkflowModel type likely has this structure for a reason, and changing it would require changes beyond this file. The current implementation correctly matches the Props type interface. I might be overlooking potential maintenance or usability issues that could arise from this nested structure. The comment could be highlighting a legitimate architectural concern. Without seeing the broader codebase context and understanding why WorkflowModel is structured this way, suggesting to flatten it is speculative. The current implementation is consistent with its type definitions. The comment should be deleted as it makes a speculative suggestion about architectural changes without sufficient context to know if it would be an improvement.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>skyvern-frontend/src/routes/workflows/editor/nodes/NavigationNode/types.ts:27</code></summary>
> 
> - **Draft comment:** 
> navigationNodeDefaultData uses a default value of { model: """" } while most other nodes default to null. Consider unifying the default behavior (e.g. use null or DEFAULT_MODEL) for consistency.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>skyvern-frontend/src/routes/workflows/editor/nodes/StartNode/StartNode.tsx:54</code></summary>
> 
> - **Draft comment:** 
> In StartNode, when withWorkflowSettings is false, the model is set to { model: models[0] || """" }. Consider whether this default should match the other defaults (null or a standard DEFAULT_MODEL) to keep consistency.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 20% vs. threshold = 50% The comment points out a real inconsistency in how defaults are handled. However, the model field is fundamentally different from the others - it depends on an async API call to get available models. The current approach of using the first available model (or empty string as fallback) seems reasonable. There's no clear evidence that using null would be better, and the current approach ensures a valid model is selected when possible. I might be overlooking potential issues with using an empty string as a fallback. Also, the inconsistency could make the code harder to maintain. The empty string fallback appears intentional as it matches the Select component's needs, and the code handles it appropriately with the ?? ""Skyvern Optimized"" fallback in the UI. The inconsistency seems justified by the different nature of this field. While the comment identifies a real pattern inconsistency, the current implementation appears intentional and appropriate for this specific field's needs. The comment should be removed as it doesn't identify a clear improvement.
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>skyvern-frontend/src/routes/workflows/editor/workflowEditorUtils.ts:2134</code></summary>
> 
> - **Draft comment:** 
> Workflow settings include a 'model' field. Ensure that nodes passing through conversion functions consistently use either null or a proper default (e.g., DEFAULT_MODEL) to avoid inconsistencies in saved workflows.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>skyvern-frontend/src/routes/workflows/editor/nodes/*/types.ts:1</code></summary>
> 
> - **Draft comment:** 
> Several node type files now include an added 'model' field in their default data. Verify that all nodes follow a consistent default approach and that the type (WorkflowModel | null) is used consistently across all nodes.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> <details>
> <summary>6. <code>skyvern-frontend/src/routes/workflows/editor/ModelSelector.tsx:26</code></summary>
> 
> - **Draft comment:** 
> Consider handling error and loading states from the useQuery call so that the component can inform users in case fetching models fails.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> <details>
> <summary>7. <code>skyvern-frontend/src/routes/workflows/editor/nodes/TaskNode/TaskNode.tsx:237</code></summary>
> 
> - **Draft comment:** 
> Double-check the use of the CSS class name 'nopan' in the ModelSelector component. If this is a typo and should be 'no-pan' or another intended class, please update accordingly.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `30%` <= threshold `50%` The comment is asking the author to double-check the use of a CSS class name, which violates the rule against asking the author to confirm their intention or to double-check things. However, it does suggest a specific alternative (`no-pan`), which could be useful if it was a typo. The comment is partially useful but mostly violates the rules.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_M45FhkWZFKIMi0Cn`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3101574684,2879708671,ellipsis-dev[bot],COMMENTED,2025-05-29T21:58:56Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 1a35dd42c1c077699fa835159c0994ba8320fe06 in <ellipsistime>2 minutes and 4 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `915` lines of code in `39` files
> - Skipped `0` files when reviewing.
> - Skipped posting `8` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern-frontend/src/components/ModelSelector.tsx:43</code></summary>
> 
> - **Draft comment:** 
> Ensure that the ‘model’ property is used consistently. Here the component expects a WorkflowModel object, but it only wraps a string (e.g. { model: value }). Consider whether the model value should simply be a string, or document/validate the expected structure.
> - **Reason this comment was not posted:**
> Comment looked like it was already resolved.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>skyvern-frontend/src/routes/workflows/editor/nodes/types.ts:4</code></summary>
> 
> - **Draft comment:** 
> Review the new 'model' field added to NodeBaseData – consider whether its type (WorkflowModel | null) should default to a non-null value for consistency. Some nodes default to null while workflow settings use DEFAULT_MODEL.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 20% vs. threshold = 50% The comment is speculative - it's suggesting to ""consider"" something rather than pointing out a clear issue. We don't have enough context to know if null is actually a valid/intended state for this field. The DEFAULT_MODEL reference appears to be used in a different context and doesn't prove that null values are incorrect here. The comment could be raising a valid consistency concern - having some nodes use null and others use a default could lead to bugs. Without seeing how this field is actually used across the codebase, we can't determine if null values are problematic or if consistency is actually needed here. The comment is too speculative. Delete this comment as it's speculative (""consider whether..."") and we lack strong evidence that making the field non-null would be correct.
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>skyvern-frontend/src/routes/workflows/editor/workflowEditorUtils.ts:1320</code></summary>
> 
> - **Draft comment:** 
> When extracting workflow settings, the 'model' property is taken from the start node data. Ensure that upstream nodes supply a valid model object – consider normalizing the value so that downstream consumers receive a consistent type.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>Multiple node type files (e.g. ActionNode, CodeBlockNode, etc.):1</code></summary>
> 
> - **Draft comment:** 
> All modified node types now include a new 'model' field. Please double-check that all default data objects (e.g. actionNodeDefaultData, codeBlockNodeDefaultData, etc.) are updated consistently and that editors handle null vs. a valid model appropriately. Consistency across nodes is key.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>skyvern-frontend/src/routes/workflows/types/workflowTypes.ts:1</code></summary>
> 
> - **Draft comment:** 
> The WorkflowModel type is defined as a JsonObjectExtendable with a single 'model' property. If the only field is 'model', consider whether this additional wrapping is necessary or could be simplified to a string to avoid potential confusion.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 10% vs. threshold = 50% Without seeing the definition of JsonObjectExtendable or understanding its purpose, I can't be certain if the wrapping is unnecessary. The type might allow for future extensibility or have special behavior we can't see. The comment is speculative without strong evidence that the wrapping is definitely problematic. I don't have visibility into JsonObjectExtendable's definition or purpose. The wrapping could be intentional for future extensibility or type system reasons. Without clear evidence that the wrapping is problematic or understanding the full context, this comment is too speculative to be actionable. The comment should be removed as it makes assumptions without sufficient context to prove the suggestion would be an improvement.
> 
> 
> </details>
> 
> <details>
> <summary>6. <code>skyvern-frontend/src/routes/workflows/editor/nodes/ActionNode/ActionNode.tsx:181</code></summary>
> 
> - **Draft comment:** 
> It appears that the className string contains ""nopan"". Please verify if ""nopan"" is intended or if it should be ""no-pan"" or another valid class name.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 10% vs. threshold = 50% The consistent usage of ""nopan"" across multiple components suggests this is an intentional naming choice, not a typo. The comment is speculative and asks for verification without strong evidence of an actual issue. The class name appears to be part of the established codebase conventions. I could be wrong if ""nopan"" is actually a typo that was copied multiple times. Also, I don't have access to the CSS files to confirm if this class is properly defined. Even if it were a typo, the consistent usage across the codebase suggests it's an established convention. The comment is speculative and asks for verification without providing evidence of an actual problem. Delete the comment. It's speculative, asks for verification without evidence of an issue, and questions what appears to be an established class naming convention in the codebase.
> 
> 
> </details>
> 
> <details>
> <summary>7. <code>skyvern-frontend/src/routes/workflows/editor/nodes/FileDownloadNode/FileDownloadNode.tsx:172</code></summary>
> 
> - **Draft comment:** 
> Possible typographical error: The string ""nopan"" in the className property may be a typo. Did you mean ""no-pan"" or is this intentional?
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 10% vs. threshold = 50% The consistent usage of ""nopan"" across multiple components suggests this is an intentional class name, likely used for some pan-related functionality (perhaps preventing panning behavior in a UI component). The fact that it appears 8 times in the same file in similar contexts strongly indicates this is not a typo but rather a deliberate naming choice. I could be wrong if this is actually a typo that was copy-pasted multiple times. The presence of multiple instances doesn't guarantee correctness. While copy-paste errors are possible, the systematic use across different types of components (TextArea, Input, CodeEditor) and the specific nature of the name strongly suggests this is intentional. The comment should be deleted as it's raising a false concern about what appears to be an intentional class name used consistently throughout the codebase.
> 
> 
> </details>
> 
> <details>
> <summary>8. <code>skyvern-frontend/src/routes/workflows/editor/nodes/NavigationNode/NavigationNode.tsx:204</code></summary>
> 
> - **Draft comment:** 
> Typo consideration: The string 'nopan' in the className on the ModelSelector component might be a typo. If it's intended to disable padding or similar, please verify that this is the correct class name.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 0% vs. threshold = 50% The class ""nopan"" appears to be intentionally used throughout the codebase in a consistent way. It's used on various input and selector components. Given its widespread usage, it's likely a custom class name with a specific purpose (probably related to disabling pan behavior). The comment is speculative and asking for verification, which violates our rules. I could be wrong if this is actually a typo that has been copy-pasted multiple times. The consistent usage doesn't necessarily mean it's correct. Even if it were a typo, asking for verification violates our rules. We should only keep comments that are definitively pointing out issues. Delete the comment. It's speculative, asks for verification, and the class name appears to be intentionally used throughout the codebase.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_pnASMIa6ifheBw1Z`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3101574684,2879719737,jomido,APPROVED,2025-05-29T22:06:23Z,
3070229503,2851465011,lee-at-zoo-corp,APPROVED,2025-05-19T16:58:30Z,
3129032116,2908848745,coderabbitai[bot],COMMENTED,2025-06-09T03:39:25Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/utils/test_config.py (1)</summary><blockquote>

`305-324`: **Good thread safety test with potential assertion improvement.**

The test effectively verifies that concurrent updates don't cause exceptions and that the locking mechanism works. However, consider strengthening the final assertion:



The current assertion `assert config.int_property in range(5)` assumes one of the 5 updates succeeded, but in edge cases this might be flaky. Consider this more robust approach:

```diff
-    assert config.int_property in range(5)
+    # Verify the final value is one of the values we attempted to set
+    assert config.int_property in range(5), f""Expected value in range(5), got {config.int_property}""
+    
+    # Additional verification: check that the settings file contains a valid value
+    settings = config.load_settings()
+    assert settings.get(""int_property"") in range(5)
```

This provides better error reporting and verifies both the in-memory and persisted state.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between b07b3b9d8446e3baa8d978afee49c079223e6f8e and ad57d973551a37dfd64e622b93cb105cd5167c04.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `libs/core/kiln_ai/utils/config.py` (3 hunks)
* `libs/core/kiln_ai/utils/test_config.py` (2 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (1)</summary>

* GitHub Check: Build Desktop Apps (windows-latest)

</details>

<details>
<summary>🔇 Additional comments (4)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/utils/config.py (3)</summary>

`141-141`: **Excellent thread safety implementation!**

Adding a persistent lock instance ensures proper synchronization across multiple calls to `update_settings`. This is a significant improvement over creating temporary locks that wouldn't provide real thread safety.

---

`184-184`: **Proper handling of internal lock attribute.**

Correctly allows the `_lock` attribute to be set during initialization without triggering the property update mechanism. This ensures clean separation between internal implementation details and user-facing properties.

---

`238-238`: **Critical fix: Now uses persistent lock for true thread safety.**

This change from creating a new lock each time to using the instance-level `self._lock` is essential for actual thread safety. The previous approach would create separate locks for each call, providing no synchronization between concurrent updates.

</details>
<details>
<summary>libs/core/kiln_ai/utils/test_config.py (1)</summary>

`3-3`: **Appropriate import for concurrency testing.**

Adding the threading import to support the new thread safety test.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3078353736,2919691626,coderabbitai[bot],COMMENTED,2025-06-12T06:27:05Z,"**Actionable comments posted: 5**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: ASSERTIVE**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 7eae46cecd090791278252833b2f508cf8c1964c and 496c95f59247387067ef096021476539dea29d34.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `src/database/index.ts` (2 hunks)
* `test/database.test.ts` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 Biome (1.9.4)</summary>

<details>
<summary>test/database.test.ts</summary>

[error] 2-2: A Node.js builtin module should be imported with the node: protocol.

Using the node: protocol is more explicit and signals that the imported module belongs to Node.js.
Unsafe fix: Add the node: protocol.


(lint/style/useNodejsImportProtocol)

---

[error] 3-3: A Node.js builtin module should be imported with the node: protocol.

Using the node: protocol is more explicit and signals that the imported module belongs to Node.js.
Unsafe fix: Add the node: protocol.


(lint/style/useNodejsImportProtocol)

---

[error] 4-4: A Node.js builtin module should be imported with the node: protocol.

Using the node: protocol is more explicit and signals that the imported module belongs to Node.js.
Unsafe fix: Add the node: protocol.


(lint/style/useNodejsImportProtocol)

---

[error] 16-16: Avoid the delete operator which can impact performance.

Unsafe fix: Use an undefined assignment instead.


(lint/performance/noDelete)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (1)</summary>

* GitHub Check: Tusk Tester

</details>

<details>
<summary>🔇 Additional comments (2)</summary><blockquote>

<details>
<summary>src/database/index.ts (1)</summary>

`40-49`: **Potential stale handles after `closeDb()`**

`closeDb()` nulls the cached variables, but any previously returned `dbInstance` still references the closed connection and will throw on use.  
If callers may retain that handle, document the contract or add a defensive runtime guard in generated statements.

</details>
<details>
<summary>test/database.test.ts (1)</summary>

`23-25`: _🧹 Nitpick (assertive)_

**Superfluous `await` before `import()`**

`import()` resolves to a module namespace; the subsequent `closeDb()` call is synchronous.  
The `await` isn’t harmful but can be removed:

```diff
-      const database = await import('../src/database');
+      const database = await import('../src/database'); // await not strictly needed
```




> Likely an incorrect or invalid review comment.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3152162209,2936631260,dlwh,COMMENTED,2025-06-17T18:12:38Z,
3148005340,2930314533,gemini-code-assist[bot],COMMENTED,2025-06-15T19:30:32Z,"## Summary of Changes

Hello @CymatiStatic, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request establishes the foundational elements for a Pomodoro timer application targeting Wear OS devices, specifically the Galaxy Watch 6. It includes project configuration, data modeling and persistence using Room, dependency injection with Hilt, initial UI components using Jetpack Compose, and basic support for watch faces and complications.

### Highlights

* **Initial Project Setup**: This PR sets up the basic structure for a Wear OS application using Jetpack Compose, Kotlin, and Gradle Kotlin DSL.
* **Data Persistence**: Introduces Room Database with entities for `Task` and `TimerState`, along with corresponding DAOs and Repositories for data management.
* **Dependency Injection**: Configures Hilt for dependency injection across the application, including ViewModel and Worker support.
* **Basic UI Screens**: Adds initial Compose screens for a Pomodoro Timer and a Task List, demonstrating basic state management and interaction.
* **Watch Face and Complication Support**: Includes basic implementations for a Watch Face Service and a Complication Data Source Service to display timer state on the watch face.
* **Background Work**: Adds a `TimerWorker` intended for handling background timer logic and updating complications.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configureGemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3148005340,2930314896,gemini-code-assist[bot],COMMENTED,2025-06-15T19:32:32Z,"## Code Review

This pull request introduces a new Pomodoro timer application for Wear OS. My review highlights several areas for improvement, including timer state persistence, complication handling, code cleanliness, accessibility, and Android manifest configurations. The most critical feedback pertains to timer state persistence and an unrelated file change that should be addressed."
3121143991,2900234886,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-05T12:59:36Z,"## Pull Request Overview

This PR adds extra tests for verifying devicon functionality, particularly for Dockerfile recognition, handling of capitalized file extensions, and proper treatment of XDG directory paths with trailing slashes.
- Added a test for Dockerfile icon detection.
- Added a test for default icon handling with capitalized extensions.
- Added a test to ensure XDG directory environment variables handle trailing slashes correctly.



"
3119422525,2898416222,ellipsis-dev[bot],COMMENTED,2025-06-05T00:00:07Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 12ae3a5ba3b61aac23b9d19b3023512fad3eddd8 in <ellipsistime>1 minute and 25 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `316` lines of code in `2` files
> - Skipped `0` files when reviewing.
> - Skipped posting `5` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/onlook-dev/settings/code-review) and [rules](https://app.ellipsis.dev/onlook-dev/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>apps/web/client/test/messages.test.ts:15</code></summary>
> 
> - **Draft comment:** 
> Consider using fs.stat from fs/promises for consistency instead of Bun.file().stat().
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 10% vs. threshold = 50% This is a test file that's already using Bun's test framework and Bun's file APIs. The code is consistent in using Bun APIs where possible. Suggesting to mix Node.js fs APIs with Bun APIs would actually reduce consistency. Additionally, since this is a new file, the author deliberately chose to use Bun's APIs throughout. Maybe there's a good reason to use Node.js fs APIs instead of Bun APIs that I'm not aware of? Could there be performance or compatibility benefits? Even if fs.stat has some benefits, the code is consistently using Bun APIs throughout, and mixing APIs would reduce code consistency. The author clearly intended to use Bun's APIs. The comment should be deleted. The code is more consistent using Bun APIs throughout rather than mixing with Node.js fs APIs.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>apps/web/client/test/messages.test.ts:39</code></summary>
> 
> - **Draft comment:** 
> getAllKeys recurses only through plain objects. If arrays of objects occur in translations, consider enhancing this function.
> - **Reason this comment was not posted:**
> Confidence changes required: `50%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>apps/web/client/test/messages.test.ts:118</code></summary>
> 
> - **Draft comment:** 
> Duplicate error logging before and after expect statements may be redundant. Consider relying on the assertion messages.
> - **Reason this comment was not posted:**
> Confidence changes required: `40%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>packages/utility/src/window-metadata.ts:13</code></summary>
> 
> - **Draft comment:** 
> Newly added width and height properties: Ensure the WindowMetadata type is updated to reflect these additions.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>packages/utility/src/window-metadata.ts:27</code></summary>
> 
> - **Draft comment:** 
> The resolution split assumes a 'widthxheight' format. Consider adding a defensive check to ensure the format meets expectations.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_ySEcNKuUaXhJHlxR`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=onlook-dev%2Fonlook&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/onlook-dev/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/onlook-dev/code-review/rules).</sup>"
3119422525,2898579812,ellipsis-dev[bot],COMMENTED,2025-06-05T00:48:47Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed 59e495da5e8001a229160032abc5ab85984a17af in <ellipsistime>31 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `13` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `1` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/onlook-dev/settings/code-review) and [rules](https://app.ellipsis.dev/onlook-dev/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>apps/web/client/messages/ko.json:88</code></summary>
> 
> - **Draft comment:** 
> Renamed key from 'loginToPublish' to 'loginToEdit' for clarity. Ensure corresponding updates in other locales and code references.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment is asking the PR author to ensure updates in other locales and code references, which is a form of asking them to double-check things. This violates the rule against asking the author to ensure behavior is intended or to double-check things.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_0XsUyvrKuBQoSzKQ`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=onlook-dev%2Fonlook&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/onlook-dev/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/onlook-dev/code-review/rules).</sup>"
3123997500,2904259932,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-06T08:49:43Z,"## Pull Request Overview

Ensures all cache operations in `FileCacheStorage` run on the provided dispatcher to offload blocking file I/O.

- Wraps `findAll`, `find`, `remove`, and `removeAll` in `withContext(dispatcher)`
- Converts these methods to single-expression style for brevity


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**ktor-client/ktor-client-core/jvm/src/io/ktor/client/plugins/cache/storage/FileCacheStorage.kt:102**
* Ensure all other file I/O methods in this class (e.g., any `store` or `save` operations) are also wrapped with `withContext(dispatcher)` so no blocking calls escape the dispatcher.
```
override suspend fun remove(url: Url, varyKeys: Map<String, String>) = withContext(dispatcher) {
```
</details>

"
3092604753,2869609811,sourcery-ai[bot],COMMENTED,2025-05-27T05:18:49Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3161472093,2944150958,coderabbitai[bot],COMMENTED,2025-06-19T22:47:41Z,"**Actionable comments posted: 0**

<details>
<summary>🔭 Outside diff range comments (2)</summary><blockquote>

<details>
<summary>website/docs/cli/configuration/stacks.mdx (1)</summary><blockquote>

`52-230`: **Nested markdown lists inside `<dd>` may not render in MDX.**  
Embedding `-` lists inside an HTML `<dd>` block can prevent proper parsing. To ensure the nested examples render, convert those markdown lists to HTML `<ul><li>` or nested `<dl>` elements.

</blockquote></details>
<details>
<summary>website/docs/cli/commands/describe/describe-component.mdx (1)</summary><blockquote>

`62-67`: **Inconsistent arguments formatting: still using a markdown table.**  
For consistency with flags and the rest of the CLI reference, convert the `## Arguments` table into a `<dl>` block.

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>website/docs/core-concepts/projects/configuration/opentofu.mdx (1)</summary><blockquote>

`158-163`: **Unify indentation for definition list entries**  
The `<dt>`/`<dd>` entries here are indented by two spaces, whereas the earlier list at lines 56–75 uses four spaces. For visual consistency, align both lists to the same indentation level.

</blockquote></details>
<details>
<summary>website/docs/cli/commands/helmfile/helmfile-generate-varfile.mdx (1)</summary><blockquote>

`49-60`: **Adjust multi-line `<dd>` indentation**  
The second line in the `<dd>` for `--file` is unindented, which reduces readability. Consider wrapping the content in a block and indenting consistently:
```diff
<dl>
  <dt>`--file` (`-f`)</dt>
-  <dd>File name to write the varfile to.<br/>
-If not specified, the varfile name is generated automatically from the context</dd>
+  <dd>
+    File name to write the varfile to.<br/>
+    If not specified, the varfile name is generated automatically from the context
+  </dd>
</dl>
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 913fe03fc140d6687159c622982c5425909b127f and 2d0b1161954ce3e75e818dccc162872da4402d07.

</details>

<details>
<summary>📒 Files selected for processing (16)</summary>

* `website/docs/cli/commands/aws/aws-eks-update-kubeconfig.mdx` (1 hunks)
* `website/docs/cli/commands/completion.mdx` (1 hunks)
* `website/docs/cli/commands/describe/describe-component.mdx` (1 hunks)
* `website/docs/cli/commands/describe/describe-dependents.mdx` (2 hunks)
* `website/docs/cli/commands/helmfile/helmfile-generate-varfile.mdx` (1 hunks)
* `website/docs/cli/commands/helmfile/usage.mdx` (1 hunks)
* `website/docs/cli/commands/terraform/terraform-plan-diff.mdx` (2 hunks)
* `website/docs/cli/commands/validate/validate-component.mdx` (1 hunks)
* `website/docs/cli/commands/validate/validate-editorconfig.mdx` (1 hunks)
* `website/docs/cli/commands/validate/validate-schema.mdx` (1 hunks)
* `website/docs/cli/commands/validate/validate-stacks.mdx` (1 hunks)
* `website/docs/cli/configuration/stacks.mdx` (4 hunks)
* `website/docs/core-concepts/components/helmfile.mdx` (1 hunks)
* `website/docs/core-concepts/components/terraform/terraform.mdx` (1 hunks)
* `website/docs/core-concepts/projects/configuration/opentofu.mdx` (1 hunks)
* `website/docs/tutorials/atmos-example-infra.mdx` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 LanguageTool</summary>

<details>
<summary>website/docs/tutorials/atmos-example-infra.mdx</summary>

[typographical] ~161-~161: To join two clauses or introduce examples, consider using an em dash.
Context: ...a terminal:  - `cd example` - `make all` - it will build the Docker image, build th...

(DASH_RULE)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (4)</summary>

* GitHub Check: Analyze (javascript-typescript)
* GitHub Check: Analyze (go)
* GitHub Check: Lint (golangci)
* GitHub Check: Summary

</details>

<details>
<summary>🔇 Additional comments (23)</summary><blockquote>

<details>
<summary>website/docs/core-concepts/components/terraform/terraform.mdx (1)</summary>

`157-162`: **Semantically correct definition list**

The `<dl>`, `<dt>`, and `<dd>` tags are used appropriately here to replace the previous bullet list, improving semantic structure and accessibility without altering content.

</details>
<details>
<summary>website/docs/cli/commands/completion.mdx (1)</summary>

`122-125`: **Definition list for command arguments**

The new `<dl>` block correctly replaces the markdown table for `shell_name`, preserving the description and required status.

</details>
<details>
<summary>website/docs/tutorials/atmos-example-infra.mdx (2)</summary>

`125-140`: **Definition list for stack config sections**

The `<dl>` markup clearly and semantically outlines `import`, `vars`, `terraform`, `helmfile`, and `components` sections. This enhances readability and consistency.

---

`144-154`: **Definition list for component types**

The second `<dl>` block correctly describes the `terraform` and `helmfile` component configuration entries, matching the surrounding style.

</details>
<details>
<summary>website/docs/core-concepts/components/helmfile.mdx (1)</summary>

`26-31`: **Argument definition list**

The `<dl>` markup for `nginx-ingress` and `--stack=ue2-dev` is well-formed and aligns with the updated documentation style.

</details>
<details>
<summary>website/docs/cli/commands/terraform/terraform-plan-diff.mdx (2)</summary>

`27-30`: **Definition list for command argument**

Replacing the markdown list with `<dl>` for the `component` argument improves semantic clarity and consistency.

---

`34-46`: **Definition list for command flags**

The `<dl>` block covering `-s, --stack`, `--orig`, `--new`, and `--skip-init` is correctly structured and preserves all descriptions.

</details>
<details>
<summary>website/docs/core-concepts/projects/configuration/opentofu.mdx (1)</summary>

`56-75`: **Approve semantic HTML definition list for Terraform options**  
The `<dl>` correctly structures the Terraform component settings, improving semantic clarity without altering content.

</details>
<details>
<summary>website/docs/cli/commands/helmfile/usage.mdx (2)</summary>

`69-72`: **Use `<dl>` for arguments section (approved)**  
The conversion to a definition list correctly represents the required `component` argument semantically and preserves the original meaning.

---

`74-83`: **Use `<dl>` for flags section (approved)**  
All flags (`--stack`, `--dry-run`, `--redirect-stderr`) are accurately represented in the `<dl>`, maintaining clarity and content.

</details>
<details>
<summary>website/docs/cli/commands/validate/validate-schema.mdx (1)</summary>

`52-55`: **Use `<dl>` for `--schemas-atmos-manifest` flag (approved)**  
The single-flag entry is converted correctly to a definition list entry, keeping the full description intact.

</details>
<details>
<summary>website/docs/cli/commands/validate/validate-stacks.mdx (1)</summary>

`93-96`: **Use `<dl>` for `--schemas-atmos-manifest` flag (approved)**  
The definition list entry accurately preserves the existing flag semantics and description.

</details>
<details>
<summary>website/docs/cli/commands/helmfile/helmfile-generate-varfile.mdx (1)</summary>

`42-45`: **Use `<dl>` for arguments section (approved)**  
The `<dl>` for the `component` argument is correctly formatted, making the requirement explicit without content changes.

</details>
<details>
<summary>website/docs/cli/commands/validate/validate-editorconfig.mdx (1)</summary>

`41-86`: **Looks good: Semantic definition list for flags is valid.**  
The `<dl>` block correctly replaces the previous table and all `<dt>`/`<dd>` pairs are balanced.

</details>
<details>
<summary>website/docs/cli/commands/aws/aws-eks-update-kubeconfig.mdx (2)</summary>

`78-82`: **Arguments section properly converted to `<dl>`.**  
The single-argument `<dl>` is concise and semantically correct.

---

`86-113`: **Flags section correctly formatted as a definition list.**  
All flags are now `<dt>`/`<dd>` entries with inline aliases and descriptions.

</details>
<details>
<summary>website/docs/cli/commands/validate/validate-component.mdx (2)</summary>

`44-47`: **Argument `<dl>` is correctly implemented.**  
The required `component` term is clearly defined in a semantic list.

---

`49-64`: **Flags refactored to `<dl>` as intended.**  
Each flag description is clear, and the default timeout is noted.

</details>
<details>
<summary>website/docs/cli/commands/describe/describe-component.mdx (2)</summary>

`70-94`: **Flags already converted to a semantic list.**  
The `<dl>` for flags is well-formed with proper `<dt>`/`<dd>` pairs.

---

`101-149`: **Output sections broken into multiple `<dl>`s correctly.**  
Both the top-level and nested `<dl>` lists are balanced and semantically organized.  



Also applies to: 150-195

</details>
<details>
<summary>website/docs/cli/commands/describe/describe-dependents.mdx (3)</summary>

`250-253`: **Semantic definition list for Arguments**  
Switching from a plain list to `<dl>` adds proper semantics for the CLI arguments.

---

`255-267`: **Flags section updated to `<dl>` for clarity**  
The flag descriptions are now properly grouped under `<dt>`/`<dd>` pairs, improving readability.

---

`294-327`: **Output schema reformatted as HTML definition list**  
Converting the output fields to `<dl>` ensures consistent, semantic documentation of each property.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3161472093,2944150993,coderabbitai[bot],APPROVED,2025-06-19T22:47:44Z,
3086952592,2865102046,pakrym-oai,APPROVED,2025-05-23T16:58:31Z,
3081788219,2914105361,gtarpenning,APPROVED,2025-06-10T15:28:00Z,"There is one place we explicitly attach a ref, when we expand on the backend, but those should be valid and relatively useful. "
3145100825,2926837334,seratch,APPROVED,2025-06-14T00:03:15Z,
3101254351,2879349345,Marfuen,APPROVED,2025-05-29T19:15:08Z,
3101254351,2879349719,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-29T19:15:17Z,"## Pull Request Overview

This PR ensures that the role-selection popover inside the invite dialog remains interactive by disabling its modal behavior.

- Adds `modal={false}` to the `Popover` component to allow inner interactions.
- Retains existing open/close logic while permitting focus and clicks inside the modal.


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**apps/app/src/app/[locale]/(app)/(dashboard)/[orgId]/people/all/components/MultiRoleCombobox.tsx:1**
* Add or update tests to cover the interactive behavior of the `Popover` when `modal` is set to `false`, ensuring role selection works as expected inside the invite dialog.
```
// entire component
```
**apps/app/src/app/[locale]/(app)/(dashboard)/[orgId]/people/all/components/MultiRoleCombobox.tsx:152**
* Verify that disabling the modal behavior doesn’t break keyboard navigation or focus trapping; consider adding a focus management strategy if necessary.
```
<Popover open={open} onOpenChange={setOpen} modal={false}>
```
</details>

"
3070236675,2847912785,jojocys,APPROVED,2025-05-17T03:25:47Z,
3157922164,2942530137,grzegorz-roboflow,APPROVED,2025-06-19T11:01:34Z,
3156171169,2938494249,cursor[bot],COMMENTED,2025-06-18T09:38:39Z,"<details open>
<summary><h3>Bug: Aspect Ratio Calculation Fails on Zero Dimensions</h3></summary>

A division by zero vulnerability exists in the crop aspect ratio calculation. If the crop height is zero, the `aspectRatio` becomes `Infinity`. If the crop width is zero, the `aspectRatio` becomes `0`. Both cases lead to incorrect `dx`/`dy` calculations (NaN or Infinity) within the shift-key aspect ratio locking logic, resulting in unexpected cropping behavior.

<p></p>

<details>
<summary><code>packages/tldraw/src/lib/tools/SelectTool/childStates/Crop/children/Cropping.ts#L182-L183</code></summary>

https://github.com/tldraw/tldraw/blob/1e313e8695cef1a857513842a9c5680791d7314c/packages/tldraw/src/lib/tools/SelectTool/childStates/Crop/children/Cropping.ts#L182-L183

</details>

<a href=""https://cursor.com/open?data=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImJ1Z2JvdC12MSJ9.eyJ2ZXJzaW9uIjoxLCJ0eXBlIjoiQlVHQk9UX0ZJWF9JTl9DVVJTT1IiLCJkYXRhIjp7InJlZGlzS2V5IjoiYnVnYm90OjIzOWRiZjE1LTViZmYtNDQ5OS05N2RlLWU2ZmI1NDdhMTJkMSIsImVuY3J5cHRpb25LZXkiOiJndXBGVWxncERLUFJrbk1qbUJqM2JJQjhxc25YYXVrcW9RdDc1Vlh6OHVBIiwiYnJhbmNoIjoiY29kZXgvdXBkYXRlLWltYWdlLWNyb3BwaW5nLWJlaGF2aW9yLXdpdGgtc2hpZnQtYW5kLWFsdC1rZXlzIn0sImlhdCI6MTc1MDIzOTUxOCwiZXhwIjoxNzUwODQ0MzE4fQ.hcSj8-B5vl9SYtk1jj2ycGs4l7wxIPBpY17Rl9-mjvdbVfvUP4O7RahAsxMQLppxxSsG3VGrBzFlz2nPCTW66P9sJYFyIarIkSroQ0K7nGUjwxekLcC4lexFU86jnDDCvXObB21iWKoAQhIGfw5CQxGpGMA8KMqiZGiTUU08CFPoFng4v8IHvlBHZxjSQD7EtHyJrntwEy-5NLmAhA3z0TRsjOdxarxpn0DzRr0urWX5c5En8JyqYo_FAgiKJb3WND-C00KptS3zUil6wWuEiFWviL-QPtMWbjq48b4Z_kMyqxyQbKicmTejM1RMNWjLJcXdUPXPcKG5YsHvLhUrag"">Fix in Cursor</a>

</details>

---

<details open>
<summary><h3>Bug: Crop Adjustment Error and Division Vulnerability</h3></summary>

When cropping with the `alt` key, the crop region is incorrectly translated instead of being resized from its center because the same adjustment is applied to both `topLeft` and `bottomRight` crop coordinates. Additionally, this adjustment logic contains a division by zero vulnerability if `uncroppedSize.w` or `uncroppedSize.h` is zero, leading to `Infinity` or `NaN` values in the crop data.

<p></p>

<details>
<summary><code>packages/tldraw/src/lib/tools/SelectTool/childStates/Crop/children/Cropping.ts#L113-L117</code></summary>

https://github.com/tldraw/tldraw/blob/1e313e8695cef1a857513842a9c5680791d7314c/packages/tldraw/src/lib/tools/SelectTool/childStates/Crop/children/Cropping.ts#L113-L117

</details>

<a href=""https://cursor.com/open?data=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImJ1Z2JvdC12MSJ9.eyJ2ZXJzaW9uIjoxLCJ0eXBlIjoiQlVHQk9UX0ZJWF9JTl9DVVJTT1IiLCJkYXRhIjp7InJlZGlzS2V5IjoiYnVnYm90OjdlZDlkNGQyLWYzZTQtNDVkMS1hYjExLWEzZTI1N2VlZGVkNiIsImVuY3J5cHRpb25LZXkiOiJJWW1MRUVjdF9zamVld3BTVE83allvNE5NYlVTTVA0YUV3akdHRzFDbk0wIiwiYnJhbmNoIjoiY29kZXgvdXBkYXRlLWltYWdlLWNyb3BwaW5nLWJlaGF2aW9yLXdpdGgtc2hpZnQtYW5kLWFsdC1rZXlzIn0sImlhdCI6MTc1MDIzOTUxOCwiZXhwIjoxNzUwODQ0MzE4fQ.WeQ6R7rloMuHzqVJELgQI0ZGqrRGarOph0T5QrH4VktuhKEbWv6Ly__3HSFvD63IcAl_I0kGHhg0dDfTYWp2d6JWPySrF_wA4g137S3R5xcKd7TK-5O6jTKLVzxpyHKP3VST8mKtZ94lC_OxOkvamEPf08n8LmLa-ATa2KS5c7tYKDWYujQZqsUzWeGJJHqtIAUi_OOhURAMf6IMIrhmNENi8f5OOmUK0od5oqs2EP0HbYj8TEKBpvXwVHKMyhMXrRS72ysrwwYLmN-qt04O2TSxv8w_7fKW_FFxpcgY-kYNjCBRz4aiomC0XgRrq7OxcxHP8_7My9vs4GCeasxVCw"">Fix in Cursor</a>

</details>

---

_Was this report helpful? Give feedback by reacting with 👍 or 👎_
"
3134306675,2914420150,hansent,COMMENTED,2025-06-10T17:14:38Z,
3134306675,2914424100,hansent,COMMENTED,2025-06-10T17:16:11Z,
3134306675,2914415393,PawelPeczek-Roboflow,COMMENTED,2025-06-10T17:19:10Z,
3134306675,2914483003,hansent,COMMENTED,2025-06-10T17:29:30Z,
3134306675,2914503395,hansent,COMMENTED,2025-06-10T17:35:35Z,
3134306675,2924748539,PawelPeczek-Roboflow,COMMENTED,2025-06-13T13:08:18Z,
3134306675,2925353890,hansent,COMMENTED,2025-06-13T15:59:54Z,
3134306675,2925383679,hansent,COMMENTED,2025-06-13T16:09:33Z,
3134306675,2946974903,grzegorz-roboflow,APPROVED,2025-06-20T18:10:18Z,
3115257357,2893912996,gemini-code-assist[bot],COMMENTED,2025-06-03T19:54:54Z,"Hello @syedazharmbnr1, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

## Summary of Changes
Hello! Gemini here, providing a summary of this pull request. This PR introduces a new feature to the ChatGPT tool: the ability to have the response read aloud using text-to-speech. The core change adds a `speak` boolean option to the `ask` operation. When this option is set to `true`, the tool will use the system's `say` command (specifically on macOS, as `run-applescript` and `run` suggest) to vocalize the received response from ChatGPT. The PR includes updates to the tool's argument validation, the main `askChatGPT` function to handle the new parameter and execute the `say` command, documentation updates in the README, and new tests to cover the validation and speech execution logic.

### Highlights
* **New `speak` option**: Adds a new optional boolean parameter `speak` to the `ask` operation's arguments. When `true`, the ChatGPT response will be read aloud.
* **Text-to-Speech Integration**: Integrates text-to-speech functionality by calling the system's `say` command via `child_process.exec` when the `speak` option is enabled for an 'ask' operation.
* **Argument Validation**: Updates the `isChatGPTArgs` function to validate the new `speak` parameter, ensuring it is a boolean if provided.
* **Documentation Update**: Adds documentation to the README.md file explaining the new `speak` option and providing an example of its usage.
* **Testing**: Adds a new test file (`tests/isChatGPTArgs.test.ts`) to specifically test the validation of the `speak` argument and verify that the `say` command is called when `speak` is true.

### Changelog
<details>
<summary>Click here to see the changelog</summary>

* **README.md**
  * Added a bullet point mentioning the `speak` flag in the features list (Diff 1, line 10).
  * Added an example JSON payload demonstrating the use of the `speak: true` option (Diff 2, lines 97-100).
* **index.ts**
  * Imported `exec` from `child_process` and `fileURLToPath` from `url` (Diff 1, lines 11-12).
  * Added the `speak` boolean parameter definition to the `CHATGPT_TOOL` arguments schema (Diff 2, lines 36-39).
  * Exported the `checkChatGPTAccess` function (Diff 3, line 58).
  * Added the optional `speak` boolean parameter to the `askChatGPT` function signature (Diff 4, line 94).
  * Added logic within `askChatGPT` to call `exec(`say ${JSON.stringify(cleanedResult)}`)` if `speak` is true (Diff 5, lines 258-260).
  * Added `speak` to the destructuring in `isChatGPTArgs` (Diff 6, line 374).
  * Added validation for the `speak` parameter in `isChatGPTArgs`, checking if it's a boolean when defined (Diff 7, line 386).
  * Passed the `args.speak` value to the `askChatGPT` call within the request handler (Diff 8, line 417).
  * Wrapped the `server.connect` call in a check to ensure it only runs when the script is executed directly, not when imported for testing (Diff 9, lines 472-474).
  * Exported `askChatGPT` and `isChatGPTArgs` (Diff 9, line 477).
* **tests/isChatGPTArgs.test.ts**
  * Added a new test file.
  * Mocked `child_process.exec` and `run-applescript` (Diff 1, lines 4-9).
  * Stubbed `index.checkChatGPTAccess` to avoid real AppleScript execution during tests (Diff 1, line 14).
  * Added a test suite for `isChatGPTArgs` to verify acceptance and rejection of the `speak` parameter type (Diff 1, lines 16-25).
  * Added a test suite for `askChatGPT` to verify that `child_process.exec` is called when `speak` is true (Diff 1, lines 28-35).

</details>

<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.
</details>


<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>


[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configure Gemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).

---

> Code speaks aloud,
> A boolean flag is set,
> Words fill the air.

"
3115257357,2893916849,gemini-code-assist[bot],COMMENTED,2025-06-03T19:56:04Z,"## Code Review
This pull request introduces a useful text-to-speech feature to the ChatGPT MCP tool. The implementation appears well-structured and includes appropriate validation and testing. However, there are a few areas that could be improved for clarity and robustness.

### Summary of Findings
* **Error Handling for Text-to-Speech**: The `exec` call for text-to-speech lacks error handling. Adding error handling will improve robustness.
* **Type Safety**: The use of `any` in `isChatGPTArgs` reduces type safety. Consider defining a specific type or interface for the expected arguments.

### Merge Readiness
The pull request is almost ready for merging. Addressing the error handling for the `say` command would significantly improve the robustness of the new feature. While the other suggestions are less critical, they would enhance the code's clarity and maintainability. I am unable to approve this pull request, and recommend that others review and approve this code before merging."
3131618459,2911498239,cubic-dev-ai[bot],COMMENTED,2025-06-09T22:25:12Z,cubic reviewed 6 files and found no issues. Review PR in [cubic.dev](https://cubic.dev/pr/cartography-cncf/cartography/pull/1618).
3131618459,2915222943,kunaals,APPROVED,2025-06-10T22:58:55Z,
3092758067,2869788325,NoritakaIkeda,APPROVED,2025-05-27T06:40:33Z,"LGTM!

Is my understanding correct that this change was made to exclude the package from the changeset, since it's a development-only library?"
3092758067,2869837575,hoshinotsuyoshi,APPROVED,2025-05-27T06:58:26Z,LGTM!
3138249858,2920618347,Trouffman,APPROVED,2025-06-12T11:15:35Z,
3098357525,2876208658,greptile-apps[bot],COMMENTED,2025-05-28T19:28:56Z,"
## PR Summary

Your free trial has ended. If you'd like to continue receiving code reviews, you can add a payment method here: [https://app.greptile.com/review/github](https://app.greptile.com/review/github).

<sub>💡 (1/5) You can manually trigger the bot by mentioning @greptileai in a comment!</sub>

<sub>2 file(s) reviewed, no comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=note-companion_407)</sub>"
3158465046,2941037368,coderabbitai[bot],COMMENTED,2025-06-18T23:53:59Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>AGENTS.md (1)</summary><blockquote>

`1-1`: **Helpful build instruction added.**

The build prerequisite documentation is valuable for users running tests. Consider using the typographical ellipsis character (…) instead of three periods for better typography, though this is a minor style preference.



```diff
-Before running Go tests, build the project with `go build ./...`.
+Before running Go tests, build the project with `go build ./…`.
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 6fcb820f69af76c6b8ec442acb609660fc1f9cbf and 8a2c245a0c8c03b5dbd749b3bf1cb77a7262c498.

</details>

<details>
<summary>📒 Files selected for processing (3)</summary>

* `AGENTS.md` (1 hunks)
* `cmd/describe_stacks.go` (1 hunks)
* `cmd/describe_stacks_test.go` (5 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 LanguageTool</summary>

<details>
<summary>AGENTS.md</summary>

[style] ~1-~1: Consider using the typographical ellipsis character here instead.
Context: ...unning Go tests, build the project with `go build ./...`. 

(ELLIPSIS)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (1)</summary>

* GitHub Check: Summary

</details>

<details>
<summary>🔇 Additional comments (6)</summary><blockquote>

<details>
<summary>cmd/describe_stacks.go (2)</summary>

`136-140`: **Flag type changes look solid.**

The conversion from String to StringSlice flags for components, component-types, and sections properly addresses the parsing issue mentioned in the PR objectives. The default value change from empty string to nil is appropriate for slice flags.

---

`102-106`: **Type handling is robust.**

The switch statement correctly handles []string types using GetStringSlice, and the panic for unsupported types provides clear error reporting. This aligns well with the test case that validates panic behavior.

</details>
<details>
<summary>cmd/describe_stacks_test.go (4)</summary>

`43-43`: **Improved test isolation with initFlags approach.**

The addition of the initFlags function field allows each test case to define exactly the flags it needs, improving test clarity and isolation. The comprehensive flag definitions match the actual command setup.




Also applies to: 52-63

---

`122-150`: **Excellent test coverage for comma-separated parsing.**

This test case validates that the StringSlice flags correctly parse comma-separated values, which is exactly what the flag type change was meant to enable. The expected values properly demonstrate the parsing behavior.


<!-- review_command_end -->

---

`152-172`: **Smart panic test for type mismatch.**

This test ensures that defining slice flags as String types triggers the expected panic with a clear error message. This validates the robustness of the type switching logic in setCliArgsForDescribeStackCli.

---

`180-181`: **Clean test execution pattern.**

The test execution properly calls initFlags before setting values, ensuring each test has the correct flag definitions. This maintains the improved isolation approach.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3158465046,2941037417,coderabbitai[bot],DISMISSED,2025-06-18T23:54:03Z,
3158465046,2942627978,coderabbitai[bot],APPROVED,2025-06-19T11:40:13Z,
3158465046,2947381314,samtholiya,COMMENTED,2025-06-20T22:36:04Z,
3131207266,2911060357,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-09T19:13:18Z,"## Pull Request Overview

This PR is intended to revert the peer dependency version change and keep wagmi at ^2.9.0 for rainbow packages while maintaining a patch changeset for create‑rainbowkit. However, the diffs across multiple package.json files update wagmi from ^2.15.5 to ^2.15.6.
- Updates the wagmi version in various package.json files.
- Modifies AGENTS.md to include guidance regarding CHANGELOG.md and bumps in create‑rainbowkit.
- Updates the changeset file for create‑rainbowkit with an entry referencing wagmi ^2.15.6.

### Reviewed Changes

Copilot reviewed 20 out of 21 changed files in this pull request and generated no comments.

<details>
<summary>Show a summary per file</summary>

| File | Description |
| ---- | ----------- |
| packages/example/package.json | Updated wagmi version from ^2.15.5 to ^2.15.6. |
| packages/create‑rainbowkit/templates/next-app/package.json | Updated wagmi version from ^2.15.5 to ^2.15.6. |
| packages/create‑rainbowkit/generated-test-app/package.json | Updated wagmi version from ^2.15.5 to ^2.15.6. |
| package.json | Updated wagmi version from ^2.15.5 to ^2.15.6. |
| examples/*/package.json (various) | Updated wagmi version from ^2.15.5 to ^2.15.6. |
| AGENTS.md | Added notes regarding CHANGELOG.md modifications and template dependency bumps. |
| .changeset/create‑rainbowkit‑patch.md | Created a changeset entry updating wagmi to ^2.15.6. |
</details>


<details>
<summary>Files not reviewed (1)</summary>

* **pnpm-lock.yaml**: Language not supported
</details>

<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**package.json:76**
* The PR summary states that the peer dependency should remain at ^2.9.0, but this diff updates wagmi to ^2.15.6. Please confirm whether this discrepancy is intentional.
```
    ""wagmi"": ""^2.15.6""
```
</details>

"
3136463139,2916737406,cursor[bot],COMMENTED,2025-06-11T11:23:15Z,"### ✅ BugBot reviewed your changes and found no bugs!

---


**BugBot free trial expires on June 17, 2025**
You have used $0.00 of your $50.00 spend limit so far. Manage your spend limit in the [Cursor dashboard](https://cursor.com/dashboard?tab=bugbot).

_Was this report helpful? Give feedback by reacting with 👍 or 👎_
"
3081750194,2859493616,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-22T01:08:16Z,"## Pull Request Overview

This PR corrects the `groupName` literal in a test to match the expected connector output.

- Fixes a stray prefix in the `groupName` test data.
- Ensures the test passes without a “Connect Timeout Error.”


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**packages/rainbowkit/src/wallets/connectorsForWallets.test.ts:63**
* The test data previously included the literal `groupName: ""Test Group 1""`, which did not match the expected output and led to failures. Updating it to just `'Test Group 1'` aligns the fixture with the connector’s actual behavior.
```
[{ groupName: 'Test Group 1', wallets: [customWallet] }],
```
</details>

"
3130941497,2910782159,coderabbitai[bot],COMMENTED,2025-06-09T17:28:26Z,"**Actionable comments posted: 3**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>mistralrs-server/src/main.rs (1)</summary><blockquote>

`208-219`: **Consider improving error handling for the MCP server.**

While the current implementation logs errors to stderr, consider using the tracing framework for consistent logging across the application. Additionally, you might want to propagate critical MCP server failures to the main application.

```diff
-    if let Some(port) = args.mcp_port {
-        let host = args
-            .serve_ip
-            .clone()
-            .unwrap_or_else(|| ""0.0.0.0"".to_string());
-        let mcp_server = mcp_server::create_mcp_server(mistralrs.clone(), host, port);
-        tokio::spawn(async move {
-            if let Err(e) = mcp_server.start().await {
-                eprintln!(""MCP server error: {e}"");
-            }
-        });
-    }
+    if let Some(port) = args.mcp_port {
+        let host = args
+            .serve_ip
+            .clone()
+            .unwrap_or_else(|| ""0.0.0.0"".to_string());
+        let mcp_server = mcp_server::create_mcp_server(mistralrs.clone(), host.clone(), port);
+        tokio::spawn(async move {
+            info!(""Starting MCP server on {host}:{port}"");
+            if let Err(e) = mcp_server.start().await {
+                tracing::error!(""MCP server error: {e}"");
+            }
+        });
+    }
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between fff266550b93b25295ce7075da0ccc7c42aa4dfb and 3a8af2105a92902683e903e93bc5bdd5ab987b44.

</details>

<details>
<summary>⛔ Files ignored due to path filters (1)</summary>

* `Cargo.lock` is excluded by `!**/*.lock`

</details>

<details>
<summary>📒 Files selected for processing (4)</summary>

* `Cargo.toml` (1 hunks)
* `mistralrs-server/Cargo.toml` (2 hunks)
* `mistralrs-server/src/main.rs` (4 hunks)
* `mistralrs-server/src/mcp_server.rs` (1 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (9)</summary>

* GitHub Check: Check (ubuntu-latest, stable)
* GitHub Check: comment
* GitHub Check: Test Suite (ubuntu-latest, stable)
* GitHub Check: Docs
* GitHub Check: Test Suite (windows-latest, stable)
* GitHub Check: Check (windows-latest, stable)
* GitHub Check: Check (macOS-latest, stable)
* GitHub Check: Clippy
* GitHub Check: Test Suite (macOS-latest, stable)

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>mistralrs-server/Cargo.toml (1)</summary>

`32-33`: **LGTM! Dependencies and feature flag are properly configured.**

The workspace dependencies and the `mcp-server` feature flag are correctly set up to enable optional MCP server functionality.



Also applies to: 48-48

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3130941497,2911069177,coderabbitai[bot],COMMENTED,2025-06-09T19:17:08Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (5)</summary><blockquote>

<details>
<summary>docs/MCP.md (4)</summary><blockquote>

`4-5`: **Grammar: Add comma after introductory phrase.** Change  
```
Under the hood the server uses [`rust-mcp-sdk`](…)
```  
to  
```
Under the hood, the server uses [`rust-mcp-sdk`](…)
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[uncategorized] ~5-~5: A comma might be missing here.
Context: ...d of free-form HTTP routes.   Under the hood the server uses [`rust-mcp-sdk`](https:...

(AI_EN_LECTOR_MISSING_PUNCTUATION_COMMA)

</details>

</details>

---

`11-12`: **Grammar: Clarify build instruction.** Add a comma after “workspace”:  
```diff
- When you only compile the `mistralrs-server` crate outside the workspace enable the `mcp-server` Cargo feature manually:
+ When you only compile the `mistralrs-server` crate outside the workspace, enable the `mcp-server` Cargo feature manually:
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[uncategorized] ~12-~12: A comma might be missing here.
Context: ...he `mistralrs-server` crate outside the workspace enable the `mcp-server` Cargo feature m...

(AI_EN_LECTOR_MISSING_PUNCTUATION_COMMA)

</details>

</details>

---

`31-35`: **Specify language for output snippet.** The fenced block for the example server output should include a language (e.g., `text` or `console`):  
```diff
- ```
+ ```text
  MCP ‑ listening on http://0.0.0.0:9001
  ```
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[uncategorized] ~31-~31: Possible missing comma found.
Context: ... need MCP.*  The server prints an extra line such as  ``` MCP ‑ listening on http://...

(AI_HYDRA_LEO_MISSING_COMMA)

</details>
<details>
<summary>🪛 markdownlint-cli2 (0.17.2)</summary>

33-33: Fenced code blocks should have a language specified
null

(MD040, fenced-code-language)

</details>

</details>

---

`39-40`: **Grammar: Add comma after introductory clause.** Change  
```
At start-up the MCP handler advertises…
```  
to  
```
At start-up, the MCP handler advertises…
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[uncategorized] ~39-~39: Possible missing comma found.
Context: ...bilities announced to clients  At start-up the MCP handler advertises the followin...

(AI_HYDRA_LEO_MISSING_COMMA)

</details>

</details>

</blockquote></details>
<details>
<summary>docs/HTTP.md (1)</summary><blockquote>

`7-8`: **Grammar: Missing comma after introductory phrase.** Change  
```diff
- > ℹ️  Besides the HTTP endpoints described below `mistralrs-server` can also expose the same functionality via the **MCP protocol**.
+ > ℹ️  Besides the HTTP endpoints described below, `mistralrs-server` can also expose the same functionality via the **MCP protocol**.
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[uncategorized] ~7-~7: Possible missing comma found.
Context: ...️  Besides the HTTP endpoints described below `mistralrs-server` can also expose the ...

(AI_HYDRA_LEO_MISSING_COMMA)

</details>

</details>

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 3a8af2105a92902683e903e93bc5bdd5ab987b44 and 52c196b15bf8b309b2b9950a2947d3b8c2043c3d.

</details>

<details>
<summary>📒 Files selected for processing (4)</summary>

* `README.md` (2 hunks)
* `docs/HTTP.md` (1 hunks)
* `docs/MCP.md` (1 hunks)
* `docs/README.md` (1 hunks)

</details>

<details>
<summary>✅ Files skipped from review due to trivial changes (2)</summary>

* docs/README.md
* README.md

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 LanguageTool</summary>

<details>
<summary>docs/HTTP.md</summary>

[uncategorized] ~7-~7: Possible missing comma found.
Context: ...️  Besides the HTTP endpoints described below `mistralrs-server` can also expose the ...

(AI_HYDRA_LEO_MISSING_COMMA)

</details>
<details>
<summary>docs/MCP.md</summary>

[uncategorized] ~5-~5: A comma might be missing here.
Context: ...d of free-form HTTP routes.   Under the hood the server uses [`rust-mcp-sdk`](https:...

(AI_EN_LECTOR_MISSING_PUNCTUATION_COMMA)

---

[uncategorized] ~12-~12: A comma might be missing here.
Context: ...he `mistralrs-server` crate outside the workspace enable the `mcp-server` Cargo feature m...

(AI_EN_LECTOR_MISSING_PUNCTUATION_COMMA)

---

[uncategorized] ~31-~31: Possible missing comma found.
Context: ... need MCP.*  The server prints an extra line such as  ``` MCP ‑ listening on http://...

(AI_HYDRA_LEO_MISSING_COMMA)

---

[uncategorized] ~39-~39: Possible missing comma found.
Context: ...bilities announced to clients  At start-up the MCP handler advertises the followin...

(AI_HYDRA_LEO_MISSING_COMMA)

</details>

</details>
<details>
<summary>🪛 markdownlint-cli2 (0.17.2)</summary>

<details>
<summary>docs/MCP.md</summary>

33-33: Fenced code blocks should have a language specified
null

(MD040, fenced-code-language)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: Docs
* GitHub Check: Clippy
* GitHub Check: Test Suite (windows-latest, stable)
* GitHub Check: Check (ubuntu-latest, stable)
* GitHub Check: Test Suite (macOS-latest, stable)
* GitHub Check: Test Suite (ubuntu-latest, stable)
* GitHub Check: Check (windows-latest, stable)
* GitHub Check: Check (macOS-latest, stable)

</details>

<details>
<summary>🔇 Additional comments (5)</summary><blockquote>

<details>
<summary>docs/MCP.md (5)</summary>

`1-6`: **Intro is clear and comprehensive.** The MCP protocol support doc provides a solid overview of the feature and defines the `chat` tool explicitly.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[uncategorized] ~5-~5: A comma might be missing here.
Context: ...d of free-form HTTP routes.   Under the hood the server uses [`rust-mcp-sdk`](https:...

(AI_EN_LECTOR_MISSING_PUNCTUATION_COMMA)

</details>

</details>

---

`14-16`: **Building instructions look good.** Clear guidance on feature flags and cargo invocation.

---

`22-27`: **Running instructions are well explained.** Port flags and example command are precise.

---

`37-49`: **Capabilities section is accurate.** The table concisely lists the single `chat` tool and its purpose.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[uncategorized] ~39-~39: Possible missing comma found.
Context: ...bilities announced to clients  At start-up the MCP handler advertises the followin...

(AI_HYDRA_LEO_MISSING_COMMA)

</details>

</details>

---

`58-65`: **Calling the `chat` tool is documented clearly.** The JSON examples match the protocol schema.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3130941497,2911217185,coderabbitai[bot],COMMENTED,2025-06-09T20:08:06Z,"**Actionable comments posted: 0**

<details>
<summary>♻️ Duplicate comments (2)</summary><blockquote>

<details>
<summary>mistralrs-server/src/mcp_server.rs (2)</summary><blockquote>

`143-145`: _🛠️ Refactor suggestion_

**Optimize the request conversion to avoid unnecessary serialization.**

The implementation still serializes to JSON and then deserializes, which is inefficient.


```diff
-        // Translate to the internal ChatCompletionRequest.
-        let chat_req: mistralrs_server_core::openai::ChatCompletionRequest =
-            serde_json::from_value(serde_json::to_value(req).unwrap())
-                .map_err(CallToolError::new)?;
+        // Translate to the internal ChatCompletionRequest.
+        // TODO: Implement direct conversion from CreateMessageRequest to ChatCompletionRequest
+        // to avoid the overhead of JSON serialization/deserialization
+        let chat_req: mistralrs_server_core::openai::ChatCompletionRequest =
+            serde_json::from_value(serde_json::to_value(req).map_err(CallToolError::new)?)
+                .map_err(CallToolError::new)?;
```

Also note the `unwrap()` could panic - use proper error handling instead.

---

`157-178`: _⚠️ Potential issue_

**Handle streaming responses properly or document the limitation.**

The implementation only handles `Response::Done` and treats streaming chunks as errors.



Since the MCP documentation mentions streaming is not yet implemented, consider:
1. Adding a comment explaining this limitation
2. Providing a more descriptive error message

```diff
         match rx.recv().await {
             Some(mistralrs_core::Response::Done(resp)) => {
                 let content = resp
                     .choices
                     .iter()
                     .filter_map(|c| c.message.content.clone())
                     .collect::<Vec<_>>()
                     .join(""\n"");

                 Ok(CallToolResult {
                     content: vec![CallToolResultContentItem::TextContent(TextContent::new(
                         content, None,
                     ))],
                     is_error: None,
                     meta: None,
                 })
             }
             Some(mistralrs_core::Response::ModelError(msg, _)) => {
                 Err(CallToolError::new(io::Error::other(msg)))
             }
-            Some(_) | None => Err(CallToolError::new(io::Error::other(""no response""))),
+            Some(mistralrs_core::Response::Chunk(_)) => {
+                // TODO: Implement streaming response handling
+                Err(CallToolError::new(io::Error::other(""Streaming responses are not yet supported in MCP"")))
+            }
+            Some(_) => Err(CallToolError::new(io::Error::other(""Unexpected response type""))),
+            None => Err(CallToolError::new(io::Error::other(""No response received from model""))),
         }
```

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (5)</summary><blockquote>

<details>
<summary>docs/MCP.md (2)</summary><blockquote>

`7-7`: **Add commas for better readability.**

The static analysis correctly identified places where commas would improve readability.

```diff
-Under the hood the server uses [`rust-mcp-sdk`](https://crates.io/crates/rust-mcp-sdk) and exposes a single tool called **`chat`** that mirrors the behaviour of the `/v1/chat/completions` endpoint.
+Under the hood, the server uses [`rust-mcp-sdk`](https://crates.io/crates/rust-mcp-sdk) and exposes a single tool called **`chat`** that mirrors the behaviour of the `/v1/chat/completions` endpoint.
```

```diff
-When you only compile the `mistralrs-server` crate outside the workspace enable the `mcp-server` Cargo feature manually:
+When you only compile the `mistralrs-server` crate outside the workspace, enable the `mcp-server` Cargo feature manually:
```

```diff
-At start-up the MCP handler advertises the following `InitializeResult` (abridged):
+At start-up, the MCP handler advertises the following `InitializeResult` (abridged):
```


Also applies to: 14-14, 35-35

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[uncategorized] ~7-~7: A comma might be missing here.
Context: ... of free-form HTTP routes.    Under the hood the server uses [`rust-mcp-sdk`](https:...

(AI_EN_LECTOR_MISSING_PUNCTUATION_COMMA)

</details>

</details>

---

`31-31`: **Fix the formatting of the note.**

The asterisk at the beginning appears to be a formatting error.

```diff
-* `--mcp-port` takes precedence over `--port` – you can run the HTTP and MCP servers on totally independent ports or omit `--port` when you only need MCP.*
+> **Note:** `--mcp-port` takes precedence over `--port` – you can run the HTTP and MCP servers on totally independent ports or omit `--port` when you only need MCP.
```

</blockquote></details>
<details>
<summary>mistralrs-server/src/mcp_server.rs (3)</summary><blockquote>

`58-117`: **Simplify schema construction using json! macro directly.**

The current implementation is verbose and uses multiple `unwrap()` calls that could panic.

```diff
     pub fn new() -> Self {
-        // Reuse the argument schema we previously constructed for the `chat` tool.
-        let required = vec![""messages"".to_string()];
-
-        let mut properties: HashMap<String, Map<String, Value>> = HashMap::new();
-        properties.insert(
-            ""messages"".to_string(),
-            json!({
-                ""type"": ""array"",
-                ""description"": ""Conversation messages so far"",
-                ""items"": {
-                    ""type"": ""object"",
-                    ""required"": [""role"", ""content""],
-                    ""properties"": {
-                        ""role"": { ""type"": ""string"", ""enum"": [""user"", ""assistant"", ""system""] },
-                        ""content"": { ""type"": ""string"" }
-                    }
-                }
-            })
-            .as_object()
-            .unwrap()
-            .clone(),
-        );
-        properties.insert(
-            ""maxTokens"".to_string(),
-            json!({
-                ""type"": ""integer"",
-                ""description"": ""Maximum number of tokens to generate""
-            })
-            .as_object()
-            .unwrap()
-            .clone(),
-        );
-        properties.insert(
-            ""temperature"".to_string(),
-            json!({
-                ""type"": ""number"",
-                ""description"": ""Sampling temperature between 0 and 1"",
-                ""minimum"": 0.0,
-                ""maximum"": 1.0
-            })
-            .as_object()
-            .unwrap()
-            .clone(),
-        );
-        properties.insert(
-            ""systemPrompt"".to_string(),
-            json!({
-                ""type"": ""string"",
-                ""description"": ""Optional system prompt to prepend to the conversation""
-            })
-            .as_object()
-            .unwrap()
-            .clone(),
-        );
-
-        let input_schema = ToolInputSchema::new(required, Some(properties));
+        let schema_json = json!({
+            ""required"": [""messages""],
+            ""properties"": {
+                ""messages"": {
+                    ""type"": ""array"",
+                    ""description"": ""Conversation messages so far"",
+                    ""items"": {
+                        ""type"": ""object"",
+                        ""required"": [""role"", ""content""],
+                        ""properties"": {
+                            ""role"": { ""type"": ""string"", ""enum"": [""user"", ""assistant"", ""system""] },
+                            ""content"": { ""type"": ""string"" }
+                        }
+                    }
+                },
+                ""maxTokens"": {
+                    ""type"": ""integer"",
+                    ""description"": ""Maximum number of tokens to generate""
+                },
+                ""temperature"": {
+                    ""type"": ""number"",
+                    ""description"": ""Sampling temperature between 0 and 1"",
+                    ""minimum"": 0.0,
+                    ""maximum"": 1.0
+                },
+                ""systemPrompt"": {
+                    ""type"": ""string"",
+                    ""description"": ""Optional system prompt to prepend to the conversation""
+                }
+            }
+        });
+        
+        let required = schema_json[""required""]
+            .as_array()
+            .expect(""required should be an array"")
+            .iter()
+            .map(|v| v.as_str().expect(""required items should be strings"").to_string())
+            .collect();
+            
+        let properties = schema_json[""properties""]
+            .as_object()
+            .expect(""properties should be an object"")
+            .iter()
+            .map(|(k, v)| (k.clone(), v.as_object().expect(""property values should be objects"").clone()))
+            .collect();
+        
+        let input_schema = ToolInputSchema::new(required, Some(properties));
         Self { input_schema }
     }
```

---

`159-164`: **Consider preserving the response structure instead of flattening choices.**

Joining multiple choices with newlines loses the structure and metadata of individual responses.

If multiple choices are expected, consider returning them as separate content items:

```diff
-                let content = resp
-                    .choices
-                    .iter()
-                    .filter_map(|c| c.message.content.clone())
-                    .collect::<Vec<_>>()
-                    .join(""\n"");
-
-                Ok(CallToolResult {
-                    content: vec![CallToolResultContentItem::TextContent(TextContent::new(
-                        content, None,
-                    ))],
-                    is_error: None,
-                    meta: None,
-                })
+                let content_items: Vec<CallToolResultContentItem> = resp
+                    .choices
+                    .iter()
+                    .filter_map(|c| c.message.content.clone())
+                    .map(|content| CallToolResultContentItem::TextContent(TextContent::new(content, None)))
+                    .collect();
+
+                if content_items.is_empty() {
+                    return Err(CallToolError::new(io::Error::other(""No content in response"")));
+                }
+
+                Ok(CallToolResult {
+                    content: content_items,
+                    is_error: None,
+                    meta: None,
+                })
```

---

`182-185`: **Clean up the instruction string formatting.**

The string has unnecessary leading and trailing newlines.

```diff
-const MCP_INSTRUCTIONS: &str = r#""
-This server provides LLM text and multimodal model inference. You can use the following tools:
-- `chat` for sending a chat completion request with a model message history
-""#;
+const MCP_INSTRUCTIONS: &str = ""This server provides LLM text and multimodal model inference. You can use the following tools:\n- `chat` for sending a chat completion request with a model message history"";
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 52c196b15bf8b309b2b9950a2947d3b8c2043c3d and 43c8fe4ab21303c6d28a8ec98e5e0f6f6811b435.

</details>

<details>
<summary>📒 Files selected for processing (3)</summary>

* `docs/MCP.md` (1 hunks)
* `mistralrs-server/src/main.rs` (5 hunks)
* `mistralrs-server/src/mcp_server.rs` (1 hunks)

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (1)</summary>

* mistralrs-server/src/main.rs

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 LanguageTool</summary>

<details>
<summary>docs/MCP.md</summary>

[uncategorized] ~7-~7: A comma might be missing here.
Context: ... of free-form HTTP routes.    Under the hood the server uses [`rust-mcp-sdk`](https:...

(AI_EN_LECTOR_MISSING_PUNCTUATION_COMMA)

---

[uncategorized] ~14-~14: Possible missing comma found.
Context: ...he `mistralrs-server` crate outside the workspace enable the `mcp-server` Cargo feature m...

(AI_HYDRA_LEO_MISSING_COMMA)

---

[uncategorized] ~35-~35: Possible missing comma found.
Context: ...bilities announced to clients  At start-up the MCP handler advertises the followin...

(AI_HYDRA_LEO_MISSING_COMMA)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: Check (windows-latest, stable)
* GitHub Check: Docs
* GitHub Check: Check (ubuntu-latest, stable)
* GitHub Check: Test Suite (windows-latest, stable)
* GitHub Check: Test Suite (macOS-latest, stable)
* GitHub Check: Clippy
* GitHub Check: Check (macOS-latest, stable)
* GitHub Check: Test Suite (ubuntu-latest, stable)

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3130941497,2911727281,matthewhaynesonline,COMMENTED,2025-06-10T01:22:50Z,
3130941497,2911897959,coderabbitai[bot],COMMENTED,2025-06-10T04:05:07Z,"**Actionable comments posted: 2**

<details>
<summary>♻️ Duplicate comments (1)</summary><blockquote>

<details>
<summary>mistralrs-server/src/mcp_server.rs (1)</summary><blockquote>

`180-201`: **Streaming response support is still missing.**

The response handling only processes `Response::Done` and treats any other variant (including `Response::Chunk` for streaming) as an error. This will cause streaming requests to fail with ""no response"" errors.



Consider implementing proper streaming support by accumulating chunks or documenting that streaming is not supported for MCP tools.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 43c8fe4ab21303c6d28a8ec98e5e0f6f6811b435 and de4b29359ee9cf08dca19ffb58daf35ae7e6b1f4.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `mistralrs-server/src/main.rs` (5 hunks)
* `mistralrs-server/src/mcp_server.rs` (1 hunks)

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (1)</summary>

* mistralrs-server/src/main.rs

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (9)</summary>

* GitHub Check: Clippy
* GitHub Check: Docs
* GitHub Check: Check (macOS-latest, stable)
* GitHub Check: Check (windows-latest, stable)
* GitHub Check: Test Suite (ubuntu-latest, stable)
* GitHub Check: Check (ubuntu-latest, stable)
* GitHub Check: Test Suite (macOS-latest, stable)
* GitHub Check: Test Suite (windows-latest, stable)
* GitHub Check: comment

</details>

<details>
<summary>🔇 Additional comments (6)</summary><blockquote>

<details>
<summary>mistralrs-server/src/mcp_server.rs (6)</summary>

`1-30`: **LGTM! Clean imports and standard JSON-RPC error codes.**

The import structure is well-organized and the error codes follow the JSON-RPC 2.0 specification properly.

---

`32-57`: **Well-structured JSON-RPC types.**

The request/response structures correctly implement the JSON-RPC 2.0 specification with proper optional field handling.

---

`59-80`: **Excellent trait design for extensible MCP tools.**

The `McpTool` trait provides a clean, async interface that enables easy addition of new tools while maintaining type safety.

---

`167-168`: **Request conversion efficiency looks improved.**

The direct conversion from `serde_json::Value` to `ChatCompletionRequest` is more efficient than the previous double serialization approach mentioned in past comments.

---

`217-241`: **Well-designed handler initialization.**

The handler setup correctly initializes tools and server capabilities following the MCP protocol specification.

---

`330-357`: **Clean and well-structured server setup.**

The Axum-based server implementation follows best practices with proper error handling and a clean single-endpoint design appropriate for JSON-RPC.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3130941497,2911914639,coderabbitai[bot],COMMENTED,2025-06-10T04:21:00Z,"**Actionable comments posted: 1**

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>docs/MCP.md (2)</summary><blockquote>

`7-7`: **Add missing comma after introductory phrase.**

The sentence reads better and conforms to style guidelines with a comma after ""Under the hood"".  


```diff
- Under the hood the server uses [`rust-mcp-sdk`](https://crates.io/crates/rust-mcp-sdk) and exposes tools based on the supported modalities of the loaded model.
+ Under the hood, the server uses [`rust-mcp-sdk`](https://crates.io/crates/rust-mcp-sdk) and exposes tools based on the supported modalities of the loaded model.
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[uncategorized] ~7-~7: Possible missing comma found.
Context: ... of free-form HTTP routes.    Under the hood the server uses [`rust-mcp-sdk`](https:...

(AI_HYDRA_LEO_MISSING_COMMA)

</details>

</details>

---

`46-46`: **Specify language for fenced code block.**

Markdown linting flags this block for missing language identifier; adding `bash` improves readability and tooling support.  


```diff
- ```
+ ```bash
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 markdownlint-cli2 (0.17.2)</summary>

46-46: Fenced code blocks should have a language specified
null

(MD040, fenced-code-language)

</details>

</details>

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 1e1f8c5213ac0bcebe5ea093b6cd3451ea2e1a82 and 90ebe5e18ea27aedd47ced9b5dc153637a663fb0.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `docs/MCP.md` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 LanguageTool</summary>

<details>
<summary>docs/MCP.md</summary>

[uncategorized] ~7-~7: Possible missing comma found.
Context: ... of free-form HTTP routes.    Under the hood the server uses [`rust-mcp-sdk`](https:...

(AI_HYDRA_LEO_MISSING_COMMA)

</details>

</details>
<details>
<summary>🪛 markdownlint-cli2 (0.17.2)</summary>

<details>
<summary>docs/MCP.md</summary>

13-13: Table column count
Expected: 3; Actual: 4; Too many cells, extra data will be missing

(MD056, table-column-count)

---

46-46: Fenced code blocks should have a language specified
null

(MD040, fenced-code-language)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: Docs
* GitHub Check: Test Suite (windows-latest, stable)
* GitHub Check: Check (macOS-latest, stable)
* GitHub Check: Clippy
* GitHub Check: Test Suite (ubuntu-latest, stable)
* GitHub Check: Test Suite (macOS-latest, stable)
* GitHub Check: Check (ubuntu-latest, stable)
* GitHub Check: Check (windows-latest, stable)

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3130941497,2911917348,EricLBuehler,COMMENTED,2025-06-10T04:23:38Z,
3077744021,2855043577,github-actions[bot],COMMENTED,2025-05-20T17:28:36Z,"Your PR title doesn't match the required format. The title should be in this format: 

```
chore: update Text docs
fix: text not rendering
feat: add new feature to Text
breaking: remove Text#resolution 
```"
3077744021,2855084274,bigtimebuddy,APPROVED,2025-05-20T17:44:08Z,
3116788481,2897334620,coderabbitai[bot],COMMENTED,2025-06-04T16:07:44Z,"**Actionable comments posted: 3**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between b848fe5089eab8008ce9a12a716b6bee61da66d0 and 60ab7c751ecd048596894a56640cc24e5c6e9e3c.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `frontends/sdl/src/main.rs` (1 hunks)
* `src/mmu.rs` (4 hunks)

</details>

<details>
<summary>✅ Files skipped from review due to trivial changes (1)</summary>

* frontends/sdl/src/main.rs

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (12)</summary>

* GitHub Check: Build SDL (latest)
* GitHub Check: Build Libretro Android (1.84.0)
* GitHub Check: Build Libretro Android (1.83.0)
* GitHub Check: Build Libretro Android (1.82.0)
* GitHub Check: Build Libretro Android (latest)
* GitHub Check: Build SDL (1.83.0)
* GitHub Check: Build Libretro Android (1.85.0)
* GitHub Check: Build Windows
* GitHub Check: Build SDL (1.85.0)
* GitHub Check: Build SDL (1.82.0)
* GitHub Check: Build SDL (1.84.0)
* GitHub Check: Build Mac

</details>

<details>
<summary>🔇 Additional comments (5)</summary><blockquote>

<details>
<summary>src/mmu.rs (5)</summary>

`9-9`: **LGTM: Import additions are appropriate.**

The added imports for `HDMA_CYCLES_PER_BLOCK` and `PpuMode` are necessary for the new HBlank DMA timing implementation.



Also applies to: 13-13

---

`291-295`: **Good defensive programming with pedantic validation.**

The assertion correctly validates the DMA source address range (0x0000-0xDFFF) which covers ROM, external RAM, and working RAM areas - the valid source regions for Game Boy DMA transfers.

---

`318-329`: **LGTM: General DMA mode implementation is correct.**

The logic properly handles General mode HDMA by transferring all pending data at once and only executing in CGB mode to avoid crashes on unmapped DMG registers.

---

`700-730`: **Excellent test coverage for General DMA mode.**

The test comprehensively verifies General mode HDMA timing by setting up a 32-byte transfer, ensuring immediate completion, and validating both data integrity and state changes.

---

`733-780`: **Comprehensive HBlank DMA timing test.**

The test excellently validates HBlank mode behavior including:
- Proper 16-byte block transfers during HBlank periods
- No transfers when PPU is not in HBlank mode  
- Complete data integrity across multiple transfer cycles
- Correct state management throughout the process

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3095854016,2878494307,superlbr,APPROVED,2025-05-29T14:22:41Z,
3071005313,2848390249,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-17T20:27:35Z,"## Pull Request Overview

This PR replaces the previous loose‐dict `ContentRetrievalSettings` model with a strongly typed `ContentSettings` model to ensure proper JSON schema generation for advanced toggle settings in `ExaContentsBlock`.

- Remove local `ContentRetrievalSettings` and its dict‐based fields.
- Import and apply the `ContentSettings` Pydantic model in the block schema.
- Update the `contents` field default to `ContentSettings()`.


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**autogpt_platform/backend/backend/blocks/exa/contents.py:28**
* Add or update tests to verify the generated JSON schema and frontend rendering behavior for the new ContentSettings model in advanced settings.
```
contents: ContentSettings = SchemaField(
```
</details>

"
3071005313,2958641008,dcq01,COMMENTED,2025-06-25T15:22:50Z,"Hi! I'm a grad student working on a research project about using large language models to automate code review. Based on your commit d68108388021ae48113a641f46114bb491375737 and the changes in autogpt_platform/backend/backend/blocks/exa/contents.py, my tool generated this comment:
1. Field Access in `run` Method:
2.    - Ensure that `ContentSettings` indeed has the fields `text`, `highlights`, and `summary`; otherwise, this will lead to an `AttributeError`.
2. Input Validation:
3.    - Ensure that the `ContentSettings` model includes proper validation for its fields to prevent unexpected behavior.
3. API Key Handling:
4.    - Ensure that the method `credentials.api_key.get_secret_value()` does not expose the API key in logs or error messages.
4. Response Handling:
5.    - Validate the structure of the response data before using it in the application.
5. Error Handling:
6.    - Consider handling specific exceptions (like `requests.exceptions.RequestException`) in the `run` method to provide more informative error messages.
6. Replacement of `ContentRetrievalSettings` with `ContentSettings`: 
7.    - The patch correctly replaces the `ContentRetrievalSettings` class with `ContentSettings`, enhancing the structure of the data being passed and ensuring that the JSON schema is properly defined.
7. Yielding Results:
8.    - Ensure that the calling code is designed to handle the generator output correctly. If the intention is to return a single output, consider using `return` instead of `yield`.
8. Memory Management:
9.    - Consider implementing pagination or limiting the number of results returned to prevent excessive memory usage.
9. Network Request Optimization:
10.     - Consider implementing connection pooling or using asynchronous requests to improve response times.
10. Logging:
11.     - Add logging for the API request and response, especially in the case of errors.
11. Testing:
12.    - Ensure that there are adequate unit tests to cover the new functionality introduced by `ContentSettings`.

As part of my research, I'm trying to understand how useful these comments are in real-world development. If you have a moment, I'd be super grateful if you could quickly reply to these two yes/no questions:
1. Does this comment provide suggestions from a dimension you hadn’t considered?
2. 2. Do you find this comment helpful?

Thanks a lot for your time and feedback! And sorry again if this message is a bother."
3070970659,2848366064,coderabbitai[bot],COMMENTED,2025-05-17T18:08:01Z,"**Actionable comments posted: 1**

<details>
<summary>🔭 Outside diff range comments (1)</summary><blockquote>

<details>
<summary>packages/cli/src/commands/plugins.ts (1)</summary><blockquote>

`222-223`: _💡 Verification agent_

<details>
<summary>🧩 Analysis chain</summary>

**Verify plugin name extraction is reliable for env var prompting.**

The plugin name for post-installation is derived from the repository name, but this might not match the expected format in the ENV_VAR_CONFIGS mapping used by promptForEnvVars.

Let's examine how ENV_VAR_CONFIGS keys are formatted to ensure compatibility:

---

🏁 Script executed:

```shell
#!/bin/bash
# Check the ENV_VAR_CONFIGS structure to verify name format compatibility
rg -A 5 ""ENV_VAR_CONFIGS\s*="" packages/cli/src/utils
```

Length of output: 54

---

🏁 Script executed:

```shell
#!/bin/bash
# Search entire repo for ENV_VAR_CONFIGS and promptForEnvVars definitions
rg -n ""ENV_VAR_CONFIGS""
rg -n ""promptForEnvVars""
```

Length of output: 1385

---

🏁 Script executed:

```shell
#!/bin/bash
# Display ENV_VAR_CONFIGS definition and keys
rg -n ""const ENV_VAR_CONFIGS"" -C 10 packages/cli/src/utils/env-prompt.ts

# Show context around pluginNameForPostInstall in plugins.ts
sed -n '200,260p' packages/cli/src/commands/plugins.ts
```

Length of output: 3667

---



</details>

**Refine GitHub plugin name before env‐prompt**  
The GitHub install flow currently uses `repo` as the post-install name, but `promptForEnvVars` lowercases that value to key into `ENV_VAR_CONFIGS`. Any divergence between the repo slug and your config keys (prefixes, casing, hyphens) will skip prompting.  

• In packages/cli/src/commands/plugins.ts (~lines 225–230), replace:  
```ts
const pluginNameForPostInstall = repo;
```  
with something like:  
```ts
// After installPlugin succeeds…
const installedName = findPluginPackageName(githubSpecifier, pkgData.allDependencies);
const pluginNameForPostInstall = (installedName ?? repo).toLowerCase();
await promptForEnvVars(pluginNameForPostInstall);
```  
This ensures you use the actual package name (normalized) to match keys in `ENV_VAR_CONFIGS`.

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>packages/cli/src/commands/plugins.ts (1)</summary><blockquote>

`235-243`: **Consider applying similar post-install steps to other installation paths.**

For consistency, it would be helpful to implement similar environment variable prompting for other installation paths (official ElizaOS plugins and third-party npm packages) in addition to GitHub plugins.

```diff
// Apply post-install steps after npm installation
if (npmInstallResult) {
  console.log(`Successfully installed ${npmPackageNameWithTag}`);
+ if (!opts.noEnvPrompt) {
+   try {
+     await loadEnvironment();
+     await promptForEnvVars(normalizedPluginName.replace(/^plugin-/, ''));
+     await saveConfig({ lastUpdated: new Date().toISOString() });
+   } catch (postError) {
+     logger.warn(`Post-install configuration failed: ${postError}`);
+   }
+ }
  process.exit(0);
}
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 9fc80151475a0e3e346c622117fc77f479988b4e and dd6a497a21e52c7c4dd2c77ce84e597517608f59.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `packages/cli/src/commands/plugins.ts` (2 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>packages/cli/src/commands/plugins.ts (3)</summary><blockquote>

<details>
<summary>packages/cli/src/utils/get-config.ts (1)</summary>

* `loadEnvironment` (303-325)

</details>
<details>
<summary>packages/cli/src/utils/env-prompt.ts (1)</summary>

* `promptForEnvVars` (277-354)

</details>
<details>
<summary>packages/cli/src/utils/config-manager.ts (1)</summary>

* `saveConfig` (69-88)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (4)</summary>

* GitHub Check: test
* GitHub Check: databaseIntegrationTests
* GitHub Check: integration-tests
* GitHub Check: test

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>packages/cli/src/commands/plugins.ts (1)</summary>

`7-9`: **New utility imports for enhanced post-installation process.**

The added imports support the new post-install functionality for GitHub plugins.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3090674766,2868066049,graphite-app[bot],COMMENTED,2025-05-26T11:08:18Z,
3090674766,2868236088,JamesHenry,COMMENTED,2025-05-26T12:12:53Z,
3077628746,2855299301,ellipsis-dev[bot],COMMENTED,2025-05-20T19:05:37Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to a56f63a008626eac2c29c6fa9bad6a350bebeec4 in <ellipsistime>1 minute and 21 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `90` lines of code in `5` files
> - Skipped `0` files when reviewing.
> - Skipped posting `5` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>.github/workflows/generate-openapi-code-from-typespec.yml:34</code></summary>
> 
> - **Draft comment:** 
> Good use of 'git diff --exit-code' to enforce freshness. Consider adding 'set -eo pipefail' at the start of the run block to catch any errors immediately.
> - **Reason this comment was not posted:**
> Comment was on unchanged code.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>.pre-commit-config.yaml:6</code></summary>
> 
> - **Draft comment:** 
> Ensure that the generate_openapi_code.sh script is executable to avoid hook failures on some systems.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>CONTRIBUTING.md:163</code></summary>
> 
> - **Draft comment:** 
> Great addition of pre-commit installation instructions to ease onboarding for new contributors.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>deploy/docker-compose.dev.yaml:2</code></summary>
> 
> - **Draft comment:** 
> The use of the 'include' key and empty string profiles is non-standard; ensure your Docker Compose version or tooling supports this syntax.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment is asking the author to ensure compatibility with their Docker Compose version or tooling, which violates the rule against asking the author to ensure behavior is intended or tested. It doesn't provide a specific suggestion or ask for a specific change.
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>poe_tasks.toml:2</code></summary>
> 
> - **Draft comment:** 
> The dev-up task is clear; ensure the referenced .env file exists and has all required environment variables for successful startup.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_hWpL3Vjzct37DMty`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3071169461,2848465447,ellipsis-dev[bot],COMMENTED,2025-05-18T00:06:02Z,
3071169461,2848468240,sourcery-ai[bot],COMMENTED,2025-05-18T00:07:20Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3121603815,2900842589,sixcolors,APPROVED,2025-06-05T15:39:28Z,LGTM!
3121603815,2900846065,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-05T15:40:39Z,"## Pull Request Overview

This PR refines the CORS middleware to align more closely with the CORS RFC by preserving Origin header casing, separating simple vs. preflight header logic, and omitting the `Access-Control-Max-Age` header on simple requests. It also introduces regression tests for these behaviors.

- Refactor `cors.go` to use `setSimpleHeaders` and `setPreflightHeaders`, and keep the original Origin casing
- Remove Max-Age header on non-OPTIONS (simple) requests
- Add tests for Max-Age omission and origin-case preservation

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated no comments.

| File                              | Description                                                           |
| --------------------------------- | --------------------------------------------------------------------- |
| middleware/cors/cors.go           | Split header helpers, rename and preserve raw origin header, remove slices import |
| middleware/cors/cors_test.go      | Add tests for simple-request MaxAge omission and origin-case preservation |


<details>
<summary>Comments suppressed due to low confidence (4)</summary>

**middleware/cors/cors.go:86**
* [nitpick] The name `originHeaderRaw` is descriptive but a bit verbose; you might rename it to `rawOrigin` or `requestOrigin` for brevity and clarity.
```
originHeaderRaw := c.Get(fiber.HeaderOrigin)
```
**middleware/cors/cors.go:189**
* Add a GoDoc comment above `setSimpleHeaders` to explain its parameters and behavior, which will improve maintainability and aid new contributors.
```
func setSimpleHeaders(c fiber.Ctx, allowOrigin string, cfg Config) {
```
**middleware/cors/cors_test.go:100**
* There are no tests verifying that `ExposeHeaders` are correctly applied in both simple and preflight flows—consider adding tests for the `Access-Control-Expose-Headers` header.
```
func testDefaultOrEmptyConfig(t *testing.T, app *fiber.App) {
```
**middleware/cors/cors.go:118**
* Consider converting `allowOrigins` into a map or a set at initialization to avoid linear scans on every request, improving lookup performance for large origin lists.
```
for _, origin := range allowOrigins {
```
</details>

"
3121603815,2900850542,coderabbitai[bot],COMMENTED,2025-06-05T15:42:13Z,"**Actionable comments posted: 1**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between f9eec854fd52e93cbd08efff77a132d554772080 and babef1b7419ab49cfd73ecb17f491fee538e5a11.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `middleware/cors/cors.go` (6 hunks)
* `middleware/cors/cors_test.go` (1 hunks)

</details>

<details>
<summary>🔇 Additional comments (7)</summary><blockquote>

<details>
<summary>middleware/cors/cors.go (5)</summary>

`85-87`: **Excellent RFC compliance improvement!**

Preserving the original case of the `Origin` header while performing case-insensitive comparisons is the correct approach per CORS RFC standards. The dual-variable approach is clean and efficient.

---

`118-123`: **Well-implemented case preservation logic.**

The switch from `slices.Contains` to an explicit loop is necessary to preserve the original case in the response while maintaining case-insensitive comparison. The logic correctly compares normalized origins with the lowercase request origin and returns the raw origin header when a match is found.

---

`189-189`: **Good RFC compliance improvements.**

Removing the unused `maxAge` parameter and adding `ExposeHeaders` to simple requests aligns better with CORS specifications. The `Access-Control-Expose-Headers` should indeed be set for both simple and preflight requests when configured.



Also applies to: 204-208

---

`210-220`: **Clean separation of header-setting logic.**

The new `setPreflightHeaders` function provides a clear separation between simple and preflight request headers. The implementation correctly calls `setSimpleHeaders` first and then adds preflight-specific headers like `Access-Control-Max-Age`. This refactoring improves code maintainability and RFC compliance.

---

`150-150`: **Correct implementation of the refactored architecture.**

The function calls correctly route simple requests to `setSimpleHeaders` (without maxAge) and preflight requests to `setPreflightHeaders`. This ensures that `Access-Control-Max-Age` is only set for preflight requests, improving RFC compliance.



Also applies to: 168-168

</details>
<details>
<summary>middleware/cors/cors_test.go (2)</summary>

`69-81`: **Comprehensive test for MaxAge behavior on simple requests.**

This test correctly verifies that the `Access-Control-Max-Age` header is not set on simple requests even when the MaxAge configuration is specified. This validates the RFC compliance improvement where MaxAge should only be sent with preflight responses.

---

`83-98`: **Excellent test coverage for origin case preservation.**

This test thoroughly validates that the middleware preserves the exact casing of the `Origin` header in the response. The test design is particularly good - using lowercase in the configuration and uppercase in the request clearly demonstrates that case-insensitive matching works while preserving the original case in the response.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3121603815,2912177609,ReneWerner87,APPROVED,2025-06-10T06:47:25Z,
3140569086,2921600577,aolfat,APPROVED,2025-06-12T15:03:45Z,
3070485334,2848213385,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-17T09:47:12Z,"## Pull Request Overview

This PR fixes typos in log and warning messages, updates a test to assert on a specific error message, and corrects an option name mismatch.

- Clean up duplicate wording in the local service log message  
- Correct option name in the schedule warning  
- Tighten the IO utils test to check for a specific exception message

### Reviewed Changes

Copilot reviewed 4 out of 4 changed files in this pull request and generated 1 comment.

| File                                    | Description                                             |
| --------------------------------------- | ------------------------------------------------------- |
| tests/unit/utils/test_io_utils.py       | Added `match=""Content must be of type str""` to the `pytest.raises` call |
| src/zenml/services/local/local_service.py | Removed the duplicated ""for"" in the `logger.error` message |
| src/zenml/config/schedule.py            | Changed `interval_seconds` to `interval_second` in the warning |


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**src/zenml/config/schedule.py:111**
* The option name `interval_second` is incorrect and inconsistent with the actual `interval_seconds` parameter. It should be updated back to `interval_seconds` to match the real config and avoid confusion.
```
""values for `start_time` and `interval_second`. The resulting ""
```
</details>

"
3070485334,2848217684,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-17T09:51:40Z,"## Pull Request Overview

This PR fixes typos and minor bugs while enhancing test precision and error reporting.  
- Updates test assertions to check for a precise error message on invalid file content.  
- Removes a duplicate word in a log message in the local daemon service.  
- Corrects a parameter name typo in a schedule configuration warning.

### Reviewed Changes

Copilot reviewed 4 out of 4 changed files in this pull request and generated no comments.

| File                                                    | Description                                                                                  |
| ------------------------------------------------------- | -------------------------------------------------------------------------------------------- |
| tests/unit/utils/test_io_utils.py                       | Updated test to assert a specific error message for non-string file content                  |
| src/zenml/services/local/local_service.py               | Removed duplicate wording in a log message indicating a missing process                      |
| src/zenml/config/schedule.py                            | Fixed a typo in a warning message by correcting the parameter name from plural to singular      |



"
3070485334,2848804016,htahir1,APPROVED,2025-05-18T08:00:05Z,
3070485334,2852960792,bcdurak,APPROVED,2025-05-20T07:14:03Z,
3071786742,2848982781,lunary-bot,APPROVED,2025-05-18T13:31:31Z,
3101434004,2882433310,fazzone,COMMENTED,2025-05-30T21:44:05Z,
3101434004,2882620697,acco,COMMENTED,2025-05-30T21:50:32Z,- Ensure Kinesis is listed in places where we list other sinks (grep for SQS)
3156803349,2939413622,Siddhant-K-code,APPROVED,2025-06-18T14:12:06Z,
3156803349,2939946024,sergiught,APPROVED,2025-06-18T16:27:27Z,
3134922239,2915124573,coderabbitai[bot],COMMENTED,2025-06-10T21:52:47Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (3)</summary><blockquote>

<details>
<summary>src/apu.rs (3)</summary><blockquote>

`39-42`: **Consider adding documentation for the band-limited constants.**

These constants would benefit from documentation explaining their purpose and the choice of values, especially the fixed-point representation.

```diff
+/// Width of the band-limited filter kernel (number of samples)
 const BAND_LIMITED_WIDTH: usize = 16;
+/// Number of discrete phases for band-limited step interpolation
 const BAND_LIMITED_PHASES: usize = 512;
+/// Fixed-point representation of 1.0 (16.16 fixed-point format)
 const BAND_LIMITED_ONE: i32 = 0x10000;
```

---

`86-103`: **Unused band-limited update function.**

This function appears to be scaffolding for future band-limited audio implementation. The implementation looks correct but is not integrated into the audio processing pipeline yet.

Would you like me to help integrate this function into the audio clock cycle or create an issue to track the full implementation of band-limited audio processing?

---

`211-223`: **Unused band-limited data structures.**

The `BlSample` and `BandLimited` structs are defined but not used in the current implementation. Consider adding a TODO comment to indicate these are for future band-limited audio processing.

```diff
+// TODO: These structures will be used for band-limited audio processing implementation
 #[derive(Clone, Copy, Default)]
 struct BlSample {
     left: i32,
     right: i32,
 }

 #[derive(Default)]
 struct BandLimited {
     buffer: [BlSample; BAND_LIMITED_WIDTH * 2],
     output: BlSample,
     pos: u8,
     input: BlSample,
 }
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 5af52fa3be5d5481341d9cf5a688db97372f8aed and 24ddeecf4ce390c0ba7574b95add78cc62392db6.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `CHANGELOG.md` (1 hunks)
* `src/apu.rs` (13 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (11)</summary>

* GitHub Check: Build WASM (latest, 18)
* GitHub Check: Build (1.82.0)
* GitHub Check: Build SDL (1.85.0)
* GitHub Check: Build WASM (1.83.0, 18)
* GitHub Check: Build WASM (1.82.0, 18)
* GitHub Check: Build SDL (1.83.0)
* GitHub Check: Build SDL (latest)
* GitHub Check: Build SDL (1.84.0)
* GitHub Check: Build SDL (1.82.0)
* GitHub Check: Build Mac
* GitHub Check: Build Windows

</details>

<details>
<summary>🔇 Additional comments (7)</summary><blockquote>

<details>
<summary>src/apu.rs (6)</summary>

`7-7`: **LGTM!**

The `OnceLock` import is correctly added for the lazy initialization of band-limited steps.

---

`46-84`: **Well-implemented band-limited step generation!**

The mathematical approach using odd harmonics and normalization is correct for band-limited synthesis. The error distribution in the fixed-point conversion ensures accuracy.

---

`122-165`: **LGTM!**

The `UpdateMode` enum implementation follows the established pattern and includes all necessary trait implementations for serialization and display.

---

`330-330`: **LGTM!**

The `update_mode` field is properly integrated into the `Apu` struct with appropriate initialization, reset behavior, and accessor methods.



Also applies to: 426-426, 506-506, 1080-1086

---

`1528-1528`: **LGTM!**

State serialization and deserialization for `update_mode` is correctly implemented following the established pattern.



Also applies to: 1620-1620

---

`1636-1636`: **LGTM!**

Test updates correctly account for the new `update_mode` field:
- Import added for the new test
- State size correctly increased by 1 byte
- New test properly verifies update_mode preservation through state save/load cycle



Also applies to: 1769-1769, 1908-1918

</details>
<details>
<summary>CHANGELOG.md (1)</summary>

`13-13`: **LGTM!**

The changelog entry accurately documents the new band-limited audio update mode infrastructure.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3070204179,2847876484,coderabbitai[bot],COMMENTED,2025-05-17T02:32:32Z,"**Actionable comments posted: 0**

<details>
<summary>🔭 Outside diff range comments (1)</summary><blockquote>

<details>
<summary>crawl4ai/utils.py (1)</summary><blockquote>

`1189-1198`: _🛠️ Refactor suggestion_

**Add timeout and broaden exception handling in HTTP HEAD request**  
The `requests.head` call (line 1191) currently has no timeout and only catches `InvalidSchema`, which can lead to hangs or uncaught network errors. It’s critical to:  
1. Specify a reasonable `timeout`.  
2. Catch all `requests.RequestException` errors.  
3. Convert the `Content-Length` header to an integer.  

Proposed diff:
```diff
-                    response = requests.head(img_url)
+                    response = requests.head(img_url, timeout=2)
                     if response.status_code == 200:
-                        return response.headers.get(""Content-Length"", None)
+                        size = response.headers.get(""Content-Length"")
+                        return int(size) if size and size.isdigit() else None
                     else:
                         print(f""Failed to retrieve file size for {img_url}"")
                         return None
-                except InvalidSchema:
+                except (InvalidSchema, requests.RequestException):
                     return None
```

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>crawl4ai/utils.py (1)</summary><blockquote>

`153-157`: **Ensure provided splitter is properly typed and validated**  
The new `splitter` parameter (defaulting to `str.split`) is correctly applied at line 153. To improve robustness and clarity:  
- Add an explicit type annotation to the signature: `splitter: Callable[[str], List[str]] = None`.  
- Validate or document that `splitter(doc)` returns a list of strings to prevent unexpected downstream failures.  
- Since `token_counts` is only used to compute `total_tokens`, consider removing the unused `token_counts` array to reduce clutter.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**
**Cache: Disabled due to data retention organization setting**
**Knowledge Base: Disabled due to data retention organization setting**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 897e0173618d20fea5d8952ccdbcdad0febc0fee and 45f1652d980359b38fd2e80d0d9b564f883a68f6.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `crawl4ai/utils.py` (1 hunks)

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3125528922,2907379404,akhilsmokie,APPROVED,2025-06-07T13:37:34Z,
3125528922,2910208188,rm-openai,APPROVED,2025-06-09T14:13:39Z,
3128069788,2908253026,devgony,APPROVED,2025-06-08T08:20:40Z,
3086630744,2864699959,qodo-merge-for-open-source[bot],COMMENTED,2025-05-23T14:49:05Z,
3086630744,2864699989,ellipsis-dev[bot],COMMENTED,2025-05-23T14:49:05Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 4bb492dd6bc22d5b221391ca51ce4c2166c25a81 in <ellipsistime>1 minute and 17 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `192` lines of code in `10` files
> - Skipped `0` files when reviewing.
> - Skipped posting `10` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>CHANGELOG.md:61</code></summary>
> 
> - **Draft comment:** 
> Changelog entry added for footer link update looks correct.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>documentation/concepts/sessions.mdx:558</code></summary>
> 
> - **Draft comment:** 
> Cookbook footer link for the crawling-and-rag example is updated to point to the new 'advanced' path; link appears correct.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>documentation/guides/cookbooks/community-examples.mdx:11</code></summary>
> 
> - **Draft comment:** 
> Community example links updated with 'advanced' directory; links for Hook Generator, Reel Generator, etc. look correct.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>documentation/guides/cookbooks/industry-solutions.mdx:11</code></summary>
> 
> - **Draft comment:** 
> Industry Solutions links updated to 'advanced' paths; they look correct.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>documentation/guides/cookbooks/quick-solutions.mdx:11</code></summary>
> 
> - **Draft comment:** 
> Quick Solutions cookbook links have been updated with the new 'advanced' directory; everything seems in order.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>6. <code>documentation/tutorials/browser-use.mdx:622</code></summary>
> 
> - **Draft comment:** 
> The browser-use tutorial footer link now correctly points to 'cookbooks/advanced/06-browser-use.ipynb'.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>7. <code>documentation/tutorials/rag-chatbot.mdx:496</code></summary>
> 
> - **Draft comment:** 
> RAG Chatbot tutorial link updated to 'cookbooks/advanced/08-rag-chatbot.ipynb'; looks correct.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>8. <code>documentation/tutorials/trip-planning-running.mdx:357</code></summary>
> 
> - **Draft comment:** 
> Trip Planning Running tutorial now uses the advanced cookbook path for trip-planning; the link appears correct.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>9. <code>documentation/tutorials/trip-planning.mdx:641</code></summary>
> 
> - **Draft comment:** 
> Trip Planning tutorial's footer link now correctly points to the new 'advanced' path; no issues detected.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>10. <code>documentation/tutorials/video-processing.mdx:24</code></summary>
> 
> - **Draft comment:** 
> There is an inconsistency in the input schema: the tutorial section uses 'upload_file' while the complete YAML block uses 'video_url'. Consider standardizing the property name for clarity.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_J5XaQcsdetCa2ZY0`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3132061081,2923368865,devgony,APPROVED,2025-06-13T04:16:34Z,
3144592513,2930847004,smola,APPROVED,2025-06-16T06:58:05Z,
3144592513,2930945165,bric3,APPROVED,2025-06-16T07:35:50Z,
3087514476,2865703760,coderabbitai[bot],COMMENTED,2025-05-23T20:56:52Z,"**Actionable comments posted: 0**

<details>
<summary>🔭 Outside diff range comments (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/contract-ui/components/solidity-inputs/bytes-input.tsx (1)</summary><blockquote>

`15-26`: _🛠️ Refactor suggestion_

**Validation logic runs but errors aren’t surfaced in the UI**  
You call `form.setError` and `form.clearErrors`, but the component never displays any error message or invalid styling. To give users feedback:

- Wrap the input in a `<FormControl>` (or equivalent) and pass an `isInvalid` flag.
- Render the error text below the input (e.g. via `<FormErrorMessage>` or a styled `<p>`).

This is critical so that users know *why* their input is invalid.

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (3)</summary><blockquote>

<details>
<summary>apps/dashboard/src/contract-ui/components/solidity-inputs/bytes-input.tsx (2)</summary><blockquote>

`10-13`: **Streamline prop filtering via types instead of runtime destructuring**  
Right now you destructure out `size` and `name` at runtime and disable the lint rule. Instead, consider updating the prop type to omit those keys (e.g. `Omit<SolidityInputWithTypeProps, 'size' | 'name'>`) or alias them in one go:

```ts
const { name: inputName, size: _size, ...restOfInputProps } = inputProps;
```

This removes the need for `// eslint-disable` and makes the intent clearer.

---

`28-35`: **Enhance accessibility with explicit labeling**  
Relying solely on a placeholder can hamper accessibility. Consider:

- Adding an `id={inputName}` and pairing it with a `<label htmlFor={inputName}>…</label>`.
- Or, if you don’t want a visible label, use an `aria-label={solidityType}` prop on the `Input`.

This will help screen‐reader users and improve overall UX.

</blockquote></details>
<details>
<summary>apps/dashboard/src/contract-ui/components/solidity-inputs/int-input.tsx (1)</summary><blockquote>

`50-52`: **Consider optimizing the boolean condition for better readability.**

The condition is functionally correct, but could be more concise:

```diff
-  const showConversionButton =
-    formValue.includes(""."") || formValue.includes("","");
+  const showConversionButton = /[.,]/.test(formValue);
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between adc738e536f1d558cb3f0f10c01254fba48fe91f and 11ac5b9fc8f76992fe54e7b4c9ede81a820db421.

</details>

<details>
<summary>📒 Files selected for processing (4)</summary>

* `apps/dashboard/src/contract-ui/components/solidity-inputs/bool-input.tsx` (2 hunks)
* `apps/dashboard/src/contract-ui/components/solidity-inputs/bytes-input.tsx` (1 hunks)
* `apps/dashboard/src/contract-ui/components/solidity-inputs/int-input.tsx` (2 hunks)
* `apps/dashboard/src/contract-ui/components/solidity-inputs/string-input.tsx` (3 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>apps/dashboard/src/contract-ui/components/solidity-inputs/bool-input.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/@/components/ui/button.tsx (1)</summary>

* `Button` (67-67)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (4)</summary>

* GitHub Check: Unit Tests
* GitHub Check: Lint Packages
* GitHub Check: Size
* GitHub Check: Analyze (javascript)

</details>

<details>
<summary>🔇 Additional comments (4)</summary><blockquote>

<details>
<summary>apps/dashboard/src/contract-ui/components/solidity-inputs/bytes-input.tsx (1)</summary>

`1-1`: **Swapped Chakra’s Input for the local `Input` – verify API compatibility**  
This replaces `@chakra-ui/react`’s Input with your custom component. Ensure that the new `Input` accepts all the props you’re passing (`placeholder`, `value`, `onChange`, etc.) and that its styling, focus ring, and keyboard behaviour match your design specs.

</details>
<details>
<summary>apps/dashboard/src/contract-ui/components/solidity-inputs/bool-input.tsx (1)</summary>

`1-33`: **Clean migration from Chakra UI to shadcn/ui completed successfully.**

The boolean input component has been migrated effectively with all functionality preserved. The Tailwind CSS styling correctly replicates the button group behavior, and the shadcn/ui Button component integration looks solid.

Key improvements:
- Consistent styling approach with the rest of the dashboard
- Proper button group visual connection using border and radius classes
- Maintained accessibility and interaction patterns

</details>
<details>
<summary>apps/dashboard/src/contract-ui/components/solidity-inputs/int-input.tsx (1)</summary>

`54-72`: **Excellent implementation of conditional layout with proper spacing.**

The migration successfully replaces Chakra's InputGroup/InputRightElement pattern with:
- Relative positioning container
- Conditional padding to prevent text overlap
- Absolute positioned button with proper alignment

The `cn` utility usage for dynamic className composition is a best practice for this type of conditional styling.

</details>
<details>
<summary>apps/dashboard/src/contract-ui/components/solidity-inputs/string-input.tsx (1)</summary>

`36-74`: **Well-executed migration with excellent responsive design handling.**

The migration from Chakra UI to native elements + Tailwind is implemented thoughtfully:

- Responsive padding (`pr-[90px] md:pr-[160px]`) properly accommodates the upload button
- Responsive text visibility (`hidden md:block`) maintains the mobile-first approach
- Absolute positioning preserves the original layout behavior
- The `cn` utility ensures proper className merging

The functionality for IPFS upload and URI handling is correctly preserved, including the trailing slash logic for `updateBatchBaseURI`.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3087514476,2865843445,joaquim-verges,APPROVED,2025-05-23T22:44:12Z,
3134204830,2914299975,gemini-code-assist[bot],COMMENTED,2025-06-10T16:25:50Z,"## Summary of Changes

Hello @rgerhards, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request fixes a build problem specifically encountered on Solaris systems within the `omusrmsg` module. The core issue revolved around the availability and definition of structures and macros related to user session data (`utmp`/`utmpx`). The changes adjust the header inclusion logic to prefer `utmpx.h` and ensure that necessary macros like `UT_LINESIZE` are defined correctly, while also making existing platform-specific definitions more robust.

### Highlights

* **Build Fix**: Addressed a build issue on Solaris for the `omusrmsg` module related to user session data handling.
* **Header Inclusion Logic**: Prioritized the use of `utmpx.h` over `utmp.h` when available for accessing user session information.
* **Define UT_LINESIZE**: Added logic to define the `UT_LINESIZE` macro if it's not provided by the included header, checking common alternative macro names.
* **Conditional Definitions**: Wrapped existing FreeBSD-specific `setutent`, `getutent`, and `endutent` definitions in `#ifndef` guards to prevent potential redefinition conflicts.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configureGemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3134204830,2914302941,gemini-code-assist[bot],COMMENTED,2025-06-10T16:27:01Z,"## Code Review

This pull request effectively addresses a build issue on Solaris concerning `UT_LINESIZE`. It achieves this by prioritizing the use of `utmpx.h` and including necessary fallbacks for `UT_LINESIZE` derived from common macros like `_UTX_LINESIZE`. Additionally, the changes refine macro definitions for `utmp/utmpx` related functions, enhancing robustness, particularly for FreeBSD builds, by using `#ifndef` guards. The overall logic appears sound and well-targeted to resolve the specified problem. A minor suggestion has been made to add comments for better clarity regarding the `UT_LINESIZE` macro definitions."
3117356971,2896228416,coderabbitai[bot],COMMENTED,2025-06-04T10:42:53Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (5)</summary><blockquote>

<details>
<summary>AGENTS.md (1)</summary><blockquote>

`21-21`: **Consistent Node.js requirement bump**  
Updated the environment section to require Node.js 20 or later. This aligns with other docs—consider adding an `engines.node` entry in `package.json` to enforce it.

</blockquote></details>
<details>
<summary>tests/README.md (1)</summary><blockquote>

`131-131`: **Update Node.js version in troubleshooting**  
The troubleshooting section now correctly references Node.js 20 or later. Verify that your CI/test runners and Docker images match this requirement.

</blockquote></details>
<details>
<summary>README.md (1)</summary><blockquote>

`15-15`: **Bump README prerequisite to Node.js 20**  
Changed the ""Prerequisites"" node version to 20 or later. Ensure any CI workflows or engine constraints in `package.json` reflect this bump as well.

</blockquote></details>
<details>
<summary>docs/setup/installation.md (1)</summary><blockquote>

`9-9`: **Raise installation guide Node.js requirement**  
Prerequisites updated to require Node.js 20 or later. Consider enforcing this via `package.json`’s `engines.node`.

</blockquote></details>
<details>
<summary>docs/setup/troubleshooting.md (1)</summary><blockquote>

`60-60`: **Raise Node.js requirement in troubleshooting guide**  
Now specifies Node.js 20 or later. Double-check that any deployment scripts, Dockerfiles, or CI configs are updated too.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 5657d511e5aeee3fd88a2b5819696b7cd2da32da and f4d45d5aa355d79e16ba8dab08feca5a31678082.

</details>

<details>
<summary>📒 Files selected for processing (5)</summary>

* `AGENTS.md` (1 hunks)
* `README.md` (1 hunks)
* `docs/setup/installation.md` (1 hunks)
* `docs/setup/troubleshooting.md` (1 hunks)
* `tests/README.md` (1 hunks)

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>docs/setup/installation.md (1)</summary>

`7-7`: **Fix bullet formatting for Prerequisites header**  
Added a space after the hyphen for better readability.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3071032963,2848390337,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-17T20:28:05Z,"## Pull Request Overview

Adds in-place update support and an “Update available” badge for outdated agent blocks  
- Introduce `isOutdated` flag in `useAgentGraph` to mark outdated blocks  
- Fetch latest graph version in `CustomNode` and expose an “Update block” action  
- Display a badge and refresh-menu item when `isOutdated` is true

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated 3 comments.

| File                                             | Description                                    |
| ------------------------------------------------ | ---------------------------------------------- |
| src/hooks/useAgentGraph.tsx                      | Compute and pass `isOutdated` on agent nodes  |
| src/components/CustomNode.tsx                    | Import refresh icon, track outdated state, add update logic and UI |


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**autogpt_platform/frontend/src/components/CustomNode.tsx:513**
* [nitpick] New `updateAgentBlock` logic and the `isOutdated` flag introduce critical UI behavior that isn’t currently covered by tests. Consider adding unit or integration tests to verify the API call, data updates, and menu visibility when a block is outdated.
```
const updateAgentBlock = useCallback(async () => {
```
</details>

"
3074482141,2863419504,graphite-app[bot],COMMENTED,2025-05-23T07:14:16Z,
3074482141,2863448801,nektro,COMMENTED,2025-05-23T07:18:24Z,
3074482141,2863454429,nektro,COMMENTED,2025-05-23T07:20:52Z,
3074482141,2863618017,nektro,APPROVED,2025-05-23T08:20:56Z,more varied tests would be preferable but lgtm
3144022603,2930934925,manuel-alvarez-alvarez,APPROVED,2025-06-16T07:31:58Z,
3119486703,2898580038,DanielSinclair,COMMENTED,2025-06-05T00:49:05Z,
3119486703,2898582017,DanielSinclair,COMMENTED,2025-06-05T00:51:18Z,
3082193016,2859994555,neutralino1,APPROVED,2025-05-22T06:47:59Z,
3070839522,2848356744,ellipsis-dev[bot],COMMENTED,2025-05-17T17:20:48Z,"> [!CAUTION]
> **Changes requested  :x:**
> <details>
> <summary>Reviewed everything up to 7444d5a36f0eee1d3a09ec5116eb3d9c645f0d28 in <ellipsistime>1 minute and 52 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `3600` lines of code in `49` files
> - Skipped `0` files when reviewing.
> - Skipped posting `35` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>.agentignore:1</code></summary>
> 
> - **Draft comment:** 
> The .agentignore file looks comprehensive and consistent. No changes needed.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>.agentindexignore:1</code></summary>
> 
> - **Draft comment:** 
> The .agentindexignore file is well‑configured to exclude large and sensitive files. Looks good.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>.cursorignore:1</code></summary>
> 
> - **Draft comment:** 
> Referencing .agentignore in .cursorignore is an effective way to maintain consistency.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>.cursorindexignore:1</code></summary>
> 
> - **Draft comment:** 
> Referencing .agentindexignore in .cursorindexignore is appropriate and maintains uniform indexing rules.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>AGENTS.md:1</code></summary>
> 
> - **Draft comment:** 
> The root AGENTS.md file is detailed and clearly outlines the project standards and guidelines. It covers workflows, coding standards, and additional key topics. No issues found.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>6. <code>CLAUDE.md:1</code></summary>
> 
> - **Draft comment:** 
> Replacing CLAUDE.md with a symlink (or file with content 'AGENTS.md') for backward compatibility is correctly implemented. Consider verifying symlink behavior on all target platforms (especially Windows).
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>7. <code>agents-api/AGENTS.md:1</code></summary>
> 
> - **Draft comment:** 
> The agents-api AGENTS.md document is comprehensive and clearly outlines the service overview, architecture, key concepts, and workflows. The guidelines are consistent.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>8. <code>agents-api/CLAUDE.md:1</code></summary>
> 
> - **Draft comment:** 
> The agents-api CLAUDE.md file now being a symlink to AGENTS.md maintains backward compatibility. Ensure tooling recognizes the symlink correctly.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>9. <code>agents-api/agents_api/activities/AGENTS.md:1</code></summary>
> 
> - **Draft comment:** 
> The activities documentation for agents-api is well‑structured and provides guidelines, key activity descriptions, and context details. No issues found.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>10. <code>agents-api/agents_api/activities/CLAUDE.md:1</code></summary>
> 
> - **Draft comment:** 
> Replacing the activities CLAUDE.md with a symlink to AGENTS.md is correctly handled.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>11. <code>agents-api/agents_api/autogen/AGENTS.md:1</code></summary>
> 
> - **Draft comment:** 
> The autogen documentation is clear about its purpose and regeneration process. It properly warns against manual changes.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>12. <code>agents-api/agents_api/autogen/CLAUDE.md:1</code></summary>
> 
> - **Draft comment:** 
> The autogen CLAUDE.md being replaced by a symlink to AGENTS.md is acceptable. Confirm symlink behavior in all environments.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>13. <code>agents-api/agents_api/clients/AGENTS.md:1</code></summary>
> 
> - **Draft comment:** 
> The clients documentation in agents-api is well-structured and covers key aspects such as HTTP client usage, error handling, and configuration.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>14. <code>agents-api/agents_api/clients/CLAUDE.md:1</code></summary>
> 
> - **Draft comment:** 
> The clients CLAUDE.md file now being a symlink to AGENTS.md is properly implemented for backward compatibility.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>15. <code>agents-api/agents_api/common/AGENTS.md:1</code></summary>
> 
> - **Draft comment:** 
> The common utilities documentation is clear and detailed, covering protocols, utilities, exceptions, and state management functions.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>16. <code>agents-api/agents_api/common/CLAUDE.md:1</code></summary>
> 
> - **Draft comment:** 
> Replacing common CLAUDE.md with a symlink to AGENTS.md is correct. Verify that all internal references are updated accordingly.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>17. <code>agents-api/agents_api/queries/AGENTS.md:1</code></summary>
> 
> - **Draft comment:** 
> The queries documentation is organized by module and clearly explains the usage pattern for database queries.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>18. <code>agents-api/agents_api/queries/CLAUDE.md:1</code></summary>
> 
> - **Draft comment:** 
> Converting the queries CLAUDE.md file to a symlink referencing AGENTS.md is handled properly.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>19. <code>agents-api/agents_api/routers/AGENTS.md:1</code></summary>
> 
> - **Draft comment:** 
> The routers documentation is detailed and covers endpoint patterns, authentication, and response handling. It provides a clear picture of the API flow.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>20. <code>agents-api/agents_api/routers/CLAUDE.md:1</code></summary>
> 
> - **Draft comment:** 
> The routers CLAUDE.md file as a symlink to AGENTS.md is appropriate for backward compatibility.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>21. <code>agents-api/agents_api/worker/AGENTS.md:1</code></summary>
> 
> - **Draft comment:** 
> The worker documentation provides a clear overview of the Temporal worker setup, key components, configuration, and registered workflows. It is well organized.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>22. <code>agents-api/agents_api/worker/CLAUDE.md:1</code></summary>
> 
> - **Draft comment:** 
> Replacing the worker CLAUDE.md with a symlink to AGENTS.md maintains backward compatibility. Ensure this works correctly across all build systems.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>23. <code>agents-api/agents_api/workflows/AGENTS.md:1</code></summary>
> 
> - **Draft comment:** 
> The workflows documentation is comprehensive and details how Temporal workflows operate, including key workflows, execution model, and state machines.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>24. <code>agents-api/agents_api/workflows/CLAUDE.md:1</code></summary>
> 
> - **Draft comment:** 
> Switching the workflows CLAUDE.md file to a symlink that points to AGENTS.md is correctly implemented.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>25. <code>cli/AGENTS.md:1</code></summary>
> 
> - **Draft comment:** 
> The CLI documentation is detailed, covering CLI usage, command modules, architecture, and client interactions. It is clearly structured for developers.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>26. <code>cli/CLAUDE.md:1</code></summary>
> 
> - **Draft comment:** 
> The CLI CLAUDE.md file now as a symlink to AGENTS.md is a proper backward compatibility measure.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>27. <code>documentation/AGENTS.md:1</code></summary>
> 
> - **Draft comment:** 
> The documentation file is comprehensive, outlining structure, system concepts, and resources. It’s well-organized and clear.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>28. <code>documentation/CLAUDE.md:1</code></summary>
> 
> - **Draft comment:** 
> Renaming documentation CLAUDE.md to a symlink referencing AGENTS.md is correctly implemented.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>29. <code>integrations-service/AGENTS.md:1</code></summary>
> 
> - **Draft comment:** 
> The integrations-service documentation clearly explains its purpose, core framework, provider model, integration types, and patterns. It looks thorough.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>30. <code>integrations-service/CLAUDE.md:1</code></summary>
> 
> - **Draft comment:** 
> Switching the integrations-service CLAUDE.md file to a symlink to AGENTS.md maintains backward compatibility.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>31. <code>memory-store/AGENTS.md:1</code></summary>
> 
> - **Draft comment:** 
> The memory-store documentation provides a detailed overview of the schema, key components, search capabilities, and migration patterns. It is very thorough.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>32. <code>memory-store/CLAUDE.md:1</code></summary>
> 
> - **Draft comment:** 
> Replacing memory-store CLAUDE.md with a symlink to AGENTS.md is handled properly. Confirm compatibility in migration tooling.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>33. <code>typespec/AGENTS.md:1</code></summary>
> 
> - **Draft comment:** 
> The TypeSpec AGENTS.md file is detailed and provides comprehensive guidance on API contracts, code generation pipeline, and key concepts. It is well organized.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>34. <code>typespec/CLAUDE.md:1</code></summary>
> 
> - **Draft comment:** 
> The typespec CLAUDE.md file now as a symlink to AGENTS.md is appropriate to maintain backward compatibility.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>35. <code>AGENTS.md:5</code></summary>
> 
> - **Draft comment:** 
> Typographical suggestion: Consider removing the extra space in 'human 30 %' (line 5) so that it reads 'human 30%'.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 0% vs. threshold = 50% This is a very minor formatting suggestion. While technically correct (percentages typically don't have a space before %), this kind of minor formatting detail doesn't warrant a PR comment. It's not about code logic or functionality, and it's in a documentation file. The space in ""30 %"" might be intentional for readability, and different style guides have different opinions on spacing around percentage signs. Even if the spacing was unintentional, this is too minor of an issue to raise in a PR comment. It doesn't affect functionality or understanding. Delete this comment as it's too minor and purely stylistic.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_HvyUwcuiNkZU1xdT`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3155115558,2937425986,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-18T00:54:12Z,"## Pull Request Overview

This PR adjusts the timing of the `isAtBottom` state update in the thread viewport auto-scroll hook so that the flag is only set after a programmatic scroll completes.

- Extracts the state update into an `updateState` callback.
- Defers the update using `requestAnimationFrame` when auto-scrolling to bottom.
- Falls back to an immediate update in all other cases.


<details>
<summary>Comments suppressed due to low confidence (3)</summary>

**packages/react/src/primitives/thread/useThreadViewportAutoScroll.tsx:58**
* [nitpick] The helper `updateState` is quite generic. Consider renaming it to `updateIsAtBottomState` or similar for better clarity.
```
        const updateState = () =>
```
**packages/react/src/primitives/thread/useThreadViewportAutoScroll.tsx:63**
* There’s no existing unit test covering the deferred-update branch where `requestAnimationFrame` is used. Add a test that simulates auto-scrolling and verifies `isAtBottom` is updated after the next animation frame.
```
        if (newIsAtBottom && isScrollingToBottomRef.current) {
```
**packages/react/src/primitives/thread/useThreadViewportAutoScroll.tsx:64**
* Consider adding a comment explaining why `requestAnimationFrame` is used here (to ensure the state update runs after scroll completion) for future maintainers.
```
          requestAnimationFrame(updateState);
```
</details>

"
3155115558,2937425574,greptile-apps[bot],COMMENTED,2025-06-18T00:54:25Z,"
## PR Summary
Modified thread viewport scrolling logic to fix premature state updates of `isAtBottom`, improving the ScrollToBottom button behavior during scroll animations.

- Updated `useThreadViewportAutoScroll` to properly handle scroll animation timing using `requestAnimationFrame` before updating state
- Fixed edge case where ScrollToBottom button would incorrectly disable mid-animation, causing interrupted scrolling
- Added delay to `isAtBottom` state update to ensure it only changes after scroll animation completes

<sub>1 file reviewed, no comments</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=assistant-ui_2124)</sub>"
3155115558,2937427549,ellipsis-dev[bot],COMMENTED,2025-06-18T00:55:42Z,
3155115558,2937432961,cubic-dev-ai[bot],COMMENTED,2025-06-18T00:58:55Z,"cubic found 1 issue across 1 file. Review it in [cubic.dev](https://cubic.dev/pr/assistant-ui/assistant-ui/pull/2124)

<sub>React with 👍 or 👎 to teach cubic. Tag `@cubic-dev-ai` to give specific feedback.</sub>"
3093039940,2870140817,sourcery-ai[bot],COMMENTED,2025-05-27T08:19:41Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3162694664,2945457267,Skn0tt,APPROVED,2025-06-20T10:20:08Z,
3148328836,2930479218,obi1kenobi,COMMENTED,2025-06-16T02:18:32Z,
3079638107,2857065373,github-actions[bot],COMMENTED,2025-05-21T09:52:21Z,"Your PR title doesn't match the required format. The title should be in this format: 

```
chore: update Text docs
fix: text not rendering
feat: add new feature to Text
breaking: remove Text#resolution 
```"
3124089438,2904248522,coderabbitai[bot],COMMENTED,2025-06-06T08:45:58Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>benches/cpu.rs (1)</summary><blockquote>

`1-23`: **Well-designed CPU isolation benchmark.**

The benchmark effectively isolates CPU performance by disabling PPU, APU, DMA, and timer components. The 1 million cycle measurement provides a good sample size for meaningful performance analysis. The implementation correctly uses the Criterion framework with proper setup and teardown.

However, given the PR objectives mention a slight performance regression (1.86ms → 1.90ms), consider adding additional benchmarks to isolate specific aspects:



Consider adding more granular benchmarks to better understand performance characteristics:

```rust
fn benchmark_interrupt_handling(c: &mut Criterion) {
    let mut gb = build_test(TestOptions {
        ppu_enabled: Some(false),
        apu_enabled: Some(false), 
        dma_enabled: Some(false),
        timer_enabled: Some(false),
        ..Default::default()
    });
    gb.load_rom_empty().unwrap();
    
    // Enable interrupts to specifically test the new interrupt handling logic
    gb.cpu().set_ime(true);
    gb.cpu().mmu().set_ie(0x1f); // Enable all interrupts
    
    c.bench_function(""interrupt_polling"", |b| {
        b.iter(|| {
            gb.clocks_cycles(100_000); // Shorter cycle count for interrupt-focused test
        })
    });
}
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 5af0ae3150cbcdcfe0ea4372b51712cf109c2734 and 2debc2259eac380275e61ca1cf32fee7af3064cc.

</details>

<details>
<summary>📒 Files selected for processing (3)</summary>

* `Cargo.toml` (1 hunks)
* `benches/cpu.rs` (1 hunks)
* `src/cpu.rs` (7 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: Build Mac
* GitHub Check: Build Windows
* GitHub Check: Build Simple (1.83.0)
* GitHub Check: Build Simple (1.82.0)
* GitHub Check: Build SDL (1.82.0)
* GitHub Check: Build (1.84.0)
* GitHub Check: Build (latest)
* GitHub Check: Build SDL (1.83.0)

</details>

<details>
<summary>🔇 Additional comments (5)</summary><blockquote>

<details>
<summary>src/cpu.rs (4)</summary>

`22-22`: **Good addition of IF_ADDR import.**

The import of `IF_ADDR` is correctly added to support the new centralized interrupt handling approach.

---

`165-169`: **Excellent optimization: centralized interrupt detection.**

The prefetching of interrupt flags by reading `IF_ADDR` once and masking with the interrupt enable register (`ie`) is a smart optimization that eliminates redundant MMU calls throughout the interrupt handling logic.

---

`171-176`: **Simplified halt release logic looks correct.**

The refactored halt release condition using `pending != 0` is cleaner and functionally equivalent to the previous individual interrupt checks. This correctly implements the Game Boy behavior where any enabled pending interrupt should release the CPU from halt state when IME is disabled.

---

`183-278`: <details>
<summary>✅ Verification successful</summary>

**Verify interrupt bit values align with Game Boy specifications.**

The interrupt servicing logic using bitwise operations with `pending` is well-structured, but ensure the bit values (0x01, 0x02, 0x04, 0x08, 0x10) correspond exactly to the Game Boy's interrupt flag register bits:
- 0x01: V-Blank
- 0x02: LCD STAT  
- 0x04: Timer
- 0x08: Serial
- 0x10: JoyPad






---

🏁 Script executed:

```shell
#!/bin/bash
# Description: Verify interrupt bit definitions match Game Boy specifications
# Expected: Find constant definitions for interrupt bits

# Search for interrupt bit constants or definitions
rg -A 3 -B 3 ""0x0[12458].*interrupt|interrupt.*0x0[12458]"" --type rust

# Look for interrupt flag register definitions
rg -A 5 -B 5 ""IF_ADDR|interrupt.*flag"" --type rust
```

Length of output: 3434

---



</details>

**Interrupt Bit Masks Verified (No Changes Required)**

The bit values used in `src/cpu.rs` (0x01, 0x02, 0x04, 0x08, 0x10) correctly match the Game Boy IF register specification:

- 0x01: V-Blank  
- 0x02: LCD STAT  
- 0x04: Timer  
- 0x08: Serial  
- 0x10: JoyPad  

No modifications are needed.

</details>
<details>
<summary>Cargo.toml (1)</summary>

`93-95`: **Benchmark configuration follows established patterns.**

The new ""cpu"" benchmark target is correctly configured with `harness = false`, consistent with the existing benchmark targets in the file.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3100980487,2879065205,JamesHenry,CHANGES_REQUESTED,2025-05-29T17:26:08Z,🧪 
3100980487,2879048959,graphite-app[bot],COMMENTED,2025-05-30T15:26:24Z,
3100980487,2881703991,graphite-app[bot],COMMENTED,2025-05-30T15:29:42Z,
3100980487,2881974299,JamesHenry,APPROVED,2025-05-30T17:29:15Z,
3144152450,2926487890,seratch,APPROVED,2025-06-13T21:35:11Z,
3155326834,2937614230,gemini-code-assist[bot],COMMENTED,2025-06-18T03:19:42Z,"## Summary of Changes

Hello @gaby, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request enhances the test suite for the CSRF middleware by introducing specific tests for scenarios where CSRF tokens are absent. This improves the reliability and error handling of the token extraction mechanisms by explicitly verifying their behavior when tokens are not found.

### Highlights

* **Test Coverage**: Added new unit tests to verify the behavior of CSRF token extractors (`FromParam`, `FromCookie`, `FromForm`, `FromQuery`) when the expected token is not present in the request context.
* **Error Handling Consistency**: Ensured that the correct `ErrMissingParam`, `ErrMissingCookie`, `ErrMissingForm`, and `ErrMissingQuery` errors are returned by the respective extractors when the token is missing, improving consistency and robustness in error reporting.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configure Gemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3155326834,2937614374,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-18T03:19:52Z,"## Pull Request Overview

This PR adds new tests to validate that the CSRF token extractors correctly handle cases when tokens are missing. The changes include testing missing token extraction for parameters, cookies, form data, and queries.


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**middleware/csrf/extractors_test.go:20**
* Consider adding tests for successful token extraction cases to complement the missing extractor tests and ensure full coverage of extractor behavior.
```
	token, err := FromParam(""csrf"")(ctx)
```
</details>

"
3155326834,2937615135,gemini-code-assist[bot],COMMENTED,2025-06-18T03:20:39Z,"## Code Review

This pull request adds tests for missing CSRF token extractors, covering parameter, cookie, form, and query string scenarios. A suggestion is made to refactor the tests into a table-driven format for better maintainability."
3155326834,2937616006,coderabbitai[bot],COMMENTED,2025-06-18T03:21:38Z,"**Actionable comments posted: 1**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between a35c5d2e15372b2d0d191ad57216b659971d8b99 and 9487c192dfe8b0f72524a70e9ed8e5c6482b46cd.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `middleware/csrf/extractors_test.go` (1 hunks)

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>middleware/csrf/extractors_test.go (1)</summary>

`15-18`: **Explicitly set request method & content‐type before exercising the form extractor**

`FromForm` internally relies on `ctx.FormValue`, which only parses the body for methods such as POST/PUT/PATCH and when the content‐type is either `application/x-www-form-urlencoded` or `multipart/form-data`.  
With the current context (no method, no headers, empty body) the extractor may short-circuit early, meaning the test passes for the wrong reason.

```diff
 app := fiber.New()
 ctx := app.AcquireCtx(&fasthttp.RequestCtx{})
+// Ensure the request looks like a typical form submission
+ctx.Request().Header.SetMethod(fasthttp.MethodPost)
+ctx.Request().Header.SetContentType(""application/x-www-form-urlencoded"")
 defer app.ReleaseCtx(ctx)
```

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3155326834,2937883806,ReneWerner87,APPROVED,2025-06-18T06:24:56Z,
3070744926,2848270631,ntindle,COMMENTED,2025-05-17T12:45:45Z,
3094541178,2871809381,yingjiehe-xyz,APPROVED,2025-05-27T16:40:06Z,
3082127177,2862075377,joaquim-verges,APPROVED,2025-05-22T17:37:53Z,
3087501239,2871972543,ChrisHuie,APPROVED,2025-05-27T17:34:49Z,
3075385562,2852314363,adeebshihadeh,COMMENTED,2025-05-20T01:47:38Z,
3070337683,2847980025,ellipsis-dev[bot],COMMENTED,2025-05-17T04:53:25Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 58f5558d12a8f27b0c8ead32c7ba0f7ddb9c7929 in <ellipsistime>30 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `27` lines of code in `2` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>agents-api/agents_api/common/utils/mmr.py:146</code></summary>
> 
> - **Draft comment:** 
> Using direct indexing ([docs_with_embeddings[i] for i in indices]) now preserves the MMR ranking. This fix is clearer and avoids the unordered filtering from the previous implementation.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>agents-api/agents_api/queries/projects/__init__.py:11</code></summary>
> 
> - **Draft comment:** 
> Removal of the unused ruff noqa comment cleans up the module. Confirm that no linting issues remain.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_cCzW3aFXOMqRQplE`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3094720463,2872022119,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-27T17:53:28Z,"## Pull Request Overview

This PR addresses flaky timing tests by increasing sleep durations and adding extra buffers in various middleware tests.  
- Increase sleep duration in timeout tests to account for potential delays.  
- Add extra buffer to limiter sleeps to prevent false negatives.  
- Relax timing in idempotency and cache tests to stabilize intermittent failures.

### Reviewed Changes

Copilot reviewed 4 out of 4 changed files in this pull request and generated 4 comments.

| File                                      | Description                                              |
| ----------------------------------------- | -------------------------------------------------------- |
| middleware/timeout/timeout_test.go        | Increased sleep from 50ms to 70ms to reflect zero-timeout behavior adjustments. |
| middleware/limiter/limiter_test.go        | Adjusted multiple sleep durations by adding extra buffers for rate limiter tests. |
| middleware/idempotency/idempotency_test.go  | Increased sleep durations to ensure proper handling of delayed idempotency operations. |
| middleware/cache/cache_test.go            | Updated sleep durations in cache tests to better cover expiration timing. |



"
3094720463,2872029148,coderabbitai[bot],COMMENTED,2025-05-27T17:55:32Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>middleware/timeout/timeout_test.go (1)</summary><blockquote>

`122-122`: **Good improvement for test reliability.**

The increased sleep duration (50ms → 70ms) provides better buffer time to ensure the zero timeout test is more reliable while maintaining test validity.



Consider updating the comment on line 121 to reflect the new sleep duration:

```diff
-		// Sleep 50ms, but there's no real 'deadline' since zero-timeout.
+		// Sleep 70ms, but there's no real 'deadline' since zero-timeout.
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between a590cdbcdd82a900a0f905212a4a7572b3b4d159 and ed5044d2a2990f15faf860c1935d3acf99b66b7d.

</details>

<details>
<summary>📒 Files selected for processing (4)</summary>

* `middleware/cache/cache_test.go` (3 hunks)
* `middleware/idempotency/idempotency_test.go` (3 hunks)
* `middleware/limiter/limiter_test.go` (17 hunks)
* `middleware/timeout/timeout_test.go` (1 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (3)</summary>

* GitHub Check: repeated
* GitHub Check: unit (1.24.x, windows-latest)
* GitHub Check: Compare

</details>

<details>
<summary>🔇 Additional comments (9)</summary><blockquote>

<details>
<summary>middleware/idempotency/idempotency_test.go (3)</summary>

`75-75`: **Timing improvement enhances test reliability.**

Adding 100ms buffer to the slow route sleep duration ensures concurrent idempotency tests are more reliable while maintaining the test's validity.

---

`111-111`: **Cache expiration timing improvement.**

The additional 100ms buffer ensures the idempotency cache has reliably expired before testing with the same key, reducing flakiness in timing-dependent assertions.

---

`128-128`: **Consistent timing buffer for cache expiration.**

Adding 100ms buffer aligns with other timing adjustments in this test and ensures the slow route cache has expired before subsequent validation.

</details>
<details>
<summary>middleware/limiter/limiter_test.go (3)</summary>

`49-49`: **Consistent timing improvements for Fixed Window tests.**

Adding 200ms buffer to the 3-second sleep periods ensures rate limiter windows have reliably expired before testing reset behavior. This addresses flaky test issues while maintaining test validity for Fixed Window rate limiting.



Also applies to: 136-136, 180-180, 223-223, 262-262, 302-302, 419-419, 458-458, 573-573, 612-612

---

`341-341`: **Extended timing buffers for Sliding Window tests.**

The increased buffer time (500ms → 700ms) for Sliding Window tests is appropriate as sliding windows may require longer periods to fully expire compared to fixed windows. This ensures more reliable test behavior.



Also applies to: 381-381, 496-496, 535-535, 650-650, 689-689

---

`818-818`: **Additional timing improvements in sliding window test.**

The 200ms buffer additions ensure multiple sequential rate limiting cycles in the sliding window test are properly separated, improving test reliability.



Also applies to: 824-824, 830-830

</details>
<details>
<summary>middleware/cache/cache_test.go (3)</summary>

`62-62`: **Cache expiration timing improvement.**

Adding 200ms buffer to the 3-second sleep ensures the 2-second cache expiration has reliably occurred, reducing flakiness in cache expiration tests.

---

`431-431`: **Buffer time for negative expiration test.**

Increasing the sleep from 500ms to 600ms provides better reliability for testing cache behavior with negative expiration times (immediate expiry).

---

`533-533`: **Custom expiration timing buffer.**

The adjustment from 1.1s to 1.2s ensures the 1-second custom cache expiration has definitely occurred before testing cache miss behavior.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3094720463,2872055825,github-actions[bot],COMMENTED,2025-05-27T18:04:45Z,"<!-- github-benchmark-action-comment(start): Benchmark Alert -->
# :warning: **Performance Alert** :warning:

Possible performance regression was detected for benchmark.
Benchmark result of this commit is worse than the previous benchmark result exceeding threshold `1.50`.

| Benchmark suite | Current: ed5044d2a2990f15faf860c1935d3acf99b66b7d | Previous: a590cdbcdd82a900a0f905212a4a7572b3b4d159 | Ratio |
|-|-|-|-|
| `Benchmark_GenericParseTypeBytes/benchmark_genericParseTypeBytes` | `30.87` ns/op	       8 B/op	       1 allocs/op | `20.05` ns/op	       8 B/op	       1 allocs/op | `1.54` |
| `Benchmark_GenericParseTypeBytes/benchmark_genericParseTypeBytes - ns/op` | `30.87` ns/op | `20.05` ns/op | `1.54` |
| `Benchmark_GenericParseTypeBytes/benchmark_genericParseTypeBytes#03` | `25.94` ns/op	       0 B/op	       0 allocs/op | `13.15` ns/op	       0 B/op	       0 allocs/op | `1.97` |
| `Benchmark_GenericParseTypeBytes/benchmark_genericParseTypeBytes#03 - ns/op` | `25.94` ns/op | `13.15` ns/op | `1.97` |

This comment was automatically generated by [workflow](https://github.com/gofiber/fiber/actions?query=workflow%3ABenchmark) using [github-action-benchmark](https://github.com/marketplace/actions/continuous-benchmark).
<!-- github-benchmark-action-comment(end): Benchmark Alert -->"
3141925686,2925814062,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-13T18:11:52Z,"## Pull Request Overview

This PR adds a new RPC method, admin_proposeOutput, to the proposer's API to allow submitting outputs for a specified block (or the latest block if unspecified). Key changes include:
- Extending the ProposerActivity and adminAPI interfaces with the new ProposeOutput method.
- Refactoring the proposeOutput implementation to return an error and handling it appropriately in the event loop.
- Adding tests in driver_test.go to verify the new output proposal functionality.

### Reviewed Changes

Copilot reviewed 4 out of 4 changed files in this pull request and generated no comments.

| File                                      | Description                                                           |
| ----------------------------------------- | --------------------------------------------------------------------- |
| op-service/apis/proposer.go               | Added import for hexutil and new ProposeOutput definition in interface.|
| op-proposer/proposer/rpc/api.go             | Added ProposeOutput wrapper in adminAPI to convert hexutil pointer appropriately. |
| op-proposer/proposer/driver.go             | Updated proposeOutput to return errors and added a new ProposeOutput method to fetch and submit outputs. |
| op-proposer/proposer/driver_test.go         | Introduced a test case for the new ProposeOutput behavior.            |


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**op-proposer/proposer/driver.go:498**
* Consider including the actual error message in the log context to simplify debugging of transaction submission failures. For example, append the error value to logCtx.
```
l.Log.Error(""Failed to send proposal transaction"", logCtx...)
```
</details>

"
3153329320,2937994686,d2a-raudenaerde,COMMENTED,2025-06-18T07:13:04Z,
3157513496,2941336746,aknysh,APPROVED,2025-06-19T02:51:35Z,
3112085756,2890329364,coderabbitai[bot],COMMENTED,2025-06-03T01:42:23Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>mistralrs-server/src/interactive_mode.rs (2)</summary><blockquote>

`340-352`: **Good regression test coverage.**

The test effectively verifies that trailing punctuation is not included in extracted URLs while preserving it in the remaining text. This addresses the core issue described in the PR objectives.




Consider adding more edge case tests:

```diff
+    #[test]
+    fn parse_files_and_message_handles_multiple_punctuation() {
+        let regex = Regex::new(IMAGE_REGEX).unwrap();
+        let input = ""Check these: https://example.com/a.jpg, https://example.com/b.png!"";
+        let (urls, text) = parse_files_and_message(input, &regex);
+        assert_eq!(urls, vec![""https://example.com/a.jpg"", ""https://example.com/b.png""]);
+        assert_eq!(text, ""Check these: , !"");
+    }
```

---

`358-364`: **Verify consistency between regex lookahead and trim characters.**

The function logic is correct, but there's a minor inconsistency between the characters in the regex lookahead and the trim operation.




The regex lookahead uses `[\s,.;:!?)]` while trim_end_matches uses `[.,:;!?)]}""'`. Consider aligning these for consistency:

```diff
-                    .trim_end_matches(|c: char| matches!(c, '.' | ',' | ';' | ':' | '!' | '?' | ')' | ']' | '}' | '""' | '\''))
+                    .trim_end_matches(|c: char| matches!(c, '.' | ',' | ';' | ':' | '!' | '?' | ')'))
```

Or update the regex lookahead to include the additional characters if they're needed:

```diff
-const IMAGE_REGEX: &str =
-    r#""((?:https?://|file://)?\S+?\.(?:png|jpe?g|bmp|gif|webp)(?:\?\S+?)?)(?=[\s,.;:!?)]|$)""#;
+const IMAGE_REGEX: &str =
+    r#""((?:https?://|file://)?\S+?\.(?:png|jpe?g|bmp|gif|webp)(?:\?\S+?)?)(?=[\s,.;:!?)\]}""']|$)""#;
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between b0af3ad0514f35c4e43028187c689de3bb68568c and 74bfb9e83c067f2f7472290022f0970a9697ea8d.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `mistralrs-server/src/interactive_mode.rs` (3 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: Docs
* GitHub Check: Clippy
* GitHub Check: Check (macOS-latest, stable)
* GitHub Check: Check (ubuntu-latest, stable)
* GitHub Check: Check (windows-latest, stable)
* GitHub Check: Test Suite (ubuntu-latest, stable)
* GitHub Check: Test Suite (macOS-latest, stable)
* GitHub Check: Test Suite (windows-latest, stable)

</details>

<details>
<summary>🔇 Additional comments (2)</summary><blockquote>

<details>
<summary>mistralrs-server/src/interactive_mode.rs (2)</summary>

`137-140`: **Well-designed regex pattern for URL extraction.**

The regex pattern correctly uses a positive lookahead `(?=[\s,.;:!?)]|$)` to match image URLs without capturing trailing punctuation. The pattern appropriately handles optional protocols, supports common image extensions, and accounts for query parameters.

---

`377-377`: **Excellent refactoring to centralize regex usage.**

Using the centralized `IMAGE_REGEX` constant improves maintainability and ensures consistent URL extraction behavior across the codebase.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3155893392,2938173836,matter-code-review[bot],COMMENTED,2025-06-18T08:03:32Z,"This PR adds a new Metadata Guardrail feature that looks well-implemented with good test coverage. I have a few suggestions to improve error handling and code robustness.

<details>
<summary>Skipped files</summary>

- `plugins/README.md`: Skipped file pattern

</details>"
3155893392,2938966879,narengogi,DISMISSED,2025-06-18T12:22:09Z,
3155893392,2942892421,vrushankportkey,COMMENTED,2025-06-19T12:46:50Z,
3155893392,2942904320,vrushankportkey,COMMENTED,2025-06-19T12:49:24Z,
3074530461,2851561910,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-19T17:35:33Z,"## Pull Request Overview

This PR standardizes comma spacing across various Windows source files to improve code readability and consistency. Key changes include:
- Updating comma-spacing in function calls and variable initializations in hostinfo_win.cpp and browserctrl_win.cpp.
- Applying similar formatting improvements to Win32 API calls in windows_opengl.cpp and graphics2_win.cpp.

### Reviewed Changes

Copilot reviewed 4 out of 4 changed files in this pull request and generated no comments.

| File                                      | Description                                            |
| ----------------------------------------- | ------------------------------------------------------ |
| samples/gfx_html/browserctrl_win.cpp      | Fixed comma spacing in the m_thunk.Init call.          |
| client/hostinfo_win.cpp                   | Standardized spacing in CPUInfo initialization and asm_cpuid call. |
| api/windows_opengl.cpp                    | Improved comma spacing in CreateWindowEx and related API calls. |
| api/graphics2_win.cpp                     | Consistent comma spacing applied in window creation functions. |



"
3074530461,2851563549,AenBleidd,APPROVED,2025-05-19T17:36:12Z,
3119869229,2937675012,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-18T04:16:21Z,"## Pull Request Overview

This PR replaces the custom injected‐provider logic with the MetaMask SDK via wagmi’s `createConnector`, refactors how URIs are handled across mobile/desktop, and updates tests for the wallet button.

- Swap out the old `isMetaMask` and injected connector for wagmi’s `metaMask` connector
- Introduce `shouldUseWalletConnect`/`shouldUseMetaMaskConnector` flags to choose between WalletConnect and the MetaMask SDK
- Override `getChainId` on the MetaMask connector and adjust deep‐link URIs

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated 2 comments.

| File                                                                                                   | Description                                                      |
| ------------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------- |
| packages/rainbowkit/src/wallets/walletConnectors/metaMaskWallet/metaMaskWallet.ts                     | Integrate wagmi MetaMask SDK, simplify injection checks, refactor URI logic and connector creation |
| .changeset/two-rats-do.md                                                                               | Add patch changelog describing MetaMask SDK integration          |


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**packages/rainbowkit/src/wallets/walletConnectors/metaMaskWallet/metaMaskWallet.ts:46**
* [nitpick] The flag `shouldUseMetaMaskConnector` is somewhat generic—consider renaming to `useInjectedOrMobile` or similar to clarify that it covers both injected providers and mobile contexts.
```
      getUri: shouldUseMetaMaskConnector ? (uri: string) => uri : undefined,
```
**packages/rainbowkit/src/wallets/walletConnectors/metaMaskWallet/metaMaskWallet.ts:50**
* Previously there was an Android branch that used the raw URI; removing that might break Android deep linking. Verify that `metamask.app.link` works identically across platforms or reintroduce platform-specific URI handling for Android.
```
          getUri: (uri: string) =>
```
</details>

"
3078067394,2855396334,ellipsis-dev[bot],COMMENTED,2025-05-20T19:46:29Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to fd4503eb8bef7f5cbae84ef78a166dd1dc9a27f5 in <ellipsistime>1 minute and 8 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `148` lines of code in `3` files
> - Skipped `0` files when reviewing.
> - Skipped posting `5` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>fern/docs.yml:64</code></summary>
> 
> - **Draft comment:** 
> Ensure the new Quickstart nav item is positioned correctly and doesn’t duplicate content from Introduction.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>fern/getting-started/quickstart.mdx:24</code></summary>
> 
> - **Draft comment:** 
> Clarify that using 'await' requires an async context (e.g., inside an async function) to avoid confusion.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>fern/getting-started/quickstart.mdx:41</code></summary>
> 
> - **Draft comment:** 
> Clarify the difference between 'skyvern.agent.run_task' (cloud usage) and 'skyvern.run_task' (local execution) to avoid ambiguity.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>fern/getting-started/quickstart.mdx:33</code></summary>
> 
> - **Draft comment:** 
> Consider adjusting the indentation of the code block under 'Configure Skyvern' to ensure proper Markdown rendering.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>fern/introduction.mdx:68</code></summary>
> 
> - **Draft comment:** 
> Removal of the Quickstart section from Introduction cleans up duplication; ensure that navigation and cross-links reflect the change.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_uPcSrGTsLCFJ5CDg`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3078067394,2855402336,ellipsis-dev[bot],COMMENTED,2025-05-20T19:49:19Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed 8babd8a3b15c2649f67f72184325ee7f46c2ca37 in <ellipsistime>50 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `27` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>fern/getting-started/quickstart.mdx:43</code></summary>
> 
> - **Draft comment:** 
> Verify use of 'skyvern.agent.run_task' instead of 'skyvern.run_task'—ensure this change aligns with the updated SDK API.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment is asking the author to verify their use of a specific function, which violates the rule against asking the author to confirm their intention or ensure behavior is intended. It doesn't provide a specific suggestion or ask for a test to be written.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>fern/getting-started/quickstart.mdx:44</code></summary>
> 
> - **Draft comment:** 
> Clarify that 'await' requires an async context; consider adding a note in the snippet to guide users.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `20%` <= threshold `50%` The comment is suggesting adding a note to guide users, which is more of an informative suggestion rather than a specific code improvement or issue. It doesn't directly address a potential problem or provide a specific code suggestion.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_IlZSS6pDPvtmOmi9`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3123335159,2923117769,github-advanced-security[bot],COMMENTED,2025-06-13T00:46:24Z,
3104176224,2882410388,greptile-apps[bot],COMMENTED,2025-05-30T20:11:47Z,"
## PR Summary

Adds PostHog user identification functionality for analytics tracking during login and session restoration. The implementation spans across authentication flows and session management.

- `AnalyticsManager+Identity.swift` needs error handling for PostHogSDK.shared.identify() calls to prevent crashes
- Session restoration in `App.swift` should be moved to the main thread since it updates UI state
- `AuthFlow.swift` should identify both new and existing users consistently, not just new accounts
- Consider adding analytics event for failed session restorations in `App.swift` to track authentication issues
- Text styling in `AuthFlow.swift` should use custom foreground colors instead of system colors for dark mode compatibility

<sub>4 file(s) reviewed, 3 comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=onit_250)</sub>"
3104176224,2882460015,timlenardo,COMMENTED,2025-05-30T20:37:34Z,
3104176224,2882464009,timlenardo,COMMENTED,2025-05-30T20:39:51Z,
3104176224,2882477015,timlenardo,COMMENTED,2025-05-30T20:45:24Z,
3075113564,2852083392,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-19T22:01:49Z,"## Pull Request Overview

This PR fixes the `RuntimeError.from` method to return the created instance instead of the class and adds a regression test to verify the behavior.

- Correct `RuntimeError.from` to return the instance
- Add a test ensuring the returned object has the original error and a parsed stack array

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated no comments.

| File                                      | Description                                                        |
| ----------------------------------------- | ------------------------------------------------------------------ |
| packages/bun-error/runtime-error.ts       | Changed `return RuntimeError` to `return runtime` in the `from` method |
| test/js/bun/runtime-error.test.ts         | Added test to assert `RuntimeError.from` returns a proper instance |



"
3075113564,2852105023,pfgithub,APPROVED,2025-05-19T22:20:16Z,
3075113564,2852106324,alii,APPROVED,2025-05-19T22:21:27Z,
3115215129,2893870507,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-03T19:43:30Z,"## Pull Request Overview

This PR cleans up formatting in the README by removing duplicated broken lines and fixing mid-word breaks in several list items.

- Consolidated split descriptions for SQL Murder Mystery, S3 Game, and Learn Git Branching into single lines.
- Removed duplicate bullet markers and trailing whitespace around those entries.


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**readme.md:88**
* [nitpick] The description for 'Learn Git Branching' starts with 'is', resulting in a sentence fragment. Consider rephrasing to maintain consistent structure, for example: 'Learn Git Branching is the most visual and interactive way to learn Git...' instead of leading with 'is'.
```
- [Learn Git Branching](https://learngitbranching.js.org/) - is the most visual and interactive way to learn Git on the web; where you'll be challenged with exciting levels.
```
</details>

"
3079986407,2857446510,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-21T12:02:59Z,"## Pull Request Overview

This PR enables an `""auto""` mode for the `append_original` flag to only append features when the dataset has fewer than 500 features, updates default configs to use this new option, and implements the automatic decision logic in the preprocessing pipeline.

- Add `""auto""` option to `append_original` in `PreprocessorConfig` and its docstring.
- Update default classifier/regressor configs to set `append_original=""auto""`.
- Compute and use a local `append_to_original` bool based on feature count in the model pipeline.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated 2 comments.

| File                                    | Description                                                                                 |
| --------------------------------------- | ------------------------------------------------------------------------------------------- |
| src/tabpfn/preprocessing.py             | Extended docstring, updated type to `bool | Literal[""auto""]`, and adjusted `__str__` logic. |
| src/tabpfn/model/preprocessing.py       | Introduced local computed `append_to_original` based on `""auto""`, refactored conditional checks. |


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**src/tabpfn/model/preprocessing.py:945**
* No tests were added for the new `append_original=""auto""` logic. Please add unit tests for scenarios with feature counts below and above 500 to cover both branches.
```
+        append_to_original = (
```
</details>

"
3122404431,2901943247,ellipsis-dev[bot],COMMENTED,2025-06-05T19:33:41Z,"> [!CAUTION]
> **Changes requested  :x:**
> <details>
> <summary>Reviewed everything up to 8630061c14295f4a596dd68a9345f2f709356e67 in <ellipsistime>1 minute and 37 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `304` lines of code in `10` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/onlook-dev/settings/code-review) and [rules](https://app.ellipsis.dev/onlook-dev/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>apps/web/client/src/app/pricing/pricing-card.tsx:21</code></summary>
> 
> - **Draft comment:** 
> Hardcoding '/month' here may break i18n. Consider extracting the month/unit suffix (or formatting the entire price) via translations.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 20% vs. threshold = 50% The comment raises a valid i18n concern - hardcoding English text can make internationalization difficult. However, this appears to be a UI component and the price format seems to be controlled by the parent component through the price prop. The component is just displaying what it's given. Without seeing how the price prop is formatted or knowing the i18n requirements, this comment may be premature. I might be wrong about the price prop format - there could be an established i18n system that this violates. Also, even UI components sometimes need to handle i18n. While i18n is important, this seems like a UI/display concern and we don't have enough context about the i18n requirements or system. The rules state not to comment on pure UI changes and to assume the author implemented UI correctly. The comment should be removed as it's speculative without more context, and relates to UI display concerns which we're told to assume are implemented correctly.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>apps/web/client/src/app/pricing/page.tsx:10</code></summary>
> 
> - **Draft comment:** 
> Plan keys order in the array ['basic', 'launch', 'pro', 'scale'] differs from the order in the translation files. Verify that the intended display order is correct.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 10% vs. threshold = 50% This comment violates several rules. It's asking for verification (""Verify that..."") rather than pointing out a clear issue. It's speculative since it doesn't show evidence that the order is actually wrong. We don't have access to the translation files, so we can't verify if there's actually an issue. The order chosen here could be intentional. Maybe the reviewer has seen the translation files and knows there's a real mismatch that could cause problems? Even if there is a mismatch, the comment is still asking for verification rather than stating a clear problem. The order here could be intentionally different from the translation files. Delete this comment as it violates our rules by asking for verification without pointing out a clear, actionable issue.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_7rOxpQ8UaJ2HA94y`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=onlook-dev%2Fonlook&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/onlook-dev/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/onlook-dev/code-review/rules).</sup>"
3122404431,2905983705,ellipsis-dev[bot],COMMENTED,2025-06-06T19:36:35Z,"> [!CAUTION]
> **Changes requested  :x:**
> <details>
> <summary>Reviewed 58bd4e192a04a585f1ec57d3a1e66a7bed78338a in <ellipsistime>1 minute and 42 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `13` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `0` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/onlook-dev/settings/code-review) and [rules](https://app.ellipsis.dev/onlook-dev/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> 
> Workflow ID: <workflowid>`wflow_QwC0XFNnENaWJsZl`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=onlook-dev%2Fonlook&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/onlook-dev/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/onlook-dev/code-review/rules).</sup>"
3122404431,2905992436,ellipsis-dev[bot],COMMENTED,2025-06-06T19:41:18Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed 0d62a74e25d6d2344e4c14ac054fbe6127918011 in <ellipsistime>1 minute and 38 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `18` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/onlook-dev/settings/code-review) and [rules](https://app.ellipsis.dev/onlook-dev/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>apps/web/client/src/app/pricing/page.tsx:21</code></summary>
> 
> - **Draft comment:** 
> Ensure vertical centering (justify-center) works as intended with the fixed top bar and footer.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment is asking the PR author to ensure that a specific CSS class works as intended with other elements. This falls under the category of asking the author to double-check or ensure behavior, which is against the rules.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>apps/web/client/src/app/pricing/page.tsx:25</code></summary>
> 
> - **Draft comment:** 
> Check hardcoded 'pt-28' for main element; ensure it adapts correctly on different screen sizes.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 0% vs. threshold = 50% This is a pure UI/styling change. The rules explicitly state not to comment on UI/styling changes and to assume the author made these changes correctly. The padding change is likely intentional to accommodate the fixed TopBar component and create proper spacing. This falls under pure frontend UI changes. Maybe the hardcoded padding could cause layout issues on mobile devices? The comment might be trying to prevent responsive design problems. Per our rules, we should trust the author on UI changes. Additionally, the code shows responsive design awareness with grid-cols-1 sm:grid-cols-2 classes, suggesting the author understands responsive design. Delete this comment as it violates our rule about not commenting on pure UI/styling changes.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_LrWXqiNuw7cU4gMW`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=onlook-dev%2Fonlook&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/onlook-dev/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/onlook-dev/code-review/rules).</sup>"
3122404431,2905994117,ellipsis-dev[bot],COMMENTED,2025-06-06T19:42:15Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed d0e89c1d71dc58a75bf847865dfbea1f214d5cac in <ellipsistime>1 minute and 8 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `22` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/onlook-dev/settings/code-review) and [rules](https://app.ellipsis.dev/onlook-dev/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>apps/web/client/src/app/_components/top-bar/github.tsx:7</code></summary>
> 
> - **Draft comment:** 
> Ensure that updating DEFAULT_STAR_COUNT to '17k' is intentional and reflects the expected fallback badge if the GitHub API fetch fails.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>apps/web/client/src/app/_components/top-bar/github.tsx:37</code></summary>
> 
> - **Draft comment:** 
> The added transition classes on the <span> are good for smooth updates; double-check that the effect meets the intended UX without layout shifts.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_Yz4mgUVG7lr40H5j`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=onlook-dev%2Fonlook&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/onlook-dev/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/onlook-dev/code-review/rules).</sup>"
3122404431,2906277560,ellipsis-dev[bot],COMMENTED,2025-06-06T22:26:39Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed faf355f9d4df0427370fb1c99ddbc7b35234d2d8 in <ellipsistime>1 minute and 18 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `48` lines of code in `3` files
> - Skipped `0` files when reviewing.
> - Skipped posting `3` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/onlook-dev/settings/code-review) and [rules](https://app.ellipsis.dev/onlook-dev/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>apps/web/client/src/app/_components/top-bar/index.tsx:25</code></summary>
> 
> - **Draft comment:** 
> Pricing link is commented out. If the pricing page UI is ready, please uncomment it or add an inline note explaining why it's disabled.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 10% vs. threshold = 50% This comment violates several rules. It's asking the author to explain their intention (""add an inline note explaining why""). It's also speculative (""If the pricing page UI is ready""). The author clearly intended to disable this link, and we should trust their judgment. We don't have context about the pricing page status, and that's okay - we should assume the author knows what they're doing. Maybe the commented-out code should be removed entirely rather than left as a comment? Maybe there's a legitimate concern about user experience if pricing information is hidden? While those are valid considerations, they're beyond the scope of our review rules. We should trust the author's judgment about UI/navigation changes and not ask for explanations of intent. Delete this comment. It violates our rules by asking for explanation of intent and making speculative assumptions about the pricing page status.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>apps/web/client/src/env.ts:4</code></summary>
> 
> - **Draft comment:** 
> The isProduction flag improves readability. Ensure it's consistently used instead of comparing process.env.NODE_ENV directly.
> - **Reason this comment was not posted:**
> Confidence changes required: `20%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>apps/web/client/src/server/api/routers/invitation.ts:138</code></summary>
> 
> - **Draft comment:** 
> Using '!isProduction' for the 'dryRun' flag improves clarity over directly comparing NODE_ENV. This change looks good.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_uADDSj8y9BHBCkis`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=onlook-dev%2Fonlook&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/onlook-dev/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/onlook-dev/code-review/rules).</sup>"
3070903361,2848340201,github-actions[bot],DISMISSED,2025-05-17T16:02:55Z,"The PR title does not conform to the '[\<Project\>] Title' format. Please update the PR title. 

 Typical [\<Project\>] values include: 

 * `[stdlib]` — indicates a change to the Mojo standard library code
 * `[docs]` — indicates a change to the documentation 

 It's okay to include multiple labels on a PR that affect multiple areas of work. 

 Thank you for contributing to Mojo!🔥 

 <small> You can also use a tool like www.regex101.com to see why your PR title fails to conform. Use ``` ^(Revert "")?(\[\S.*\]\s?)+\s+[a-zA-Z`].* ``` as the regex to test and ```Fix typo 'seperate' -> 'separate'``` as the test string.</small>"
3070903361,2851201682,JoeLoser,APPROVED,2025-05-19T15:27:48Z,
3070903672,2848340319,github-actions[bot],DISMISSED,2025-05-17T16:03:23Z,"The PR title does not conform to the '[\<Project\>] Title' format. Please update the PR title. 

 Typical [\<Project\>] values include: 

 * `[stdlib]` — indicates a change to the Mojo standard library code
 * `[docs]` — indicates a change to the documentation 

 It's okay to include multiple labels on a PR that affect multiple areas of work. 

 Thank you for contributing to Mojo!🔥 

 <small> You can also use a tool like www.regex101.com to see why your PR title fails to conform. Use ``` ^(Revert "")?(\[\S.*\]\s?)+\s+[a-zA-Z`].* ``` as the regex to test and ```Fix typo 'seperate' -> 'separate'``` as the test string.</small>"
3091358398,2870521098,ChrisHuie,APPROVED,2025-05-27T10:24:46Z,
3086762625,2864889007,github-actions[bot],COMMENTED,2025-05-23T15:46:09Z,"<!-- github-benchmark-action-comment(start): Benchmark Alert -->
# :warning: **Performance Alert** :warning:

Possible performance regression was detected for benchmark.
Benchmark result of this commit is worse than the previous benchmark result exceeding threshold `1.50`.

| Benchmark suite | Current: 7e67eb4c1cfac728011049ed157c6a316035aec6 | Previous: 895abd5cb455b17626d247f472762faae82fedcc | Ratio |
|-|-|-|-|
| `Benchmark_Compress_Levels/Brotli_LevelBestCompression - B/op` | `5` B/op | `0` B/op | `+∞` |
| `BenchmarkAppendMsgdata` | `0.6225` ns/op	1606.33 MB/s	       0 B/op	       0 allocs/op | `0.3122` ns/op	3202.74 MB/s	       0 B/op	       0 allocs/op | `1.99` |
| `BenchmarkAppendMsgdata - ns/op` | `0.6225` ns/op | `0.3122` ns/op | `1.99` |

This comment was automatically generated by [workflow](https://github.com/gofiber/fiber/actions?query=workflow%3ABenchmark) using [github-action-benchmark](https://github.com/marketplace/actions/continuous-benchmark).
<!-- github-benchmark-action-comment(end): Benchmark Alert -->"
3086762625,2865730717,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-23T21:08:52Z,"## Pull Request Overview

This PR fixes the CSRF middleware tests for fasthttp 1.62 by updating the test routines that handle cookie reading and request resets.  
- Update of request reset logic: Separates header and body resets using ctx.Request.Header.Reset() and ctx.Request.ResetBody().  
- Refactored cookie retrieval logic to use fasthttp.AcquireCookie for both CSRF and session cookies.



"
3086762625,2865738635,sixcolors,APPROVED,2025-05-23T21:11:14Z,"Looks good, thanks @ReneWerner87 "
3086762625,2865745354,gaby,APPROVED,2025-05-23T21:12:53Z,👍 LGTM
3117321071,2896206796,coderabbitai[bot],COMMENTED,2025-06-04T10:34:25Z,"**Actionable comments posted: 5**

<details>
<summary>🧹 Nitpick comments (4)</summary><blockquote>

<details>
<summary>mistralrs/src/speculative.rs (1)</summary><blockquote>

`102-102`: **LGTM! Consider the design implications for speculative decoding.**

The integration correctly uses the target model's search callback for speculative decoding. This is logical since the target model is the primary decision maker.



Consider documenting why only the target model's search callback is used in speculative decoding, as it may not be immediately obvious to future maintainers that the draft model's callback (if any) is intentionally ignored.

</blockquote></details>
<details>
<summary>examples/python/local_search.py (2)</summary><blockquote>

`8-9`: **Fix import order to follow PEP 8 conventions.**

Standard library imports should come before third-party imports.

Apply this diff to fix the import order:

```diff
+import os
+
 from mistralrs import (
     Runner,
     Which,
     ChatCompletionRequest,
     Architecture,
     WebSearchOptions,
 )
-import os
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Pylint (3.3.7)</summary>

[convention] 8-8: standard import ""os"" should be placed before first party import ""mistralrs.Runner"" 

(C0411)

</details>

</details>

---

`1-9`: **Add module and function docstrings for better documentation.**

The example would benefit from documentation explaining its purpose and usage.

Add docstrings:

```diff
+""""""
+Example demonstrating local filesystem search integration with mistral.rs.
+
+This script shows how to use a custom search callback to search local files
+and integrate the results with a chat completion model.
+""""""
+
 from mistralrs import (
     Runner,
     Which,
     ChatCompletionRequest,
     Architecture,
     WebSearchOptions,
 )
 import os

+def local_search(query: str):
+    """"""
+    Search for files containing the query string in their names.
+    
+    Args:
+        query: Search string to match against filenames
+        
+    Returns:
+        List of search results sorted by title in descending order
+    """"""
```


Also applies to: 10-27

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Pylint (3.3.7)</summary>

[convention] 1-1: Missing module docstring

(C0114)

---

[error] 1-7: Unable to import 'mistralrs'

(E0401)

---

[convention] 8-8: standard import ""os"" should be placed before first party import ""mistralrs.Runner"" 

(C0411)

</details>

</details>

</blockquote></details>
<details>
<summary>mistralrs/examples/local_search/main.rs (1)</summary><blockquote>

`47-52`: **Clarify search description to match implementation.**

The search description claims ""Local filesystem search"" but the implementation only searches filenames, not file contents. This could mislead users about the search capabilities.



```diff
     let messages = RequestBuilder::from(messages).with_web_search_options(
         WebSearchOptions {
-            search_description: Some(""Local filesystem search"".to_string()),
+            search_description: Some(""Local filename search"".to_string()),
             ..Default::default()
         },
     );
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between c53d346aedfeddd35701c3eca3ae0f8861810e7a and 1185b57d170d8603b3397b0d41bd40e35aacd860.

</details>

<details>
<summary>📒 Files selected for processing (22)</summary>

* `Cargo.toml` (1 hunks)
* `examples/python/local_search.py` (1 hunks)
* `mistralrs-core/src/engine/mod.rs` (4 hunks)
* `mistralrs-core/src/engine/search_request.rs` (1 hunks)
* `mistralrs-core/src/lib.rs` (11 hunks)
* `mistralrs-core/src/request.rs` (1 hunks)
* `mistralrs-core/src/search/mod.rs` (3 hunks)
* `mistralrs-pyo3/src/lib.rs` (6 hunks)
* `mistralrs/Cargo.toml` (1 hunks)
* `mistralrs/examples/local_search/main.rs` (1 hunks)
* `mistralrs/src/anymoe.rs` (1 hunks)
* `mistralrs/src/diffusion_model.rs` (1 hunks)
* `mistralrs/src/gguf.rs` (5 hunks)
* `mistralrs/src/gguf_lora_model.rs` (1 hunks)
* `mistralrs/src/gguf_xlora_model.rs` (1 hunks)
* `mistralrs/src/lib.rs` (1 hunks)
* `mistralrs/src/lora_model.rs` (1 hunks)
* `mistralrs/src/speculative.rs` (1 hunks)
* `mistralrs/src/speech_model.rs` (1 hunks)
* `mistralrs/src/text_model.rs` (5 hunks)
* `mistralrs/src/vision_model.rs` (5 hunks)
* `mistralrs/src/xlora_model.rs` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (4)</summary>

<details>
<summary>mistralrs-core/src/engine/search_request.rs (1)</summary><blockquote>

<details>
<summary>mistralrs-core/src/search/mod.rs (1)</summary>

* `run_search_tool` (190-267)

</details>

</blockquote></details>
<details>
<summary>mistralrs/src/speech_model.rs (2)</summary><blockquote>

<details>
<summary>mistralrs-core/src/lib.rs (2)</summary>

* `new` (205-225)
* `new` (276-456)

</details>
<details>
<summary>mistralrs-pyo3/src/lib.rs (1)</summary>

* `new` (527-851)

</details>

</blockquote></details>
<details>
<summary>mistralrs/src/gguf.rs (4)</summary><blockquote>

<details>
<summary>mistralrs/src/model.rs (1)</summary>

* `best_device` (11-23)

</details>
<details>
<summary>mistralrs-core/src/lib.rs (1)</summary>

* `with_search_callback` (256-259)

</details>
<details>
<summary>mistralrs/src/vision_model.rs (1)</summary>

* `with_search_callback` (93-96)

</details>
<details>
<summary>mistralrs/src/text_model.rs (1)</summary>

* `with_search_callback` (132-135)

</details>

</blockquote></details>
<details>
<summary>mistralrs-core/src/lib.rs (3)</summary><blockquote>

<details>
<summary>mistralrs/src/gguf.rs (1)</summary>

* `with_search_callback` (79-82)

</details>
<details>
<summary>mistralrs/src/vision_model.rs (1)</summary>

* `with_search_callback` (93-96)

</details>
<details>
<summary>mistralrs/src/text_model.rs (1)</summary>

* `with_search_callback` (132-135)

</details>

</blockquote></details>

</details><details>
<summary>🪛 GitHub Check: Clippy</summary>

<details>
<summary>mistralrs/src/lib.rs</summary>

[failure] 126-126: 
module `search` is private

</details>
<details>
<summary>mistralrs-pyo3/src/lib.rs</summary>

[failure] 35-35: 
module `search` is private

---

[failure] 35-35: 
module `search` is private

</details>

</details>
<details>
<summary>🪛 GitHub Check: Check (ubuntu-latest, stable)</summary>

<details>
<summary>mistralrs/src/lib.rs</summary>

[failure] 126-126: 
module `search` is private

</details>
<details>
<summary>mistralrs-pyo3/src/lib.rs</summary>

[failure] 35-35: 
module `search` is private

---

[failure] 35-35: 
module `search` is private

---

[failure] 98-98: 
no method named `downcast` found for struct `pyo3::Py` in the current scope

</details>

</details>
<details>
<summary>🪛 GitHub Check: Docs</summary>

<details>
<summary>mistralrs/src/lib.rs</summary>

[failure] 126-126: 
module `search` is private

</details>

</details>
<details>
<summary>🪛 Ruff (0.11.9)</summary>

<details>
<summary>examples/python/local_search.py</summary>

17-17: Use a context manager for opening files

(SIM115)

</details>

</details>
<details>
<summary>🪛 Pylint (3.3.7)</summary>

<details>
<summary>examples/python/local_search.py</summary>

[convention] 1-1: Missing module docstring

(C0114)

---

[error] 1-7: Unable to import 'mistralrs'

(E0401)

---

[convention] 10-10: Missing function or method docstring

(C0116)

---

[warning] 18-18: Catching too general exception Exception

(W0718)

---

[refactor] 17-17: Consider using 'with' for resource-allocating operations

(R1732)

---

[warning] 17-17: Using open without explicitly specifying an encoding

(W1514)

---

[convention] 8-8: standard import ""os"" should be placed before first party import ""mistralrs.Runner"" 

(C0411)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (3)</summary>

* GitHub Check: Test Suite (ubuntu-latest, stable)
* GitHub Check: Test Suite (macOS-latest, stable)
* GitHub Check: Test Suite (windows-latest, stable)

</details>

<details>
<summary>🔇 Additional comments (34)</summary><blockquote>

<details>
<summary>Cargo.toml (1)</summary>

`81-81`: <details>
<summary>✅ Verification successful</summary>

**LGTM! Verify the walkdir version is current and secure.**

The addition of the walkdir dependency for recursive directory traversal in search examples is appropriate. Ensure version 2.5.0 is current and free from known vulnerabilities.


---

🏁 Script executed:

```shell
#!/bin/bash
# Check for the latest version of walkdir and any security advisories
echo ""Latest walkdir version:""
curl -s https://crates.io/api/v1/crates/walkdir | jq '.crate.max_stable_version'

echo ""Checking for security advisories:""
# Use cargo audit if available, or check RustSec database
if command -v cargo-audit &> /dev/null; then
    echo ""walkdir"" | cargo audit --json 2>/dev/null | jq '.vulnerabilities[]' || echo ""No vulnerabilities found""
else
    echo ""cargo-audit not available, manual check recommended""
fi
```

Length of output: 360

---



</details>

**Dependency Addition Approved: walkdir v2.5.0 Verified**

Confirmed that the workspace now depends on walkdir v2.5.0, which is the latest stable release on crates.io. No known security advisories were flagged (manual audit recommended if deeper review is desired). No further changes required.

</details>
<details>
<summary>mistralrs/Cargo.toml (1)</summary>

`29-29`: **LGTM! Proper workspace dependency usage.**

Correctly references the walkdir workspace dependency, ensuring version consistency across the workspace.

</details>
<details>
<summary>mistralrs/src/gguf_lora_model.rs (1)</summary>

`87-87`: <details>
<summary>❓ Verification inconclusive</summary>

**LGTM! Verify consistent search callback integration across all model builders.**

The search callback integration follows the expected pattern of cloning from the underlying model builder. Ensure this pattern is consistently applied across all model builder implementations.


---

🏁 Script executed:

```shell
#!/bin/bash
# Check for consistent search_callback integration across model builders
echo ""Searching for MistralRsBuilder::new calls to verify consistent search_callback usage:""
rg -A 5 -B 2 ""MistralRsBuilder::new"" --type rust

echo -e ""\nSearching for search_callback field usage in model builders:""
ast-grep --pattern 'search_callback.clone()'
```

Length of output: 7399

---



</details>

**LGTM — consistent search callback integration**

All model builders that support search are now cloning `self.*.search_callback`. Models without search (speech_model.rs, diffusion_model.rs) correctly pass `None`.  

- Please verify the call in `mistralrs-server-core/src/mistralrs_for_server_builder.rs`:  
  The `MistralRsBuilder::new` invocation there omits the search-callback argument. Confirm this is intentional or update it to include the callback clone.

</details>
<details>
<summary>mistralrs-core/src/request.rs (1)</summary>

`113-116`: **LGTM! Well-documented optional fields.**

The new `search_description` and `extract_description` fields are properly implemented with clear documentation and maintain backward compatibility through optional types.

</details>
<details>
<summary>mistralrs/src/gguf_xlora_model.rs (1)</summary>

`99-99`: **LGTM! Consistent search callback forwarding.**

The search callback is properly forwarded from the nested `gguf_model` to the `MistralRsBuilder`, maintaining consistency with the broader search callback integration.

</details>
<details>
<summary>mistralrs/src/anymoe.rs (1)</summary>

`119-119`: **LGTM! Proper search callback integration.**

The search callback is correctly forwarded from the `base` TextModelBuilder to the `MistralRsBuilder`, following the established pattern across model builders.

</details>
<details>
<summary>mistralrs/src/xlora_model.rs (1)</summary>

`104-104`: **LGTM: Consistent callback parameter forwarding.**

The change correctly forwards the cloned `search_callback` from the embedded `text_model` to the `MistralRsBuilder::new` constructor, maintaining consistency with the updated API across model builders.

</details>
<details>
<summary>mistralrs/src/diffusion_model.rs (1)</summary>

`98-98`: **LGTM: Appropriate search callback parameter for diffusion models.**

Correctly adds `None` as the search callback parameter to match the updated `MistralRsBuilder::new` signature. This is appropriate since diffusion models typically don't require search functionality.

</details>
<details>
<summary>mistralrs/src/lora_model.rs (1)</summary>

`92-92`: **LGTM: Consistent callback forwarding pattern.**

The change correctly forwards the cloned `search_callback` from the embedded `text_model`, maintaining consistency with the search callback integration pattern across model builders.

</details>
<details>
<summary>mistralrs-core/src/engine/search_request.rs (1)</summary>

`75-80`: **LGTM: Core search callback functionality implemented correctly.**

The conditional logic properly enables custom search callbacks while maintaining backward compatibility. The implementation:

- Uses the custom callback `cb(&tool_call_params)` when available
- Falls back to the default `search::run_search_tool(&tool_call_params)` otherwise  
- Maintains consistent error handling with `.unwrap()` matching the existing pattern

This change enables the extensible search functionality described in the PR objectives.

</details>
<details>
<summary>mistralrs/src/speech_model.rs (1)</summary>

`114-114`: **LGTM: Correctly updated MistralRsBuilder::new call to match new signature.**

The addition of the second `None` parameter properly aligns with the updated constructor that now accepts optional search embedding model and search callback parameters.

</details>
<details>
<summary>mistralrs-core/src/engine/mod.rs (4)</summary>

`4-4`: **LGTM: Properly added search module import.**

The import is necessary for the SearchCallback type used in the Engine struct.

---

`76-76`: **LGTM: Correctly added search_callback field to Engine struct.**

The field type `Option<Arc<search::SearchCallback>>` is appropriate for optional, thread-safe callback functionality.

---

`110-110`: **LGTM: Properly added search_callback parameter to constructor.**

The parameter follows the existing pattern and maintains consistency with other optional parameters.

---

`133-133`: **LGTM: Correct field initialization.**

Simple assignment of the search_callback parameter to the struct field is appropriate.

</details>
<details>
<summary>mistralrs/src/text_model.rs (6)</summary>

`3-3`: **LGTM: Necessary import for SearchCallback type.**

The import is required for the search_callback field and builder method.

---

`8-8`: **LGTM: Added Arc import for thread-safe callback handling.**

The Arc import is necessary for the `Arc<SearchCallback>` type used in the search_callback field.

---

`30-30`: **LGTM: Properly added search_callback field to TextModelBuilder.**

The field type `Option<Arc<SearchCallback>>` is consistent with the pattern used in other model builders.

---

`120-120`: **LGTM: Correct default initialization.**

Initializing search_callback to None is appropriate as it makes the feature optional by default.

---

`131-135`: **LGTM: Well-implemented builder method.**

The `with_search_callback` method follows the standard builder pattern and includes appropriate documentation.

---

`375-375`: **LGTM: Correctly passing search_callback to MistralRsBuilder.**

Using `clone()` on the Arc is the correct approach for sharing the callback across components.

</details>
<details>
<summary>mistralrs/src/vision_model.rs (6)</summary>

`3-3`: **LGTM: Necessary import for SearchCallback type.**

The import is required for the search_callback field and builder method.

---

`8-8`: **LGTM: Added Arc import for thread-safe callback handling.**

The Arc import is necessary for the `Arc<SearchCallback>` type used in the search_callback field.

---

`31-31`: **LGTM: Properly added search_callback field to VisionModelBuilder.**

The field type and placement are consistent with the TextModelBuilder implementation.

---

`81-81`: **LGTM: Correct default initialization.**

Initializing search_callback to None maintains consistency with other model builders.

---

`92-96`: **LGTM: Consistent builder method implementation.**

The `with_search_callback` method matches the implementation in TextModelBuilder and follows established patterns.

---

`318-318`: **LGTM: Correctly passing search_callback to MistralRsBuilder.**

Using `clone()` on the Arc maintains consistency with the text model implementation.

</details>
<details>
<summary>mistralrs-core/src/search/mod.rs (2)</summary>

`17-19`: **Well-designed callback interface!**

The `SearchCallback` type alias is properly defined with thread safety constraints (`Send + Sync`) and a clear contract. The function signature requiring sorted results in decreasing relevance order is well-documented.

---

`147-154`: **Excellent backward-compatible customization feature.**

The implementation properly allows custom descriptions while maintaining backward compatibility through fallbacks to the default constants. The approach is consistent for both search and extract tools.



Also applies to: 173-180

</details>
<details>
<summary>mistralrs/src/gguf.rs (1)</summary>

`3-3`: **Consistent and well-integrated search callback support.**

The implementation correctly follows the established builder pattern, maintains consistency with other model builders, and properly integrates the search callback throughout the build process. The field initialization and method signature match the patterns used in other model types.



Also applies to: 7-7, 22-22, 67-67, 78-82, 258-258

</details>
<details>
<summary>examples/python/local_search.py (1)</summary>

`10-27`: **Functional implementation demonstrates the search callback feature well.**

The local search function correctly implements the expected interface and provides a useful example of filesystem-based search integration.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Ruff (0.11.9)</summary>

17-17: Use a context manager for opening files

(SIM115)

</details>
<details>
<summary>🪛 Pylint (3.3.7)</summary>

[convention] 10-10: Missing function or method docstring

(C0116)

---

[warning] 18-18: Catching too general exception Exception

(W0718)

---

[refactor] 17-17: Consider using 'with' for resource-allocating operations

(R1732)

---

[warning] 17-17: Using open without explicitly specifying an encoding

(W1514)

</details>

</details>

</details>
<details>
<summary>mistralrs-core/src/lib.rs (1)</summary>

`115-115`: **Comprehensive and well-integrated search callback support.**

The implementation properly integrates the search callback throughout the entire MistralRs system:
- Public re-export for external usage
- Consistent propagation through builder pattern
- Proper handling in engine creation and reboot scenarios
- Thread-safe Arc wrapping maintained throughout

The integration is thorough and maintains consistency with existing patterns.



Also applies to: 163-163, 201-201, 210-210, 223-223, 255-259, 288-288, 312-312, 344-344, 366-366, 491-491

</details>
<details>
<summary>mistralrs/examples/local_search/main.rs (1)</summary>

`33-41`: **LGTM! Good example structure.**

The model setup demonstrates proper usage of the new search callback functionality with clear configuration.

</details>
<details>
<summary>mistralrs-pyo3/src/lib.rs (1)</summary>

`525-525`: **Verify parameter integration consistency.**

The new `search_callback` parameter is properly integrated into the function signatures and passed through to the builder. The implementation looks consistent.




Also applies to: 550-550, 844-844, 905-905

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3117321071,2896402710,coderabbitai[bot],COMMENTED,2025-06-04T11:42:32Z,"**Actionable comments posted: 0**

<details>
<summary>♻️ Duplicate comments (1)</summary><blockquote>

<details>
<summary>examples/python/local_search.py (1)</summary><blockquote>

`17-20`: _🛠️ Refactor suggestion_

**Improve file handling with proper resource management.**

The file handling approach has the same issues identified in previous reviews.



The current implementation lacks proper resource management and error handling specificity. Apply the previously suggested fix:

```diff
-                try:
-                    content = open(path).read()
-                except Exception:
-                    content = """"
+                try:
+                    with open(path, 'r', encoding='utf-8') as f:
+                        content = f.read()
+                except (OSError, UnicodeDecodeError):
+                    content = """"
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Ruff (0.11.9)</summary>

18-18: Use a context manager for opening files

(SIM115)

</details>
<details>
<summary>🪛 Pylint (3.3.7)</summary>

[warning] 19-19: Catching too general exception Exception

(W0718)

---

[refactor] 18-18: Consider using 'with' for resource-allocating operations

(R1732)

---

[warning] 18-18: Using open without explicitly specifying an encoding

(W1514)

</details>

</details>

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>examples/python/local_search.py (2)</summary><blockquote>

`1-8`: **Address import organization and add module documentation.**

The import organization doesn't follow PEP8 conventions, and the module lacks documentation.


Apply these improvements:

```diff
+""""""
+Example demonstrating local filesystem search integration with mistralrs.
+
+This script shows how to use a custom search callback to search local files
+and integrate the results with a chat completion model.
+""""""
+import os
+
 from mistralrs import (
     Runner,
     Which,
     ChatCompletionRequest,
     Architecture,
     WebSearchOptions,
 )
-import os
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Pylint (3.3.7)</summary>

[convention] 1-1: Missing module docstring

(C0114)

---

[error] 1-7: Unable to import 'mistralrs'

(E0401)

---

[convention] 8-8: standard import ""os"" should be placed before first party import ""mistralrs.Runner"" 

(C0411)

</details>

</details>

---

`11-30`: **Add function documentation and improve implementation.**

The function lacks documentation and could benefit from better structure.


Apply this improvement:

```diff
 def local_search(query: str):
+    """"""
+    Search for files containing the query string in their filename.
+    
+    Args:
+        query: String to search for in filenames
+        
+    Returns:
+        List of dictionaries containing file information
+    """"""
     results = []
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Ruff (0.11.9)</summary>

18-18: Use a context manager for opening files

(SIM115)

</details>
<details>
<summary>🪛 Pylint (3.3.7)</summary>

[convention] 11-11: Missing function or method docstring

(C0116)

---

[warning] 19-19: Catching too general exception Exception

(W0718)

---

[refactor] 18-18: Consider using 'with' for resource-allocating operations

(R1732)

---

[warning] 18-18: Using open without explicitly specifying an encoding

(W1514)

</details>

</details>

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 231d9f8e15a35e76db847c70b3c13868432106b7 and d92d2b52199156e31e410448ca3c470109064126.

</details>

<details>
<summary>📒 Files selected for processing (5)</summary>

* `docs/WEB_SEARCH.md` (2 hunks)
* `examples/python/local_search.py` (1 hunks)
* `mistralrs-pyo3/mistralrs.pyi` (3 hunks)
* `mistralrs-quant/kernels/marlin/marlin_kernel.cu` (4 hunks)
* `scripts/generate_uqff_card.py` (1 hunks)

</details>

<details>
<summary>✅ Files skipped from review due to trivial changes (1)</summary>

* mistralrs-pyo3/mistralrs.pyi

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (1)</summary>

* docs/WEB_SEARCH.md

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 Ruff (0.11.9)</summary>

<details>
<summary>examples/python/local_search.py</summary>

18-18: Use a context manager for opening files

(SIM115)

</details>

</details>
<details>
<summary>🪛 Pylint (3.3.7)</summary>

<details>
<summary>examples/python/local_search.py</summary>

[convention] 1-1: Missing module docstring

(C0114)

---

[error] 1-7: Unable to import 'mistralrs'

(E0401)

---

[convention] 11-11: Missing function or method docstring

(C0116)

---

[warning] 19-19: Catching too general exception Exception

(W0718)

---

[refactor] 18-18: Consider using 'with' for resource-allocating operations

(R1732)

---

[warning] 18-18: Using open without explicitly specifying an encoding

(W1514)

---

[convention] 8-8: standard import ""os"" should be placed before first party import ""mistralrs.Runner"" 

(C0411)

</details>
<details>
<summary>scripts/generate_uqff_card.py</summary>

[convention] 57-57: Constant name ""file"" doesn't conform to UPPER_CASE naming style

(C0103)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (4)</summary>

* GitHub Check: Check (windows-latest, stable)
* GitHub Check: Test Suite (macOS-latest, stable)
* GitHub Check: Test Suite (windows-latest, stable)
* GitHub Check: Test Suite (ubuntu-latest, stable)

</details>

<details>
<summary>🔇 Additional comments (7)</summary><blockquote>

<details>
<summary>mistralrs-quant/kernels/marlin/marlin_kernel.cu (4)</summary>

`89-90`: **LGTM! Template syntax formatting improvement.**

The removal of spaces around template argument brackets follows standard C++ conventions and improves code consistency.

---

`113-115`: **LGTM! Consistent template formatting improvement.**

The spacing corrections maintain consistency with the previous template specialization changes.

---

`138-139`: **LGTM! Formatting consistency maintained.**

The template bracket corrections continue the consistent pattern of improvements across all dequant specializations.

---

`161-163`: **LGTM! Formatting improvements completed consistently.**

This finalizes the systematic template syntax corrections across all dequant template specializations, ensuring uniform code style throughout the file.

</details>
<details>
<summary>scripts/generate_uqff_card.py (1)</summary>

`57-57`: **LGTM! Stylistic improvement in string formatting.**

The change from double quotes around the f-string to single quotes is a minor stylistic improvement that maintains the same functionality.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Pylint (3.3.7)</summary>

[convention] 57-57: Constant name ""file"" doesn't conform to UPPER_CASE naming style

(C0103)

</details>

</details>

</details>
<details>
<summary>examples/python/local_search.py (2)</summary>

`33-40`: **LGTM! Proper integration of search callback feature.**

The Runner configuration correctly demonstrates the new search callback functionality with appropriate parameters.

---

`42-52`: **LGTM! Well-structured example usage.**

The chat completion request effectively demonstrates the integration of local search with the model, using appropriate web search options to describe the local filesystem search capability.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3104992434,2884310661,mldangelo,COMMENTED,2025-05-31T16:32:45Z,
3104992434,2884311132,sourcery-ai[bot],COMMENTED,2025-05-31T16:35:05Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3144994382,2926816333,seratch,APPROVED,2025-06-13T23:54:42Z,
3134734078,2914924952,hinthornw,APPROVED,2025-06-10T20:14:01Z,
3164205825,2947129136,cubic-dev-ai[bot],COMMENTED,2025-06-20T19:38:03Z,"cubic found 1 issue across 3 files. Review it in [cubic.dev](https://cubic.dev/pr/better-auth/better-auth/pull/3107)

<sub>React with 👍 or 👎 to teach cubic. Tag `@cubic-dev-ai` to give specific feedback.</sub>"
3129247657,2909003173,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-09T06:04:33Z,"## Pull Request Overview

This PR updates build tags to require `privileged` in Linux test files, enhances documentation with libpcap and a Codex setup script, switches Docker image references in goreleaser to GHCR, and updates GitHub workflows to run on self-hosted runners.

- Enforce `privileged` build tag across Linux test files  
- Add libpcap installation and Codex environment script to CONTRIBUTING.md  
- Point Docker image templates to `ghcr.io/...` in `.goreleaser.yaml`  
- Change `runs-on` labels in workflows to `[self-hosted, ...]`

### Reviewed Changes

Copilot reviewed 50 out of 50 changed files in this pull request and generated 2 comments.

<details>
<summary>Show a summary per file</summary>

| File                                                   | Description                                                 |
| ------------------------------------------------------ | ----------------------------------------------------------- |
| client/iface/device/kernel_module_linux_test.go        | Added `privileged` to build tag                            |
| client/firewall/**/router_linux_test.go                | Added `privileged` to build tags                           |
| client/firewall/**/manager_linux_test.go               | Introduced `privileged` build tag                          |
| CONTRIBUTING.md                                        | Document libpcap and Codex setup script                    |
| .goreleaser.yaml                                       | Updated image templates to use GHCR                         |
| .github/workflows/*.yml                                | Switched `runs-on` to self-hosted runners                  |
</details>



<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**.github/workflows/golangci-lint.yml:37**
* The single quotes around `${{ matrix.os }}` prevent expression interpolation. Use `runs-on: [self-hosted, ${{ matrix.os }}]` instead.
```
runs-on: [self-hosted, '${{ matrix.os }}']
```
</details>

"
3070170567,2851252085,lee-at-zoo-corp,APPROVED,2025-05-19T15:38:44Z,
3103366848,2881890357,coderabbitai[bot],COMMENTED,2025-05-30T16:48:51Z,"**Actionable comments posted: 3**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 9a7dd023d64417d896baa128d1204eb3590e358c and fcebde1971913ea22b60b44aeb5633d8643c2405.

</details>

<details>
<summary>⛔ Files ignored due to path filters (1)</summary>

* `pnpm-lock.yaml` is excluded by `!**/pnpm-lock.yaml`

</details>

<details>
<summary>📒 Files selected for processing (7)</summary>

* `editor/grida-canvas-react/provider.tsx` (6 hunks)
* `editor/grida-canvas/index.ts` (1 hunks)
* `editor/grida-canvas/reducers/document.reducer.ts` (1 hunks)
* `editor/package.json` (1 hunks)
* `packages/grida-canvas-io/__tests__/clipboard.test.ts` (1 hunks)
* `packages/grida-canvas-io/index.ts` (1 hunks)
* `packages/grida-canvas-io/package.json` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (2)</summary>

<details>
<summary>packages/grida-canvas-io/__tests__/clipboard.test.ts (1)</summary><blockquote>

<details>
<summary>packages/grida-canvas-io/index.ts (1)</summary>

* `ClipboardPayload` (12-16)

</details>

</blockquote></details>
<details>
<summary>editor/grida-canvas-react/provider.tsx (2)</summary><blockquote>

<details>
<summary>editor/grida-canvas-react/use-editor.tsx (1)</summary>

* `useEditorState` (35-47)

</details>
<details>
<summary>editor/grida-canvas/reducers/tools/id.ts (1)</summary>

* `nid` (10-15)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>🔇 Additional comments (8)</summary><blockquote>

<details>
<summary>editor/package.json (1)</summary>

`146-146`: <details>
<summary>❓ Verification inconclusive</summary>

**Verify major version update compatibility and security.**

The `fast-xml-parser` dependency is being updated from `^4.4.0` to `^5.2.3`, which is a major version bump that may introduce breaking changes. Ensure this update is compatible with existing code and check for any security advisories.

---

🏁 Script executed:

```shell
#!/bin/bash
# Description: Check for security advisories and compatibility issues with fast-xml-parser v5.2.3

# Check if version exists and get release notes
curl -s https://api.github.com/repos/NaturalIntelligence/fast-xml-parser/releases | jq '.[] | select(.tag_name | contains(""v5.2.3"") or contains(""5.2.3"")) | {tag_name, published_at, body}'

# Check for security advisories
gh api graphql -f query='
{
  securityVulnerabilities(first: 10, ecosystem: NPM, package: ""fast-xml-parser"") {
    nodes {
      advisory {
        summary
        severity
        publishedAt
      }
      vulnerableVersionRange
      firstPatchedVersion {
        identifier
      }
    }
  }
}'

# Check changelog for breaking changes between v4 and v5
curl -s https://api.github.com/repos/NaturalIntelligence/fast-xml-parser/compare/v4.4.0...v5.2.3 | jq '.status'
```

Length of output: 1617

---



</details>

**Review fast-xml-parser@5.2.3 bump for compatibility and security.**

- **Location:** `editor/package.json` (line 146, bumped from `^4.4.0` to `^5.2.3`)  
- **Release status:** `5.2.3` is a published npm version and is “ahead” of `4.4.0`.  
- **Security:** No known advisories affect versions ≥ 4.4.1; all vulnerabilities were patched before v5.  
- **Action required:** v5 contains breaking changes—please review the migration guide (https://github.com/NaturalIntelligence/fast-xml-parser/blob/master/MIGRATION.md) and rerun your XML/HTML clipboard parsing tests to confirm existing code still works as expected.

</details>
<details>
<summary>packages/grida-canvas-io/package.json (1)</summary>

`6-21`: **LGTM! Clean package.json updates for testing infrastructure.**

The changes properly add:
- Test script for Jest execution
- `fast-xml-parser` dependency consistent with editor package
- Minimal Jest configuration with `ts-jest` preset for TypeScript support

The formatting and structure are correct.

</details>
<details>
<summary>editor/grida-canvas/index.ts (1)</summary>

`326-327`: **LGTM! Well-documented interface extension for clipboard identification.**

The addition of `payload_id` as a required string property is well-documented and serves a clear purpose for distinguishing clipboard contents across windows. This enables robust clipboard state management.

</details>
<details>
<summary>packages/grida-canvas-io/__tests__/clipboard.test.ts (1)</summary>

`3-75`: **Well-structured test suite with comprehensive coverage.**

The test suite effectively covers:
- Basic encode/decode functionality
- Browser HTML manipulation scenarios
- Error handling for invalid inputs

Good job on the test implementation!

</details>
<details>
<summary>packages/grida-canvas-io/index.ts (2)</summary>

`18-23`: **Solid implementation of clipboard HTML encoding.**

The encoding correctly handles UTF-8 conversion and base64 encoding. The use of a custom data attribute with a unique prefix prevents conflicts.

---

`51-73`: **Excellent implementation with comprehensive documentation and error handling.**

The decode function:
- Handles browser HTML manipulation gracefully
- Provides clear JSDoc with examples
- Returns null safely on errors
- Efficiently decodes base64 data

Great work on the implementation!

</details>
<details>
<summary>editor/grida-canvas-react/provider.tsx (2)</summary>

`1219-1243`: **Well-implemented clipboard paste handling with proper fallbacks.**

The implementation correctly:
- Decodes clipboard HTML data
- Checks payload_id to distinguish between internal and external pastes
- Creates new IDs for inserted nodes using the nid utility
- Falls back to text insertion if decoding fails

Excellent integration!

---

`1312-1325`: **Clean implementation of clipboard synchronization.**

The updated implementation properly uses the new encoding function and handles potential errors gracefully.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3087415117,2870525512,ChrisHuie,APPROVED,2025-05-27T10:26:27Z,
3103770911,2885781864,ChrisHuie,APPROVED,2025-06-01T16:05:18Z,
3081466449,2859182851,gemini-code-assist[bot],COMMENTED,2025-05-21T21:35:44Z,"Hello @greinacker, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

## Summary of Changes
Hello team, gemini-code-assist here to provide a summary of this pull request. The main goal of this PR, as indicated by the title and description, is to enhance the Ollama provider settings by allowing users to select an available model from a dropdown list, rather than manually typing the model name. This directly addresses issue #38. The changes involve adding new functionality to fetch the list of models from the configured Ollama server via its API and integrating this into the frontend settings component.

### Highlights
* **New IPC Handler**: A new IPC handler `get-ollama-models` has been added to the main process (`ipc-handlers.ts`) to communicate with the Ollama server's `/api/tags` endpoint and retrieve the list of available models.
* **Frontend Integration**: The `OllamaParameters.tsx` component in the renderer process has been updated to use a `Select` dropdown for the model selection. It fetches the list of models using the new IPC handler whenever the Ollama base URL is changed or the component mounts.
* **API Exposure**: The new `getOllamaModels` function is exposed from the main process to the renderer process via the Electron `preload` script, ensuring secure communication.

### Changelog
<details>
<summary>Click here to see the changelog</summary>

* **src/main/ipc-handlers.ts**
  * Added import for `axios` to make HTTP requests.
  * Implemented `get-ollama-models` IPC handler to fetch models from the Ollama `/api/tags` endpoint, handling potential errors and normalizing the base URL.
* **src/preload/index.d.ts**
  * Added `getOllamaModels` function signature to the `ApplicationAPI` interface.
* **src/preload/index.ts**
  * Added implementation for `getOllamaModels` to invoke the `get-ollama-models` IPC handler.
* **src/renderer/src/components/settings/providers/OllamaParameters.tsx**
  * Imported `useEffect`, `useState`, and `Select` component.
  * Added state (`models`) to store the fetched list of Ollama models.
  * Implemented a `useEffect` hook to call `window.api.getOllamaModels` and update the `models` state whenever the `baseUrl` changes.
  * Replaced the `Input` component for the model name with a `Select` component, populating its options with the fetched models.

</details>


<details>

<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

</details>

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>


[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configure Gemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).

---

> Models list appears,
> Fetched from server, calm our fears,
> Dropdown shows the way.

"
3081466449,2859184933,gemini-code-assist[bot],CHANGES_REQUESTED,2025-05-21T21:37:04Z,"## Code Review
This pull request introduces a helpful feature to list available Ollama models in the settings, improving the user experience for configuring Ollama. The implementation across the main process, preload script, and renderer component is generally well-structured.

I've found one issue of `medium` severity related to URL normalization that should be addressed. Other minor points are below the threshold for comments based on the repository's review settings.

### Summary of Findings
* **URL Normalization Bug**: The logic for normalizing the Ollama `baseUrl` in `src/main/ipc-handlers.ts` can produce an incorrect URL if the input `baseUrl` already contains `/api/` with a trailing slash. This could lead to failed API requests for fetching models.

### Merge Readiness
The pull request adds a valuable feature. However, there's a `medium` severity issue with URL normalization in `src/main/ipc-handlers.ts` that could cause API calls to fail under specific `baseUrl` formats. I recommend addressing this issue before merging. As an AI, I am not authorized to approve pull requests; please ensure further review and approval from team members."
3081466449,2859203762,greinacker,COMMENTED,2025-05-21T21:48:19Z,
3081466449,2861209197,wladimiiir,COMMENTED,2025-05-22T13:20:29Z,
3081466449,2861223719,wladimiiir,COMMENTED,2025-05-22T13:24:29Z,
3081466449,2861225113,gemini-code-assist[bot],COMMENTED,2025-05-22T13:24:54Z,
3081466449,2861835391,greinacker,COMMENTED,2025-05-22T16:11:08Z,
3081466449,2861849694,greinacker,COMMENTED,2025-05-22T16:16:45Z,
3081466449,2862083503,wladimiiir,COMMENTED,2025-05-22T17:41:18Z,
3081466449,2862084211,gemini-code-assist[bot],COMMENTED,2025-05-22T17:41:38Z,
3081466449,2862092304,wladimiiir,COMMENTED,2025-05-22T17:45:09Z,
3081466449,2862099006,greinacker,COMMENTED,2025-05-22T17:47:37Z,
3081466449,2866396244,wladimiiir,APPROVED,2025-05-24T17:52:54Z,Thanks for the effort and contribution 👍 
3130567060,2910639560,TodePond,APPROVED,2025-06-09T16:46:10Z,"Nice try codex, thanks for scaffolding this example for me. I fixed it so the button actually appears, and I tweaked the order and wording the example itself."
3089281696,2866835277,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-25T12:55:06Z,"## Pull Request Overview

Fix dashboard timezone parsing by introducing a UTC-to-local conversion helper and updating all dashboard cards to use it.

- Add `parseUTCDate` util and enhance `formatDate` to handle timezones.
- Swap out `new Date(date)` calls for `parseUTCDate(date)` in sorting and tick formatting across all dashboard cards.

### Reviewed Changes

Copilot reviewed 5 out of 5 changed files in this pull request and generated 4 comments.

<details>
<summary>Show a summary per file</summary>

| File | Description |
| ---- | ----------- |
| apps/app/src/utils/format.ts | Added `parseUTCDate`, updated `formatDate` to use timezone-aware parsing. |
| apps/app/src/app/[locale]/(internal)/internal/dashboard/components/UsersCard.tsx | Replaced `new Date()` with `parseUTCDate()` in sort comparator. |
| apps/app/src/app/[locale]/(internal)/internal/dashboard/components/TaskCard.tsx | Same `parseUTCDate` swap in sorting logic. |
| apps/app/src/app/[locale]/(internal)/internal/dashboard/components/PoliciesCard.tsx | Same `parseUTCDate` swap in sorting logic. |
| apps/app/src/app/[locale]/(internal)/internal/dashboard/components/OrganizationsCard.tsx | Swapped `new Date()` for `parseUTCDate()` in sorting and chart tick formatting. |
</details>



<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**apps/app/src/utils/format.ts:95**
* The new timezone-aware parsing and formatting logic isn’t covered by tests; consider adding unit tests for parseUTCDate and formatDate across multiple timezones and edge cases.
```
export function formatDate(
```
</details>

"
3145422684,2927197865,coderabbitai[bot],COMMENTED,2025-06-14T04:55:45Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>site/static/robots.txt (1)</summary><blockquote>

`1-3`: **Optional: Add explicit empty Disallow directive for broader crawler compatibility**  
While major crawlers honor `Allow: /`, some non-standard bots may ignore it. An explicit empty `Disallow:` ensures universal allow behavior.



```diff
 User-agent: *
+Disallow:
 Allow: /
 Sitemap: https://www.promptfoo.dev/sitemap.xml
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between c62e299d6099fd4c1ea7a99426735da2f0607fd4 and 1d7a84a6075f1125c88f414c8e092de65615f86a.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `site/static/robots.txt` (1 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (24)</summary>

* GitHub Check: Build Docs
* GitHub Check: Test on Node 18.x and ubuntu-latest
* GitHub Check: Test on Node 20.x and windows-latest
* GitHub Check: Redteam Custom Enterprise Server
* GitHub Check: Run Integration Tests
* GitHub Check: Test on Node 22.x and ubuntu-latest
* GitHub Check: Test on Node 24.x and macOS-latest
* GitHub Check: Test on Node 20.x and macOS-latest
* GitHub Check: Test on Node 24.x and ubuntu-latest
* GitHub Check: Redteam
* GitHub Check: webui tests
* GitHub Check: Test on Node 22.x and macOS-latest
* GitHub Check: Share Test
* GitHub Check: Test on Node 20.x and ubuntu-latest
* GitHub Check: Test on Node 18.x and windows-latest
* GitHub Check: Test on Node 18.x and macOS-latest
* GitHub Check: Style Check
* GitHub Check: Generate Assets
* GitHub Check: Build on Node 22.x
* GitHub Check: Build on Node 24.x
* GitHub Check: Build on Node 18.x
* GitHub Check: Build on Node 20.x
* GitHub Check: Analyze (python)
* GitHub Check: Analyze (javascript-typescript)

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>site/static/robots.txt (1)</summary>

`1-3`: **LGTM: Valid robots.txt configuration**  
The file correctly allows all user agents and specifies the sitemap location.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3140922437,2921905957,graphite-app[bot],COMMENTED,2025-06-12T16:31:27Z,
3071871877,2849646794,coderabbitai[bot],COMMENTED,2025-05-19T07:12:44Z,"**Actionable comments posted: 15**

<details>
<summary>🧹 Nitpick comments (29)</summary><blockquote>

<details>
<summary>packages/plugin-deepsearch/vitest.config.ts (1)</summary><blockquote>

`1-14`: **Vitest config with alias for core package.**  
The configuration sets up a Node environment and aliases `@elizaos/core` to the local source directory, which is essential for testing plugin code against the core. Optionally, mirror this alias in your `tsconfig.json` paths to improve editor and IDE integration.

</blockquote></details>
<details>
<summary>packages/plugin-deepsearch/src/config/index.ts (1)</summary><blockquote>

`1-11`: **Define DeepSearch plugin configuration schema.**  
The Zod schema and inferred `DeepSearchConfig` type correctly capture defaults for `search_provider`, `token_budget`, and `max_iterations`. Consider adding a brief JSDoc on the exported `DeepSearchConfig` type to enhance documentation and IDE tooltips.

</blockquote></details>
<details>
<summary>packages/plugin-deepsearch/__tests__/service.test.ts (1)</summary><blockquote>

`3-14`: **Mock implementation is overly simplified**

The current mock provides fixed responses regardless of inputs. Consider enhancing it to respond differently based on input parameters for more comprehensive testing.


```diff
 vi.mock('@mendable/firecrawl-js', () => {
   return {
     default: class {
-      async search() {
-        return { data: [{ url: 'https://example.com', markdown: 'Example content' }] };
+      async search(query: string) {
+        // Return different results based on query
+        return { 
+          data: query === 'error_case' 
+            ? [] 
+            : [{ url: 'https://example.com', markdown: 'Example content for ' + query }] 
+        };
       }
-      async scrape() {
-        return { data: { markdown: 'Example page' } };
+      async scrape(url: string) {
+        if (url.includes('error')) {
+          throw new Error('Failed to scrape');
+        }
+        return { data: { markdown: 'Example page content for ' + url } };
       }
     },
   };
 });
```

</blockquote></details>
<details>
<summary>packages/plugin-deepsearch/tsconfig.build.json (1)</summary><blockquote>

`11-14`: **Path mappings could be more robust**

The current path mappings use relative paths which might break if directory structures change.


If you're using a workspace manager like npm workspaces, consider using more robust path references:
```diff
 ""paths"": {
-  ""@elizaos/core"": [""../core/dist""],
-  ""@elizaos/core/*"": [""../core/dist/*""]
+  ""@elizaos/core"": [""../core/dist""],
+  ""@elizaos/core/*"": [""../core/dist/*""]
 },
```

Note: Current approach works but is dependent on the relative directory structure remaining consistent.

</blockquote></details>
<details>
<summary>packages/plugin-deepsearch/package.json (2)</summary><blockquote>

`1-46`: **Add missing package metadata**

The package.json is missing standard metadata fields like license, repository, bugs, and homepage links.


Consider adding these fields:
```diff
 {
   ""name"": ""@elizaos/plugin-deepsearch"",
   ""version"": ""0.1.0"",
   ""description"": ""DeepSearch plugin for elizaOS"",
+  ""license"": ""MIT"", // or appropriate license
+  ""repository"": {
+    ""type"": ""git"",
+    ""url"": ""https://github.com/your-org/elizaos.git"",
+    ""directory"": ""packages/plugin-deepsearch""
+  },
+  ""homepage"": ""https://github.com/your-org/elizaos/tree/main/packages/plugin-deepsearch#readme"",
+  ""bugs"": ""https://github.com/your-org/elizaos/issues"",
   ""type"": ""module"",
   // ... rest of package.json
```

---

`21-28`: **Fix dependency version inconsistency**

Most dependencies use caret ranges (^) but zod is pinned to exact version 3.24.1. This might cause issues with compatibility.


Unless there's a specific reason to pin zod's version, consider:
```diff
 ""dependencies"": {
   ""@elizaos/core"": ""^1.0.0-beta.52"",
-  ""zod"": ""3.24.1"",
+  ""zod"": ""^3.24.1"",
   ""@mendable/firecrawl-js"": ""^1.16.0"",
   ""@ai-sdk/openai"": ""^1.3.22"",
   ""ai"": ""^4.1.17"",
   ""p-limit"": ""^6.2.0"",
   ""lodash-es"": ""^4.17.21""
 },
```

</blockquote></details>
<details>
<summary>packages/plugin-deepsearch/tsup.config.ts (1)</summary><blockquote>

`9-9`: **Fix misleading comment**

The comment contradicts the actual configuration. Format is set to ESM, not CommonJS.


```diff
- format: ['esm'], // Ensure you're targeting CommonJS
+ format: ['esm'], // Using ES Modules format
```

</blockquote></details>
<details>
<summary>packages/plugin-deepsearch/README.md (2)</summary><blockquote>

`15-18`: **Add language specifier to code block**

The fenced code block is missing a language specifier, which is needed for proper syntax highlighting.


```diff
-```
+```bash
 # Start development with hot-reloading
 npm run dev
 ```
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 markdownlint-cli2 (0.17.2)</summary>

15-15: Fenced code blocks should have a language specified
null

(MD040, fenced-code-language)

</details>

</details>

---

`22-24`: **Enhance documentation for action parameters**

The example shows parameters like `depth` and `breadth`, but their purpose and valid values aren't explained. Consider adding more detailed documentation about these parameters.


Example enhancement:
```diff
+## Parameters
+
+- `question`: The research query to answer
+- `depth`: The maximum recursion depth for follow-up searches (default: 2)
+- `breadth`: The maximum number of search results to process per query (default: 3)
+
 ```ts
 const result = await runtime.action('deepSearch', { question: 'What is Firecrawl?', depth: 2, breadth: 3 });
 ```
```

</blockquote></details>
<details>
<summary>packages/plugin-deepsearch/tsconfig.json (1)</summary><blockquote>

`9-23`: **Consider stricter TypeScript settings for better reliability**

Several TypeScript settings could be strengthened for better type safety and build reliability:

1. `noImplicitAny: false` allows variables without explicit types, which could introduce runtime errors
2. `noEmitOnError: false` allows compilation even with errors
3. `forceConsistentCasingInFileNames: false` could cause issues on case-sensitive file systems

Consider enabling these checks and addressing any resulting issues.

</blockquote></details>
<details>
<summary>packages/plugin-deepsearch/src/actions/deepSearchAction.ts (3)</summary><blockquote>

`14-14`: **Consider implementing actual validation**

The validate function currently always returns true without any validation logic. Consider implementing actual validation to ensure the action is used correctly.


```diff
-  validate: async () => true,
+  validate: async (params?: Record<string, unknown>) => {
+    if (!params?.question || typeof params.question !== 'string') {
+      return false;
+    }
+    return true;
+  },
```

---

`21-35`: **Add try/catch for better error handling**

The handler calls service.ask() but doesn't handle potential exceptions from it. Consider adding try/catch to provide meaningful error messages.


```diff
    const service = runtime.getService<DeepSearchService>(DeepSearchService.serviceType);
    if (!service) {
      logger.error('DeepSearchService not registered');
      throw new Error('DeepSearchService not registered');
    }
+   try {
      const result = await service.ask(
        message.content.text ?? '',
        {
          ...(options || {}),
          roomId: message.roomId,
          worldId: message.worldId,
        },
        callback ?? (() => Promise.resolve([]))
      );
+   } catch (error) {
+     logger.error('Error during deep search', error);
+     throw new Error(`Deep search failed: ${error.message}`);
+   }
```

---

`41-41`: **Add usage examples for documentation**

The examples array is empty. Consider adding usage examples to improve documentation and help developers understand how to use this action.


```diff
-  examples: [],
+  examples: [
+    {
+      input: { question: 'What is Firecrawl?', depth: 2, breadth: 3 },
+      description: 'Research information about Firecrawl with depth 2 and breadth 3'
+    },
+    {
+      input: { question: 'What are the latest AI developments?', depth: 3 },
+      description: 'Deep research on AI with increased depth'
+    }
+  ],
```

</blockquote></details>
<details>
<summary>packages/client/src/components/message-details-sheet.tsx (3)</summary><blockquote>

`6-10`: **Consider refining the Message type.**

The type definition for `message` uses `[key: string]: any` which is too permissive. Consider using a more specific type that extends Content without the index signature.

```diff
-  message: (Content & { [key: string]: any }) | null;
+  message: (Content & { details?: unknown }) | null;
```

---

`12-36`: **Improve JSON rendering for large objects.**

The component looks good overall, but rendering large JSON objects with `JSON.stringify` might cause performance issues.


Consider:
1. Adding pagination or virtualization for large objects
2. Creating a collapsible tree view for better JSON navigation
3. Adding a simple search function for finding specific keys

Example tree view implementation:
```diff
- <pre className=""text-xs whitespace-pre-wrap"">
-   {JSON.stringify(message, null, 2)}
- </pre>
+ <JsonTreeView 
+   data={message} 
+   initialExpandLevel={1} 
+   className=""text-xs""
+ />
```

---

`19-27`: **Add filtering for sensitive data.**

Consider adding an option to filter out sensitive fields before displaying the JSON data.

```diff
- {message ? (
-   <pre className=""text-xs whitespace-pre-wrap"">
-     {JSON.stringify(message, null, 2)}
-   </pre>
- ) : (
-   <div className=""text-muted-foreground text-sm"">No details available.</div>
- )}
+ {message ? (
+   <pre className=""text-xs whitespace-pre-wrap"">
+     {JSON.stringify(filterSensitiveData(message), null, 2)}
+   </pre>
+ ) : (
+   <div className=""text-muted-foreground text-sm"">No details available.</div>
+ )}
```

</blockquote></details>
<details>
<summary>packages/plugin-deepsearch/src/providers/readerProvider.ts (2)</summary><blockquote>

`21-23`: **Remove comment about renamed method.**

The comment about ""scrape was renamed to scrapeUrl"" should be removed as it's an implementation detail that's no longer relevant.

```diff
try {
-  // Assuming 'scrape' was renamed to 'scrapeUrl' in the SDK
  const result = await firecrawl.scrapeUrl(url, { formats: ['markdown'] });
```

---

`25-30`: **Improve type safety.**

The typecasting of `result.data` could be improved with better type definitions.

```diff
// Check if the result is a successful ScrapeResponse by checking for the 'data' property
if ('data' in result && result.data) {
  logger.debug(`firecrawl reader fetched content for ${url}`);
  // Ensure markdown exists on data, Firecrawl types suggest data could be generic or specific
-  const markdownContent = (result.data as { markdown?: string }).markdown ?? '';
+  const markdownContent = 'markdown' in result.data ? result.data.markdown ?? '' : '';
  return { text: markdownContent, data: result.data, values: {} };
```

</blockquote></details>
<details>
<summary>packages/plugin-deepsearch/src/providers/searchProvider.ts (2)</summary><blockquote>

`21-24`: **Make search limit configurable.**

The search limit is hardcoded to 5 results. Consider making this configurable either via environment variables or parameters.

```diff
+const DEFAULT_SEARCH_LIMIT = 5;
+const searchLimit = parseInt(process.env.FIRECRAWL_SEARCH_LIMIT ?? '', 10) || DEFAULT_SEARCH_LIMIT;

try {
  const result = await firecrawl.search(query, {
-    limit: 5, // Default reasonable limit
+    limit: searchLimit,
    scrapeOptions: { formats: ['markdown'] }, // Get markdown if scraping results
  });
```

---

`33-46`: **Add pagination support.**

The search implementation doesn't support pagination for more than the default limit of results.


Consider adding pagination support by accepting offset parameters from the message content:
```diff
get: async (_runtime: IAgentRuntime, message: Memory) => {
  const query = message.content.text ?? '';
+  const page = typeof message.content.page === 'number' ? message.content.page : 1;
+  const pageSize = typeof message.content.pageSize === 'number' ? message.content.pageSize : 5;
+  const offset = (page - 1) * pageSize;
  
  // ...later in the code:
  const result = await firecrawl.search(query, {
-    limit: 5,
+    limit: pageSize,
+    offset: offset,
    scrapeOptions: { formats: ['markdown'] },
  });
```

</blockquote></details>
<details>
<summary>packages/plugin-deepsearch/src/types.ts (2)</summary><blockquote>

`15-22`: **Consistent query field naming.**

There's an inconsistency between field names: `queries` array in this interface vs. single `query` in `DeepSearchNotesAddedPayload`.

```diff
export interface DeepSearchQueriesGeneratedPayload extends EventPayload {
  question: string;
  iteration: number;
  queries: string[];
+  // Consider adding a property for the current query being processed
  roomId?: string;
  worldId?: string;
}
```

---

`32-40`: **Improve typing for thinking field.**

The `thinking` field uses `unknown[]` which is too generic. Consider using a more specific type.

```diff
export interface DeepSearchAnswerGeneratedPayload extends EventPayload {
  question: string;
  answer: string;
  citations: string[];
-  thinking: unknown[];
+  thinking: Array<{
+    step: string;
+    content: string;
+    timestamp?: number;
+  }>;
  roomId?: string;
  worldId?: string;
}
```

</blockquote></details>
<details>
<summary>packages/plugin-deepsearch/src/evaluators/answerEvaluator.ts (2)</summary><blockquote>

`24-29`: **Magic numbers hamper future tuning**

Thresholds `0.2 / 0.4 / 0.8` and length `<10` are sprinkled inline.  
Extract them into `const` values so changes don’t require digging into the function body.

---

`37-37`: **Populate `examples` or drop the field**

An empty `examples` array signals incomplete work; either add a couple of realistic samples or omit the property.

</blockquote></details>
<details>
<summary>packages/plugin-deepsearch/src/services/deepSearchService.ts (2)</summary><blockquote>

`2-2`: **Remove unused import**

`ServiceType` is imported but never used – trim it to keep the bundle lean.

---

`75-77`: **Prompt-injection surface**

User-supplied `question` is interpolated verbatim into the prompt; a malicious string could smuggle instructions.  
Consider prefixing with a system directive clarifying that only the *answer* should be produced, or escape problematic sequences.
[security]

</blockquote></details>
<details>
<summary>packages/plugin-deepsearch/src/research.ts (1)</summary><blockquote>

`101-151`: **Search-fetch loop is fully sequential – consider controlled parallelism**

Iterating queries one by one (`for…of` + `await`) can be slow. Batch them with `Promise.allSettled`, capped by a concurrency limit, to speed up deep searches without overloading the provider.

</blockquote></details>
<details>
<summary>packages/client/src/components/chat.tsx (2)</summary><blockquote>

`39-39`: **Consider using a more specific type than `unknown` for details.**

The new `details` field uses `unknown` type which is safer than `any`, but still quite permissive. A more specific type definition would provide better type safety and developer experience.

```diff
-  details?: unknown;
+  details?: Record<string, any>; // Or a more specific interface
```

---

`662-666`: **Consider adding accessibility attributes to MessageDetailsSheet.**

While the implementation looks solid, it might benefit from explicit ARIA attributes for better accessibility.

Consider adding `aria-label` and ensuring the sheet meets accessibility standards:

```diff
<MessageDetailsSheet
  open={detailsOpen}
  onOpenChange={setDetailsOpen}
  message={detailsMessage}
+ aria-label=""Message details""
/>
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 4c256844d0414357ed6138fb77a1298128c063e8 and d378beac3f520288eb38b2d5be2b903b9a1704b3.

</details>

<details>
<summary>⛔ Files ignored due to path filters (1)</summary>

* `bun.lock` is excluded by `!**/*.lock`

</details>

<details>
<summary>📒 Files selected for processing (22)</summary>

* `packages/cli/src/characters/eliza.ts` (1 hunks)
* `packages/client/src/components/chat.tsx` (9 hunks)
* `packages/client/src/components/message-details-sheet.tsx` (1 hunks)
* `packages/core/tsconfig.json` (1 hunks)
* `packages/plugin-deepsearch/README.md` (1 hunks)
* `packages/plugin-deepsearch/__tests__/service.test.ts` (1 hunks)
* `packages/plugin-deepsearch/package.json` (1 hunks)
* `packages/plugin-deepsearch/src/actions/deepSearchAction.ts` (1 hunks)
* `packages/plugin-deepsearch/src/config/index.ts` (1 hunks)
* `packages/plugin-deepsearch/src/evaluators/answerEvaluator.ts` (1 hunks)
* `packages/plugin-deepsearch/src/index.ts` (1 hunks)
* `packages/plugin-deepsearch/src/providers/readerProvider.ts` (1 hunks)
* `packages/plugin-deepsearch/src/providers/searchProvider.ts` (1 hunks)
* `packages/plugin-deepsearch/src/research.ts` (1 hunks)
* `packages/plugin-deepsearch/src/services/deepSearchService.ts` (1 hunks)
* `packages/plugin-deepsearch/src/types.ts` (1 hunks)
* `packages/plugin-deepsearch/tsconfig.build.json` (1 hunks)
* `packages/plugin-deepsearch/tsconfig.json` (1 hunks)
* `packages/plugin-deepsearch/tsup.config.ts` (1 hunks)
* `packages/plugin-deepsearch/vitest.config.ts` (1 hunks)
* `packages/the-org/src/devRel/index.ts` (1 hunks)
* `tsconfig.json` (0 hunks)

</details>

<details>
<summary>💤 Files with no reviewable changes (1)</summary>

* tsconfig.json

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (3)</summary>

<details>
<summary>packages/client/src/components/message-details-sheet.tsx (1)</summary><blockquote>

<details>
<summary>packages/core/src/types.ts (1)</summary>

* `Content` (28-58)

</details>

</blockquote></details>
<details>
<summary>packages/plugin-deepsearch/src/types.ts (1)</summary><blockquote>

<details>
<summary>packages/core/src/types.ts (1)</summary>

* `EventPayload` (1881-1885)

</details>

</blockquote></details>
<details>
<summary>packages/plugin-deepsearch/src/research.ts (1)</summary><blockquote>

<details>
<summary>packages/core/src/types.ts (6)</summary>

* `Memory` (232-265)
* `State` (138-148)
* `IAgentRuntime` (1087-1250)
* `ModelType` (83-103)
* `HandlerCallback` (316-316)
* `Provider` (403-425)

</details>

</blockquote></details>

</details><details>
<summary>🪛 markdownlint-cli2 (0.17.2)</summary>

<details>
<summary>packages/plugin-deepsearch/README.md</summary>

15-15: Fenced code blocks should have a language specified
null

(MD040, fenced-code-language)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (4)</summary>

* GitHub Check: test
* GitHub Check: integration-tests
* GitHub Check: databaseIntegrationTests
* GitHub Check: test

</details>

<details>
<summary>🔇 Additional comments (18)</summary><blockquote>

<details>
<summary>packages/core/tsconfig.json (1)</summary>

`9-10`: **Enable composite builds for project references.**  
Adding `""composite"": true` alongside `""declaration""` and `""declarationMap""` correctly configures the package for project references and incremental builds. Ensure that downstream packages (e.g., `plugin-deepsearch`) include a `""references""` entry pointing to this core project in their `tsconfig.json`.

</details>
<details>
<summary>packages/the-org/src/devRel/index.ts (1)</summary>

`168-170`: **Register DeepSearch plugin for Eddy.**  
Including `@elizaos/plugin-deepsearch` in Eddy’s `plugins` array is necessary to enable deep search functionality. Please verify that `@elizaos/plugin-deepsearch` is declared as a dependency in this package’s `package.json` to prevent runtime module resolution errors.

</details>
<details>
<summary>packages/cli/src/characters/eliza.ts (1)</summary>

`21-23`: **Add DeepSearch plugin to Eliza character.**  
The new entry `'@elizaos/plugin-deepsearch'` correctly integrates the deep search capability. Confirm that this plugin is listed under `dependencies` in `packages/cli/package.json` so the module can be resolved at runtime.

</details>
<details>
<summary>packages/plugin-deepsearch/tsconfig.build.json (2)</summary>

`15-15`: **Verify module setting ""Preserve""**

""Preserve"" is not a standard TypeScript module setting. Standard values are ""ESNext"", ""ES2022"", ""CommonJS"", etc. This might cause unexpected behavior.


Consider changing to an official TypeScript module value:
```diff
- ""module"": ""Preserve"",
+ ""module"": ""ESNext"",
```

---

`2-24`: **Good TypeScript configuration overall**

The configuration is well-structured with appropriate settings for a modern TypeScript package:
- Source maps and declaration generation enabled
- Strict type checking enabled
- Proper module resolution for bundlers
- ESNext target for modern JavaScript output

</details>
<details>
<summary>packages/plugin-deepsearch/tsup.config.ts (2)</summary>

`11-21`: **Review externals list for completeness**

The externals list may be incomplete compared to your dependencies in package.json.


Consider adding all dependencies from package.json that should not be bundled:
```diff
 external: [
   'dotenv', // Externalize dotenv to prevent bundling
   'fs', // Externalize fs to use Node.js built-in module
   'path', // Externalize other built-ins if necessary
   '@reflink/reflink',
   '@node-llama-cpp',
   'https',
   'http',
   'agentkeepalive',
   'zod',
+  '@elizaos/core',
+  '@mendable/firecrawl-js',
+  '@ai-sdk/openai', 
+  'ai',
+  'p-limit',
+  'lodash-es'
 ],
```

---

`3-22`: **Overall configuration looks appropriate**

The tsup configuration is well-structured with appropriate settings for bundling a modern TypeScript package:
- Entry and output points are correctly defined
- Uses a dedicated build tsconfig
- Enables sourcemaps and declaration files

</details>
<details>
<summary>packages/plugin-deepsearch/src/index.ts (3)</summary>

`9-17`: **Plugin implementation looks good**

The plugin is well-structured with all necessary components properly registered. It implements the standard Plugin interface with appropriate name, description, and component registrations.

---

`10-10`: **Verify package name consistency**

The plugin name is set to '@elizaos/plugin-deepsearch' which differs from '@acme/plugin-deepsearch' mentioned in the PR description. Ensure this naming is intentional and consistent with your package structure.

---

`19-20`: **Exports are properly defined**

Exporting types and providing a default export follows good module design practices, making the plugin easy to consume by other packages.

</details>
<details>
<summary>packages/plugin-deepsearch/tsconfig.json (1)</summary>

`26-29`: **Path mappings look correct**

The path mappings to @elizaos/core are correctly configured, ensuring proper resolution of core package imports.

</details>
<details>
<summary>packages/client/src/components/message-details-sheet.tsx (1)</summary>

`1-5`: **Good UI component imports.**

The imports are appropriate for building a slide-over UI sheet component with proper scrolling support and button interactions.

</details>
<details>
<summary>packages/plugin-deepsearch/src/types.ts (2)</summary>

`6-13`: **Well-defined event types.**

The enum values are descriptively named and documented.

---

`42-46`: **Well-structured event payload map.**

The payload map is correctly typed with proper mapping between event types and their payloads.

</details>
<details>
<summary>packages/plugin-deepsearch/src/research.ts (1)</summary>

`22-37`: **`Memory` stub contains fields not present in core type**

Fields `type` and `updatedAt` don’t exist on `Memory`; depending on TypeScript settings this may error.  
Verify against `Memory` definition or extend via declaration merging.

</details>
<details>
<summary>packages/client/src/components/chat.tsx (3)</summary>

`129-133`: **Well-implemented message details button.**

The conditional rendering of the Info button only when message details are available is clean and follows good practices.

---

`447-450`: **Good use of useCallback for the openMessageDetails function.**

The implementation of `openMessageDetails` with useCallback optimizes for performance by preventing unnecessary re-renders.

---

`168-169`: **Good state management for the details feature.**

The state variables are well-defined and follow React best practices.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3071871877,2852783443,ChristopherTrimboli,APPROVED,2025-05-20T06:29:02Z,
3088038713,2866117104,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-24T04:45:17Z,"## Pull Request Overview

Adds a new `security` package to Fiber for extracting API keys and parsing common Authorization headers, with accompanying tests and documentation.

- Introduces `APIKeyCookie`, `APIKeyHeader`, and `APIKeyQuery` for retrieving API keys.
- Adds `GetAuthorizationCredentials`, `HTTPBearer`, `HTTPBasic`, and `HTTPDigest` helpers.
- Provides comprehensive tests and a new documentation guide at `docs/guide/security.md`.

### Reviewed Changes

Copilot reviewed 3 out of 3 changed files in this pull request and generated no comments.

| File                             | Description                                               |
| -------------------------------- | --------------------------------------------------------- |
| security/security.go             | Implements API key and auth header parsing helper functions |
| security/security_test.go        | Adds tests covering all new security helpers             |
| docs/guide/security.md           | Documents the security helpers and usage examples        |


<details>
<summary>Comments suppressed due to low confidence (3)</summary>

**security/security.go:45**
* The call to fiber.Query[string] is invalid since Fiber's Ctx.Query method is not generic; use `c.Query(name)` or `c.Query(name, defaultValue)` to retrieve the query parameter.
```
key := fiber.Query[string](c, name)
```
**docs/guide/security.md:13**
* The example references `fiber.Ctx` but doesn't import the Fiber package; add `import ""github.com/gofiber/fiber/v3""` so the snippet compiles.
```
import ""github.com/gofiber/fiber/v3/security""
```
**docs/guide/security.md:31**
* [nitpick] The docs only mention `ErrUnauthorized` but the helpers also return a `BadRequest` error for empty names; consider documenting both error cases for clarity.
```
Each returns the key or `fiber.ErrUnauthorized` when the key is missing.
```
</details>

"
3165752300,2948093449,gemini-code-assist[bot],COMMENTED,2025-06-22T07:59:42Z,"## Summary of Changes

Hello @rgerhards, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request significantly enhances RainerScript's string manipulation capabilities by adding `endswith` and `endswith_i` operators. These new operators allow users to filter messages based on whether a string property ends with a specified substring, with support for both case-sensitive and case-insensitive comparisons. The changes span across the language's parsing, runtime evaluation, and documentation, ensuring a complete and well-tested feature addition.

### Highlights

* **New Operators**: I've introduced `endswith` and `endswith_i` (case-insensitive) string comparison operators to the RainerScript language, enabling more precise message filtering based on the end of a string.
* **Grammar and Lexer Integration**: The language grammar (`grammar.y`) and lexer (`lexer.l`) have been updated to recognize and correctly parse the new `endswith` and `endswith_i` keywords, integrating them into the expression evaluation hierarchy.
* **Runtime Logic Implementation**: The core runtime logic in `grammar/rainerscript.c` and `runtime/ruleset.c` now includes the necessary functions to evaluate `endswith` and `endswith_i` expressions. This covers comparisons against single strings, arrays of strings, and property filters.
* **Documentation Updates**: The RainerScript documentation (`doc/source/configuration/filters.rst`, `doc/source/rainerscript/expressions.rst`) and the lexer's keyword highlighting (`doc/source/_ext/rsyslog_lexer.py`) have been updated to reflect the availability and usage of the new operators.
* **Regression Testing**: A new regression test (`tests/endswith-operator.sh`) has been added to thoroughly validate the functionality of the `endswith` operator under various conditions.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configure Gemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3165752300,2948093843,gemini-code-assist[bot],COMMENTED,2025-06-22T08:01:23Z,"## Code Review

The pull request introduces the `endswith` operator to RainerScript, enhancing its string comparison capabilities. The changes include modifications to the lexer, grammar, runtime, and documentation to support the new operator. The code appears well-structured and includes a regression test. However, there are some indentation and code style issues that should be addressed."
3128721443,2909345887,mimecuvalo,APPROVED,2025-06-09T08:29:44Z,"LG, what's the chatgpt link? how did this issue manifest itself?"
3131885496,2911740008,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-10T01:35:18Z,"## Pull Request Overview

This PR changes the EnvVar middleware default behavior to return no variables unless explicitly exported, removes the old ExcludeVars option, updates tests to expect no leakage of environment variables by default, and updates documentation accordingly.

- Remove `ExcludeVars` from code and docs
- Make `newEnvVar` return an empty set on default Config
- Update tests and docs to reflect that no env vars are exported by default

### Reviewed Changes

Copilot reviewed 4 out of 4 changed files in this pull request and generated no comments.

| File                              | Description                                                      |
|-----------------------------------|------------------------------------------------------------------|
| middleware/envvar/envvar.go       | Dropped ExcludeVars logic and ensure no env vars are returned by default |
| middleware/envvar/envvar_test.go  | Updated tests to assert absence of vars when no ExportVars set   |
| docs/whats_new.md                 | Documented removal of ExcludeVars and new ExportVars-only model  |
| docs/middleware/envvar.md         | Clarified default behavior (no exports) and removed ExcludeVars references |


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**middleware/envvar/envvar.go:11**
* [nitpick] The doc comment is missing a verb; consider changing to `// ExportVars specifies the environment variables that should be exported` for clarity.
```
// ExportVars specifies the environment variables that should export
```
**docs/middleware/envvar.md:62**
* The JSON response uses the field `vars`, not `ExportVars`. Update this table row to reflect the actual `vars` property name.
```
| ExportVars  | `map[string]string` | ExportVars specifies the environment variables that should be exported. | `nil` |
```
</details>

"
3131885496,2912156575,ReneWerner87,APPROVED,2025-06-10T06:40:51Z,
3126019191,2906299308,ellipsis-dev[bot],COMMENTED,2025-06-06T22:37:56Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 413d52c8c9568f90894767ab63698ac8a6745458 in <ellipsistime>57 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `54` lines of code in `2` files
> - Skipped `0` files when reviewing.
> - Skipped posting `4` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/onlook-dev/settings/code-review) and [rules](https://app.ellipsis.dev/onlook-dev/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>apps/web/client/src/app/project/[id]/_hooks/use-chat.tsx:72</code></summary>
> 
> - **Draft comment:** 
> New READ_STYLE_GUIDE_TOOL_NAME branch calls handleReadStyleGuideTool. Verify that initializeTailwindColorContent returns the expected style guide data and consider adding contextual info to the error message if initialization fails.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>apps/web/client/src/app/project/[id]/_hooks/use-chat.tsx:81</code></summary>
> 
> - **Draft comment:** 
> In the catch block, consider using error.message (or proper error serialization) instead of concatenating the error object to ensure clearer error reporting.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>packages/ai/src/tools/index.ts:33</code></summary>
> 
> - **Draft comment:** 
> New readStyleGuideTool is added with an empty parameters schema. If future parameters are anticipated, consider expanding the Zod schema for additional validation.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>apps/web/client/src/app/project/[id]/_hooks/use-chat.tsx:12</code></summary>
> 
> - **Draft comment:** 
> The import of READ_STYLE_GUIDE_TOOL_NAME is added; ensure its usage is consistently aligned with the tool definition in the AI package.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_wMUnc2DH73Rf3Ksa`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=onlook-dev%2Fonlook&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/onlook-dev/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/onlook-dev/code-review/rules).</sup>"
3070852559,2848311052,ellipsis-dev[bot],COMMENTED,2025-05-17T15:13:02Z,"Skipped PR review on 551ffba91823eb29a173b49e73a7d4d172f4da2f because no changed files had a supported extension. If you think this was in error, please [contact us](https://docs.ellipsis.dev/contact) and we'll fix it right away."
3072127450,2849953269,PawelPeczek-Roboflow,APPROVED,2025-05-19T08:48:50Z,
3079737329,2857168929,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-21T10:27:30Z,"## Pull Request Overview

This PR adds tests for the `is_autocast_available` utility, verifying its boolean return value on CPU and, if available, CUDA.

- Imported `torch` to check CUDA availability
- Added `test_is_autocast_available_cpu` to assert boolean responses for CPU and CUDA
- Extended tests in `tests/test_utils.py`


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**tests/test_utils.py:45**
* [nitpick] The test name implies only CPU but also covers CUDA. Consider renaming it to `test_is_autocast_available` or parametrizing over devices for clarity.
```
def test_is_autocast_available_cpu() -> None:
```
**tests/test_utils.py:53**
* Consider adding a test for invalid device strings (e.g., `is_autocast_available('invalid')`) to verify error handling or expected fallback behavior.
```
        assert isinstance(cuda_result, bool)
```
</details>

"
3102904786,2881374113,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-30T13:30:16Z,"## Pull Request Overview

This PR introduces the AI Image Editor block powered by Flux Kontext, enabling text-based image editing via Replicate’s Flux Kontext Pro and Max models. It includes schema and execution logic, cost configuration, and documentation updates.

- Adds `FluxKontextBlock` implementation and model invocation logic
- Registers block cost in `block_cost_config.py` for Pro/Max tiers
- Documents the new block and updates the blocks index

### Reviewed Changes

Copilot reviewed 4 out of 4 changed files in this pull request and generated 4 comments.

| File                                                      | Description                                    |
|-----------------------------------------------------------|------------------------------------------------|
| docs/content/platform/blocks/flux_kontext.md              | Added documentation for Flux Kontext block     |
| docs/content/platform/blocks/blocks.md                    | Included Flux Kontext in blocks index          |
| autogpt_platform/backend/backend/data/block_cost_config.py| Configured cost tiers for AIImageEditorBlock   |
| autogpt_platform/backend/backend/blocks/flux_kontext.py   | Implemented AIImageEditorBlock and run logic   |


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**autogpt_platform/backend/backend/blocks/flux_kontext.py:1**
* [nitpick] The file `flux_kontext.py` contains `AIImageEditorBlock`. For consistency, consider renaming the file to `ai_image_editor_block.py` to match the class name.
```
from enum import Enum
```
</details>

"
3102904786,2889050105,majdyz,APPROVED,2025-06-02T15:54:44Z,
3100623808,2878635984,PawelPeczek-Roboflow,COMMENTED,2025-05-29T15:09:04Z,
3100623808,2878636828,PawelPeczek-Roboflow,COMMENTED,2025-05-29T15:09:18Z,"LGTM, let's just sort out the test"
3100623808,2878743916,PawelPeczek-Roboflow,DISMISSED,2025-05-29T15:42:13Z,
3100623808,2878779721,grzegorz-roboflow,APPROVED,2025-05-29T15:50:40Z,
3147033060,2928946630,gemini-code-assist[bot],COMMENTED,2025-06-15T03:18:49Z,"## Summary of Changes

Hello @gaby, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request focuses on enhancing the test suite for the EarlyData middleware. It refactors the test file structure by moving to an internal package and consolidating tests, while also adding new tests to improve coverage for middleware configuration options and helpers.

### Highlights

* **Test Structure Refinement**: Converted the `earlydata_test.go` file to use an internal test package (`package earlydata`) and consolidated configuration tests into this file, dropping a separate test file.
* **Improved Test Coverage**: Added new test cases to specifically cover the `Next` configuration option for the middleware and the behavior of the `configDefault` helper function under various conditions (no config and partial config).





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configureGemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3147033060,2928946664,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-15T03:19:12Z,"## Pull Request Overview

This PR consolidates configuration tests into the primary `earlydata_test.go`, switches to the internal test package, and expands coverage for the EarlyData middleware.

- Moved standalone config tests into `earlydata_test.go` and removed the extra file  
- Changed test package to `earlydata` for access to unexported functions  
- Added new tests: `Test_EarlyDataNext`, `Test_configDefault_NoConfig`, and `Test_configDefault_WithConfig`


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**middleware/earlydata/earlydata_test.go:229**
* Add an assertion in `Test_configDefault_NoConfig` to verify the default `Next` function is set correctly, for example:
```go
require.Equal(t,
    reflect.ValueOf(ConfigDefault.Next).Pointer(),
    reflect.ValueOf(cfg.Next).Pointer(),
)
```
```
require.Equal(t, reflect.ValueOf(ConfigDefault.AllowEarlyData).Pointer(), reflect.ValueOf(cfg.AllowEarlyData).Pointer())
```
</details>

"
3147033060,2928946692,gemini-code-assist[bot],COMMENTED,2025-06-15T03:19:25Z,"## Code Review

This pull request improves the test coverage for the EarlyData middleware's configuration handling. The tests have been moved to `earlydata_test.go` and the package has been changed to `earlydata`, allowing for more thorough testing of unexported functions like `configDefault`. The new tests for `Next` functionality and `configDefault` scenarios are well-written and cover important edge cases."
3147033060,2928946897,coderabbitai[bot],COMMENTED,2025-06-15T03:20:51Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (3)</summary><blockquote>

<details>
<summary>middleware/earlydata/earlydata_test.go (3)</summary><blockquote>

`23-30`: **Re-evaluate calling `t.Parallel` inside a shared helper**

`appWithConfig` calls `t.Parallel`, which means the *calling* test will be marked parallel a second time. If the parent test already invoked `t.Parallel`, the second call is disallowed and will panic (`testing: t.Parallel called multiple times`).  
Today every caller is a sub-test that does **not** set `t.Parallel`, so you’re safe—but the helper is easy to reuse incorrectly later. Consider:

```diff
- t.Parallel()
+ // Leave concurrency control to the caller to avoid accidental double-parallel.
```

or add a doc-comment warning users that the helper marks the test as parallel.

---

`32-33`: **Expose a way to inject custom EarlyData config**

All scenarios currently exercise only `earlydata.New()` with default middleware configuration.  
If future regressions surface in custom `Config` paths, the current suite will miss them.  
Adding a second argument to `appWithConfig` (or defining a helper similar to `appWithConfigCustom`) would keep the tests flexible without duplicating boilerplate.

---

`228-230`: **Function-pointer equality can be fragile across builds**

Comparing function pointers via `reflect.ValueOf(fn).Pointer()` works but is brittle: inlined or substituted functions may change addresses between compiler versions or with `-gcflags=all=-l`. A safer (and clearer) assertion is to call the functions and assert identical behaviour, e.g.:

```go
require.Equal(t, ConfigDefault.IsEarlyData(nil), cfg.IsEarlyData(nil))
```

The current check is fine for now, just flagging the maintenance risk.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 670fbd5e4553a69c31eccce4535bd53e557b488c and a740305c2fc159a96f64515476803f9aa1183b09.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `middleware/earlydata/earlydata_test.go` (3 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>middleware/earlydata/earlydata_test.go (4)</summary><blockquote>

<details>
<summary>middleware/earlydata/earlydata.go (2)</summary>

* `New` (22-52)
* `IsEarly` (16-18)

</details>
<details>
<summary>ctx_interface_gen.go (1)</summary>

* `Ctx` (17-379)

</details>
<details>
<summary>middleware/earlydata/config.go (4)</summary>

* `Config` (13-33)
* `ConfigDefault` (36-46)
* `DefaultHeaderName` (8-8)
* `DefaultHeaderTrueValue` (9-9)

</details>
<details>
<summary>constants.go (2)</summary>

* `MethodGet` (5-5)
* `StatusOK` (50-50)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: unit (1.24.x, macos-13)
* GitHub Check: lint
* GitHub Check: unit (1.24.x, macos-latest)
* GitHub Check: unit (1.24.x, windows-latest)
* GitHub Check: unit (1.24.x, ubuntu-latest)
* GitHub Check: repeated
* GitHub Check: Compare
* GitHub Check: Analyse

</details>

<details>
<summary>🔇 Additional comments (2)</summary><blockquote>

<details>
<summary>middleware/earlydata/earlydata_test.go (2)</summary>

`256-262`: **Nice touch on exercising the default predicates**

Verifying both `IsEarlyData` and `AllowEarlyData` against an actual `fiber.Ctx` catches silent mis-wiring of defaults—good guard against regressions.

---

`196-220`: **`Test_EarlyDataNext` accurately validates the skip path**

The test covers the critical `cfg.Next` short-circuit and asserts that `IsEarly` is never set—great addition.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3147033060,2928948173,github-actions[bot],COMMENTED,2025-06-15T03:30:42Z,"<!-- github-benchmark-action-comment(start): Benchmark Alert -->
# :warning: **Performance Alert** :warning:

Possible performance regression was detected for benchmark.
Benchmark result of this commit is worse than the previous benchmark result exceeding threshold `1.50`.

| Benchmark suite | Current: a740305c2fc159a96f64515476803f9aa1183b09 | Previous: 670fbd5e4553a69c31eccce4535bd53e557b488c | Ratio |
|-|-|-|-|
| `Benchmark_GenericParseTypeString/benchmark_genericParseTypeString#01` | `14.23` ns/op	       0 B/op	       0 allocs/op | `8.867` ns/op	       0 B/op	       0 allocs/op | `1.60` |
| `Benchmark_GenericParseTypeString/benchmark_genericParseTypeString#01 - ns/op` | `14.23` ns/op | `8.867` ns/op | `1.60` |

This comment was automatically generated by [workflow](https://github.com/gofiber/fiber/actions?query=workflow%3ABenchmark) using [github-action-benchmark](https://github.com/marketplace/actions/continuous-benchmark).
<!-- github-benchmark-action-comment(end): Benchmark Alert -->"
3147033060,2932652350,ReneWerner87,APPROVED,2025-06-16T15:44:26Z,
3070956384,2907105268,ellipsis-dev[bot],COMMENTED,2025-06-07T07:51:18Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to a419e5a18ccdc2106899775a5a47074bbdf95cb3 in <ellipsistime>40 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `426` lines of code in `13` files
> - Skipped `0` files when reviewing.
> - Skipped posting `3` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>ruff.toml:54</code></summary>
> 
> - **Draft comment:** 
> Consider adding '**/autogen/*.py' to the exclude list, as indicated by the TODO.
> - **Reason this comment was not posted:**
> Confidence changes required: `50%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>ruff.toml:31</code></summary>
> 
> - **Draft comment:** 
> Review the use of 'unsafe-fixes = true'; ensure that enabling unsafe fixes is intentional.
> - **Reason this comment was not posted:**
> Confidence changes required: `50%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>ruff.toml:57</code></summary>
> 
> - **Draft comment:** 
> Evaluate the TODO for enabling additional rule groups (C09, S, B, ARG, PTH, ERA, PLW, FURB) to ensure intended linting coverage.
> - **Reason this comment was not posted:**
> Confidence changes required: `30%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_aPmwp8oxsMAca1Zs`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3141429516,2922507016,gemini-code-assist[bot],COMMENTED,2025-06-12T20:03:27Z,"## Summary of Changes

Hello @rgerhards, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request addresses a potential buffer overflow vulnerability in the Azure event hubs output module's URL encoding logic. By switching from `sprintf` to `snprintf` with a specified buffer size, the code now safely handles string formatting, mitigating a potential security risk.

### Highlights

* **Security Fix**: Replaced the potentially unsafe `sprintf` function with the safer `snprintf` in the `url_encode` helper function within the Azure event hubs output module (`omazureeventhubs.c`). This change adds a buffer size limit to prevent potential buffer overflows when encoding characters.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configureGemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3141429516,2922513840,gemini-code-assist[bot],COMMENTED,2025-06-12T20:05:38Z,"## Code Review

This pull request correctly addresses a potential security vulnerability in the `url_encode` function by replacing the unsafe `sprintf` with `snprintf`. This is a good change that enhances the robustness of the Azure Event Hubs module.

A minor suggestion has been provided to improve maintainability by using named constants for the buffer size and length related to percent-encoding.

It's noted that the PR description mentions a failing test: `make check TESTS=tests/errfile-basic.sh -j4`. Please investigate this failure, as it might be unrelated but could block merging if it's a genuine issue introduced or exposed by these changes."
3141429516,2925046394,gemini-code-assist[bot],COMMENTED,2025-06-13T14:31:12Z,"## Code Review

The code changes replace an unsafe `sprintf` call in the `url_encode` function with a manual URL encoding mechanism to mitigate potential buffer overflows. The manual encoding logic appears robust, correctly identifying unreserved characters and converting others to the `%XX` format using a static hexadecimal lookup table."
3122796109,2905059993,patmmccann,COMMENTED,2025-06-06T14:12:23Z,
3119325967,2898298252,greptile-apps[bot],COMMENTED,2025-06-04T22:54:37Z,"
## PR Summary

Added validation for custom provider URLs to prevent inclusion of API version segments (e.g., '/v1') in base URLs, improving error handling during provider setup.

- Added `containsVersionSegment()` function in `CustomProviderFormView.swift` to validate URLs using regex pattern matching
- Implemented clear error message when users attempt to include API version in URL (e.g., '.../api/v1/models')
- Text fields in settings form correctly use system colors as per design guidelines
- Error message display uses `.red` color which should be defined in Assets.colors instead of inline

<sub>1 file(s) reviewed, no comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=onit_260)</sub>"
3092355883,2869374555,ellipsis-dev[bot],COMMENTED,2025-05-27T02:11:07Z,"> [!CAUTION]
> **Changes requested  :x:**
> <details>
> <summary>Reviewed 8d35b7313a73b83367b580a4e17ba1832e2af44d in <ellipsistime>1 minute and 58 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `113` lines of code in `2` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern/cli/llm_setup.py:95</code></summary>
> 
> - **Draft comment:** 
> Added new Anthropic models (CLAUDE3.5_HAIKU, CLAUDE4_OPUS, CLAUDE4_SONNET) to the model options. Ensure these key names match the registrations in the config registry.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment is asking the author to ensure that the key names match the registrations in the config registry. This is a form of asking the author to double-check something, which violates the rules. Therefore, this comment should be removed.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>skyvern/forge/sdk/api/llm/config_registry.py:240</code></summary>
> 
> - **Draft comment:** 
> Registers new non-bedrock Anthropic model 'ANTHROPIC_CLAUDE3.5_HAIKU' with model identifier 'anthropic/claude-3-5-haiku-latest'. Verify that this naming convention aligns with your overall model key strategy.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment is asking the PR author to verify if the naming convention aligns with their strategy, which is against the rules of asking for confirmation or verification. It does not provide a specific suggestion or point out a clear issue with the code.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_V8vJ2wzdHezHxnxo`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3092355883,2869374587,ellipsis-dev[bot],COMMENTED,2025-05-27T02:11:09Z,"> [!CAUTION]
> **Changes requested  :x:**
> <details>
> <summary>Reviewed everything up to 8d35b7313a73b83367b580a4e17ba1832e2af44d in <ellipsistime>1 minute and 59 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `113` lines of code in `2` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern/cli/llm_setup.py:96</code></summary>
> 
> - **Draft comment:** 
> New Anthropic model options added. Ensure the keys match those in config_registry.py.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment is asking the author to ensure that the keys match those in another file, which is a form of asking for confirmation or double-checking. This violates the rule against asking the author to confirm or ensure things.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>skyvern/forge/sdk/api/llm/config_registry.py:237</code></summary>
> 
> - **Draft comment:** 
> New Anthropic Claude 3.5 Haiku and Claude 4 configs look fine. Confirm that the max_completion_tokens (8192) is the intended limit for these models.
> - **Reason this comment was not posted:**
> Comment looked like it was already resolved.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_hvUIBfspUX2EFzsZ`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3101903339,2880025327,ellipsis-dev[bot],COMMENTED,2025-05-30T02:14:33Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 51525c4d1cdba90103556d819531604b40762ddb in <ellipsistime>53 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `269` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `4` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>integrations/n8n/nodes/Skyvern/Skyvern.node.ts:4</code></summary>
> 
> - **Draft comment:** 
> The refactored makeRequest function now properly uses this.helpers.httpRequest. In its current form it only returns an object with 'ok' and 'json'. If future cases need access to other response formats (like text, blob, etc.), consider expanding the returned object.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>integrations/n8n/nodes/Skyvern/Skyvern.node.ts:96</code></summary>
> 
> - **Draft comment:** 
> Renaming from 'taskOperation' and 'workflowOperation' to 'operation' streamlines the parameters. Make sure any external references or documentation updates reflect this change.
> - **Reason this comment was not posted:**
> Confidence changes required: `10%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>integrations/n8n/nodes/Skyvern/Skyvern.node.ts:10</code></summary>
> 
> - **Draft comment:** 
> Consider defaulting the optional properties in the requestOptions (such as headers and qs) to empty objects to avoid potential undefined values. For example, using 'headers: options.headers ?? {}' can make the function more robust.
> - **Reason this comment was not posted:**
> Confidence changes required: `50%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>integrations/n8n/nodes/Skyvern/Skyvern.node.ts:406</code></summary>
> 
> - **Draft comment:** 
> When checking the HTTP response in loadOptions and resource mapping, consider including the response status code in the error messages (e.g., 'Request to get workflows failed with status code X') to help with debugging.
> - **Reason this comment was not posted:**
> Confidence changes required: `50%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_IXOlBVaG6eyyLiUy`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3101903339,2881344789,suchintan,APPROVED,2025-05-30T13:19:30Z,
3101903339,2887224140,wintonzheng,APPROVED,2025-06-02T08:02:15Z,
3132096391,2911918270,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-10T04:24:31Z,"## Pull Request Overview

This pull request improves the release notes generation in the CI workflow by retrieving the previous release’s commit hash and using it for generating changelog diffs.  
- Updated the step to fetch both the previous release tag and commit SHA.  
- Modified the release notes generation logic to conditionally generate notes based on the availability of the previous release commit.



"
3128524666,2908568896,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-08T16:51:30Z,"## Pull Request Overview

This pull request addresses issues with sending messages consisting solely of whitespace and ensures the send button is disabled when no valid text is present.  
- Disables the send button when the composer text is empty  
- Prevents sending messages that only contain whitespace by trimming text before processing


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**packages/flutter_chat_ui/lib/src/composer.dart:305**
* Consider updating the 'hasText' condition to use trimmed text so that the send button is disabled when the composer contains only whitespace.
```
onPressed: hasText ? () => _handleSubmitted(_textController.text) : null,
```
</details>

"
3071786788,2848982823,lunary-bot,APPROVED,2025-05-18T13:31:38Z,
3080846070,2858497128,yingjiehe-xyz,APPROVED,2025-05-21T16:51:33Z,
3136992715,2937115536,ChrisHuie,APPROVED,2025-06-17T21:17:22Z,
3136992715,2947031567,ncolletti,APPROVED,2025-06-20T18:41:08Z,looks good1
3156558510,2938893836,coderabbitai[bot],COMMENTED,2025-06-18T11:50:09Z,"**Actionable comments posted: 1**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between bf08ef9debda68fbe67ac61b3fe113d305832259 and 84875fcddbc85dc84fc49776ac885e05ddf86055.

</details>

<details>
<summary>⛔ Files ignored due to path filters (1)</summary>

* `pnpm-lock.yaml` is excluded by `!**/pnpm-lock.yaml`

</details>

<details>
<summary>📒 Files selected for processing (15)</summary>

* `.playwright/imageAPIEndpoints.spec.ts` (24 hunks)
* `.playwright/languageSelection.spec.ts` (11 hunks)
* `.playwright/mainUIConsistency.spec.ts` (5 hunks)
* `.playwright/simpleUserStory.spec.ts` (2 hunks)
* `app/api/stats/route.ts` (1 hunks)
* `biome.json` (4 hunks)
* `common/icons/index.ts` (1 hunks)
* `common/icons/languageMapping.ts` (1 hunks)
* `package.json` (1 hunks)
* `src/components/configuration/config.test.tsx` (1 hunks)
* `src/components/configuration/inputWrapper.tsx` (1 hunks)
* `src/components/configuration/repositoryInput.tsx` (1 hunks)
* `src/components/footer/footer.test.tsx` (1 hunks)
* `src/components/preview/previewHelpers.ts` (2 hunks)
* `src/components/repo/repo.tsx` (1 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (4)</summary>

* GitHub Check: Pages changed - github-socialify
* GitHub Check: docker
* GitHub Check: e2e
* GitHub Check: docker

</details>

<details>
<summary>🔇 Additional comments (25)</summary><blockquote>

<details>
<summary>common/icons/languageMapping.ts (2)</summary>

`110-111`: **Approve import order change for AWS and Amazon icons**  
This swap is purely cosmetic and preserves existing functionality.

---

`117-118`: **Approve import order change for VSCode and Visual Studio icons**  
Reordering imports does not affect behavior.

</details>
<details>
<summary>common/icons/index.ts (1)</summary>

`4-5`: **Approve export order change for LANGUAGE_ICON_MAPPING**  
Moving the export below utilities only impacts declaration order without functional effect.

</details>
<details>
<summary>src/components/repo/repo.tsx (1)</summary>

`15-18`: **Approve single-line destructuring**: The refactored single-line destructuring for `owner` and `name` is concise and consistent with the existing logic. The `?? {}` fallback still correctly handles unmatched URLs without changing behavior.

</details>
<details>
<summary>src/components/configuration/repositoryInput.tsx (1)</summary>

`26-29`: **Approve single-line destructuring**: This mirrors the style in `repo.tsx`, improving readability while preserving the fallback behavior for invalid repository URLs.

</details>
<details>
<summary>package.json (1)</summary>

`58-58`: **Dependency bump to Biome v2 is correct.**

The devDependency for `@biomejs/biome` has been updated to `^2.0.0`, matching the intended upgrade to Biome v2.

</details>
<details>
<summary>biome.json (6)</summary>

`2-17`: **Validate schema upgrade and include patterns.**

The `$schema` URL was updated to `2.0.0` and file patterns consolidated under `includes` with negated exclusions. Please verify that no required files are unintentionally ignored (`common/font.ts`, `common/twemoji.ts`).

---

`28-28`: **Enable organize imports as a Biome assist action.**

Adding the `assist` section correctly turns on source-action import organization in Biome v2. Confirm this aligns with your team’s workflow.

---

`43-46`: **Complexity rules updated for Biome v2.**

New complexity rules (`useRegexLiterals`, `noAdjacentSpacesInRegex`, `noCommaOperator`) have been added with `error` severity. Validate these align with your project’s complexity thresholds.

---

`67-70`: **Correctness rules expanded in Biome v2.**

Additional correctness rules (`useJsxKeyInIterable`, `noInvalidBuiltinInstantiation`, `useValidTypeof`) strengthen type and usage checks. Approved if this matches your code quality goals.

---

`73-75`: **Security rules enhanced.**

Security linting now enforces `noGlobalEval` and `noBlankTarget` as errors, improving security posture. Confirm these additions are desired.

---

`112-114`: **Suspicious rules updated.**

The `noWith` rule is now an error and `noVar` set to warn. Please verify these deprecations (`with`, `var`) comply with your style guidelines.

</details>
<details>
<summary>src/components/configuration/inputWrapper.tsx (1)</summary>

`4-4`: **Import-order tweak looks good**

Purely stylistic re-ordering; no functional impact.

</details>
<details>
<summary>app/api/stats/route.ts (1)</summary>

`3-3`: **Import re-ordering acknowledged**

No behavioural change introduced – fine to proceed.

</details>
<details>
<summary>src/components/footer/footer.test.tsx (1)</summary>

`2-2`: **Test import order fine**

Re-ordering keeps tests intact; nothing else to action.

</details>
<details>
<summary>src/components/configuration/config.test.tsx (1)</summary>

`7-7`: **Import grouping change is harmless**

Only stylistic; tests still compile and run.

</details>
<details>
<summary>.playwright/simpleUserStory.spec.ts (1)</summary>

`1-1`: **Playwright spec formatting change is safe**

Import ordering and multiline type annotation don’t affect runtime behaviour.



Also applies to: 24-26

</details>
<details>
<summary>.playwright/mainUIConsistency.spec.ts (2)</summary>

`1-6`: **Approve import reorder**  
The `expect` import is now placed before the type imports, aligning with the project’s standardized import order. No functional change.

---

`22-24`: **Approve multi-line type annotation**  
Refactoring the `page` parameter into a multi-line type block improves readability and matches the style across other spec files.

</details>
<details>
<summary>.playwright/languageSelection.spec.ts (2)</summary>

`1-6`: **Approve import reorder**  
Moving `expect` ahead of the type-only imports is consistent with the formatting applied elsewhere.

---

`30-32`: **Approve multi-line page parameter annotations**  
Converting the inline `page: Page` signature to a multi-line block enhances clarity and matches other test files. No logic changes. 


Also applies to: 64-66, 90-92, 126-128, 171-173, 196-198, 218-220, 249-251, 279-281, 301-303

</details>
<details>
<summary>src/components/preview/previewHelpers.ts (2)</summary>

`39-42`: **Approve multi-line parameter formatting in copyMarkdown**  
Expanding the inline parameter type to a block form improves readability without affecting behavior.

---

`53-56`: **Approve multi-line parameter formatting in copyImageTag**  
Consistent with `copyMarkdown`, the `copyImageTag` signature has been reformatted for clarity. No functional impact.

</details>
<details>
<summary>.playwright/imageAPIEndpoints.spec.ts (2)</summary>

`1-1`: **Approve combined import statement**  
The single-line import of `{ expect, type Page, test }` matches the style used in other spec files.

---

`44-47`: **Approve multi-line page parameter annotations across tests**  
Extending the `page` parameter into a block format throughout the file maintains consistency and enhances readability. No behavior is altered. 


Also applies to: 56-59, 68-71, 80-83, 94-98, 113-116, 131-134, 147-150, 161-164, 179-182, 194-196, 208-210, 221-223, 236-238, 252-254, 267-269, 282-284, 294-296, 308-310, 323-325, 336-338, 349-351, 364-366

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3099122521,2879964912,cirospaciari,APPROVED,2025-05-30T01:24:16Z,
3099122521,2879965408,cirospaciari,COMMENTED,2025-05-30T01:24:41Z,
3140887643,2922795912,seratch,APPROVED,2025-06-12T22:20:02Z,thanks!
3164560239,2947428663,ellipsis-dev[bot],COMMENTED,2025-06-20T23:50:45Z,
3071822317,2849230491,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-19T02:13:43Z,"## Pull Request Overview

This PR fixes asymmetric merging in `_merge_usage_entries` so keys existing only in the first entry are now preserved.  
- Adds an `else` branch to include unseen keys from `usage_entry1` during merge  
- Introduces a new test to verify that behavior for simple token counts

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated no comments.

| File                                | Description                                          |
| ----------------------------------- | ---------------------------------------------------- |
| dspy/utils/usage_tracker.py         | Adds handling for keys present only in the first entry when merging usage dictionaries |
| tests/utils/test_usage_tracker.py   | Adds a test (`test_merge_usage_entries_with_new_keys`) to ensure unseen keys are preserved |


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**dspy/utils/usage_tracker.py:43**
* The return type hint `dict[str, dict[str, Any]]` does not match the actual merged result, which can have non-dict values. Consider updating the annotation to `dict[str, Any]` for accuracy.
```
def _merge_usage_entries(self, usage_entry1, usage_entry2) -> dict[str, dict[str, Any]]:
```
**tests/utils/test_usage_tracker.py:162**
* Add a test to verify that nested dict values (e.g., `prompt_tokens_details` and `completion_tokens_details`) also merge correctly when keys are only in the first entry, covering recursive merge behavior.
```
def test_merge_usage_entries_with_new_keys():
```
</details>

"
3071822317,2849283311,chenmoneygithub,COMMENTED,2025-05-19T03:17:56Z,"Nice catch, and thanks for the PR! Proposed a simpler way to reduce nesting level"
3071822317,2849798636,estsauver,COMMENTED,2025-05-19T08:00:14Z,
3071822317,2869170557,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-26T21:23:11Z,"## Pull Request Overview

This PR fixes an issue in the usage merger logic so that keys present only in the first usage entry are no longer ignored. Key changes include adding a new test to verify symmetric key merging and updating the _merge_usage_entries function to incorporate keys exclusively available in the first entry.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated 1 comment.

| File                                   | Description                                                      |
| -------------------------------------- | ---------------------------------------------------------------- |
| tests/utils/test_usage_tracker.py      | Added a test case to ensure that unseen keys are merged properly. |
| dspy/utils/usage_tracker.py             | Updated _merge_usage_entries to correctly merge keys from both inputs. |


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**dspy/utils/usage_tracker.py:40**
* [nitpick] Consider renaming 'current_v' to 'existing_value' or a similar identifier to improve clarity on its role as the value retrieved from usage_entry2.
```
current_v = result.get(k)
```
</details>

"
3071822317,2882026678,chenmoneygithub,APPROVED,2025-05-30T17:51:47Z,
3101552957,2879844650,dylan-conway,APPROVED,2025-05-29T23:49:30Z,
3091528139,2868762800,gemini-code-assist[bot],COMMENTED,2025-05-26T15:23:24Z,"Hello @mysticaltech, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

## Summary of Changes
Hello team, gemini-code-assist here with a summary of this pull request. This PR aims to fix an issue that can occur during cluster upgrades related to the load balancer's network attachment. Specifically, it addresses a potential problem where Terraform might try to attach a private network to the load balancer even if it's already attached, leading to errors during `terraform apply`. The changes involve enabling the reading of the existing load balancer state, detecting if a private network is already associated with it, and conditionally skipping the creation of the `hcloud_load_balancer_network` resource if the network is found to be already attached.

### Highlights
* **Fix Upgrade Issue**: Addresses a problem during cluster upgrades where the load balancer network attachment could fail if the network was already attached.
* **Detect Existing Network**: Introduces logic to check if the cluster's load balancer already has a private network attached using a data source.
* **Conditional Resource Creation**: Modifies the `hcloud_load_balancer_network` resource to only be created if the load balancer does *not* already have a private network attached.

### Changelog
* **data.tf**
  * Uncommented the `hcloud_load_balancer.cluster` data source (lines 31-36) to allow reading the state of an existing load balancer.
  * Updated the `depends_on` for the uncommented data source from `null_resource.kustomization` to `hcloud_load_balancer.cluster` (line 35).
* **init.tf**
  * Modified the `count` argument for the `hcloud_load_balancer_network.cluster` resource (line 23) to include a check for `local.lb_cluster_has_network`. The resource will now only be created if `local.has_external_load_balancer` is false AND `local.lb_cluster_has_network` is false.
* **locals.tf**
  * Added a new local variable `lb_cluster_has_network` (line 244) which uses the `try` function to check if the `data.hcloud_load_balancer.cluster` has a `private_network` or `network` attribute with a length greater than 0, indicating an existing network attachment.


<details>

<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

</details>

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>


[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configure Gemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).

---

> Terraform plans unfold,
> Resources new and old.
> Check the LB's net,
> Lest errors you get,
> Apply changes, brave and bold.

"
3091528139,2868767087,gemini-code-assist[bot],CHANGES_REQUESTED,2025-05-26T15:25:47Z,"## Code Review
This pull request aims to address an upgrade issue with load balancer network attachments by improving detection of existing configurations. The intent is good, and the changes in `init.tf` to conditionally create the `hcloud_load_balancer_network` resource based on `local.lb_cluster_has_network` seem correct in principle.

However, there are a few critical and high-priority points in the Terraform configuration, particularly in `data.tf` and `locals.tf`, that need to be addressed to ensure correctness and prevent errors during `terraform plan` or `terraform apply`.

A significant concern is the note in the PR description under 'Testing': `terraform -version *(fails: command not found)*`. This suggests these Terraform changes might not have been tested locally, which increases the risk of introducing issues. It's highly recommended to test these changes thoroughly in a development environment before merging.

### Summary of Findings
* **Terraform Configuration Error: Circular Dependency**: A critical circular dependency is present in `data.tf`. The `data ""hcloud_load_balancer"" ""cluster""` incorrectly specifies `depends_on` pointing to the `resource ""hcloud_load_balancer"" ""cluster""`. This will prevent Terraform from successfully planning or applying the configuration.
* **Logic Error: Incorrect Network Detection**: The logic in `locals.tf` for `lb_cluster_has_network` uses attributes (`private_network`, `network`) that are not standard for the `hcloud_load_balancer` data source for checking network attachment. This will likely result in the check always returning `false`, negating the intended fix.
* **Potential Issue: Load Balancer Name Mismatch**: The `data ""hcloud_load_balancer"" ""cluster""` in `data.tf` queries by `var.cluster_name`. However, the load balancer resource it should be checking (managed in `init.tf`) is named `local.load_balancer_name` (`""${var.cluster_name}-${var.ingress_controller}""`). If `var.ingress_controller` is active, the data source will query the wrong load balancer.
* **Development Practice: Testing**: The pull request description includes a note: `terraform -version *(fails: command not found)*`. This raises a significant concern that the Terraform changes may not have been tested in a functional environment. Thorough local testing is crucial before merging.

### Merge Readiness
This pull request, in its current state, is not ready for merging. There are critical and high-severity issues within the Terraform configuration that need to be addressed to ensure functionality and prevent errors. Specifically, the circular dependency in `data.tf`, the potential name mismatch for the load balancer lookup, and the incorrect attribute usage in `locals.tf` for network detection must be resolved.

Given these issues and the concern about local testing capabilities (as per the PR description), I strongly recommend that these changes be thoroughly reviewed and tested in a development environment after the identified problems are fixed.

As a reviewer, I am not authorized to approve pull requests. Please ensure the necessary corrections are made and that the code undergoes further review and validation before it is merged."
3101857129,2898179707,ellipsis-dev[bot],COMMENTED,2025-06-04T21:40:43Z,
3101857129,2898180836,sourcery-ai[bot],COMMENTED,2025-06-04T21:41:24Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3101857129,2898175394,greptile-apps[bot],COMMENTED,2025-06-04T21:43:37Z,"<sub>36 file(s) reviewed, 5 comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=promptfoo_4248)</sub>"
3101857129,2898211783,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-04T21:53:36Z,"## Pull Request Overview

This PR enriches all redteam encoding strategies by capturing and storing the original input text in each test case’s metadata.

- Extract and reuse the original input (`originalText`) instead of repeatedly calling `String(testCase.vars![injectVar])`.
- Inject `originalText` into each strategy’s metadata.
- Refactor mapping callbacks from implicit returns to block form to support the new extraction.

### Reviewed Changes

Copilot reviewed 36 out of 36 changed files in this pull request and generated 1 comment.

<details>
<summary>Show a summary per file</summary>

| File                                  | Description                                        |
| ------------------------------------- | -------------------------------------------------- |
| simpleVideo.ts                        | Added `originalText` to metadata (missing extraction) |
| simpleImage.ts                        | Added `originalText` to metadata (missing extraction) |
| simpleAudio.ts                        | Added `originalText` to metadata (missing extraction) |
| rot13.ts                              | Extracted `originalText`, used in vars and metadata |
| promptInjections/index.ts             | Extracted `originalText`, used in vars and metadata |
| pandamonium.ts                        | Extracted `originalText` before building metadata  |
| otherEncodings.ts                     | Extracted `originalText`, updated mapping syntax   |
| multilingual.ts                       | Added `originalText` to metadata (missing extraction) |
| mathPrompt.ts                         | Added `originalText` to metadata (missing extraction) |
| likert.ts                             | Extracted `originalText`, updated mapping syntax   |
| leetspeak.ts                          | Extracted `originalText`, used in vars and metadata |
| iterative.ts                          | Extracted `originalText`, used in provider metadata |
| homoglyph.ts                          | Extracted `originalText`, used in vars and metadata |
| hex.ts                                | Extracted `originalText`, used in vars and metadata |
| goat.ts                               | Extracted `originalText`, used in vars and metadata |
| gcg.ts                                | Added `originalText` (missing non-null assertion)  |
| crescendo.ts                          | Extracted `originalText`, used in metadata         |
| citation.ts                           | Added `originalText` (missing non-null assertion)  |
| bestOfN.ts                            | Extracted `originalText`, used in provider metadata |
| base64.ts                             | Extracted `originalText`, used in vars and metadata |
</details>



<details>
<summary>Comments suppressed due to low confidence (6)</summary>

**src/redteam/strategies/simpleVideo.ts:202**
* No tests currently verify that `metadata.originalText` is preserved across encodings. Add unit tests to assert this property for each strategy.
```
export async function addVideoToBase64(
```
**src/redteam/strategies/simpleVideo.ts:205**
* The code references `originalText` in metadata but it isn’t declared in this scope. You need to extract it first, e.g., `const originalText = String(testCase.vars![injectVar]);` before using it.
```
originalText,
```
**src/redteam/strategies/simpleImage.ts:128**
* `originalText` is added to metadata but not extracted beforehand. Add something like `const originalText = String(testCase.vars![injectVar]);` above.
```
originalText,
```
**src/redteam/strategies/simpleAudio.ts:109**
* Reference to `originalText` without a prior declaration will cause a runtime/compile error. Extract it first using the test case’s injectVar.
```
originalText,
```
**src/redteam/strategies/gcg.ts:72**
* Inconsistent with other strategies, here `testCase.vars` isn’t non-null asserted. Consider using `testCase.vars![injectVar]` to satisfy the expected type.
```
const originalText = String(testCase.vars[injectVar]);
```
**src/redteam/strategies/citation.ts:65**
* Missing non-null assertion on `testCase.vars`. To match the rest of the codebase, use `testCase.vars![injectVar]`.
```
const originalText = String(testCase.vars[injectVar]);
```
</details>

"
3096785905,2879318776,PhilipVinc,COMMENTED,2025-05-29T19:02:32Z, 
3096785905,2879320986,PhilipVinc,APPROVED,2025-05-29T19:03:32Z,I would remove the `jax.random.split` and just call `rngs.params()` twice. But anything is fine 
3091352056,2881273604,ChrisHuie,APPROVED,2025-05-30T12:52:40Z,
3161472807,2944152106,coderabbitai[bot],COMMENTED,2025-06-19T22:48:33Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (4)</summary><blockquote>

<details>
<summary>docs/structured-logging.md (3)</summary><blockquote>

`42-42`: **Add missing period for consistency.**

The bullet at line 42 should end with a period to match the other list items.  
```diff
- - Optional raw JSON output for machine ingestion
+ - Optional raw JSON output for machine ingestion.
```

---

`66-66`: **Streamline redundant phrasing.**

You can drop “in our configuration” to make the sentence more concise:  
```diff
- some common logging keys are already excluded from `ST1019` in our configuration.
+ some common logging keys are already excluded from `ST1019`.
```

---

`67-67`: **Insert comma in compound sentence.**

Add a comma before “or” for clarity in the list of actions:  
```diff
- You can define your own constants for frequently used keys or suppress the warning when it makes the code clearer.
+ You can define your own constants for frequently used keys, or suppress the warning when it makes the code clearer.
```

</blockquote></details>
<details>
<summary>docs/logging.md (1)</summary><blockquote>

`164-166`: **Insert commas for compound sentences.**

Both clauses need a comma before “so” to improve readability:  
```diff
- Structured logs record events as key/value pairs so machines and humans can parse them. Semantic logging standardizes those keys so logs can be understood across tools and teams.
+ Structured logs record events as key/value pairs, so machines and humans can parse them. Semantic logging standardizes those keys, so logs can be understood across tools and teams.
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 913fe03fc140d6687159c622982c5425909b127f and 617e8c76e6c5cf7086f382f8ce3466a4c7ebc670.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `docs/logging.md` (2 hunks)
* `docs/structured-logging.md` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 LanguageTool</summary>

<details>
<summary>docs/structured-logging.md</summary>

[grammar] ~42-~42: Please add a punctuation mark at the end of paragraph.
Context: ... - Optional raw JSON output for machine ingestion  Example:  ```go log.Warn(""OCI image ha...

(PUNCTUATION_PARAGRAPH_END)

---

[style] ~66-~66: Since ownership is already implied, this phrasing may be redundant.
Context: ...9` in our configuration. You can define your own constants for frequently used keys or s...

(PRP_OWN)

---

[uncategorized] ~67-~67: Possible missing comma found.
Context: ... your own constants for frequently used keys or suppress the warning when it makes t...

(AI_HYDRA_LEO_MISSING_COMMA)

</details>
<details>
<summary>docs/logging.md</summary>

[uncategorized] ~165-~165: Use a comma before ‘so’ if it connects two independent clauses (unless they are closely connected and short).
Context: ...Semantic logging standardizes those keys so logs can be understood across tools and...

(COMMA_COMPOUND_SENTENCE_2)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (9)</summary>

* GitHub Check: Build (macos-latest, macos)
* GitHub Check: Build (windows-latest, windows)
* GitHub Check: Analyze (javascript-typescript)
* GitHub Check: Analyze (go)
* GitHub Check: Lint (golangci)
* GitHub Check: Lint (golangci)
* GitHub Check: Analyze (javascript-typescript)
* GitHub Check: Analyze (go)
* GitHub Check: Summary

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3161472807,2944152173,coderabbitai[bot],APPROVED,2025-06-19T22:48:37Z,
3078157262,2855505934,ellipsis-dev[bot],COMMENTED,2025-05-20T20:28:31Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to b679817bab4711c8519cfcee04e59c0699e41e24 in <ellipsistime>1 minute and 36 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `97` lines of code in `2` files
> - Skipped `1` files when reviewing.
> - Skipped posting `3` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>fern/docs.yml:112</code></summary>
> 
> - **Draft comment:** 
> Consider verifying the ordering of integrations – should MCP be sorted consistently with the others?
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>fern/integrations/mcp.mdx:60</code></summary>
> 
> - **Draft comment:** 
> The JSON config snippet uses inline comments which aren’t valid in strict JSON. Consider clarifying it’s pseudo‐JSON or use a jsonc style if supported.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 20% vs. threshold = 50% Since this is documentation, not actual code, strict JSON validity is less critical. The # comments actually make the example more readable and helpful for users. The ```json marker is just for syntax highlighting. Users will understand they need to remove comments when creating their actual config. The comment raises a valid technical point about JSON syntax. Invalid examples in docs could confuse users or cause copy-paste errors. The benefits of the inline comments for readability and user understanding outweigh the strict correctness concerns. The format is clearly an example/template meant to be modified. Delete the comment as the inline comments serve a useful documentation purpose and changing to strict JSON would make the example less helpful.
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>fern/integrations/mcp.mdx:39</code></summary>
> 
> - **Draft comment:** 
> The examples section lists raw URLs. Consider embedding them as clickable links or images for improved clarity.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_9H31wNlWEY4MhwA9`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3078157262,2855525414,ellipsis-dev[bot],COMMENTED,2025-05-20T20:36:23Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed 12cc6faebd8fd2860a960300d8f18a82d1885a6b in <ellipsistime>1 minute and 40 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `42` lines of code in `2` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>fern/docs.yml:102</code></summary>
> 
> - **Draft comment:** 
> Renamed the MCP entry to 'Skyvern MCP' and removed the duplicate. This ensures consistent labeling in the Integrations section.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is purely informative, as it praises a change made in the code without providing any actionable feedback or suggestions. It does not align with the rules provided, which prohibit purely informative comments.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>fern/integrations/mcp.mdx:2</code></summary>
> 
> - **Draft comment:** 
> The image block displaying the MCP logo was removed. Confirm if this is intentional since the asset is included in the PR.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 0% vs. threshold = 50% This comment violates several rules. It's asking for confirmation of intention (""Confirm if this is intentional""), which is explicitly against our rules. The removal of an image is a UI/styling change, which we're supposed to assume was done correctly. Additionally, the comment doesn't suggest any actual code changes - it's purely informative. Maybe the image is actually crucial for documentation purposes and its removal could negatively impact user understanding? Per our rules, we should assume UI and styling changes, including documentation images, were made intentionally and correctly. We don't need confirmation of the author's intention. This comment should be deleted as it violates our rules by asking for confirmation of intention and commenting on UI/styling changes.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_YVUec9s3n5fhkimW`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3078157262,2855561189,ellipsis-dev[bot],COMMENTED,2025-05-20T20:50:35Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed 4cdeeb749c7b3e4bf4d07a25daa8e16a6662b8bf in <ellipsistime>1 minute and 44 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `29` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>fern/integrations/mcp.mdx:38</code></summary>
> 
> - **Draft comment:** 
> Consider adding fallback content (e.g. a text link or message) inside each <video> block for browsers that may not support HTML5 video. Also, if this pattern is used often, consider abstracting it into a reusable Video component; and verify that the aspectRatio styling ('16 / 9') is parsed as intended (perhaps use '16/9' for consistency).
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 10% vs. threshold = 50% This appears to be a UI/styling suggestion about video elements. The rules explicitly state not to comment on UI/styling changes. While adding fallback content is a good accessibility practice, this is more of a UI enhancement suggestion rather than a critical logic issue. The aspect ratio format suggestion is purely stylistic. The suggestion about fallback content could be considered an accessibility issue, which might be more than just UI. The component reuse suggestion could improve code maintainability. Per the rules, we should not comment on pure frontend UI or styling changes - we must assume the author made these choices deliberately. The maintainability suggestion is not critical enough to warrant a comment. Delete this comment as it focuses on UI/styling concerns which are explicitly excluded from review scope per the rules.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>fern/integrations/mcp.mdx:48</code></summary>
> 
> - **Draft comment:** 
> Typo suggestion: If referring to the official 'Form 5500', consider capitalizing it instead of 'form 5500'.
> - **Reason this comment was not posted:**
> Comment was on unchanged code.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_3Hy1gTlSXDbll2lW`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3138200881,2918832338,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-11T21:51:20Z,"## Pull Request Overview

This PR updates the `with-remix` example to use Remix `2.16.8` and adds a corresponding changeset.

- Bumps all `@remix-run/*` packages to `^2.16.8`
- Moves and formats the `@tanstack/react-query` dependency for consistency
- Adds a `.changeset` file to track the patch release

### Reviewed Changes

Copilot reviewed 3 out of 3 changed files in this pull request and generated 1 comment.

| File                              | Description                                                      |
| --------------------------------- | ---------------------------------------------------------------- |
| examples/with-remix/package.json  | Updated Remix-related package versions and reordered dependencies |
| .changeset/upgrade-remix-example.md | Added a changeset entry for the example upgrade                 |



"
3118888006,2898052412,pakrym-oai,APPROVED,2025-06-04T20:42:40Z,
3165622491,2948389302,devgony,APPROVED,2025-06-23T00:00:08Z,Thank you for adding new data types and handling schemaless tests !
3073705436,2850624759,ellipsis-dev[bot],COMMENTED,2025-05-19T12:40:34Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 7ad9ffc378801cee85a8ae33ac5af2d9e94a90dc in <ellipsistime>58 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `91` lines of code in `7` files
> - Skipped `0` files when reviewing.
> - Skipped posting `7` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>agents-api/agents_api/activities/task_steps/base_evaluate.py:37</code></summary>
> 
> - **Draft comment:** 
> Good fix: using a tuple for isinstance on (int, bool, float) is correct.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is purely informative, as it only praises the use of a tuple for isinstance without providing any actionable feedback or suggestions. It doesn't ask for confirmation or suggest any changes.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>agents-api/agents_api/common/utils/evaluator.py:170</code></summary>
> 
> - **Draft comment:** 
> Nice update – using tuple (list, tuple, str) in the isinstance check improves reliability.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is purely informative and does not provide any actionable feedback or suggestions for improvement. It simply states that using a tuple in the isinstance check improves reliability, which is not a necessary comment for the PR author.
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>agents-api/agents_api/common/utils/expressions.py:44</code></summary>
> 
> - **Draft comment:** 
> Correctly fixed the union check for numeric types; using a tuple ensures proper evaluation.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is purely informative and does not provide any actionable feedback or suggestions for improvement. It simply praises the change without offering any specific guidance or questions.
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>agents-api/agents_api/common/utils/task_validation.py:151</code></summary>
> 
> - **Draft comment:** 
> Good refactor: using tuple syntax for multiple AST node types improves clarity and avoids errors.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is purely informative and does not provide any actionable feedback or suggestions for improvement. It simply praises the refactor without offering any specific guidance or questions.
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>agents-api/agents_api/queries/utils.py:378</code></summary>
> 
> - **Draft comment:** 
> Using a tuple for isinstance in the list/tuple check is the proper fix.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `20%` <= threshold `50%` This comment is purely informative, as it praises the use of a tuple for `isinstance` without providing any actionable feedback or suggestions. It doesn't ask for confirmation or suggest any changes, so it doesn't violate the rules directly, but it doesn't add value to the review process either.
> 
> 
> </details>
> 
> <details>
> <summary>6. <code>agents-api/agents_api/web.py:66</code></summary>
> 
> - **Draft comment:** 
> Correct union fix in exception check improves type safety.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is purely informative and does not provide any actionable feedback or suggestions for improvement. It simply states that a change is good, which violates the rule against making purely informative comments.
> 
> 
> </details>
> 
> <details>
> <summary>7. <code>agents-api/agents_api/workflows/task_execution/__init__.py:752</code></summary>
> 
> - **Draft comment:** 
> The updated isinstance check for CancelledError and AsyncioCancelledError is correct.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_6abRfjZh22ipwAcQ`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3121392709,2900493442,ellipsis-dev[bot],COMMENTED,2025-06-05T14:05:20Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to d10e7d3c73352332eafb08996bc37989b50bc759 in <ellipsistime>42 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `13` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `1` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>.pre-commit-config.yaml:16</code></summary>
> 
> - **Draft comment:** 
> Updated hook id to 'check-python-versions' (plural) to match the correct pre-commit hook identifier.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is purely informative, as it just states what was done without providing any suggestion, question, or request for confirmation. It doesn't align with the rules for useful comments.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_TEapvhbOFt1D2TMQ`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3071165159,2848827405,sourcery-ai[bot],COMMENTED,2025-05-18T08:53:01Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟡 **General issues**: 2 issues found
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3071165159,2849190537,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-19T01:29:00Z,"## Pull Request Overview

This PR refactors calls to `process.exit()` to instead set `process.exitCode` (and early returns) or throw errors, improving testability and error handling.

- Replace direct `process.exit()` invocations with `process.exitCode` assignments and `return` or `throw`
- Update tests to assert on `process.exitCode` or thrown errors instead of process termination
- Adjust `loadFromPackage` and config loading to throw on invalid states instead of exiting

### Reviewed Changes

Copilot reviewed 22 out of 22 changed files in this pull request and generated 1 comment.

<details>
<summary>Show a summary per file</summary>

| File                                           | Description                                                                 |
| ---------------------------------------------- | --------------------------------------------------------------------------- |
| test/providers/packageParser.test.ts           | Added test case for missing entity and switched to thrown error assertions |
| test/globalConfig/accounts.test.ts             | Updated tests to clear and assert on `process.exitCode`                     |
| src/util/config/load.ts                        | Replaced `process.exit` with thrown `Error` for config validation failures  |
| src/server/server.ts                           | Switched server startup failure paths to set `process.exitCode`             |
| src/redteam/commands/*.ts                      | Updated multiple redteam commands to use `process.exitCode` and early return|
| src/providers/packageParser.ts                 | Changed exit to throwing `Error` and refined catch handling                 |
| src/onboarding.ts                              | Replaced `process.exit` with setting `process.exitCode`                     |
| src/globalConfig/accounts.ts                   | Updated email-status check to set `process.exitCode` and early return       |
| src/commands/modelScan.ts                      | Updated model scan command to set `process.exitCode` and return             |
| src/commands/{import,export,delete}.ts         | Switched import/export/delete commands to set `process.exitCode`            |
| scripts/replace-keys.js                        | Set `process.exitCode` instead of `process.exit` on script failure          |
| examples/.../dataset_loader.ts                 | Replaced `process.exit` with setting `process.exitCode` in example          |
| eslint.config.mjs                              | Expanded ignore patterns for new example and script files                  |
</details>



<details>
<summary>Comments suppressed due to low confidence (4)</summary>

**test/globalConfig/accounts.test.ts:186**
* After testing the warning and fetch-error branches, add assertions that `process.exitCode` remains `undefined` to ensure those paths do not set an exit code.
```
process.exitCode = undefined;
```
**src/providers/packageParser.ts:48**
* Wrapping all errors as a generic `Package not found` loses the original error context. Consider including the original error as a `cause` or appending its message for better debugging.
```
throw new Error(`Package not found: ${packageName}. Make sure it's installed in ${basePath}`);
```
**test/providers/packageParser.test.ts:104**
* The test references `mockFunctionName`, but this constant is never defined in the test. Declare `const mockFunctionName = 'someOtherFunction';` (matching the mocked export) before using it.
```
await expect(promise).rejects.toThrow(
```
**src/util/config/load.ts:468**
* [nitpick] Throwing generic `Error` makes it harder for callers to differentiate failure modes. Consider defining and throwing custom error types (e.g., `ConfigValidationError`) for clearer API design and better error handling.
```
throw new Error('You must provide --model-outputs when using --assertions');
```
</details>

"
3071165159,2849191964,mldangelo,COMMENTED,2025-05-19T01:30:56Z,
3071165159,2850949134,will-holley,COMMENTED,2025-05-19T14:19:23Z,This is a significant change. What is its motivation?
3071165159,2851000726,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-19T14:34:22Z,"## Pull Request Overview

This PR refactors the codebase to eliminate direct `process.exit()` calls, replacing them with assignments to `process.exitCode`, early `return`s, or thrown errors, and updates tests to assert on `process.exitCode` instead of spying on `process.exit()`.  

- Swap out `process.exit()` for `process.exitCode` (and early `return` where needed) across commands and utility modules.  
- Change configuration loader to throw user-facing errors instead of exiting directly.  
- Update unit tests to reset and assert on `process.exitCode`, and adjust mocks accordingly.

### Reviewed Changes

Copilot reviewed 21 out of 21 changed files in this pull request and generated 1 comment.

<details>
<summary>Show a summary per file</summary>

| File                                        | Description                                                |
| ------------------------------------------- | ---------------------------------------------------------- |
| test/redteam/strategies/index.test.ts       | Updated exit assertions to use `process.exitCode`          |
| test/providers/packageParser.test.ts        | Added `logger.error` spy and error-case test               |
| test/globalConfig/accounts.test.ts          | Reset and assert on `process.exitCode` in email tests      |
| src/util/config/load.ts                     | Replaced `process.exit()` calls with `throw Error`         |
| src/server/server.ts                        | Converted exit calls to `process.exitCode` without exiting|
| src/redteam/strategies/index.ts             | Set `process.exitCode` and early return on invalid input   |
| src/redteam/commands/poison.ts              | Swapped exit to `process.exitCode`                         |
| src/redteam/commands/init.ts                | Converted `process.exit(130)` to `process.exitCode = 130`  |
| src/redteam/commands/generate.ts            | Use `process.exitCode` and early `return` on validation    |
| src/redteam/commands/discover.ts            | Use `process.exitCode` with early return in error branches |
| src/providers/packageParser.ts              | Threw errors instead of exiting on missing packages/entity |
| src/onboarding.ts                           | Converted `process.exit(130)` to setting `exitCode`        |
| src/globalConfig/accounts.ts                | Early `return` after setting `process.exitCode`            |
| src/commands/modelScan.ts                   | Swapped exit to `process.exitCode` and early returns       |
| src/commands/import.ts                      | Converted exit to `process.exitCode`                       |
| src/commands/export.ts                      | Set `exitCode` and early return instead of exit            |
| src/commands/delete.ts                      | Converted exit to `process.exitCode`                       |
| scripts/replace-keys.js                     | Changed exit to setting `process.exitCode`                 |
| examples/huggingface-dataset-factuality/dataset_loader.ts | Swapped exit to `process.exitCode`                 |
| eslint.config.mjs                           | Added new paths to ignore                                    |
</details>



<details>
<summary>Comments suppressed due to low confidence (3)</summary>

**src/util/config/load.ts:552**
* [nitpick] Confirm that the example string `openai:gpt-4.1` matches supported provider versions and is consistent with documentation to avoid user confusion.
```
throw new Error('You must specify at least 1 provider (for example, openai:gpt-4.1)');
```
**test/providers/packageParser.test.ts:109**
* If this assertion fails, `errorLogSpy.mockRestore()` may not execute. Consider using `afterEach` or a `try/finally` block to always restore mocks and avoid test pollution.
```
expect(errorLogSpy).toHaveBeenCalledWith(dedent`
```
**src/util/config/load.ts:468**
* Since `resolveConfigs` now throws errors instead of exiting, ensure the top-level CLI entrypoint catches these errors to set `process.exitCode` and log the message, preventing unhandled promise rejections.
```
throw new Error('You must provide --model-outputs when using --assertions');
```
</details>

"
3071165159,2851996833,sklein12,COMMENTED,2025-05-19T21:04:26Z,
3121392248,2904647553,ChrisHuie,APPROVED,2025-06-06T11:30:05Z,
3143219464,2924490981,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-13T11:30:41Z,"## Pull Request Overview

This PR introduces a new type hierarchy tool and its accompanying test coverage while also enabling typeHierarchy capability across various language servers. Key changes include:
- Adding the TypeHierarchyTool and related symbol conversion logic to the Serena agent.
- Extending the language server initialization parameters and adding asynchronous and synchronous interfaces for type hierarchy requests.
- Updating tests across multiple languages to conditionally skip non-Python language server tests.

### Reviewed Changes

Copilot reviewed 16 out of 16 changed files in this pull request and generated 2 comments.

<details>
<summary>Show a summary per file</summary>

| File                                                            | Description                                                                                        |
| --------------------------------------------------------------- | -------------------------------------------------------------------------------------------------- |
| test/serena/test_serena_agent.py                                | Added tests for the new type hierarchy tool.                                                     |
| test/multilspy/typescript/test_typescript_basic.py              | Added skip logic for non-Python tests.                                                           |
| test/multilspy/rust/test_rust_basic.py, test/multilspy/php/test_php_basic.py, test/multilspy/java/test_java_basic.py, test/multilspy/go/test_go_basic.py | Added similar skip logic for non-Python tests.                                                   |
| test/multilspy/python/test_symbol_retrieval.py                   | Expanded test coverage by adding type hierarchy request validations.                             |
| src/serena/symbol.py                                             | Introduced from_type_hierarchy_item for constructing Symbol instances from LSP type hierarchy items.|
| src/serena/agent.py                                              | Added the TypeHierarchyTool to expose type hierarchy features.                                   |
| Various language server JSON files                               | Updated initialize parameters to enable typeHierarchy capability.                                |
| src/multilspy/language_server.py                                 | Added asynchronous and synchronous wrappers for type hierarchy requests.                         |
</details>




"
3119377838,2898341431,ellipsis-dev[bot],COMMENTED,2025-06-04T23:30:45Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 76299204cd52194e3449833cbd882419a43d55c5 in <ellipsistime>47 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `23` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/onlook-dev/settings/code-review) and [rules](https://app.ellipsis.dev/onlook-dev/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>AGENTS.md:1</code></summary>
> 
> - **Draft comment:** 
> Consider renaming the title to 'Automated Agents Contribution Guidelines' to clearly indicate the document's purpose.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>AGENTS.md:16</code></summary>
> 
> - **Draft comment:** 
> Verify that the referenced CODE_OF_CONDUCT.md and CONTRIBUTING.md exist and the relative links remain accurate.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_gvICK28o3Znna39g`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=onlook-dev%2Fonlook&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/onlook-dev/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/onlook-dev/code-review/rules).</sup>"
3111640319,2889950915,sourcery-ai[bot],COMMENTED,2025-06-02T21:10:59Z,"Hey @mldangelo - I've reviewed your changes - here's some feedback:

- The `description` values are mostly just repeating the folder name and aren’t very informative—consider writing concise, context‐rich descriptions that explain what each example actually demonstrates.
- There are inconsistencies in capitalization (e.g. “Csv Metadata” vs “CSV Metadata”) across the `description` fields—please standardize the formatting for clarity.
- Double‐check that the config schema supports the new `description` field and update any validation or CI checks so these additions don’t cause schema validation failures.

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3111640319,2889944128,greptile-apps[bot],COMMENTED,2025-06-02T21:15:14Z,"<sub>60 file(s) reviewed, 39 comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=promptfoo_4283)</sub>"
3121929184,2901122933,greptile-apps[bot],COMMENTED,2025-06-05T16:56:36Z,"<sub>2 file(s) reviewed, 1 comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=promptfoo_4346)</sub>"
3121929184,2901134336,sourcery-ai[bot],COMMENTED,2025-06-05T16:58:09Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3083541646,2917552451,Swiftyos,APPROVED,2025-06-11T14:44:19Z,I've tested this change locally and it works fine as it matches the .env value
3085510774,2864936746,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-23T16:02:22Z,"## Pull Request Overview

This PR enhances the action viewer component by displaying the action’s state in a collapsible sidebar, exporting the ActionCard for testing, and adding a unit test for verifying the state toggle behavior.
- Updated the action viewer to include a collapsible display section for the state.
- Exported ActionCard to be accessible for unit testing.
- Added a test case to validate state rendering and toggling.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated 2 comments.

| File | Description |
| ---- | ----------- |
| packages/client/src/components/action-viewer.tsx | Added imports and a new collapsible section to display the action state |
| packages/client/src/components/__tests__/action-viewer.test.tsx | Introduced a unit test to verify the state toggle functionality |



"
3104051432,2884113366,ChrisHuie,APPROVED,2025-05-31T13:42:33Z,
3151584697,2933819545,seratch,APPROVED,2025-06-17T00:20:40Z,
3119913043,2898930586,greptile-apps[bot],COMMENTED,2025-06-05T05:36:32Z,"<sub>5 file(s) reviewed, 1 comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=promptfoo_4330)</sub>"
3119913043,2898933876,sourcery-ai[bot],COMMENTED,2025-06-05T05:38:13Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3119913043,2919622413,coderabbitai[bot],COMMENTED,2025-06-12T05:49:37Z,"**Actionable comments posted: 0**

<details>
<summary>🔭 Outside diff range comments (1)</summary><blockquote>

<details>
<summary>src/validators/redteam.ts (1)</summary><blockquote>

`36-45`: _🛠️ Refactor suggestion_

**Unreachable `superRefine` logic – customise error message via `errorMap` instead**  

`z.enum(pluginOptions)` guarantees the value is already in `pluginOptions`; therefore the subsequent `superRefine` branch (lines 38-44 & 74-80) can never execute, so the custom “Invalid plugin name” message is dead code.  
Switch to an `errorMap` on the enum (or drop the extra `superRefine`) to emit the intended message:

```diff
- z.enum(pluginOptions as [string, ...string[]]).superRefine((val, ctx) => {
-   if (!pluginOptions.includes(val)) {
-     ctx.addIssue({
-       code: z.ZodIssueCode.invalid_enum_value,
-       options: pluginOptions,
-       received: val,
-       message: `Invalid plugin id. Must be one of: ${pluginOptions.join(', ')} (or a path starting with file://)`,
-     });
-   }
- }),
+ z.enum(pluginOptions as [string, ...string[]], {
+   errorMap: () => ({
+     message: `Invalid plugin id. Must be one of: ${pluginOptions.join(', ')} (or a path starting with file://)`,
+   }),
+ }),
```

Make the same adjustment for the second schema (`RedteamPluginSchema`) to avoid code duplication and ensure the custom message is always emitted.



Also applies to: 46-53, 72-81, 82-89

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>test/redteam/validators.test.ts (1)</summary><blockquote>

`164-175`: **Prefer asserting the dynamic id substring for stronger guarantees**

You now check that the message merely contains “Invalid plugin id”.  
Since the validator injects the offending id into the message, asserting that the message also includes the invalid value would make the tests stricter and prevent accidental regressions:

```diff
-expect(errorMessage).toContain('Invalid plugin id');
+expect(errorMessage).toContain('Invalid plugin id');
+expect(errorMessage).toContain('hate');           // or whichever bad id was supplied
```

Repeat for the other two similar tests.



Also applies to: 185-188, 201-204

</blockquote></details>
<details>
<summary>src/util/config/load.ts (1)</summary><blockquote>

`165-183`: **Duplicate error-filter logic – extract helper to DRY up**

The red-team-plugin error filtering block is duplicated for YAML/JSON and JS config branches.  Pulling it into a small helper keeps the function concise and eliminates the risk of the two paths diverging:

```diff
+const filterRedteamPluginErrors = async (zodErr: import('zod').ZodError) => {
+  const filtered = zodErr.issues.filter(
+    (e) =>
+      !(
+        e.path.includes('redteam') &&
+        e.path.includes('plugins') &&
+        e.message.includes('Invalid plugin id')
+      ),
+  );
+  if (filtered.length === 0) return;
+  const { ZodError } = await import('zod');
+  const { fromError } = await import('zod-validation-error');
+  logger.warn(
+    `Invalid configuration file ${configPath}:\n${fromError(new ZodError(filtered)).message}`,
+  );
+};
```

Then replace both duplicated blocks with `await filterRedteamPluginErrors(validationResult.error);`.

Keeps `readConfig` shorter and easier to reason about.



Also applies to: 189-207

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 297af8277e2037786ea3f5bf66200a2a168f5efa and e0f16cfb0d8b3d49c9c22ba68bb47b013da8d600.

</details>

<details>
<summary>📒 Files selected for processing (6)</summary>

* `site/static/config-schema.json` (2 hunks)
* `src/util/config/load.ts` (1 hunks)
* `src/validators/redteam.ts` (2 hunks)
* `test/fetch.test.ts` (0 hunks)
* `test/redteam/validators.test.ts` (4 hunks)
* `test/validators/redteam.test.ts` (1 hunks)

</details>

<details>
<summary>💤 Files with no reviewable changes (1)</summary>

* test/fetch.test.ts

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>📓 Path-based instructions (1)</summary>

<details>
<summary>`src/**`: - This is a CLI tool so errors need to be handled gracefully and logged with lots of information so the user can give us enough data to fix the issue or pass it to the de...</summary>

> `src/**`: - This is a CLI tool so errors need to be handled gracefully and logged with lots of information so the user can give us enough data to fix the issue or pass it to the developers.
> 

- `src/validators/redteam.ts`
- `src/util/config/load.ts`

</details>

</details><details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>test/validators/redteam.test.ts (1)</summary><blockquote>

<details>
<summary>src/validators/redteam.ts (1)</summary>

* `RedteamConfigSchema` (175-389)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (21)</summary>

* GitHub Check: Tusk Test Runner
* GitHub Check: Tusk Tester
* GitHub Check: webui tests
* GitHub Check: Build Docs
* GitHub Check: Redteam Custom Enterprise Server
* GitHub Check: Test on Node 18.x and macOS-latest
* GitHub Check: Style Check
* GitHub Check: Test on Node 24.x and macOS-latest
* GitHub Check: Test on Node 24.x and ubuntu-latest
* GitHub Check: Test on Node 20.x and macOS-latest
* GitHub Check: Test on Node 20.x and windows-latest
* GitHub Check: Test on Node 22.x and macOS-latest
* GitHub Check: Test on Node 18.x and windows-latest
* GitHub Check: Test on Node 18.x and ubuntu-latest
* GitHub Check: Build on Node 24.x
* GitHub Check: Build on Node 18.x
* GitHub Check: Share Test
* GitHub Check: Build on Node 22.x
* GitHub Check: Redteam
* GitHub Check: Build on Node 20.x
* GitHub Check: Analyze (javascript-typescript)

</details>

<details>
<summary>🔇 Additional comments (3)</summary><blockquote>

<details>
<summary>test/validators/redteam.test.ts (1)</summary>

`112-113`: **Assertion update LGTM**

The expectation now targets the new “Invalid plugin id” phrasing introduced by the validator.  Looks consistent with the upstream change.

</details>
<details>
<summary>site/static/config-schema.json (2)</summary>

`1189-1189`: **Removed pattern constraint from string plugin ID type**  
The `pattern` requirement on the free-form string alternative in the `plugins` array was removed so any string is now accepted. This aligns with the updated custom refinement in `redteam.ts` that now emits standardized errors for invalid IDs.

---

`1363-1363`: **Removed pattern constraint from plugin object `id` field**  
Dropped the `pattern` restriction on the `id` property of plugin objects to defer all prefix and format validation to the new runtime refinement logic.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3114802893,2893440757,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-03T17:28:40Z,"## Pull Request Overview

This PR adds defensive handling for non-class typing constructs in `BaseType.extract_custom_type_from_annotation` to avoid `TypeError` from `issubclass`.

- Imports `inspect` and uses `inspect.isclass` instead of `isinstance`
- Wraps `issubclass` in a `try/except TypeError` to return early on invalid types


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**dspy/adapters/types/base_type.py:56**
* Add a unit test case for an annotation that triggers this `TypeError` path (e.g., `typing.Any` or a `TypeAlias`) to verify the guard behaves as expected.
```
return []
```
</details>

"
3101812694,2913062049,diogob,APPROVED,2025-06-10T11:02:47Z,LGTM
3129133917,2908912716,greptile-apps[bot],COMMENTED,2025-06-09T04:54:28Z,"
## PR Summary

Added a floating Stop Generation button with configurable partial result handling modes and keyboard shortcut (CMD+Delete) integration.

- The StopGenerationButton text uses `.gray200` color which aligns with dark mode requirements for text visibility
- Added `StopMode` enum to handle partial generation results with `.removePartial` as default in UserDefaults
- Floating button is positioned in bottom-right corner which might interfere with resizing handle - consider adjusting padding
- Proper global coordinate space handling in ChatView overlay for floating button positioning
- Floating button appears conditionally via `state.generatingPrompt != nil` check, ensuring clean state management

<sub>5 file(s) reviewed, 3 comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=onit_268)</sub>"
3129133917,2918149247,timlenardo,COMMENTED,2025-06-11T17:40:11Z,
3129133917,2918149466,timlenardo,COMMENTED,2025-06-11T17:41:53Z,
3129133917,2920879295,lk340,CHANGES_REQUESTED,2025-06-12T12:11:18Z,"1. App crashes when trying to resubmit a stopped prompt (doesn’t crash when stopping *first* prompt, though). Repro:
    1. Submit “Please summarize the entirety of the Naruto anime.”, and let it finish.
    2. Submit “Please summarize the entirety of the Bleach anime.”, wait a few seconds, and stop generation midway (either through clicking on the “Stop” button or with the “cmd+delete” hotkey - doesn’t matter which).
    3. Try to resubmit the above prompt after stopping. Crash happens at this step.

2. Nits:
    - No hover state on stop button.
    - Scroll arrow button takes up its own horizontal space that cuts off the bottom of the chat view, rather than [floating over it](https://www.figma.com/design/EP1rawvwdFlmO4DPSn7F4U/Onit-Product?node-id=9418-4383&t=OBm1MAZx8V1gw6rr-0)."
3129133917,2925753610,lk340,APPROVED,2025-06-13T17:53:50Z,"Thanks for the updates! LGTM!

Just leaving some comments for tiny nits"
3129133917,2925757059,lk340,COMMENTED,2025-06-13T17:55:23Z,
3129133917,2925757195,lk340,COMMENTED,2025-06-13T17:55:27Z,
3129133917,2925757309,lk340,COMMENTED,2025-06-13T17:55:30Z,
3129133917,2925778059,timlenardo,COMMENTED,2025-06-13T18:03:16Z,
3129133917,2925779272,timlenardo,COMMENTED,2025-06-13T18:03:28Z,
3129133917,2925780768,timlenardo,COMMENTED,2025-06-13T18:03:44Z,
3070861271,2907061839,ellipsis-dev[bot],COMMENTED,2025-06-07T07:35:31Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to c84c2c1b65cd7624aa4ee673fbc2a410b023375b in <ellipsistime>25 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `14` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `1` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>agents-api/agents_api/__init__.py:6</code></summary>
> 
> - **Draft comment:** 
> Clean removal of unused code block. The removed msgpack import and related workflow wrapper (along with its comment) are unnecessary if not used elsewhere.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_MLS5pj6qBkUVNGIZ`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3151448748,2933636912,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-16T22:02:46Z,"## Pull Request Overview

Adds unit tests for the `convertLangChainMessages` helper to validate its behavior across different message types.

- Introduces tests for converting system, human (with rich content), AI (with tool calls), and tool messages.
- Verifies correct mapping of content fields and tool call properties.


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**packages/react-langgraph/src/convertLangChainMessages.test.ts:86**
* Consider adding tests for edge cases, such as AI messages without tool calls, messages that only use `tool_call_chunks`, and tool messages with a successful status (e.g., status != 'error'), to ensure full coverage.
```
});
```
</details>

"
3151448748,2933636096,greptile-apps[bot],COMMENTED,2025-06-16T22:02:48Z,"
## PR Summary
Added new test file `packages/react-langgraph/src/convertLangChainMessages.test.ts` to provide unit test coverage for the message conversion functionality from LangChain to AssistantUI formats.

- Implements test coverage for all four message types (system, human, ai, tool) with corresponding message structure validation
- Tests various content types including text, image_url, and tool_calls with appropriate assertions
- Tests null filtering behavior in contentToParts function for proper content array handling
- Validates error handling for unknown message types and content formats
- Verifies tool message processing with error status and artifact handling

<sub>1 file reviewed, no comments</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=assistant-ui_2110)</sub>"
3151448748,2933638818,coderabbitai[bot],COMMENTED,2025-06-16T22:04:02Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (3)</summary><blockquote>

<details>
<summary>packages/react-langgraph/src/convertLangChainMessages.test.ts (3)</summary><blockquote>

`1-4`: **Fix formatting with Prettier**  
The pipeline indicates a Prettier formatting failure. Run `prettier --write` on this file to align with the code style guidelines.

---

`12-30`: **Use `toStrictEqual` for stricter equality checks**  
Switching from `toEqual` to `toStrictEqual` would catch unexpected extra properties in the output object.

---

`32-64`: **Consider adding tests for `tool_call_chunks` edge cases**  
It may be valuable to add cases with multiple or out-of-order chunks to ensure the conversion logic handles streaming or partial tool-call chunks correctly.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 644abb8beadcdf9981d55b53094857765ab0fcf3 and 336411679f8bc262991791c57217ee4d2ecc2da2.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `packages/react-langgraph/src/convertLangChainMessages.test.ts` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 GitHub Actions: Code Quality</summary>

<details>
<summary>packages/react-langgraph/src/convertLangChainMessages.test.ts</summary>

[warning] 1-1: Prettier formatting check failed. Run 'prettier --write' to fix code style issues.

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (2)</summary>

* GitHub Check: cubic · AI code reviewer
* GitHub Check: Analyze (javascript-typescript)

</details>

<details>
<summary>🔇 Additional comments (4)</summary><blockquote>

<details>
<summary>packages/react-langgraph/src/convertLangChainMessages.test.ts (4)</summary>

`5-10`: **System message conversion test is solid**  
The test accurately verifies that a system message is converted to a `role: ""system""` message with text content in the correct format.

---

`12-30`: **Rich content mapping is correct**  
The human message test properly checks the transformation of text and image URL content into the expected `user` role format.

---

`32-64`: **AI message with tool calls test covers core functionality**  
This test correctly asserts the inclusion of both text and `tool-call` objects for the assistant role.

---

`66-85`: **Verify `id` inclusion in tool message output**  
The expected result omits the original `id` field for tool messages. Confirm whether `convertLangChainMessages` should include the message `id` in the output or if its omission is intentional, and update the test accordingly.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3151448748,2933641621,cubic-dev-ai[bot],COMMENTED,2025-06-16T22:05:51Z,cubic reviewed 1 file and found no issues. Review PR in [cubic.dev](https://cubic.dev/pr/assistant-ui/assistant-ui/pull/2110).
3104315713,2884332706,sourcery-ai[bot],COMMENTED,2025-05-31T16:55:10Z,"Hey @mldangelo - I've reviewed your changes - here's some feedback:

- Extract the ""!highlight"" prefix and trimming logic into a shared constant or helper function (or custom hook) to avoid duplicating parsing/formatting code across the component.
- Consider simplifying the state management by deriving commentText and highlighted directly when opening the dialog (instead of syncing via useEffect) to reduce complexity and prevent unexpected resets during editing.

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3104315713,2884332737,ellipsis-dev[bot],COMMENTED,2025-05-31T16:55:21Z,
3119737498,2898770818,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-05T03:44:07Z,"## Pull Request Overview

A concise fix for the logger formatting in the ParseHTTPGetParams function.
- Update logger usage to correctly insert the URL into the log message.
- Ensure the logger call now uses a format string with the '%s' placeholder.


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**pkg/deviceshifu/utils/utils.go:17**
* The logger call now correctly uses a format string with '%s' to include the URL parameter, ensuring the output is correctly formatted. Please verify that the logger package supports this usage according to its documentation.
```
logger.Infof(""url: %s"", urlStr)
```
</details>

"
3070320313,2848357199,AHarmlessPyro,APPROVED,2025-05-17T17:23:40Z,LGTM
3138202046,2918831663,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-11T21:50:53Z,"## Pull Request Overview

This PR upgrades Vite to version 6.3.5 and updates related dependencies to support the newer version. Key changes include updating the vite version in the root package.json, upgrading @vitejs/plugin-react in the with-vite example, and updating react-router related packages in the with-react-router example.

### Reviewed Changes

Copilot reviewed 4 out of 4 changed files in this pull request and generated no comments.

| File                                    | Description                                                             |
| --------------------------------------- | ----------------------------------------------------------------------- |
| package.json                            | Update vite version to 6.3.5.                                             |
| examples/with-vite/package.json         | Upgrade vite and @vitejs/plugin-react to versions compatible with Vite 6. |
| examples/with-react-router/package.json | Update vite and react-router packages to align with newer dependency versions. |



"
3131117949,2914099732,ahuber21,APPROVED,2025-06-10T15:26:55Z,
3131117949,2915785963,david-cortes-intel,APPROVED,2025-06-11T06:16:30Z,
3161314337,2944013720,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-19T20:55:22Z,"## Pull Request Overview

This pull request addresses the issues with symbol routing that occur when symbols contain slashes or other special characters. It implements URL encoding for symbols in multiple components and properly decodes them when reading from route parameters.
- Encode holding symbols in navigation links via encodeURIComponent.
- Update asset profile page to decode the encoded symbol.
- Apply these changes consistently across holdings, activity, and exchange rates components.

### Reviewed Changes

Copilot reviewed 6 out of 6 changed files in this pull request and generated no comments.

<details>
<summary>Show a summary per file</summary>

| File | Description |
| ---- | ----------- |
| src/pages/settings/general/exchange-rates/exchange-rates-settings.tsx | Encodes the identifier in the holdings link. |
| src/pages/holdings/components/holdings-table.tsx | Applies URL encoding to the symbol used in navigation. |
| src/pages/holdings/components/composition-chart.tsx | Encodes the symbol for hyperlink navigation. |
| src/pages/asset/asset-profile-page.tsx | Decodes the symbol retrieved from URL parameters after encoding. |
| src/pages/activity/components/editable-activity-table.tsx | Encodes the activity symbol in the holdings link. |
| src/pages/activity/components/activity-table.tsx | Encodes the symbol used in the holdings link for display. |
</details>



<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**src/pages/asset/asset-profile-page.tsx:58**
* Consider adding error handling (e.g., a try/catch block) around decodeURIComponent to manage potential exceptions from malformed or non-encoded inputs.
```
  const symbol = decodeURIComponent(encodedSymbol);
```
**src/pages/settings/general/exchange-rates/exchange-rates-settings.tsx:75**
* It would be beneficial to add tests to verify that navigation properly handles symbols with slashes or other special characters across all updated components.
```
        <Link to={`/holdings/${encodeURIComponent(row.original.id)}`} className=""flex items-center justify-center"">
```
</details>

"
3089289056,2866838694,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-25T13:05:35Z,"## Pull Request Overview

Align the policy creation schema and form with the intended form fields and server action  
- tighten up `createPolicySchema` validation messages and make array IDs optional  
- switch the form to use the exported `CreatePolicySchema` type and update its imports  
- adjust server action input destructuring to match the updated schema

### Reviewed Changes

Copilot reviewed 3 out of 3 changed files in this pull request and generated no comments.

| File                                                           | Description                                                      |
| -------------------------------------------------------------- | ---------------------------------------------------------------- |
| apps/app/src/components/forms/policies/create-new-policy.tsx   | Import and apply `CreatePolicySchema`, remove unused zod import  |
| apps/app/src/actions/schema.ts                                 | Improve `createPolicySchema` field validations, mark arrays optional, export type |
| apps/app/src/actions/policies/create-new-policy.ts             | Updated destructuring of `parsedInput` to reflect new schema     |


<details>
<summary>Comments suppressed due to low confidence (3)</summary>

**apps/app/src/actions/schema.ts:242**
* The updated `createPolicySchema` introduces optional fields `frameworkIds`, `controlIds`, and `entityId` but lacks corresponding unit tests. Consider adding schema validation tests to verify behavior when those fields are omitted or provided.
```
export const createPolicySchema = z.object({
```
**apps/app/src/components/forms/policies/create-new-policy.tsx:45**
* Removing default values for `frameworkIds` and `controlIds` can result in undefined array fields and uncontrolled form state. Consider re-adding them as `frameworkIds: []` and `controlIds: []` under `defaultValues` to ensure predictable handling.
```
const form = useForm<CreatePolicySchema>({
```
**apps/app/src/actions/policies/create-new-policy.ts:20**
* Dropped `frameworkIds` from the destructuring means any selected framework IDs won’t be passed to the create action. If frameworks are meant to be stored, include `frameworkIds` here and in the subsequent logic.
```
const { title, description, controlIds } = parsedInput;
```
</details>

"
3161436017,2944119814,gemini-code-assist[bot],COMMENTED,2025-06-19T22:14:19Z,"## Summary of Changes

Hello @gaby, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request primarily focuses on enhancing the test suite for the CORS middleware. I've introduced a new regression test to validate that a warning message is correctly emitted when the CORS configuration includes both a wildcard origin and a custom origin function, which helps prevent silent misconfigurations and improves developer awareness of how these settings interact.

### Highlights

* **New Test Case**: I've added a new regression test, `Test_CORS_Warn_AllowAllOrigins_WithFunc`, to specifically verify that a warning is logged when the CORS middleware is configured with both a wildcard `AllowOrigins` (e.g., `""*""`) and a custom `AllowOriginsFunc`. In such a scenario, the `AllowOriginsFunc` is effectively ignored, and the test ensures this behavior is correctly communicated via a log warning.
* **CORS Coverage**: This PR increases the test coverage for the CORS middleware by addressing an important configuration edge case, ensuring that developers are properly warned about potentially redundant or misunderstood settings.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configure Gemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3161436017,2944120622,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-19T22:14:47Z,"## Pull Request Overview

Adds a regression test to ensure a warning is logged when both wildcard origins and a custom `AllowOriginsFunc` are provided.

- Introduced `Test_CORS_Warn_AllowAllOrigins_WithFunc` to capture and assert the warning log.
- Imported `bytes`, `os`, and `fiber/v3/log` to redirect and inspect log output.



"
3161436017,2944121380,gemini-code-assist[bot],COMMENTED,2025-06-19T22:15:09Z,"## Code Review

This pull request adds a regression test to the CORS middleware, ensuring that a warning is logged when `AllowOrigins` is set to a wildcard and `AllowOriginsFunc` is also provided. The test is well-structured and verifies the expected warning message."
3161436017,2944123703,coderabbitai[bot],COMMENTED,2025-06-19T22:16:19Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>middleware/cors/cors_test.go (1)</summary><blockquote>

`267-281`: **Good test structure with potential for improved assertion robustness.**

The test correctly implements a regression test for the warning scenario and follows good practices:
- Proper log output capture and restoration using `t.Cleanup`
- Tests the exact configuration mentioned in the PR objectives
- Clear test intent and structure

However, consider improving the assertion for better robustness:


The current assertion checks for a partial message that could be fragile:

```diff
-	require.Contains(t, buf.String(), ""AllowOriginsFunc' will not be used"")
+	require.Contains(t, buf.String(), ""AllowOriginsFunc will not be used when AllowOrigins is '*'"")
```

This would make the test more specific and less prone to false positives if the message format changes slightly.


Please verify that this test actually triggers the warning by running it and ensuring the CORS middleware implementation logs the expected message for this configuration.

```shell
#!/bin/bash
# Description: Run the specific test to verify it captures the expected warning
cd middleware/cors
go test -v -run ""Test_CORS_Warn_AllowAllOrigins_WithFunc""
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 3b2af61152d0dc9bb75bd9451e506274266b638e and 9516bd26ee173c39e3a55e3b4c1267c28f48ef68.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `middleware/cors/cors_test.go` (2 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (9)</summary>

* GitHub Check: unit (1.24.x, macos-13)
* GitHub Check: unit (1.24.x, ubuntu-latest)
* GitHub Check: unit (1.24.x, macos-latest)
* GitHub Check: unit (1.24.x, windows-latest)
* GitHub Check: Compare
* GitHub Check: repeated
* GitHub Check: lint
* GitHub Check: Analyse
* GitHub Check: govulncheck-check

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>middleware/cors/cors_test.go (1)</summary>

`4-4`: **LGTM: Necessary imports for log capture functionality.**

The added imports (`bytes`, `os`, and `log`) are appropriately used in the new test function for capturing and verifying log output.




Also applies to: 6-6, 11-11

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3161436017,2944131923,github-actions[bot],COMMENTED,2025-06-19T22:26:24Z,"<!-- github-benchmark-action-comment(start): Benchmark Alert -->
# :warning: **Performance Alert** :warning:

Possible performance regression was detected for benchmark.
Benchmark result of this commit is worse than the previous benchmark result exceeding threshold `1.50`.

| Benchmark suite | Current: 9516bd26ee173c39e3a55e3b4c1267c28f48ef68 | Previous: 3b2af61152d0dc9bb75bd9451e506274266b638e | Ratio |
|-|-|-|-|
| `Benchmark_Utils_GetOffer/6_offers` | `223.3` ns/op	       0 B/op	       0 allocs/op | `130` ns/op	       0 B/op	       0 allocs/op | `1.72` |
| `Benchmark_Utils_GetOffer/6_offers - ns/op` | `223.3` ns/op | `130` ns/op | `1.72` |
| `Benchmark_SlashRecognition/indexBytes` | `7.904` ns/op	       0 B/op	       0 allocs/op | `4.982` ns/op	       0 B/op	       0 allocs/op | `1.59` |
| `Benchmark_SlashRecognition/indexBytes - ns/op` | `7.904` ns/op | `4.982` ns/op | `1.59` |
| `Benchmark_GenericParseTypeBytes/benchmark_genericParseTypeBytes#01` | `35.21` ns/op	       8 B/op	       1 allocs/op | `21.17` ns/op	       8 B/op	       1 allocs/op | `1.66` |
| `Benchmark_GenericParseTypeBytes/benchmark_genericParseTypeBytes#01 - ns/op` | `35.21` ns/op | `21.17` ns/op | `1.66` |

This comment was automatically generated by [workflow](https://github.com/gofiber/fiber/actions?query=workflow%3ABenchmark) using [github-action-benchmark](https://github.com/marketplace/actions/continuous-benchmark).
<!-- github-benchmark-action-comment(end): Benchmark Alert -->"
3161436017,2944149420,sixcolors,APPROVED,2025-06-19T22:45:25Z,
3161436017,2944759849,ReneWerner87,APPROVED,2025-06-20T06:46:58Z,
3122513050,2902733091,patmmccann,COMMENTED,2025-06-05T22:31:08Z,
3122513050,2904898158,patmmccann,COMMENTED,2025-06-06T13:17:58Z,
3122513050,2905611650,patmmccann,COMMENTED,2025-06-06T17:40:30Z,
3122513050,2905613755,patmmccann,COMMENTED,2025-06-06T17:41:33Z,
3122513050,2907353894,patmmccann,COMMENTED,2025-06-07T12:51:55Z,
3122513050,2910094678,patmmccann,COMMENTED,2025-06-09T13:35:14Z,
3122513050,2910167563,patmmccann,COMMENTED,2025-06-09T14:00:01Z,
3122513050,2910169103,patmmccann,COMMENTED,2025-06-09T14:00:34Z,
3122513050,2910171149,patmmccann,COMMENTED,2025-06-09T14:01:12Z,
3122513050,2911669078,patmmccann,COMMENTED,2025-06-10T00:24:41Z,
3122513050,2911694172,philipwatson,COMMENTED,2025-06-10T00:50:09Z,
3122513050,2913281043,patmmccann,COMMENTED,2025-06-10T12:09:12Z,
3122513050,2913799448,dgirardi,COMMENTED,2025-06-10T14:25:14Z,
3122513050,2914551244,dgirardi,APPROVED,2025-06-10T17:47:11Z,
3098874684,2876870744,nektro,APPROVED,2025-05-29T02:27:07Z,
3080054616,2857544513,ReneWerner87,APPROVED,2025-05-21T12:34:07Z,
3075729468,2853575299,AenBleidd,APPROVED,2025-05-20T10:09:49Z,
3075729468,2853576142,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-20T10:10:07Z,"## Pull Request Overview

This PR standardizes the spacing of if statements to conform to the “if (condition)” style as specified by the coding style guidelines.  
- Updated various if statements to include a space between the if keyword and its opening parenthesis.  
- Maintained consistency across conditional blocks in client/hostinfo_win.cpp.



"
3070950635,2848358018,ellipsis-dev[bot],COMMENTED,2025-05-17T17:28:36Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to f42e56f067a0fd0e859f7e3b5d1f28abe7953d29 in <ellipsistime>1 minute and 32 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `102` lines of code in `4` files
> - Skipped `0` files when reviewing.
> - Skipped posting `3` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>cli/src/julep_cli/run.py:18</code></summary>
> 
> - **Draft comment:** 
> The task parameter is typed as UUID, which forces valid UUIDs. The docs use non-UUID examples (e.g. 'bad-id'). Consider switching to string type or updating docs for consistency.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>cli/README.md:969</code></summary>
> 
> - **Draft comment:** 
> The error handling example uses '--task invalid-id'; ensure this example aligns with the UUID requirement if not updated.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 0% vs. threshold = 50% The example is meant to demonstrate error handling behavior when a task is not found. Using ""invalid-id"" clearly communicates this purpose to readers. There's no evidence in the documentation that task IDs must be UUIDs - in fact, the docs show that tasks can be referenced by ""id or name"" (line 952). The current example is more readable and serves its educational purpose well. The comment assumes task IDs must be UUIDs without evidence. The documentation actually contradicts this by stating tasks can be referenced by name. The current example using ""invalid-id"" is more readable and aligns with the documented behavior that tasks can be referenced by name or ID. Delete the comment. The current example is clear and correct according to the documentation, and changing it to a UUID would make it less readable without adding value.
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>documentation/julepcli/commands.mdx:257</code></summary>
> 
> - **Draft comment:** 
> The example uses '--task bad-id', which may conflict with the UUID requirement. Please update for consistency with the run command implementation.
> - **Reason this comment was not posted:**
> Comment looked like it was already resolved.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_7pgGoR0F8pp5aCoe`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3070950635,2907023219,github-advanced-security[bot],COMMENTED,2025-06-07T07:19:58Z,
3070950635,2907024774,ellipsis-dev[bot],COMMENTED,2025-06-07T07:20:53Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed 8e66a8fc4f670aa0feb94cd0cf6a56d7cd056e96 in <ellipsistime>1 minute and 39 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `146` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `4` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>.github/workflows/publish-cli-prerelease.yml:42</code></summary>
> 
> - **Draft comment:** 
> The grep/sed command for version extraction may not handle leading whitespace or format variations. Consider using a more robust regex.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 20% vs. threshold = 50% The current regex could fail if the pyproject.toml has extra whitespace. However, pyproject.toml files are typically machine-generated or follow strict formatting. The current regex works for the standard case. The suggestion is technically more robust but may be overengineering for this use case. The current version works and is simpler to read. The comment identifies a real edge case that could cause issues. If the pyproject.toml is hand-edited or formatted differently, the current regex could fail. While technically correct, this feels like premature optimization. The standard pyproject.toml format is very consistent, and the current regex handles the common case well. The comment should be removed. While technically valid, it suggests a more complex solution for an edge case that's unlikely to occur in practice, given the standardized nature of pyproject.toml files.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>.github/workflows/publish-cli-prerelease.yml:97</code></summary>
> 
> - **Draft comment:** 
> With the working directory set to './cli', 'packages-dir: cli/dist/' likely resolves to './cli/cli/dist'. Use 'dist/' instead.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 10% vs. threshold = 50% The working directory is indeed set to ./cli for all run steps. The build step would create the dist directory inside ./cli. The PyPI publish action likely resolves paths relative to the repository root, not the working directory setting. Need to consider if the current path cli/dist/ is actually correct from the root. I could be wrong about how the PyPI publish action resolves paths - it might actually inherit the working-directory setting. The documentation for the action should be checked. Even with some uncertainty about path resolution, the current path cli/dist/ is logically correct when viewed from the repository root, which is typically how GitHub Actions work. The comment appears to be incorrect. The current path cli/dist/ is correct as it points to the dist directory inside the cli folder from the repository root.
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>.github/workflows/publish-cli-prerelease.yml:84</code></summary>
> 
> - **Draft comment:** 
> Ensure that the pip version in the environment supports 'pip index versions'. You might need to upgrade pip for compatibility.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>.github/workflows/publish-cli-prerelease.yml:139</code></summary>
> 
> - **Draft comment:** 
> Add a trailing newline at the end of the file for POSIX compliance.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_uRg7wCcn0P4HxjOb`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3070950635,2907026963,qodo-merge-for-open-source[bot],COMMENTED,2025-06-07T07:21:29Z,
3072128473,2851504844,ern,COMMENTED,2025-05-19T17:14:22Z,
3072128473,2851519532,ern,COMMENTED,2025-05-19T17:17:09Z,
3072128473,2851521396,ern,COMMENTED,2025-05-19T17:17:52Z,
3072128473,2851524244,ern,COMMENTED,2025-05-19T17:18:48Z,
3072128473,2851524947,ern,COMMENTED,2025-05-19T17:19:06Z,
3072128473,2851525330,ern,COMMENTED,2025-05-19T17:19:16Z,
3072128473,2851526111,ern,COMMENTED,2025-05-19T17:19:39Z,
3112202670,2890444529,coderabbitai[bot],COMMENTED,2025-06-03T03:05:13Z,"**Actionable comments posted: 1**

<details>
<summary>♻️ Duplicate comments (1)</summary><blockquote>

<details>
<summary>mistralrs-server/src/interactive_mode.rs (1)</summary><blockquote>

`462-506`: _🛠️ Refactor suggestion_

**Apply the same input validation and refactoring suggestions.**

This is an exact duplicate of the command parsing logic from the text mode. The same input validation concerns and refactoring opportunities apply here.




Refer to the previous comment for the text mode (lines 209-253) for the specific validation improvements and refactoring suggestions.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 7c819c893860a06ee639525e095d69107494c420 and e5cc69e09bf72c4157b58706b6791c5e5e5d3737.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `mistralrs-server/src/interactive_mode.rs` (6 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: Docs
* GitHub Check: Test Suite (windows-latest, stable)
* GitHub Check: Test Suite (macOS-latest, stable)
* GitHub Check: Test Suite (ubuntu-latest, stable)
* GitHub Check: Check (ubuntu-latest, stable)
* GitHub Check: Check (macOS-latest, stable)
* GitHub Check: Check (windows-latest, stable)
* GitHub Check: Clippy

</details>

<details>
<summary>🔇 Additional comments (4)</summary><blockquote>

<details>
<summary>mistralrs-server/src/interactive_mode.rs (4)</summary>

`101-103`: **LGTM! Clear documentation for the new commands.**

The help text additions are well-formatted and clearly describe the new sampling parameter commands.

---

`139-141`: **LGTM! Command constants follow the established pattern.**

The constant definitions are consistent with the existing command naming convention.

---

`168-168`: **LGTM! Making sampling_params mutable enables runtime parameter adjustment.**

This change is necessary to support the new parameter modification functionality.

---

`420-420`: **LGTM! Consistent with the text mode change.**

Making sampling_params mutable in vision mode matches the text mode implementation.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3086542515,2864672656,hanouticelina,APPROVED,2025-05-23T14:39:58Z,
3138341820,2919836945,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-12T07:19:34Z,"## Pull Request Overview

This PR refactors `BigInt::to_hex` to use a `StringBuilder` and per-limb digit buffers, replacing repeated string concatenation with a pre-allocated builder for better performance.

- Introduce `digits_per_limb` and a `StringBuilder` to pre-allocate the full hex string size.
- Use a fixed-size `FixedArray` per limb to collect hex digits in reverse, then write them into the builder.
- Preserve original behavior for leading zeros on internal limbs and configurable uppercase/lowercase output.


<details>
<summary>Comments suppressed due to low confidence (3)</summary>

**bigint/bigint_nonjs.mbt:1191**
* [nitpick] The variable name `idx` is ambiguous; consider renaming it to `digit_count` or `digit_index` for clearer intent.
```
let mut idx = 0
```
**bigint/bigint_nonjs.mbt:1187**
* [nitpick] Consider using a built-in reverse iterator (if available) rather than manual index decrement; it can simplify the code and may offer additional performance benefits as noted.
```
for i = self.len - 1; i >= 0; i = i - 1 { // TODO: reverse iteration would be a bit faster.
```
**bigint/bigint_nonjs.mbt:1183**
* Add unit tests for `to_hex` covering edge cases such as zero, multi-limb values, and lowercase output to verify correctness after this refactor.
```
pub fn BigInt::to_hex(self : BigInt, uppercase~ : Bool = true) -> String {
```
</details>

"
3138341820,2944367013,peter-jerry-ye,COMMENTED,2025-06-20T02:19:18Z,"Seems to be a reasonable modification, but there are some subtle issues"
3090126527,2867558573,zeroliu,COMMENTED,2025-05-26T07:40:29Z,
3090126527,2867558934,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-26T07:40:37Z,"## Pull Request Overview

This PR updates Tailwind integration by adding a `tw-` prefix to all Tailwind utility classes and enforcing this via new ESLint rules.

- Bulk-renamed all existing className usages to include the `tw-` prefix  
- Added `eslint-plugin-tailwindcss` to catch unprefixed or misordered classes  
- Updated project configs (`components.json`, `.eslintrc`, `package.json`) to reflect and enforce the new prefix

### Reviewed Changes

Copilot reviewed 59 out of 59 changed files in this pull request and generated no comments.

| File                                    | Description                                              |
| --------------------------------------- | -------------------------------------------------------- |
| src/components/.../**/*.tsx             | Renamed all Tailwind utility classNames to `tw-*`        |
| components.json                         | Set `""prefix"": ""tw""` for component CSS tools             |
| .eslintrc                               | Added TailwindCSS plugin, rules, and updated overrides  |
| package.json                            | Added `eslint-plugin-tailwindcss` dev dependency        |



"
3090126527,2867658674,zeroliu,COMMENTED,2025-05-26T08:22:31Z,
3090126527,2884744527,logancyang,APPROVED,2025-05-31T23:38:22Z,lgtm!
3071362457,2848675763,sourcery-ai[bot],COMMENTED,2025-05-18T03:50:22Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟡 **General issues**: 1 issue found
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3164568319,2947435276,obi1kenobi,COMMENTED,2025-06-21T00:00:15Z,
3164568319,2947435589,obi1kenobi,COMMENTED,2025-06-21T00:00:46Z,
3164568319,2947435833,obi1kenobi,COMMENTED,2025-06-21T00:00:53Z,
3164568319,2947437596,obi1kenobi,COMMENTED,2025-06-21T00:02:00Z,
3164568319,2947437672,obi1kenobi,COMMENTED,2025-06-21T00:02:04Z,
3119383333,2898350194,sourcery-ai[bot],COMMENTED,2025-06-04T23:37:40Z,"Hey @lollipopkit - I've reviewed your changes - here's some feedback:

- Avoid calling File.existsSync() (and other synchronous File operations) directly in the build method—move those checks into async init or cache the result to prevent UI jank.
- Rather than always copying the picked image to a constant name like 'ssh_bg.ext', generate unique filenames or clean up previous copies so you don’t accidentally overwrite or serve stale images.
- You’re creating TextEditingControllers inside each build helper—move them into the State and dispose of them properly to avoid recreating controllers on every rebuild and potential memory leaks.

<details>
<summary>Here's what I looked at during the review</summary>

- 🟡 **General issues**: 2 issues found
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3119383333,2898569356,sourcery-ai[bot],COMMENTED,2025-06-05T00:36:51Z,"Hey @lollipopkit - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟡 **General issues**: 5 issues found
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3115774398,2894428458,gemini-code-assist[bot],COMMENTED,2025-06-04T00:02:52Z,"Hello @mgoin, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

## Summary of Changes
This pull request addresses an issue in the `make_zmq_path` function within `vllm/utils.py`. The original code incorrectly handled the case where the port was explicitly set to 0, treating it as if no port was provided. This PR modifies the condition to specifically check for `None` instead of truthiness, ensuring that port 0 is correctly included in the generated ZMQ path. The PR description includes a pytest command to test the fix, but indicates that the test fails due to a missing `blake3` module.

### Highlights
* **Bug Fix**: Corrects the handling of port 0 in the `make_zmq_path` function.
* **Code Clarity**: Improves code readability by explicitly checking for `None` instead of relying on truthiness for the port value.

### Changelog
* **vllm/utils.py**
  * Modified the `make_zmq_path` function to correctly handle port 0 by checking for `port is None` instead of `if not port`.

<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.
</details>


<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>


[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configure Gemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).

---

> A port set to zero,
> A tricky case, you know,
> `None` is the key,
> To make it agree,
> And the path starts to flow.

"
3115774398,2894430872,gemini-code-assist[bot],COMMENTED,2025-06-04T00:04:06Z,"## Code Review
The pull request addresses an issue in the `make_zmq_path` function where port 0 was not being handled correctly. The change involves a simple modification to the conditional statement that checks for the presence of a port number. Overall, the change seems reasonable and addresses the described issue.

### Merge Readiness
The pull request introduces a small but important fix to the `make_zmq_path` function. The change improves the function's ability to handle port 0 correctly. While the code change itself is minimal, the fix is valuable. I am unable to approve this pull request, and it should be reviewed by others before merging. I would recommend merging this pull request after the author confirms that the change is correct."
3115774398,2897063230,njhill,APPROVED,2025-06-04T14:45:50Z,I don't think port 0 would be valid anyhow but this behaviour makes more sense.
3147075784,2928956946,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-15T04:18:15Z,"## Pull Request Overview

This pull request increases test coverage for the idempotency middleware by adding stub implementations and extra test cases to cover error paths, configuration defaults, and header filtering scenarios. Key changes include:
- Introducing stub types (stubLock and stubStorage) for simulating storage and locking behaviors.
- Updating tests to directly use middleware functions from the idempotency package.
- Adding new tests to cover edge cases in config defaults, error paths, and response header filtering.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated no comments.

| File                                   | Description                                                    |
| -------------------------------------- | -------------------------------------------------------------- |
| middleware/idempotency/stub_test.go    | New stubs for testing basic lock and storage behavior.         |
| middleware/idempotency/idempotency_test.go | Expanded test suite for middleware configuration and error handling. |


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**middleware/idempotency/idempotency_test.go:329**
* Consider adding a comment that clarifies the intended behavior of header filtering: the 'Foo' header should be maintained on both requests while non-kept headers (like 'Bar') are only available on the first response.
```
require.Equal(t, ""foo"", resp.Header.Get(""Foo""))
```
**middleware/idempotency/idempotency_test.go:270**
* [nitpick] Consider externalizing error message strings generated by KeyHeaderValidate to reduce tight coupling between the test assertions and specific error text, which may improve maintainability in future changes.
```
req.Header.Set(ConfigDefault.KeyHeader, ""bad"")
```
</details>

"
3147075784,2928956973,gemini-code-assist[bot],COMMENTED,2025-06-15T04:18:30Z,"## Summary of Changes

Hello @gaby, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request significantly enhances the test suite for the idempotency middleware. It introduces stub implementations for dependencies to enable comprehensive testing of various error conditions and edge cases, particularly around storage, locking, and configuration. The goal is to ensure the middleware is robust and handles failures gracefully.

### Highlights

* **Increased Test Coverage**: Added numerous new test cases to improve coverage of the idempotency middleware, focusing on configuration edge cases and various error handling paths.
* **Stub Implementations for Testing**: Introduced `stubLock` and `stubStorage` types to simulate dependencies (Locker and fiber.Storage) and facilitate testing of error conditions and specific middleware interactions.
* **Error Path Testing**: Added specific tests to verify the middleware's behavior when encountering errors during storage operations (Get, Set), locking (Lock, Unlock), unmarshalling cached data, and when the main handler returns an error.
* **Configuration Testing**: Included tests to cover the default configuration (`configDefault`) and how overrides are handled, ensuring expected behavior for `Next`, `KeyHeaderValidate`, and other options.
* **Response Header Filtering Test**: Added a test case to specifically verify that the `KeepResponseHeaders` configuration correctly filters headers when serving a cached response.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configureGemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3147075784,2928957108,gemini-code-assist[bot],COMMENTED,2025-06-15T04:19:28Z,"## Code Review

This pull request significantly improves the test coverage for the idempotency middleware by adding stub implementations for Locker and fiber.Storage, comprehensive tests for configDefault, and extensive tests for error paths and header filtering in idempotency.New. The consolidation of tests into a single file also improves maintainability."
3147075784,2928957204,coderabbitai[bot],COMMENTED,2025-06-15T04:20:02Z,"**Actionable comments posted: 0**

<details>
<summary>🔭 Outside diff range comments (1)</summary><blockquote>

<details>
<summary>middleware/idempotency/idempotency_test.go (1)</summary><blockquote>

`118-126`: _🛠️ Refactor suggestion_

**Avoid using *testing.T inside spawned goroutines**

`assert.Equal(t, …)` is called from 100 goroutines. `testing.T`’s methods are not guaranteed to be race-free; future Go versions may panic. Capture the value in a closure and report outside the goroutine, or use `assert.Eventually`.

Example pattern:

```go
results := make(chan bool, 100)
for i := 0; i < 100; i++ {
    wg.Add(1)
    go func() {
        defer wg.Done()
        results <- doReq(... ) == ""11""
    }()
}
wg.Wait()
close(results)
for ok := range results {
    assert.True(t, ok)
}
```

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (4)</summary><blockquote>

<details>
<summary>middleware/idempotency/stub_test.go (2)</summary><blockquote>

`12-18`: **Don’t invoke `afterLock` when the lock fails**

Calling `afterLock` unconditionally means the callback fires even when `Lock` returns an error, which is counter-intuitive and can mask issues in tests that expect “locked” state only after a successful lock.

```diff
 func (s *stubLock) Lock(string) error {
-	if s.afterLock != nil {
-		s.afterLock()
-	}
-	return s.lockErr
+	if s.lockErr == nil && s.afterLock != nil {
+		s.afterLock()
+	}
+	return s.lockErr
 }
```

---

`22-26`: **Stub storage is not goroutine-safe and silently ignores TTL**

`stubStorage` is accessed without synchronisation and `setCount` is mutated from tests that can run in parallel (e.g. `t.Parallel()` and goroutine fan-out in `Test_Idempotency`). A data race is unlikely to break CI, yet it compromises determinism.

In addition, the `_ time.Duration` parameter is discarded, so tests cannot simulate expiry. Consider:

1. Guarding the map and counters with a small `sync.Mutex` (or `sync/atomic` for `setCount`).
2. Recording the expiry and returning `nil` from `Get` after it passes to mimic real storage.

These tweaks improve fidelity with production behaviour and avoid racy false positives.



Also applies to: 38-48

</blockquote></details>
<details>
<summary>middleware/idempotency/idempotency_test.go (2)</summary><blockquote>

`81-95`: **Close response bodies to avoid descriptor leaks**

`doReq` reads the body but never closes it. Although tests exit quickly, keeping fd’s open is poor hygiene and can bite when the suite scales.

```diff
-	resp, err := app.Test(req, fiber.TestConfig{
+	resp, err := app.Test(req, fiber.TestConfig{
  	Timeout:       15 * time.Second,
  	FailOnTimeout: true,
  })
  require.NoError(t, err)
  body, err := io.ReadAll(resp.Body)
  require.NoError(t, err)
+ _ = resp.Body.Close()
```
Repeat for any other helper that returns a `*http.Response`.

---

`229-237`: **Duplicate helper leaks body—apply the same fix**

The `do` helper has the same missing `resp.Body.Close()` issue. Patch it alongside `doReq`.

```diff
 body, _ := io.ReadAll(resp.Body)
+_ = resp.Body.Close()
 return resp, string(body)
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 670fbd5e4553a69c31eccce4535bd53e557b488c and 26150d51353c081f7513fd16e0ea01c7e9b2f6d4.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `middleware/idempotency/idempotency_test.go` (5 hunks)
* `middleware/idempotency/stub_test.go` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>middleware/idempotency/idempotency_test.go (3)</summary><blockquote>

<details>
<summary>middleware/idempotency/idempotency.go (3)</summary>

* `IsFromCache` (24-26)
* `WasPutToCache` (28-30)
* `New` (32-159)

</details>
<details>
<summary>middleware/idempotency/config.go (2)</summary>

* `Config` (15-49)
* `ConfigDefault` (52-74)

</details>
<details>
<summary>constants.go (4)</summary>

* `MethodGet` (5-5)
* `MethodPost` (7-7)
* `StatusInternalServerError` (101-101)
* `StatusOK` (50-50)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: unit (1.24.x, macos-13)
* GitHub Check: unit (1.24.x, macos-latest)
* GitHub Check: unit (1.24.x, ubuntu-latest)
* GitHub Check: unit (1.24.x, windows-latest)
* GitHub Check: lint
* GitHub Check: Compare
* GitHub Check: repeated
* GitHub Check: Analyse

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3147075784,2928959354,github-actions[bot],COMMENTED,2025-06-15T04:30:10Z,"<!-- github-benchmark-action-comment(start): Benchmark Alert -->
# :warning: **Performance Alert** :warning:

Possible performance regression was detected for benchmark.
Benchmark result of this commit is worse than the previous benchmark result exceeding threshold `1.50`.

| Benchmark suite | Current: 561dc540eb932e3f7b5ae2daa083a75c66a46d0d | Previous: 670fbd5e4553a69c31eccce4535bd53e557b488c | Ratio |
|-|-|-|-|
| `Benchmark_GenericParseTypeString/benchmark_genericParseTypeString#01` | `13.54` ns/op	       0 B/op	       0 allocs/op | `8.867` ns/op	       0 B/op	       0 allocs/op | `1.53` |
| `Benchmark_GenericParseTypeString/benchmark_genericParseTypeString#01 - ns/op` | `13.54` ns/op | `8.867` ns/op | `1.53` |

This comment was automatically generated by [workflow](https://github.com/gofiber/fiber/actions?query=workflow%3ABenchmark) using [github-action-benchmark](https://github.com/marketplace/actions/continuous-benchmark).
<!-- github-benchmark-action-comment(end): Benchmark Alert -->"
3147075784,2928960185,coderabbitai[bot],COMMENTED,2025-06-15T04:34:31Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (3)</summary><blockquote>

<details>
<summary>middleware/idempotency/idempotency_test.go (3)</summary><blockquote>

`83-97`: **Always close the response body in tests**

`resp.Body` is never closed after `io.ReadAll`.  Although the object will be
GC-collected eventually, closing it immediately avoids file-descriptor leaks
and is a good habit when the same test opens many connections (e.g. the
100-goroutine race test below).

```diff
resp, err := app.Test(req, fiber.TestConfig{
   Timeout:       15 * time.Second,
   FailOnTimeout: true,
})
require.NoError(t, err)
body, err := io.ReadAll(resp.Body)
require.NoError(t, err)
+_ = resp.Body.Close()
require.Equal(t, fiber.StatusOK, resp.StatusCode, string(body))
```

---

`228-238`: **Apply the same body-closing pattern to helper `do`**

The helper re-introduces the same resource-leak risk.  Close the body and mark
the helper with `t.Helper()` to improve failure reports.

```diff
-func do(app *fiber.App, req *http.Request) (*http.Response, string) {
-	resp, err := app.Test(req, fiber.TestConfig{Timeout: 5 * time.Second})
-	if err != nil {
-		panic(err)
-	}
-	body, err := io.ReadAll(resp.Body)
-	if err != nil {  
-		panic(err)  
-	} 
-	return resp, string(body)
+func do(app *fiber.App, req *http.Request) (*http.Response, string) {
+	t.Helper() // assuming the helper is moved into *_test.go that has a *testing.T in scope
+	resp, err := app.Test(req, fiber.TestConfig{Timeout: 5 * time.Second})
+	if err != nil {
+		panic(err)
+	}
+	body, err := io.ReadAll(resp.Body)
+	if err != nil {
+		panic(err)
+	}
+	_ = resp.Body.Close()
+	return resp, string(body)
 }
```

---

`152-173`: **Reuse of the same `fasthttp.RequestCtx` skews benchmark results**

`Benchmark_Idempotency` reuses a single `fasthttp.RequestCtx` for all
iterations.  After the first call, both request and response objects contain
left-over state that the handler may rely on (headers, body, etc.).  This can
both invalidate the benchmark and hide bugs.

Create a fresh context each loop (or reset it):

```diff
for b.Loop() {
-    h(c)
+    ctx := &fasthttp.RequestCtx{}
+    ctx.Request.Header.SetMethod(fiber.MethodPost)
+    ctx.Request.SetRequestURI(""/"")
+    ctx.Request.Header.Set(""X-Idempotency-Key"", ""00000000-0000-0000-0000-000000000000"")
+    h(ctx)
}
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 26150d51353c081f7513fd16e0ea01c7e9b2f6d4 and dfc642530682cbc7a2aacbd8b562c3c4a5a633e1.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `middleware/idempotency/idempotency_test.go` (6 hunks)
* `middleware/idempotency/stub_test.go` (1 hunks)

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (1)</summary>

* middleware/idempotency/stub_test.go

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (9)</summary>

* GitHub Check: govulncheck-check
* GitHub Check: Compare
* GitHub Check: unit (1.24.x, windows-latest)
* GitHub Check: lint
* GitHub Check: unit (1.24.x, macos-latest)
* GitHub Check: unit (1.24.x, ubuntu-latest)
* GitHub Check: unit (1.24.x, macos-13)
* GitHub Check: Analyse
* GitHub Check: repeated

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>middleware/idempotency/idempotency_test.go (1)</summary>

`120-129`: **Potential data race on `app.Test`**

`app.Test` is invoked concurrently from 100 goroutines.  Fiber v3 currently
does not document `(*fiber.App).Test` as goroutine-safe.  If the helper happens
to mutate shared state (e.g. the app’s internal pool) this may introduce flaky
tests under `-race`.

Consider serialising calls per application instance or switching the race
section to `app.Handler()` with an isolated `fasthttp.RequestCtx` per goroutine
to avoid touching global app state.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3147075784,2928962348,coderabbitai[bot],COMMENTED,2025-06-15T04:48:04Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (3)</summary><blockquote>

<details>
<summary>middleware/idempotency/idempotency_test.go (3)</summary><blockquote>

`83-97`: **Close the `resp.Body` to avoid leaking the connection pool**  
`app.Test` returns an `*http.Response` with an open body.  The body is read but never closed, which keeps the underlying `fasthttp` connection in the pool until it is garbage-collected and can skew concurrent-test behaviour.

```diff
 resp, err := app.Test(req, fiber.TestConfig{
   Timeout:       15 * time.Second,
   FailOnTimeout: true,
 })
 require.NoError(t, err)
 body, err := io.ReadAll(resp.Body)
 require.NoError(t, err)
 require.Equal(t, fiber.StatusOK, resp.StatusCode, string(body))
+_ = resp.Body.Close() // best-effort; ignore error
 return string(body)
```

---

`228-238`: **Helper leaks response bodies and hides test-line information**  
The helper repeats the body-closing issue and panics instead of failing the test at the correct call-site.

```diff
-func do(app *fiber.App, req *http.Request) (*http.Response, string) {
-	resp, err := app.Test(req, fiber.TestConfig{Timeout: 5 * time.Second})
-	if err != nil {
-		panic(err)
-	}
-	body, err := io.ReadAll(resp.Body)
-	if err != nil {
-		panic(err)
-	}
-	return resp, string(body)
+func do(app *fiber.App, req *http.Request) (*http.Response, string) {
+	t.Helper()                              // report failure on caller line
+	resp, err := app.Test(req, fiber.TestConfig{Timeout: 5 * time.Second})
+	require.NoError(t, err)
+	body, err := io.ReadAll(resp.Body)
+	require.NoError(t, err)
+	_ = resp.Body.Close()
+	return resp, string(body)
 }
```

---

`152-173`: **Benchmark allocates a fresh `fasthttp.RequestCtx` every iteration**  
Creating a new ctx inside the benchmark loop inflates allocation counts and dilutes the middleware overhead you’re trying to measure.  Reuse a single ctx or an object-pool outside `b.Loop()` to get cleaner numbers.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between dfc642530682cbc7a2aacbd8b562c3c4a5a633e1 and d3a12d528803aa7616781dfb28e49d68e873dea9.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `middleware/idempotency/idempotency_test.go` (6 hunks)
* `middleware/idempotency/stub_test.go` (1 hunks)

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (1)</summary>

* middleware/idempotency/stub_test.go

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: unit (1.24.x, macos-13)
* GitHub Check: unit (1.24.x, macos-latest)
* GitHub Check: unit (1.24.x, ubuntu-latest)
* GitHub Check: unit (1.24.x, windows-latest)
* GitHub Check: Compare
* GitHub Check: repeated
* GitHub Check: Analyse
* GitHub Check: lint

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>middleware/idempotency/idempotency_test.go (1)</summary>

`118-131`: **Potential data race: `app.Test` is invoked from 100 goroutines**  
`fiber.App.Test` is not documented as goroutine-safe; concurrent use may trigger false positives under the `-race` flag.  Consider switching to the low-level handler (`app.Handler()`) with independent `fasthttp.RequestCtx` instances or serialising calls via a worker pool.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3147075784,2932655164,ReneWerner87,APPROVED,2025-06-16T15:45:16Z,
3161347513,2944038992,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-19T21:18:37Z,"## Pull Request Overview

This PR ensures that an activity is created or updated before a corresponding quote is generated, preserving proper asset existence for manual symbols.  
- The add activity mutation now creates the activity first then creates the quote.  
- The update activity mutation follows a similar order change.


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**src/pages/activity/hooks/use-activity-mutations.ts:80**
* In the add activity mutation, if createQuoteFromActivity fails after the activity has been created, consider implementing error handling or a rollback mechanism to maintain data consistency.
```
      const activity = await createActivity(rest);
```
**src/pages/activity/hooks/use-activity-mutations.ts:89**
* For the update activity mutation, ensure there is a strategy to handle failures in createQuoteFromActivity after updating the activity, to keep the activity and quote data in sync.
```
      const activity = await updateActivity(data);
```
</details>

"
3114771710,2893552278,ChrisHuie,COMMENTED,2025-06-03T18:04:56Z,
3114771710,2893652881,patmmccann,COMMENTED,2025-06-03T18:32:27Z,
3114771710,2893656208,patmmccann,COMMENTED,2025-06-03T18:33:23Z,
3114771710,2893666842,ChrisHuie,COMMENTED,2025-06-03T18:36:10Z,
3114771710,2893678373,patmmccann,COMMENTED,2025-06-03T18:39:27Z,
3114771710,2893686399,patmmccann,COMMENTED,2025-06-03T18:41:53Z,
3114771710,2893697229,ChrisHuie,COMMENTED,2025-06-03T18:45:53Z,
3114771710,2893700681,ChrisHuie,APPROVED,2025-06-03T18:47:20Z,
3128229089,2908383777,gemini-code-assist[bot],COMMENTED,2025-06-08T11:04:22Z,"Hello @rgerhards, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

## Summary of Changes
Hello! Gemini here, providing a summary of this pull request to help everyone quickly understand the changes.

The primary goal of this PR, as indicated by the title and description, is to refine the logging behavior within the `omfwd` output module. Specifically, it aims to prevent a debug log message about the number of active targets from being emitted when that number hasn't actually changed. This helps reduce log noise and makes the logs more useful by only reporting meaningful state transitions.

### Highlights
* **Logging Improvement**: The main highlight is the fix to prevent the `omfwd` module from logging a 'number of active targets changed' debug message when the count remains the same. This reduces unnecessary log output.
* **Conditional Logging**: The change implements a conditional check (`if (oldVal != activeTargets)`) around the debug logging statement to ensure it only fires when the number of active targets truly changes.

### Changelog
* **tools/omfwd.c**
  * Added a conditional check around the debug log message in the `countActiveTargets` function (around line 1155) to ensure it only logs when the number of active targets actually changes.

<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.
</details>


<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>


[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configure Gemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3128229089,2908384289,gemini-code-assist[bot],COMMENTED,2025-06-08T11:05:16Z,"## Code Review
This pull request addresses a misleading log message in `omfwd` by ensuring that the ""active targets changed"" log is only emitted when the count of active targets has actually changed. The logic introduced seems correct and effectively solves the described issue.

The change is straightforward and well-targeted. Good job on this fix!

### Summary of Findings
* **Minor C Style: Space in `if` condition**: On line 1155, the `if` statement `if(oldVal != activeTargets)` is missing a space between `if` and the opening parenthesis. A common C style is `if (condition)`. This is a minor stylistic point and does not affect functionality. (Severity: low - not commented directly on the code due to review severity settings)
* **Minor C Style: Indentation Consistency**: The indentation for the new `if` block (lines 1155-1159 in the diff) appears to use spaces. If the project standard is to use tabs for indentation, this might be inconsistent. Ensuring consistent indentation improves readability. This is a minor stylistic point. (Severity: low - not commented directly on the code due to review severity settings)

### Merge Readiness
The core logic of the fix is sound and addresses the misleading log message effectively. The identified minor stylistic points are of low severity and can be addressed at the author's discretion or by an automated style checker if available (noting the PR description mentions a style check issue due to a missing tool).

I am not authorized to approve pull requests, but based on this review, the changes appear suitable for merging once any internal style guidelines are met. Please ensure other reviewers approve this change before merging."
3075868646,2852875147,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-20T06:45:47Z,"## Pull Request Overview

This PR addresses bugs in template resolution and the LibreOffice listener by improving error handling and configuration consistency.
- Add a proper `exists()` implementation for stream-based template resources
- Log exceptions when file-based templates cannot be read
- Replace hardcoded port with `LISTENER_PORT` constant in listener connectivity check

### Reviewed Changes

Copilot reviewed 3 out of 3 changed files in this pull request and generated 1 comment.

| File                                                     | Description                                             |
| -------------------------------------------------------- | ------------------------------------------------------- |
| src/main/java/stirling/software/SPDF/model/InputStreamTemplateResource.java | Implement `exists()` to check `inputStream != null`     |
| src/main/java/stirling/software/SPDF/config/FileFallbackTemplateResolver.java | Add SLF4J logging for IO exceptions in template loading |
| src/main/java/stirling/software/SPDF/LibreOfficeListener.java        | Use `LISTENER_PORT` constant instead of literal port    |


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**src/main/java/stirling/software/SPDF/model/InputStreamTemplateResource.java:42**
* Consider adding unit tests for `exists()` to verify behavior when `inputStream` is null and non-null, ensuring this new logic is covered.
```
return inputStream != null;
```
**src/main/java/stirling/software/SPDF/LibreOfficeListener.java:37**
* Avoid catching a generic `Exception`; narrow this to `IOException` or `SocketTimeoutException` to prevent swallowing unexpected errors.
```
} catch (Exception e) {
```
</details>

"
3075868646,2853672264,reecebrowne,APPROVED,2025-05-20T10:43:14Z,
3096394414,2873986012,coderabbitai[bot],COMMENTED,2025-05-28T07:51:48Z,"**Actionable comments posted: 1**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>packages/thirdweb/src/react/web/ui/ConnectWallet/ConnectButton.tsx (1)</summary><blockquote>

`303-304`: **Consider the precedence logic for hiddenWallets.**

The current logic uses `||` operator which gives precedence to `props.hiddenWallets` over `props.detailsModal?.hiddenWallets`. This means if both are provided, only `props.hiddenWallets` will be used.

Consider whether this is the intended behavior or if the arrays should be merged:



If merging is desired, consider this approach:

```diff
-  const hiddenWallets =
-    props.hiddenWallets || props.detailsModal?.hiddenWallets;
+  const hiddenWallets = [
+    ...(props.hiddenWallets || []),
+    ...(props.detailsModal?.hiddenWallets || [])
+  ];
```

Or if precedence is intended, consider adding a comment to clarify the behavior.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between e14a1349e120b684c5cbf05a80eca5f1a7a2ad5d and ddcc0f356915ab3df33376c651bfdd02c2edbfd1.

</details>

<details>
<summary>📒 Files selected for processing (7)</summary>

* `.changeset/hidden-wallets-prop.md` (1 hunks)
* `packages/thirdweb/src/react/core/hooks/connection/ConnectButtonProps.ts` (1 hunks)
* `packages/thirdweb/src/react/core/hooks/connection/ConnectEmbedProps.ts` (2 hunks)
* `packages/thirdweb/src/react/web/ui/ConnectWallet/ConnectButton.tsx` (4 hunks)
* `packages/thirdweb/src/react/web/ui/ConnectWallet/Modal/ConnectEmbed.tsx` (1 hunks)
* `packages/thirdweb/src/react/web/ui/ConnectWallet/Modal/ConnectModal.tsx` (3 hunks)
* `packages/thirdweb/src/react/web/ui/ConnectWallet/useConnectModal.tsx` (3 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (3)</summary>

<details>
<summary>packages/thirdweb/src/react/core/hooks/connection/ConnectEmbedProps.ts (1)</summary><blockquote>

<details>
<summary>packages/thirdweb/src/exports/wallets.ts (1)</summary>

* `WalletId` (54-54)

</details>

</blockquote></details>
<details>
<summary>packages/thirdweb/src/react/web/ui/ConnectWallet/useConnectModal.tsx (1)</summary><blockquote>

<details>
<summary>packages/thirdweb/src/exports/wallets.ts (1)</summary>

* `WalletId` (54-54)

</details>

</blockquote></details>
<details>
<summary>packages/thirdweb/src/react/core/hooks/connection/ConnectButtonProps.ts (1)</summary><blockquote>

<details>
<summary>packages/thirdweb/src/exports/wallets.ts (1)</summary>

* `WalletId` (54-54)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: E2E Tests (pnpm, esbuild)
* GitHub Check: E2E Tests (pnpm, webpack)
* GitHub Check: Size
* GitHub Check: E2E Tests (pnpm, vite)
* GitHub Check: Unit Tests
* GitHub Check: Build Packages
* GitHub Check: Lint Packages
* GitHub Check: Analyze (javascript)

</details>

<details>
<summary>🔇 Additional comments (13)</summary><blockquote>

<details>
<summary>.changeset/hidden-wallets-prop.md (1)</summary>

`1-6`: **LGTM! Well-documented changeset.**

The changeset properly documents the new `hiddenWallets` prop addition as a minor version change, which is appropriate for a new feature. The description clearly explains the functionality and lists the affected components.

</details>
<details>
<summary>packages/thirdweb/src/react/core/hooks/connection/ConnectButtonProps.ts (1)</summary>

`984-987`: **LGTM! Well-defined type addition.**

The `hiddenWallets` prop is properly typed as an optional `WalletId[]` array with clear documentation. The type import is correctly included and the JSDoc comment clearly explains the functionality.

</details>
<details>
<summary>packages/thirdweb/src/react/core/hooks/connection/ConnectEmbedProps.ts (2)</summary>

`6-6`: **LGTM! Proper type import.**

The `WalletId` import is correctly added to support the new `hiddenWallets` prop.

---

`276-279`: **LGTM! Consistent type definition.**

The `hiddenWallets` prop is properly defined with clear documentation that matches the `ConnectButtonProps` implementation. The type and documentation are consistent across components, which maintains a cohesive API.

</details>
<details>
<summary>packages/thirdweb/src/react/web/ui/ConnectWallet/Modal/ConnectModal.tsx (3)</summary>

`7-7`: **LGTM! Clean import addition.**

The import of `WalletId` type is correctly added to support the new `hiddenWallets` functionality.

---

`46-46`: **LGTM! Type definition follows established patterns.**

The `hiddenWallets` property is correctly defined with the appropriate type `WalletId[] | undefined`, maintaining consistency with other optional properties in the interface.

---

`156-156`: **LGTM! Proper prop forwarding.**

The change from passing `undefined` to `props.hiddenWallets` correctly forwards the new prop to the `ConnectModalContent` component as `walletIdsToHide`.

</details>
<details>
<summary>packages/thirdweb/src/react/web/ui/ConnectWallet/useConnectModal.tsx (3)</summary>

`8-8`: **LGTM! Consistent import addition.**

The `WalletId` type import maintains consistency with the other files in this PR.

---

`146-146`: **LGTM! Correct prop forwarding.**

The `hiddenWallets` prop is properly passed from the hook options to the underlying `ConnectModal` component.

---

`369-372`: **LGTM! Excellent documentation and type definition.**

The new `hiddenWallets` property is well-documented with a clear description of its purpose. The type definition is consistent with the other files in this PR.

</details>
<details>
<summary>packages/thirdweb/src/react/web/ui/ConnectWallet/ConnectButton.tsx (3)</summary>

`398-398`: **LGTM! Correct prop forwarding to ConnectModal.**

The `hiddenWallets` prop is properly passed to the `ConnectModal` component.

---

`591-591`: **LGTM! hiddenWallets added to connectOptions.**

The `hiddenWallets` property is correctly included in the `connectOptions` object passed to `ConnectedWalletDetails`.

---

`563-566`: <details>
<summary>❓ Verification inconclusive</summary>

**Review the prop spreading behavior.**

The current implementation spreads `props.detailsModal` first and then adds `hiddenWallets`. This means if `props.detailsModal` contains a `hiddenWallets` property, it will be overridden by the computed `hiddenWallets` value.



Verify that this override behavior is intentional:



This behavior might be correct if the computed `hiddenWallets` should take precedence over the one in `detailsModal`.

---

🏁 Script executed:

```shell
#!/bin/bash
# Check if detailsModal props include hiddenWallets in type definitions
ast-grep --pattern 'detailsModal?: {
  $$$
  hiddenWallets$_
  $$$
}'
```

Length of output: 71

---

🏁 Script executed:

```shell
#!/bin/bash
# Locate where ConnectButtonProps is defined and check detailsModal usage
rg ""ConnectButtonProps"" -n packages/thirdweb/src/react/web/ui/ConnectWallet/ConnectButton.tsx

# Inspect all occurrences of detailsModal within this file
rg ""detailsModal"" -n packages/thirdweb/src/react/web/ui/ConnectWallet/ConnectButton.tsx
```

Length of output: 812

---

🏁 Script executed:

```shell
#!/bin/bash
# List files in the connection hooks directory
ls packages/thirdweb/src/core/hooks/connection

# Search for ConnectButtonProps type definition and detailsModal within it
rg -n ""ConnectButtonProps"" -n packages/thirdweb/src/core/hooks/connection/ConnectButtonProps*
rg -n ""detailsModal"" -n packages/thirdweb/src/core/hooks/connection/ConnectButtonProps*
```

Length of output: 533

---

```bash
#!/bin/bash
# Locate the connection hooks directory under src/react
echo ""Searching for 'connection' directories under src/react...""
find packages/thirdweb/src/react -type d | rg ""/connection$"" || echo ""No 'connection' dirs found under src/react""

# Find the ConnectButtonProps file anywhere in the repo
echo ""Locating ConnectButtonProps file...""
props_file=$(find packages/thirdweb -type f | rg ""ConnectButtonProps\.(js|ts)x?$"")
if [ -z ""$props_file"" ]; then
  echo ""ConnectButtonProps file not found""
  exit 1
fi
echo ""Found ConnectButtonProps at: $props_file""

# Show first 200 lines of that file
echo ""Printing first 200 lines of $props_file...""
sed -n '1,200p' ""$props_file""

# Search for detailsModal in that file
echo ""Searching for detailsModal in $props_file...""
rg -n ""detailsModal"" ""$props_file"" || echo ""No detailsModal property in ConnectButtonProps""
```

---

```bash
#!/bin/bash
# Find all ConnectButtonProps definition files in the repo
files=$(find packages/thirdweb -type f | rg -i ""ConnectButtonProps\.(ts|tsx|js|jsx)$"")
echo ""ConnectButtonProps files found:""
echo ""$files""

# For each file, print surrounding context of the detailsModal property
for file in $files; do
  echo -e ""\n---- Context in $file ----""
  rg -n ""detailsModal"" -A3 -B3 ""$file"" || echo ""No detailsModal property in $file""
done
```

---

```bash
#!/bin/bash
# Search for ConnectButtonProps definition under src/react
echo ""Locating ConnectButtonProps files under src/react...""
paths=$(find packages/thirdweb/src/react -type f | rg ""ConnectButtonProps\.(ts|tsx|js|jsx)$"")
if [ -z ""$paths"" ]; then
  echo ""No ConnectButtonProps files found under src/react""
  exit 1
fi
echo ""$paths""

# For each found file, display header, the top of the file, and any detailsModal occurrences
for file in $paths; do
  echo -e ""\n=== File: $file ===""
  echo ""First 200 lines of $file:""
  sed -n '1,200p' ""$file""
  echo -e ""\nOccurrences of detailsModal in $file:""
  rg -n ""detailsModal"" -A3 -B3 ""$file"" || echo ""No detailsModal property found in $file""
done
```

---



</details>

**Confirm hiddenWallets override in detailsModal**

- File: `packages/thirdweb/src/react/web/ui/ConnectWallet/ConnectButton.tsx` (lines 563–566)  
- Spreading `...props.detailsModal` before `hiddenWallets` will always override any `hiddenWallets` passed in via props.  

If you intend to let consumers control which wallets to hide, swap the spread order:

```diff
detailsModal={{
-  ...props.detailsModal,
-  hiddenWallets,
+  hiddenWallets,
+  ...props.detailsModal,
}}
```

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3161518646,2944198831,coderabbitai[bot],COMMENTED,2025-06-19T23:24:24Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (3)</summary><blockquote>

<details>
<summary>internal/exec/helmfile.go (1)</summary><blockquote>

`286-286`: **Good logging refactor with opportunity for structured enhancement.**

The migration from `u.LogWarning` to `log.Warn` is correct. Consider using structured logging for better observability:

```diff
-		log.Warn(err.Error())
+		log.Warn(""Failed to remove temporary variables file"", ""file"", varFilePath, ""error"", err)
```

</blockquote></details>
<details>
<summary>pkg/utils/hcl_utils.go (1)</summary><blockquote>

`52-52`: **Good logging migration in file close handlers.**

The changes from `LogWarning` to `log.Warn` are appropriate for these deferred file close error scenarios. Consider structured logging for consistency:

```diff
-			log.Warn(err.Error())
+			log.Warn(""Failed to close file"", ""error"", err)
```




Also applies to: 133-133

</blockquote></details>
<details>
<summary>cmd/root.go (1)</summary><blockquote>

`58-58`: **Appropriate logging migration for config warnings.**

The change from `u.LogWarning` to `log.Warn` maintains the correct behavior for non-help commands. Consider adding context with structured logging:

```diff
-					log.Warn(err.Error())
+					log.Warn(""Configuration file not found"", ""error"", err)
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 913fe03fc140d6687159c622982c5425909b127f and 55f569851605ed014fa5e02b3ca63c73fabec111.

</details>

<details>
<summary>📒 Files selected for processing (8)</summary>

* `cmd/cmd_utils.go` (3 hunks)
* `cmd/docs.go` (3 hunks)
* `cmd/root.go` (1 hunks)
* `internal/exec/file_utils.go` (2 hunks)
* `internal/exec/helmfile.go` (1 hunks)
* `internal/exec/tar_utils.go` (1 hunks)
* `pkg/config/cache.go` (2 hunks)
* `pkg/utils/hcl_utils.go` (3 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧠 Learnings (1)</summary>

<details>
<summary>cmd/docs.go (3)</summary>

```
Learnt from: samtholiya
PR: cloudposse/atmos#1077
File: pkg/downloader/custom_github_detector.go:0-0
Timestamp: 2025-02-21T20:56:05.539Z
Learning: The `github.com/charmbracelet/log` package should be imported with the alias `log` according to the project's import alias configuration.
```

```
Learnt from: RoseSecurity
PR: cloudposse/atmos#757
File: cmd/docs.go:52-54
Timestamp: 2024-11-01T14:45:32.417Z
Learning: In `cmd/docs.go`, capping the terminal width at 120 columns is considered acceptable and preferred after testing.
```

```
Learnt from: RoseSecurity
PR: cloudposse/atmos#848
File: pkg/utils/doc_utils.go:19-22
Timestamp: 2024-12-12T17:13:53.409Z
Learning: In `pkg/utils/doc_utils.go`, the `DisplayDocs` function uses the `PAGER` environment variable, which is intentionally user-configurable to allow users to specify custom pager commands that fit their workflow; adding validation to restrict it is not desired.
```

</details>

</details><details>
<summary>🪛 golangci-lint (1.64.8)</summary>

<details>
<summary>internal/exec/file_utils.go</summary>

[error] 29-29: func `closeFile` is unused

(unused)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: Lint (golangci)
* GitHub Check: Analyze (go)
* GitHub Check: Build (macos-latest, macos)
* GitHub Check: Build (windows-latest, windows)
* GitHub Check: Build (ubuntu-latest, linux)
* GitHub Check: Analyze (go)
* GitHub Check: Lint (golangci)
* GitHub Check: Summary

</details>

<details>
<summary>🔇 Additional comments (14)</summary><blockquote>

<details>
<summary>internal/exec/tar_utils.go (1)</summary>

`66-70`: **Excellent structured logging implementation.**

This change perfectly demonstrates the benefits of the logging refactor. Using structured key-value pairs (`""type"", header.Typeflag, ""file"", header.Name`) instead of formatted strings makes logs much more queryable and analyzable.

</details>
<details>
<summary>pkg/utils/hcl_utils.go (1)</summary>

`7-7`: **Correct import addition.**

The import follows the project's standard alias convention for the charmbracelet/log package.

</details>
<details>
<summary>cmd/docs.go (2)</summary>

`12-12`: **Consistent import addition.**

The import follows the project's standard alias convention.

---

`49-49`: **Proper deprecation warning migration.**

The changes from `u.LogWarning` to `log.Warn` for deprecation notices are correct and maintain the helpful guidance for users migrating their configuration.



Also applies to: 109-109

</details>
<details>
<summary>pkg/config/cache.go (2)</summary>

`11-11`: **Import addition looks good.**

Clean addition of the Charmbracelet logger import.

---

`106-110`: **Excellent structured logging implementation.**

The refactor properly replaces the utility warning with structured key-value pairs, making the log output more machine-readable and consistent.

</details>
<details>
<summary>internal/exec/file_utils.go (4)</summary>

`12-12`: **Import addition looks good.**

Proper addition of the Charmbracelet logger.

---

`25-25`: **Simple warning log conversion works well.**

The transition to structured logging maintains the same error message output.

---

`32-36`: **Great structured error logging implementation.**

The error logging now includes proper key-value pairs with file context and error details, making debugging much easier.

---

`29-38`: **Verify if closeFile function is actually unused.**

Static analysis flagged this function as unused. If it's truly unused, consider removing it to clean up the codebase.


```shell
#!/bin/bash
# Search for any usage of closeFile function in the codebase
rg -A 3 -B 3 ""closeFile\("" --type go
```

</details>
<details>
<summary>cmd/cmd_utils.go (4)</summary>

`577-577`: **Clean structured logging for cache load error.**

Proper key-value pair structure for error context.

---

`590-590`: **Good structured logging for GitHub API failure.**

Clear error context provided with structured format.

---

`595-595`: **Simple warning message handled well.**

Appropriate structured logging for missing release information.

---

`611-611`: **Consistent cache save error logging.**

Maintains the structured logging pattern for error handling.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3161518646,2944198860,coderabbitai[bot],DISMISSED,2025-06-19T23:24:27Z,
3161518646,2946677338,coderabbitai[bot],CHANGES_REQUESTED,2025-06-20T15:52:31Z,"**Actionable comments posted: 2**

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>internal/exec/tar_utils_test.go (1)</summary><blockquote>

`8-14`: **Test looks solid but could be more comprehensive.**

The test correctly verifies that `processTarHeader` handles unsupported types without errors. However, consider expanding coverage:

- Test additional unsupported types beyond just `TypeSymlink`
- Verify that the structured logging actually occurs (though this might require mocking)
- Add a comment explaining the expected behavior when unsupported types are encountered




```diff
 func TestProcessTarHeaderUnsupportedType(t *testing.T) {
+	// Test that processTarHeader gracefully handles unsupported tar types
+	// by logging a warning without returning an error
 	dir := t.TempDir()
-	hdr := &tar.Header{Name: ""link"", Typeflag: tar.TypeSymlink}
-	if err := processTarHeader(hdr, nil, dir); err != nil {
-		t.Fatalf(""unexpected error: %v"", err)
-	}
+	
+	testCases := []struct {
+		name     string
+		typeflag byte
+	}{
+		{""symbolic link"", tar.TypeSymlink},
+		{""hard link"", tar.TypeLink},
+		{""character device"", tar.TypeChar},
+		{""block device"", tar.TypeBlock},
+	}
+	
+	for _, tc := range testCases {
+		t.Run(tc.name, func(t *testing.T) {
+			hdr := &tar.Header{Name: tc.name, Typeflag: tc.typeflag}
+			if err := processTarHeader(hdr, nil, dir); err != nil {
+				t.Fatalf(""unexpected error for %s: %v"", tc.name, err)
+			}
+		})
+	}
 }
```

</blockquote></details>
<details>
<summary>pkg/config/cache_frequency_test.go (1)</summary><blockquote>

`8-35`: **Expand test coverage for parseFrequency.**

The table-driven test structure is solid, but the test cases could be more comprehensive.



Consider adding more edge cases to strengthen the test suite:

```diff
 	cases := []struct {
 		freq    string
 		expect  int64
 		wantErr bool
 	}{
 		{""60"", 60, false},
 		{""2h"", 7200, false},
 		{""daily"", 86400, false},
 		{""invalid"", 0, true},
+		{"""", 0, true},
+		{""0"", 0, false},
+		{""weekly"", 604800, false},
+		{""1m"", 60, false},
+		{""24h"", 86400, false},
+		{""-1"", 0, true},
+		{""abc123"", 0, true},
 	}
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 55f569851605ed014fa5e02b3ca63c73fabec111 and 0d3aea73f866b941ffee7a54ddb3737037787603.

</details>

<details>
<summary>📒 Files selected for processing (3)</summary>

* `internal/exec/file_utils_test.go` (1 hunks)
* `internal/exec/tar_utils_test.go` (1 hunks)
* `pkg/config/cache_frequency_test.go` (1 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: Build (ubuntu-latest, linux)
* GitHub Check: Build (windows-latest, windows)
* GitHub Check: Lint (golangci)
* GitHub Check: Analyze (go)
* GitHub Check: Summary

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>pkg/config/cache_frequency_test.go (1)</summary>

`1-6`: **Clean package structure and appropriate imports.**

Good foundation with standard testing setup and necessary imports.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3138219742,2919001050,ellipsis-dev[bot],COMMENTED,2025-06-11T23:57:36Z,
3121816149,2900955502,greptile-apps[bot],COMMENTED,2025-06-05T16:16:53Z,"<sub>1 file(s) reviewed, no comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=promptfoo_4344)</sub>"
3121816149,2900965700,sourcery-ai[bot],COMMENTED,2025-06-05T16:19:13Z,"Hey @mldangelo - I've reviewed your changes - here's some feedback:

- ""openai:o4-mini"" looks inconsistent with the other model keys—should this be ""openai:gpt-4o-mini"" (and label adjusted to ""OpenAI GPT-4o Mini"") for consistency?
- You’ve re-added ""openai:gpt-4.1-mini""—please dedupe or consolidate the entries to avoid duplicate options.
- Consider grouping/sorting the OpenAI model options (e.g., listing all GPT-4o variants then GPT-4.1 variants) for easier maintenance.

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3071995303,2849069294,capjamesg,APPROVED,2025-05-18T19:18:14Z,
3071995303,2849967145,PawelPeczek-Roboflow,APPROVED,2025-05-19T08:52:36Z,
3091758550,2868953474,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-26T17:50:54Z,"## Pull Request Overview

This pull request fixes a bug in the OpenAI and ChatGPT configuration by correcting the assignment of the frequency_penalty field. It also adds tests to ensure that the load_config function preserves all configuration values.
- Correct frequency_penalty assignment in neural_providers/openai.py and neural_providers/chatgpt.py.
- Added test cases in test/python/test_openai.py and test/python/test_chatgpt.py to validate configuration values.

### Reviewed Changes

Copilot reviewed 4 out of 4 changed files in this pull request and generated no comments.

| File                                | Description                                                    |
| ----------------------------------- | -------------------------------------------------------------- |
| test/python/test_openai.py          | Added test_load_config_valid_values to verify config mapping.  |
| test/python/test_chatgpt.py         | Added test_load_config_valid_values to verify config mapping.  |
| neural_providers/openai.py          | Fixed frequency_penalty assignment to use the correct field.   |
| neural_providers/chatgpt.py         | Fixed frequency_penalty assignment to use the correct field.   |


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**neural_providers/openai.py:144**
* The frequency_penalty field was incorrectly set to presence_penalty; the change correctly assigns frequency_penalty.
```
-        frequency_penalty=presence_penalty,
```
**neural_providers/chatgpt.py:154**
* The frequency_penalty field was incorrectly set to presence_penalty; the change correctly assigns frequency_penalty.
```
-        frequency_penalty=presence_penalty,
```
</details>

"
3091758550,2874465202,w0rp,COMMENTED,2025-05-28T10:25:05Z,
3091758550,2874469496,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-28T10:26:31Z,"## Pull Request Overview

This PR fixes a typo in mapping `frequency_penalty` when building provider configs and adds tests to verify that `load_config` preserves all supplied values for both OpenAI and ChatGPT.

- Correct `frequency_penalty` assignment in `neural_providers/openai.py` and `neural_providers/chatgpt.py`
- Add `test_load_config_valid_values` in both `test_openai.py` and `test_chatgpt.py` to verify all fields are loaded

### Reviewed Changes

Copilot reviewed 4 out of 4 changed files in this pull request and generated 1 comment.

| File                         | Description                                            |
| ---------------------------- | ------------------------------------------------------ |
| test/python/test_openai.py   | Add `test_load_config_valid_values` for OpenAI provider |
| test/python/test_chatgpt.py  | Add `test_load_config_valid_values` for ChatGPT provider |
| neural_providers/openai.py   | Fix `frequency_penalty` to use correct variable        |
| neural_providers/chatgpt.py  | Fix `frequency_penalty` to use correct variable        |


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**test/python/test_openai.py:69**
* Consider adding tests for default fallback values (e.g., omitting `presence_penalty` or `frequency_penalty`) to ensure `load_config` applies its default settings correctly.
```
def test_load_config_valid_values():
```
**test/python/test_chatgpt.py:84**
* [nitpick] The mock variable name `compl_mock` is inconsistent with `completion_mock` used elsewhere; consider renaming to `completion_mock` for clarity and consistency.
```
mock.patch.object(chatgpt, 'get_chatgpt_completion') as compl_mock:
```
</details>

"
3091758550,2874483552,w0rp,COMMENTED,2025-05-28T10:30:46Z,
3070921263,2848347143,coderabbitai[bot],COMMENTED,2025-05-17T16:35:52Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>mistralrs-vision/src/transforms.rs (1)</summary><blockquote>

`33-35`: **Suggest improving Rustdoc formatting for the formula.**

To ensure proper rendering in generated documentation, consider using a fenced code block with triple backticks. For example:

```rust
/// The value is computed as follows:
/// ```
/// x[channel] = (x[channel] - mean[channel]) / std[channel]
/// ```
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**
**Cache: Disabled due to data retention organization setting**
**Knowledge Base: Disabled due to data retention organization setting**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between dc8700916788477c36b624915de6646a3eacb99b and d0e61be6df825c12348245ee10ba8ed997a7a117.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `mistralrs-vision/src/transforms.rs` (1 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: Clippy
* GitHub Check: Test Suite (macOS-latest, stable)
* GitHub Check: Docs
* GitHub Check: Check (ubuntu-latest, stable)
* GitHub Check: Check (windows-latest, stable)
* GitHub Check: Check (macOS-latest, stable)
* GitHub Check: Test Suite (ubuntu-latest, stable)
* GitHub Check: Test Suite (windows-latest, stable)

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>mistralrs-vision/src/transforms.rs (1)</summary>

`34-34`: **Documentation update: normalization formula is now correct.**

The revised comment now precisely reflects the implementation—subtract the mean before dividing by the standard deviation—so it’s fully aligned with the `Normalize` transform logic.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3166337154,2951826178,nektro,APPROVED,2025-06-24T00:09:46Z,
3103765496,2881964705,ChrisHuie,APPROVED,2025-05-30T17:25:01Z,
3142979532,2924148526,turtleDev,APPROVED,2025-06-13T09:56:16Z,
3086079968,2864147962,ReneWerner87,APPROVED,2025-05-23T11:48:14Z,
3132024225,2911864300,cubic-dev-ai[bot],COMMENTED,2025-06-10T03:30:25Z,cubic reviewed 3 files and found no issues. Review PR in [cubic.dev](https://cubic.dev/pr/cartography-cncf/cartography/pull/1623).
3125970385,2906484052,patmmccann,COMMENTED,2025-06-07T00:40:09Z,
3145510800,2927293329,gemini-code-assist[bot],COMMENTED,2025-06-14T06:09:04Z,"## Summary of Changes

Hello @rgerhards, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request focuses on improving the documentation of the core rsyslog runtime interface defined in `rsyslog.h`. The changes involve adding Doxygen-compatible comments to various elements within the header file, including the file header itself, enums, structs, global variables, and function prototypes. The goal is to make the runtime API more accessible and understandable for developers by enabling automated documentation generation.

### Highlights

* **Doxygen File Header**: Replaced the existing multi-line comment header in `runtime/rsyslog.h` with a standard Doxygen file header block (`/** @file ... */`) to properly document the file's purpose and licensing for documentation generation.
* **Enum Documentation**: Added Doxygen documentation blocks (`/** @enum ... */`) to the `rsRetVal_` and `rsObjectID` enums, providing a brief description of their purpose and usage.
* **Struct Documentation**: Added a Doxygen documentation block (`/** @struct ... */`) to the `actWrkrIParams` struct, explaining its role as immutable parameters for output workers and noting its importance for the output module interface.
* **Global Variable Documentation**: Added Doxygen comments (`/** ... */`) to several global variables (`default_thread_attr`, `default_sched_param`, `default_thr_sched_policy`, `glblModPath`, `glblErrLogger`, `ourConf`) to clarify their purpose.
* **Function Prototype Documentation**: Added Doxygen comments (`/** ... */`) to function prototypes (`processImInternal`, `rsrtInit`, `rsrtExit`, `rsrtIsInit`, `rsrtSetErrLogger`, `dfltErrLogger`, `queryLocalHostname`) to describe their functionality.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configureGemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3145510800,2927295337,gemini-code-assist[bot],COMMENTED,2025-06-14T06:09:57Z,"## Code Review

This pull request focuses on improving the documentation within `runtime/rsyslog.h` by converting existing comments to Doxygen format and adding new Doxygen comments for various enums, structs, global variables, and function prototypes. These changes enhance code clarity and maintainability by making the interface easier to understand and auto-document.

However, a significant concern is the failing test (`tests/mmutf8fix_no_error.sh`) mentioned in the pull request description. While these documentation changes are unlikely to be the direct cause, it's crucial to ensure this failure is addressed or confirmed to be unrelated before merging. A pull request should ideally not be merged if it's associated with new or existing test failures without a clear plan for resolution.

Two areas for improvement in the Doxygen comments themselves have been noted below."
3161348851,2944039342,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-19T21:19:00Z,"## Pull Request Overview

Adds detailed documentation for activity types and required form fields, enhances inline docs, and updates the README to point to the new reference.

- Add Rust doc comments for each activity constant mirroring the external docs.
- Introduce `docs/activity-types.md` with a full reference and required form fields matrix.
- Update `README.md` to link to the new activity-types documentation.

### Reviewed Changes

Copilot reviewed 3 out of 3 changed files in this pull request and generated no comments.

| File                                           | Description                                                            |
| ---------------------------------------------- | ---------------------------------------------------------------------- |
| src-core/src/activities/activities_constants.rs | Added `///` comments above each `ACTIVITY_TYPE_*` constant for quick reference. |
| docs/activity-types.md                         | Created a comprehensive guide with activity reference and required form fields. |
| README.md                                      | Added link to `docs/activity-types.md` highlighting required form fields. |


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**docs/activity-types.md:56**
* [nitpick] For asset transfers, consider including `Symbol` alongside `Amount` if the form requires specifying the asset being transferred.
```
| **TRANSFER_IN** | Amount |
```
**docs/activity-types.md:60**
* [nitpick] Rename `Fee Amount` to `Amount` for consistency with other activity rows where only `Amount` is used.
```
| **FEE** | Fee Amount |
```
</details>

"
3118547220,2897530108,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-04T17:21:55Z,"## Pull Request Overview

This pull request upgrades the wagmi package from version 2.15.4 to 2.15.5 across various package.json files in the project, including the main site, examples, and template projects.  
- Updated wagmi version in site package.json  
- Updated wagmi version in packages and example projects  
- Updated changelog entries to reflect the new version

### Reviewed Changes

Copilot reviewed 21 out of 21 changed files in this pull request and generated no comments.

<details>
<summary>Show a summary per file</summary>

| File                                              | Description                                                     |
| ------------------------------------------------- | --------------------------------------------------------------- |
| site/package.json                                 | Updated wagmi version in site package                          |
| packages/example/package.json                     | Updated wagmi version in example package                         |
| packages/create-rainbowkit/templates/next-app/package.json | Updated wagmi version in Next.js template                         |
| packages/create-rainbowkit/generated-test-app/package.json | Updated wagmi version in generated test app template               |
| package.json                                      | Updated wagmi version in root package                           |
| examples/with-vite/package.json                   | Updated wagmi version in Vite example                           |
| examples/with-remix/package.json                  | Updated wagmi version in Remix example                          |
| examples/with-react-router/package.json           | Updated wagmi version in React Router example                   |
| examples/with-next/package.json                   | Updated wagmi version in Next.js example                         |
| examples/with-next-wallet-button/package.json     | Updated wagmi version in Next.js wallet button example             |
| examples/with-next-siwe-next-auth/package.json    | Updated wagmi version in Next.js SIWE Next Auth example            |
| examples/with-next-siwe-iron-session/package.json  | Updated wagmi version in Next.js SIWE Iron Session example           |
| examples/with-next-rainbow-button/package.json     | Updated wagmi version in Next.js Rainbow Button example             |
| examples/with-next-mint-nft/package.json           | Updated wagmi version in Next.js Mint NFT example                  |
| examples/with-next-custom-button/package.json      | Updated wagmi version in Next.js Custom Button example              |
| examples/with-next-app/package.json                | Updated wagmi version in Next.js App example                        |
| examples/with-next-app-i18n/package.json           | Updated wagmi version in Next.js i18n App example                    |
| examples/with-create-react-app/package.json        | Updated wagmi version in Create React App example                   |
| .changeset/pink-ducks-smile.md                     | Updated changelog entry for wagmi version change                      |
| .changeset/metal-shoes-flash.md                    | Updated changelog entry for wagmi version upgrade                      |
</details>




"
3124862460,2905013655,terzioglub,APPROVED,2025-06-06T13:57:01Z,
3138209162,2918838792,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-11T21:55:22Z,"## Pull Request Overview

This PR updates the MobileOptions component to support EIP-6963 connectors on mobile and orders installed connectors first.  
- Refactors the wallet connector logic by removing a filter and introducing a sort based on groupIndex  
- Introduces a changeset documenting the update

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated no comments.

| File | Description |
| ---- | ----------- |
| packages/rainbowkit/src/components/ConnectOptions/MobileOptions.tsx | Removes filtering on isRainbowKitConnector and sorts connectors by groupIndex to prioritize installed ones |
| .changeset/mobile-eip6963.md | Documents support for EIP-6963 connectors and updated ordering on mobile |


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**packages/rainbowkit/src/components/ConnectOptions/MobileOptions.tsx:212**
* Removing the filter on isRainbowKitConnector enables support for EIP-6963 connectors, but please ensure that sorting solely by groupIndex is the intended mechanism to prioritize installed connectors on mobile. Verify that all connectors have a defined groupIndex to avoid unexpected ordering.
```
const wallets = useWalletConnectors()
```
</details>

"
3131639025,2911518316,coderabbitai[bot],COMMENTED,2025-06-09T22:36:48Z,"**Actionable comments posted: 4**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: ASSERTIVE**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between c176d1f425415bcadb20c317403ed45f233f8cf6 and 4aca2378a2e986248b068c6213034f2d56a24719.

</details>

<details>
<summary>📒 Files selected for processing (5)</summary>

* `src/redteam/constants.ts` (1 hunks)
* `src/redteam/constants/frameworks.ts` (1 hunks)
* `src/redteam/constants/metadata.ts` (1 hunks)
* `src/redteam/constants/plugins.ts` (1 hunks)
* `src/redteam/constants/strategies.ts` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>src/redteam/constants/plugins.ts (1)</summary><blockquote>

<details>
<summary>src/redteam/plugins/agentic/constants.ts (1)</summary>

* `MEMORY_POISONING_PLUGIN_ID` (1-1)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (15)</summary>

* GitHub Check: Share Test
* GitHub Check: webui tests
* GitHub Check: Build Docs
* GitHub Check: Test on Node 24.x and macOS-latest
* GitHub Check: Test on Node 18.x and macOS-latest
* GitHub Check: Test on Node 18.x and windows-latest
* GitHub Check: Test on Node 24.x and ubuntu-latest
* GitHub Check: Redteam Custom Enterprise Server
* GitHub Check: Redteam
* GitHub Check: Build on Node 24.x
* GitHub Check: Build on Node 22.x
* GitHub Check: Build on Node 18.x
* GitHub Check: Build on Node 20.x
* GitHub Check: Style Check
* GitHub Check: Analyze (javascript-typescript)

</details>

<details>
<summary>🔇 Additional comments (2)</summary><blockquote>

<details>
<summary>src/redteam/constants.ts (1)</summary>

`1-4`: **Aggregated re-exports look good**

The barrel file cleanly re-exports the new sub-modules and keeps the public surface intact.  
No issues spotted.

</details>
<details>
<summary>src/redteam/constants/frameworks.ts (1)</summary>

`503-528`: **Nice touch – aliasing entire framework mappings**

The consolidated alias list and mapping tables make consumption straightforward and keep the public API tidy.  
No correctness issues noticed.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3131639025,2911943857,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-10T04:46:37Z,"## Pull Request Overview

This PR breaks out the Red Team constants into smaller modules and adds comprehensive unit tests to ensure each constant set and mapping behaves as expected.  
- Introduce new `strategies.ts` and `plugins.ts` modules with typed exports for strategy and plugin identifiers.  
- Add matching test suites (`strategies.test.ts`, `plugins.test.ts`, `metadata.test.ts`, `frameworks.test.ts`) to cover all new constants.

### Reviewed Changes

Copilot reviewed 9 out of 9 changed files in this pull request and generated 3 comments.

<details>
<summary>Show a summary per file</summary>

| File                                               | Description                                                      |
| -------------------------------------------------- | ---------------------------------------------------------------- |
| src/redteam/constants/strategies.ts               | Define and export framework compliance IDs and all strategy lists and mappings |
| test/redteam/constants/strategies.test.ts         | Add unit tests verifying each strategy constant array and `ALL_STRATEGIES` |
| src/redteam/constants/plugins.ts                  | Define and export default counts, model/provider constants, and all plugin lists and mappings |
| test/redteam/constants/plugins.test.ts            | Add unit tests verifying each plugin constant, set behavior, and sorting |
| test/redteam/constants/metadata.test.ts           | Add unit tests covering metadata mappings, display names, and descriptions |
| test/redteam/constants/frameworks.test.ts         | Add unit tests covering framework names, top-10 lists, and plugin/strategy mappings |
</details>



<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**test/redteam/constants/plugins.test.ts:100**
* This test only verifies that `ADDITIONAL_PLUGINS` is a non-empty array. Consider adding an assertion for a known plugin ID (e.g., `'ascii-smuggling'`) to ensure specific entries are present.
```
  it('should define ADDITIONAL_PLUGINS array', () => {
```
</details>

"
3110814854,2889120985,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-02T16:18:50Z,"## Pull Request Overview

This PR updates the downloader to display detailed backend error messages when downloads fail.  
- Adds asynchronous reading of the error text from the response.  
- Throws a new Error with the retrieved text if available.



"
3110814854,2890038797,DarioGii,APPROVED,2025-06-02T21:49:15Z,
3110814854,2958787510,Ludy87,APPROVED,2025-06-25T16:01:08Z,
3131664334,2915233693,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-10T23:08:21Z,"## Pull Request Overview

This PR restructures and clarifies the development documentation by renaming the guide, adding explicit setup steps, and streamlining formatting and style instructions.

- Adds a **Setup** section with Python and Rust toolchain commands  
- Refines **Formatting** and **Testing** sections for consistency  
- Simplifies the **Style Guide** to two concise bullet points


<details>
<summary>Comments suppressed due to low confidence (3)</summary>

**AGENTS.md:10**
* Add a step to create and activate a Python virtual environment (for example: `python -m venv .venv && source .venv/bin/activate`) before installing packages to isolate dependencies.
```
pip install -r requirements.txt
```
**AGENTS.md:11**
* [nitpick] Consider using `rustup install stable` or `rustup update stable` to ensure the stable toolchain is installed if it isn’t already, since `default` only switches the active toolchain.
```
rustup default stable
```
**AGENTS.md:28**
* [nitpick] If there are Python tests in the repo, include their invocation (for example, `pytest`) in the Testing section so both Rust and Python code are covered.
```
cargo test --all
```
</details>

"
3101091731,2879184659,coderabbitai[bot],COMMENTED,2025-05-29T18:10:09Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>editor/grida-canvas-react/provider.tsx (1)</summary><blockquote>

`1076-1105`: **Excellent implementation of asynchronous image dimension detection!**

This change successfully addresses the PR objective by using the image's natural dimensions instead of auto-sizing. The implementation correctly:

- Asynchronously loads the image to determine actual dimensions
- Provides proper fallback (100×100) when image loading fails  
- Handles resource cleanup by revoking object URLs in both success and error cases
- Maintains the existing interface and positioning logic




**Optional refactor to reduce code duplication:**

Consider extracting the common node creation logic to reduce duplication between `onload` and `onerror` handlers:

```diff
const insertImage = useCallback(
  (
    name: string,
    file: File,
    position?: {
      clientX: number;
      clientY: number;
    }
  ) => {
    const [x, y] = canvasXY(
      position ? [position.clientX, position.clientY] : [0, 0]
    );

    const url = URL.createObjectURL(file);
    const img = new Image();
+   
+   const createAndInsertNode = (width: number, height: number) => {
+     const node = {
+       type: ""image"",
+       name: name,
+       width,
+       height,
+       fit: ""cover"",
+       src: url,
+       left: x,
+       top: y,
+     } satisfies grida.program.nodes.NodePrototype;
+     instance.insertNode(node);
+     URL.revokeObjectURL(url);
+   };
+   
    img.onload = () => {
-     const node = {
-       type: ""image"",
-       name: name,
-       width: img.naturalWidth,
-       height: img.naturalHeight,
-       fit: ""cover"",
-       src: url,
-       left: x,
-       top: y,
-     } satisfies grida.program.nodes.NodePrototype;
-     instance.insertNode(node);
-     URL.revokeObjectURL(url);
+     createAndInsertNode(img.naturalWidth, img.naturalHeight);
    };
    img.onerror = () => {
-     const node = {
-       type: ""image"",
-       name: name,
-       width: 100,
-       height: 100,
-       fit: ""cover"",
-       src: url,
-       left: x,
-       top: y,
-     } satisfies grida.program.nodes.NodePrototype;
-     instance.insertNode(node);
-     URL.revokeObjectURL(url);
+     createAndInsertNode(100, 100);
    };
    img.src = url;
  },
  [instance, canvasXY]
);
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 1b108e715301ae874218144d32f828deea62dcac and f48de0c8f252e36c9be724721e442a29012c429f.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `editor/grida-canvas-react/provider.tsx` (1 hunks)

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3071684389,2848925304,ellipsis-dev[bot],COMMENTED,2025-05-18T12:31:21Z,
3085512294,2864946264,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-23T16:04:35Z,"## Pull Request Overview

This PR adds a graph-based visualization for memories and knowledge by exposing embeddings via the API, computing 2D projections with PCA, and rendering a force-directed graph.  
Key changes:
- Expose `includeEmbedding` flag in client and server API to fetch raw embeddings  
- Implement `computePca` with unit tests and integrate `MemoryGraph` component  
- Add list/graph toggle in `AgentMemoryViewer` and `KnowledgeManager`

### Reviewed Changes

Copilot reviewed 9 out of 9 changed files in this pull request and generated 3 comments.

<details>
<summary>Show a summary per file</summary>

| File                                          | Description                                                 |
| --------------------------------------------- | ----------------------------------------------------------- |
| packages/client/src/lib/pca.ts                | New PCA implementation to project embeddings                |
| packages/client/src/lib/pca.test.ts           | Basic unit test for the PCA projection                      |
| packages/client/src/lib/api.ts                | Add `includeEmbedding` parameter and URL param handling     |
| packages/client/src/hooks/use-query-hooks.ts  | Extend `useAgentMemories` hook with `includeEmbedding` flag |
| packages/client/src/components/memory-viewer.tsx | Add graph toggle and integrate `MemoryGraph`               |
| packages/client/src/components/memory-graph.tsx | New `MemoryGraph` component using `react-force-graph-2d`   |
| packages/client/src/components/knowledge-manager.tsx | Add graph toggle in knowledge manager                   |
| packages/client/package.json                  | Add `react-force-graph` dependency                          |
| packages/cli/src/server/api/agent.ts          | Support `includeEmbedding` on server-side                   |
</details>



<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**packages/client/src/components/memory-graph.tsx:13**
* [nitpick] The variable name `data` is very generic. Renaming it to something like `graphData` would improve readability and make its purpose clearer.
```
const data = useMemo(() => {
```
**packages/client/src/lib/pca.test.ts:15**
* This test only checks that the second coordinate is defined. To ensure correctness, add assertions comparing results against expected projection values or properties (e.g., orthogonality, variance explained).
```
expect(result[0][1]).toBeDefined();
```
</details>

"
3070600620,2848203964,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-17T09:31:29Z,"## Pull Request Overview

This PR fixes the documentation example for the service connector by replacing the incorrect API method upload_file with the correct copyfile method.  
- Update the S3ArtifactStore example in the docs to use copyfile  
- Update the corresponding code snippet in the documentation


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**docs/book/how-to/stack-components/service_connectors.md:149**
* Please verify that the new 'copyfile' API is available in the current version of the S3ArtifactStore. If there are additional requirements or behaviors for this method compared to the old 'upload_file', consider updating the documentation to clarify its usage.
```
store.copyfile(model.path, 'models/model.pkl')
```
</details>

"
3070600620,2848803313,htahir1,APPROVED,2025-05-18T07:59:40Z,
3075300600,2852237304,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-20T00:36:37Z,"## Pull Request Overview

This PR adds support for proxy handling during ureq downloads by enabling the ""proxy-from-env"" feature.  
- Enabled ""proxy-from-env"" feature in ureq dependency  
- Updated Cargo.toml to include the new feature flag


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**Cargo.toml:138**
* Consider adding tests to ensure that ureq correctly honors proxy environment variables when using the 'proxy-from-env' feature.
```
ureq = { version = ""2.12.1"", features = [""json"", ""proxy-from-env""] }
```
</details>

"
3161636261,2944299806,AYadrov,APPROVED,2025-06-20T01:13:48Z,"I see the idea, we can `remove-zombie-nodes` before running schedule - which means that `roots` do not need to be carried around as default `batch-roots` already will point to the expressions we want to add.
Good logic simplification to me"
3118002577,2896927143,coderabbitai[bot],COMMENTED,2025-06-04T14:16:19Z,"**Actionable comments posted: 1**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>packages/core/src/utils/object-equal.spec.ts (1)</summary><blockquote>

`8-26`: **Excellent test coverage for basic scenarios.**

The test cases effectively cover the core functionality of `objectEqual`. Consider adding these edge cases to make the test suite more robust:



```diff
+test('handles null and undefined values', () => {
+  expect(objectEqual(null, null)).toBe(true)
+  expect(objectEqual(undefined, undefined)).toBe(true)
+  expect(objectEqual(null, undefined)).toBe(false)
+  expect(objectEqual({ a: null }, { a: null })).toBe(true)
+  expect(objectEqual({ a: undefined }, { a: undefined })).toBe(true)
+})
+
+test('handles arrays within objects', () => {
+  expect(objectEqual({ arr: [1, 2] }, { arr: [1, 2] })).toBe(true)
+  expect(objectEqual({ arr: [1, 2] }, { arr: [1, 3] })).toBe(false)
+})
+
+test('handles different object key counts', () => {
+  expect(objectEqual({ a: 1 }, { a: 1, b: 2 })).toBe(false)
+  expect(objectEqual({ a: 1, b: 2 }, { a: 1 })).toBe(false)
+})
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between b9475131c126bd0872e7e40c6ccae13e1e6fffd2 and 45b2216ac355f1cdd4498f25f83020e22c186b29.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `packages/core/src/utils/merge-objects.spec.ts` (1 hunks)
* `packages/core/src/utils/object-equal.spec.ts` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>packages/core/src/utils/merge-objects.spec.ts (1)</summary><blockquote>

<details>
<summary>packages/core/src/utils/merge-objects.ts (1)</summary>

* `mergeObjects` (4-11)

</details>

</blockquote></details>

</details><details>
<summary>🪛 GitHub Check: typecheck</summary>

<details>
<summary>packages/core/src/utils/merge-objects.spec.ts</summary>

[failure] 12-12: 
Type '{ b: number; }' has no properties in common with type 'Partial<{ a: number; }>'.

</details>

</details>
<details>
<summary>🪛 GitHub Actions: size</summary>

<details>
<summary>packages/core/src/utils/merge-objects.spec.ts</summary>

[error] 12-12: TypeScript error TS2559: Type '{ b: number; }' has no properties in common with type 'Partial<{ a: number; }>'.

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (1)</summary>

* GitHub Check: lint

</details>

<details>
<summary>🔇 Additional comments (2)</summary><blockquote>

<details>
<summary>packages/core/src/utils/merge-objects.spec.ts (2)</summary>

`16-20`: **LGTM! Good test for undefined value handling.**

This test correctly verifies that undefined values are removed and can be overwritten by subsequent objects.

---

`23-26`: **LGTM! Excellent test for null/undefined input handling.**

This test properly validates that the function ignores null and undefined arguments, which aligns with the implementation that filters out nullish values.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3118002577,2897125762,coderabbitai[bot],COMMENTED,2025-06-04T15:03:55Z,"**Actionable comments posted: 2**

<details>
<summary>🧹 Nitpick comments (5)</summary><blockquote>

<details>
<summary>packages/core/src/utils/deep-equals.spec.ts (2)</summary><blockquote>

`22-26`: **Add negative test case for OrderedMap comparison.**

While the positive case is covered, consider adding a test for unequal OrderedMaps to ensure comprehensive coverage.


```diff
 test('ordered maps', () => {
   const map1 = OrderedMap.from({ a: 1, b: 2 })
   const map2 = OrderedMap.from({ a: 1, b: 2 })
+  const map3 = OrderedMap.from({ a: 1, b: 3 })
   expect(deepEquals(map1, map2)).toBe(true)
+  expect(deepEquals(map1, map3)).toBe(false)
 })
```

---

`1-27`: **Consider adding comprehensive edge case tests.**

The current tests cover the main functionality well, but consider adding tests for common edge cases to improve robustness:

- Null and undefined values
- Empty arrays and objects  
- Primitive types (strings, numbers, booleans)
- Mixed type comparisons
- Circular references (if supported)



Example additional test cases:

```typescript
test('edge cases', () => {
  // Null and undefined
  expect(deepEquals(null, null)).toBe(true)
  expect(deepEquals(undefined, undefined)).toBe(true)
  expect(deepEquals(null, undefined)).toBe(false)
  
  // Empty containers
  expect(deepEquals([], [])).toBe(true)
  expect(deepEquals({}, {})).toBe(true)
  
  // Primitives
  expect(deepEquals(42, 42)).toBe(true)
  expect(deepEquals('hello', 'hello')).toBe(true)
  expect(deepEquals(true, true)).toBe(true)
  
  // Mixed types
  expect(deepEquals(42, '42')).toBe(false)
  expect(deepEquals([], {})).toBe(false)
})
```

</blockquote></details>
<details>
<summary>packages/core/src/utils/combine-event-handlers.spec.ts (2)</summary><blockquote>

`21-27`: **Good test for the fallback behavior with a minor suggestion.**

The test correctly validates that the combined handler returns `false` when all handlers return `false`. Consider adding assertions to verify that both handlers were actually called:

```diff
 test('returns false when all handlers return false', () => {
   const handler1 = vi.fn(() => false)
   const handler2 = vi.fn(() => false)
   const [setHandlers, run] = combineEventHandlers<() => boolean>()
   setHandlers([handler1, handler2])
   expect(run()).toBe(false)
+  expect(handler1).toHaveBeenCalled()
+  expect(handler2).toHaveBeenCalled()
 })
```

---

`9-27`: **Consider adding tests for additional edge cases.**

The current tests provide excellent coverage of the core functionality. For more comprehensive testing, consider adding tests for:

1. Empty handler arrays
2. Handlers returning `void` (treated as `false`)
3. Single handler scenarios
4. Handlers with arguments (utilizing the generic nature)

Example additional test:

```typescript
test('handles empty handler array', () => {
  const [setHandlers, run] = combineEventHandlers<() => boolean>()
  setHandlers([])
  expect(run()).toBe(false)
})

test('handles handlers returning void', () => {
  const handler1 = vi.fn(() => {}) // returns void
  const handler2 = vi.fn(() => false)
  const [setHandlers, run] = combineEventHandlers<() => boolean | void>()
  setHandlers([handler1, handler2])
  expect(run()).toBe(false)
  expect(handler1).toHaveBeenCalled()
  expect(handler2).toHaveBeenCalled()
})
```

</blockquote></details>
<details>
<summary>packages/core/src/utils/maybe-run.spec.ts (1)</summary><blockquote>

`15-18`: **Consider adding more comprehensive test cases**

While the current tests cover the basic functionality, consider adding edge cases to improve coverage:



```diff
 test('returns value when not a function', () => {
   expect(maybeRun(5)).toBe(5)
   expect(maybeRun(undefined)).toBeUndefined()
+  expect(maybeRun(null)).toBeNull()
+  expect(maybeRun('')).toBe('')
+  expect(maybeRun([])).toEqual([])
+  expect(maybeRun({})).toEqual({})
 })
+
+test('handles function with no arguments', () => {
+  const fn = vi.fn(() => 'result')
+  expect(maybeRun(fn)).toBe('result')
+  expect(fn).toHaveBeenCalledWith(undefined)
+})
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 GitHub Check: typecheck</summary>

[failure] 17-17: 
Argument of type '[]' is not assignable to parameter of type 'never'.

---

[failure] 16-16: 
Argument of type '[]' is not assignable to parameter of type 'never'.

</details>
<details>
<summary>🪛 GitHub Actions: size</summary>

[error] 16-16: TypeScript error TS2345: Argument of type '[]' is not assignable to parameter of type 'never'.

</details>
<details>
<summary>🪛 GitHub Actions: CI</summary>

[error] 16-16: TypeScript error TS2345: Argument of type '[]' is not assignable to parameter of type 'never'.

</details>

</details>

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 45b2216ac355f1cdd4498f25f83020e22c186b29 and a3b0878e875852a10dcdba2e42c2bdead7a57dca.

</details>

<details>
<summary>📒 Files selected for processing (8)</summary>

* `packages/core/src/utils/cache.spec.ts` (1 hunks)
* `packages/core/src/utils/clsx.spec.ts` (1 hunks)
* `packages/core/src/utils/combine-event-handlers.spec.ts` (1 hunks)
* `packages/core/src/utils/deep-equals.spec.ts` (1 hunks)
* `packages/core/src/utils/get-id.spec.ts` (1 hunks)
* `packages/core/src/utils/maybe-run.spec.ts` (1 hunks)
* `packages/core/src/utils/merge-objects.spec.ts` (1 hunks)
* `packages/core/src/utils/unicode.spec.ts` (1 hunks)

</details>

<details>
<summary>✅ Files skipped from review due to trivial changes (3)</summary>

* packages/core/src/utils/unicode.spec.ts
* packages/core/src/utils/cache.spec.ts
* packages/core/src/utils/clsx.spec.ts

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (1)</summary>

* packages/core/src/utils/merge-objects.spec.ts

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>packages/core/src/utils/combine-event-handlers.spec.ts (1)</summary><blockquote>

<details>
<summary>packages/core/src/utils/combine-event-handlers.ts (1)</summary>

* `combineEventHandlers` (3-27)

</details>

</blockquote></details>

</details><details>
<summary>🪛 GitHub Check: typecheck</summary>

<details>
<summary>packages/core/src/utils/maybe-run.spec.ts</summary>

[failure] 17-17: 
Argument of type '[]' is not assignable to parameter of type 'never'.

---

[failure] 16-16: 
Argument of type '[]' is not assignable to parameter of type 'never'.

</details>

</details>
<details>
<summary>🪛 GitHub Actions: size</summary>

<details>
<summary>packages/core/src/utils/maybe-run.spec.ts</summary>

[error] 16-16: TypeScript error TS2345: Argument of type '[]' is not assignable to parameter of type 'never'.

</details>

</details>
<details>
<summary>🪛 GitHub Actions: CI</summary>

<details>
<summary>packages/core/src/utils/maybe-run.spec.ts</summary>

[error] 16-16: TypeScript error TS2345: Argument of type '[]' is not assignable to parameter of type 'never'.

</details>

</details>

</details>

<details>
<summary>🔇 Additional comments (9)</summary><blockquote>

<details>
<summary>packages/core/src/utils/deep-equals.spec.ts (3)</summary>

`1-8`: **LGTM! Clean test setup with appropriate imports.**

The import structure is well-organized and follows Vitest testing conventions properly.

---

`9-12`: **Good coverage of array equality with order sensitivity.**

The test correctly validates that `deepEquals` respects array order, which is crucial for deep equality comparison.

---

`14-20`: **Solid nested object testing.**

The test properly validates deep structural equality for nested objects, covering both positive and negative cases.

</details>
<details>
<summary>packages/core/src/utils/combine-event-handlers.spec.ts (2)</summary>

`1-7`: **LGTM!**

Clean import structure with appropriate testing utilities and the function under test.

---

`9-19`: **Excellent test coverage for the core functionality.**

This test correctly validates the reverse execution order and short-circuiting behavior. The assertions properly verify that:
- Handlers execute in reverse order (handler3 → handler2 → handler1)
- Execution stops when handler2 returns `true`
- The combined handler returns `true` as expected

</details>
<details>
<summary>packages/core/src/utils/get-id.spec.ts (2)</summary>

`1-6`: **LGTM: Clean import structure**

The imports are well-organized and follow standard testing patterns.

---

`11-13`: <details>
<summary>✅ Verification successful</summary>

**Verify modulo behavior matches actual implementation**

The test assumes that `getId()` uses modulo arithmetic with `Number.MAX_SAFE_INTEGER`, but this should be verified against the actual implementation.



Let me check the actual `getId` implementation to confirm the modulo behavior:

---

🏁 Script executed:

```shell
#!/bin/bash
# Description: Examine the getId implementation to verify the modulo behavior and ID format
# Expected: Find the getId function implementation to validate test assumptions

# Find and examine the getId implementation
fd ""get-id"" --type f --extension ts --extension js | grep -v spec | grep -v test | head -5 | xargs cat
```

Length of output: 391

---



</details>

**Modulo behavior in getId is correct**

I’ve verified that in packages/core/src/utils/get-id.ts, the exported getId() implementation uses  
```ts
id = (id + 1) % Number.MAX_SAFE_INTEGER
```  
so the test’s expectation of `(firstNum + 1) % Number.MAX_SAFE_INTEGER` is accurate. No changes are required.

</details>
<details>
<summary>packages/core/src/utils/maybe-run.spec.ts (2)</summary>

`1-7`: **LGTM: Clean imports and setup**

The import structure is correct and follows standard vitest testing patterns.

---

`9-13`: **LGTM: Function execution test is well-structured**

This test properly verifies that `maybeRun` executes the function with the provided argument and returns the expected result. The use of `vi.fn()` for mocking and verification is appropriate.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3115694514,2894368888,joewagner,APPROVED,2025-06-03T23:22:13Z,Nice catch!
3115694514,2894369226,dtbuchholz,APPROVED,2025-06-03T23:22:26Z,"nice! 

does that chatgpt/codex link have a ""sharable"" view? i'm just curious what it looks like (my ChatGPT account is a personal one, so i can't see that codex task info)"
3128087595,2908280919,devgony,APPROVED,2025-06-08T08:54:48Z,
3128208281,2923373353,devgony,APPROVED,2025-06-13T04:20:46Z,
3081557416,2865105598,pakrym-oai,APPROVED,2025-05-23T16:59:30Z,
3097657837,2875421414,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-28T14:51:58Z,"## Pull Request Overview

This PR fixes the rendering logic for the ""children"" property in the renderNode function and improves handling of nested elements.  
- Fixes the loop iteration to correctly iterate over the children object.  
- Adds an example for nested element rendering in index.html.


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**src/dom.ts:14**
* Consider verifying that the check '&& value' handles all valid cases; if an empty object is a valid value for children, ensure that this condition does not mistakenly skip it.
```
if (key === 'children' && value) {
```
**src/dom.ts:15**
* [nitpick] Confirm that type casting 'value as TreeNode' aligns with the expected structure for children, ensuring robust handling of any edge cases.
```
for (const [childTag, childValue] of Object.entries(value as TreeNode)) {
```
</details>

"
3119414824,2898388986,ellipsis-dev[bot],COMMENTED,2025-06-04T23:56:18Z,"> [!CAUTION]
> **Changes requested  :x:**
> <details>
> <summary>Reviewed everything up to 324028d078a81a67a75fce01da3d5847301e6751 in <ellipsistime>1 minute and 55 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `860` lines of code in `3` files
> - Skipped `0` files when reviewing.
> - Skipped posting `4` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/onlook-dev/settings/code-review) and [rules](https://app.ellipsis.dev/onlook-dev/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>apps/web/client/src/app/project/[id]/_components/right-panel/dev-tab/index.tsx:38</code></summary>
> 
> - **Draft comment:** 
> Consider centralizing the sandbox readiness check into DevManager to avoid duplicating this logic in the component.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>apps/web/client/src/app/project/[id]/_components/right-panel/dev-tab/index.tsx:91</code></summary>
> 
> - **Draft comment:** 
> Reevaluate the need to check dev.activeFile in getElementCodeRange; it may restrict fetching ranges for elements not in the active file.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>apps/web/client/src/app/project/[id]/_components/right-panel/dev-tab/index.tsx:493</code></summary>
> 
> - **Draft comment:** 
> Consider debouncing onChange updates in CodeMirror to optimize performance during rapid typing.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>apps/web/client/src/components/store/editor/dev/index.ts:90</code></summary>
> 
> - **Draft comment:** 
> Consider encapsulating file content updates (including activeFile updates) in a dedicated action for consistency with MobX best practices.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_9HZiWcyvdEWmJ6Zb`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=onlook-dev%2Fonlook&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/onlook-dev/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/onlook-dev/code-review/rules).</sup>"
3119414824,2898648153,ellipsis-dev[bot],COMMENTED,2025-06-05T01:49:14Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed 434dbad116d2bfbc9fd6ff4ba94fa4567735b45b in <ellipsistime>1 minute and 33 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `481` lines of code in `3` files
> - Skipped `0` files when reviewing.
> - Skipped posting `7` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/onlook-dev/settings/code-review) and [rules](https://app.ellipsis.dev/onlook-dev/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>apps/web/client/src/app/project/[id]/_components/right-panel/dev-tab/index.tsx:25</code></summary>
> 
> - **Draft comment:** 
> Consistently switching from 'dev' to 'ide' looks good. Verify that this renaming is propagated to all dependencies.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>apps/web/client/src/app/project/[id]/_components/right-panel/dev-tab/index.tsx:138</code></summary>
> 
> - **Draft comment:** 
> When calculating highlight positions, consider potential newline differences (CRLF vs LF) to avoid off-by-one errors.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>apps/web/client/src/app/project/[id]/_components/right-panel/dev-tab/index.tsx:506</code></summary>
> 
> - **Draft comment:** 
> The setTimeout callback re-applying the highlight range seems redundant. Confirm its intent to avoid unnecessary re-renders.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `40%` <= threshold `50%` The comment is asking the PR author to confirm the intent of the `setTimeout` callback, which violates the rule against asking for confirmation of intent. However, it does point out a potential issue with redundancy and unnecessary re-renders, which could be useful feedback. The comment could be rephrased to suggest a specific change or improvement without asking for confirmation.
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>apps/web/client/src/components/store/editor/dev/index.ts:22</code></summary>
> 
> - **Draft comment:** 
> Renaming 'DevManager' to 'IDEManager' is applied uniformly. Ensure that any related documentation or type comments are updated as well.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>apps/web/client/src/components/store/editor/engine.ts:52</code></summary>
> 
> - **Draft comment:** 
> Switching from 'dev' to 'ide' in the EditorEngine clear method is consistent; double-check that clearing IDEManager state aligns with overall app state management.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>6. <code>apps/web/client/src/app/project/[id]/_components/right-panel/dev-tab/index.tsx:57</code></summary>
> 
> - **Draft comment:** 
> Typographical review: The new code uses 'ide.isLoading = true;'. Confirm that 'ide' is the correct variable name here and not a typo for 'dev', as previously the code used 'dev.isLoading = true;'.
> - **Reason this comment was not posted:**
> Comment looked like it was already resolved.
> 
> 
> </details>
> 
> <details>
> <summary>7. <code>apps/web/client/src/components/store/editor/engine.ts:10</code></summary>
> 
> - **Draft comment:** 
> Potential typo: The team might have intended to import 'DevManager' instead of 'IDEManager' for the dev tab, as mentioned in the commit title. Please confirm.
> - **Reason this comment was not posted:**
> Comment looked like it was already resolved.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_tqcA8zHZPB24GODz`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=onlook-dev%2Fonlook&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/onlook-dev/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/onlook-dev/code-review/rules).</sup>"
3119414824,2898651184,ellipsis-dev[bot],COMMENTED,2025-06-05T01:51:55Z,"> [!CAUTION]
> **Changes requested  :x:**
> <details>
> <summary>Reviewed 8c08e093f1f41a895b2ae2ec975fb39d4f934abb in <ellipsistime>1 minute and 44 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `74` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `3` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/onlook-dev/settings/code-review) and [rules](https://app.ellipsis.dev/onlook-dev/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>apps/web/client/src/components/store/editor/dev/index.ts:102</code></summary>
> 
> - **Draft comment:** 
> Good: now missing activeFile is logged, which aids debugging.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>apps/web/client/src/components/store/editor/dev/index.ts:154</code></summary>
> 
> - **Draft comment:** 
> Multiple methods repeat a sandbox readiness check and logging. Consider refactoring this into a helper function.
> - **Reason this comment was not posted:**
> Confidence changes required: `50%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>apps/web/client/src/components/store/editor/dev/index.ts:22</code></summary>
> 
> - **Draft comment:** 
> Naming inconsistency: the class is named 'IDEManager' while the PR title mentions 'DevManager'. Align the naming for clarity.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_6APGTaw6ngt5anqv`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=onlook-dev%2Fonlook&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/onlook-dev/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/onlook-dev/code-review/rules).</sup>"
3076925935,2854069926,ellipsis-dev[bot],COMMENTED,2025-05-20T12:56:20Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to c7f2d8481e7ec7e1ec78417e264c7445f73b8754 in <ellipsistime>1 minute and 40 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `175` lines of code in `7` files
> - Skipped `0` files when reviewing.
> - Skipped posting `4` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>agents-api/agents_api/clients/integrations.py:22</code></summary>
> 
> - **Draft comment:** 
> Redundant assignment: 'setup = setup or None' is unnecessary as the default is already None.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>agents-api/agents_api/common/utils/tool_validation.py:35</code></summary>
> 
> - **Draft comment:** 
> Potential risk: 'provider_info[""methods""][0][""method""]' may throw an IndexError if the 'methods' list is empty. Consider validating that the list is non-empty before indexing.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 20% vs. threshold = 50% The comment raises a valid edge case. However, we don't have visibility into the schema or contract of get_available_integrations() or what provider_info is guaranteed to contain. If providers are required to have at least one method, this isn't an issue. The comment is somewhat speculative without this context. I might be too quick to dismiss this - an empty methods list could be a real possibility and cause runtime errors. But I also don't want to keep speculative comments. Without being able to verify the schema/contract of provider_info, this comment is speculative. We should trust that the integrations API maintains its contract. Delete the comment as it's speculative without more context about the provider_info schema/contract. If empty methods lists were possible, that would be a schema/API issue.
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>agents-api/agents_api/routers/tasks/create_or_update_task.py:35</code></summary>
> 
> - **Draft comment:** 
> Sequential tool validation in a loop may add latency if many tools are provided. Consider running validations concurrently if performance becomes an issue.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 20% vs. threshold = 50% While the comment points out a real potential performance optimization, we don't know: 1) How many tools are typically provided 2) How long validation takes 3) Whether performance is actually a concern here. The comment is speculative with ""if performance becomes an issue"". The current sequential implementation is simpler and easier to understand. The comment identifies a legitimate performance optimization pattern. Sequential vs concurrent validation could make a big difference with many tools. However, without evidence that this is a real performance bottleneck, premature optimization could add unnecessary complexity. The current code is clearer and simpler. Delete this comment as it's speculative (""if performance becomes an issue"") and suggests a premature optimization without evidence of actual performance problems.
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>agents-api/agents_api/routers/tasks/create_task.py:33</code></summary>
> 
> - **Draft comment:** 
> Sequential tool validation may impact performance for a large number of tools. Consider parallelizing these calls if needed.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 20% vs. threshold = 50% While the comment points out a real potential performance optimization, we don't know: 1) If tools list is typically large enough for this to matter 2) If validate_tool() is actually slow 3) If parallel validation is safe (no side effects/dependencies between tools). Without this context, the suggestion is speculative. The comment identifies a legitimate performance pattern. Sequential awaits in a loop can be a bottleneck. However, we don't have enough context to know if this optimization would provide meaningful benefit or even be safe to implement. The comment should be removed as it's speculative without strong evidence that this optimization is needed or beneficial.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_XGIVNN4NhIfkYUcx`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3121337622,2904707084,ChrisHuie,APPROVED,2025-06-06T11:59:17Z,
3117784326,2899448181,ChunyiLyu,APPROVED,2025-06-05T09:00:09Z,
3093351057,2870466429,hoshinotsuyoshi,COMMENTED,2025-05-27T10:04:35Z,
3093351057,2870828747,hoshinotsuyoshi,APPROVED,2025-05-27T12:15:46Z,
3135365977,2916813371,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-11T11:49:07Z,"## Pull Request Overview

This PR fixes the diagnostic ID assignment issue in the IX Bid Adapter by ensuring that the ""lipbid"" identifier is correctly included when present. Key changes include:
- Adding a new test case in ixBidAdapter_spec.js to verify the inclusion of ""lipbid"".
- Updating the _getUserIds function in ixBidAdapter.js to use a deep access method for the ""lipbid"" provider.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated no comments.

| File                                    | Description                                                |
| --------------------------------------- | ---------------------------------------------------------- |
| test/spec/modules/ixBidAdapter_spec.js  | Added test case for verifying ""lipbid"" inclusion           |
| modules/ixBidAdapter.js                 | Adjusted user ID extraction to handle nested ""lipbid"" value  |


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**modules/ixBidAdapter.js:1278**
* Consider adding an inline comment clarifying why deepAccess is used specifically for 'lipbid' (e.g. due to its nested structure in userIds).
```
return PROVIDERS.filter(provider => {
```
</details>

"
3135365977,2916884790,ChrisHuie,APPROVED,2025-06-11T12:13:14Z,
3083143441,2860965036,dust-agent[bot],COMMENTED,2025-05-22T12:05:19Z,Coding Rules LGTM \o/
3083143441,2860977451,flvndvd,APPROVED,2025-05-22T12:09:47Z,
3070893220,2848336412,ellipsis-dev[bot],COMMENTED,2025-05-17T15:48:55Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 205d70a8adcaafd7a1eb2cfd16191aab5835b03b in <ellipsistime>1 minute and 12 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `139` lines of code in `2` files
> - Skipped `0` files when reviewing.
> - Skipped posting `4` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>documentation/julepcli/commands.mdx:741</code></summary>
> 
> - **Draft comment:** 
> Good removal of commented-out 'julep tools get' block. Replacing it with an Info block clarifies the upcoming feature. Ensure consistency with similar notices.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>documentation/julepcli/commands.mdx:802</code></summary>
> 
> - **Draft comment:** 
> Replacing the extensive commented assistant section with a concise Info block improves readability. The summary is appropriate for an upcoming feature.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>documentation/responses/roadmap.mdx:62</code></summary>
> 
> - **Draft comment:** 
> The roadmap updates now provide more detailed feature lists for File Search Tool, Reasoning Effort, and Annotations for Citations. Verify these details align with current product milestones.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>documentation/responses/roadmap.mdx:73</code></summary>
> 
> - **Draft comment:** 
> Typographical suggestion: consider hyphenating 'long running tasks' to 'long-running tasks' for clarity.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 10% vs. threshold = 50% While technically correct according to grammar rules, this is an extremely minor change that doesn't affect understanding or functionality. The comment is about a purely stylistic/grammatical issue in documentation, not about code logic or functionality. Such minor documentation tweaks could be handled in a separate editorial pass or directly fixed. The hyphenation rule is technically correct, and documentation quality is important for professional appearance. While correct, this level of nitpicking on documentation creates noise in PR reviews and distracts from more substantial issues. The meaning is perfectly clear without the hyphen. Delete this comment as it's too minor of an issue to warrant a PR comment. This kind of minor editorial fix could be handled separately.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_UTe5qkcVoWdNyvQm`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3078707207,2856135910,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-21T03:37:43Z,"## Pull Request Overview

Adds support for variadic arguments in `NewError` for flexible message formatting, updates usage sites to the new signature, refreshes related documentation, and expands test coverage for formatting behaviors.

- Extend `NewError` to accept `...any` and format messages via `fmt.Sprintf`
- Update `SendFile` error handling and documentation examples to the new API
- Add comprehensive tests in `Test_NewError_Format`

### Reviewed Changes

Copilot reviewed 5 out of 5 changed files in this pull request and generated 1 comment.

<details>
<summary>Show a summary per file</summary>

| File                             | Description                                            |
| -------------------------------- | ------------------------------------------------------ |
| docs/guide/error-handling.md     | Updated example to use variadic format arguments      |
| docs/api/fiber.md                | Changed `NewError` signature to `...any` and example  |
| ctx.go                           | Replaced `fmt.Sprintf` call with direct `NewError` use |
| app.go                           | Implemented variadic overload logic in `NewError`     |
| app_test.go                      | Added tests for various `NewError` formatting scenarios |
</details>



<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**app_test.go:1313**
* [nitpick] It may be helpful to add a test case for a format string with no matching parameters (e.g., `""missing %s""` without args) to confirm `NewError`'s behavior in that edge case.
```
// go test -run Test_NewError_Format
```
</details>

"
3078707207,2856416680,ReneWerner87,APPROVED,2025-05-21T06:12:51Z,
3078707207,2857373918,github-actions[bot],COMMENTED,2025-05-21T11:41:10Z,"<!-- github-benchmark-action-comment(start): Benchmark Alert -->
# :warning: **Performance Alert** :warning:

Possible performance regression was detected for benchmark.
Benchmark result of this commit is worse than the previous benchmark result exceeding threshold `1.50`.

| Benchmark suite | Current: b176f4abde6100d8fcfb340a12d551478d567b38 | Previous: d756ec1b68dd8d86a4be0c45258c76b448270fb2 | Ratio |
|-|-|-|-|
| `Benchmark_GenericParseTypeInts/bench_genericParseTypeInt16s` | `0.0000409` ns/op	       0 B/op	       0 allocs/op | `0.0000264` ns/op	       0 B/op	       0 allocs/op | `1.55` |
| `Benchmark_GenericParseTypeInts/bench_genericParseTypeInt16s - ns/op` | `0.0000409` ns/op | `0.0000264` ns/op | `1.55` |
| `Benchmark_GenericParseTypeInts/bench_genericParseTypeInt8s#01` | `0.0000395` ns/op	       0 B/op	       0 allocs/op | `0.0000254` ns/op	       0 B/op	       0 allocs/op | `1.56` |
| `Benchmark_GenericParseTypeInts/bench_genericParseTypeInt8s#01 - ns/op` | `0.0000395` ns/op | `0.0000254` ns/op | `1.56` |
| `Benchmark_GenericParseTypeInts/bench_genericParseTypeInt32s#01` | `0.0000489` ns/op	       0 B/op	       0 allocs/op | `0.0000245` ns/op	       0 B/op	       0 allocs/op | `2.00` |
| `Benchmark_GenericParseTypeInts/bench_genericParseTypeInt32s#01 - ns/op` | `0.0000489` ns/op | `0.0000245` ns/op | `2.00` |
| `Benchmark_GenericParseTypeInts/bench_genericParseTypeInts#09` | `0.0000426` ns/op	       0 B/op	       0 allocs/op | `0.0000258` ns/op	       0 B/op	       0 allocs/op | `1.65` |
| `Benchmark_GenericParseTypeInts/bench_genericParseTypeInts#09 - ns/op` | `0.0000426` ns/op | `0.0000258` ns/op | `1.65` |
| `Benchmark_GenericParseTypeInts/bench_genericParseTypeInt16s#12` | `0.0000504` ns/op	       0 B/op	       0 allocs/op | `0.0000328` ns/op	       0 B/op	       0 allocs/op | `1.54` |
| `Benchmark_GenericParseTypeInts/bench_genericParseTypeInt16s#12 - ns/op` | `0.0000504` ns/op | `0.0000328` ns/op | `1.54` |
| `Benchmark_GenericParseTypeUints/benchmark_genericParseTypeUint32s` | `0.0000398` ns/op	       0 B/op	       0 allocs/op | `0.0000247` ns/op	       0 B/op	       0 allocs/op | `1.61` |
| `Benchmark_GenericParseTypeUints/benchmark_genericParseTypeUint32s - ns/op` | `0.0000398` ns/op | `0.0000247` ns/op | `1.61` |
| `Benchmark_GenericParseTypeUints/benchmark_genericParseTypeUints#05` | `0.0000409` ns/op	       0 B/op	       0 allocs/op | `0.0000251` ns/op	       0 B/op	       0 allocs/op | `1.63` |
| `Benchmark_GenericParseTypeUints/benchmark_genericParseTypeUints#05 - ns/op` | `0.0000409` ns/op | `0.0000251` ns/op | `1.63` |
| `Benchmark_GenericParseTypeUints/benchmark_genericParseTypeUint32s#06` | `0.0000418` ns/op	       0 B/op	       0 allocs/op | `0.0000274` ns/op	       0 B/op	       0 allocs/op | `1.53` |
| `Benchmark_GenericParseTypeUints/benchmark_genericParseTypeUint32s#06 - ns/op` | `0.0000418` ns/op | `0.0000274` ns/op | `1.53` |
| `Benchmark_GenericParseTypeUints/benchmark_genericParseTypeUints#08` | `0.0000373` ns/op	       0 B/op	       0 allocs/op | `0.0000247` ns/op	       0 B/op	       0 allocs/op | `1.51` |
| `Benchmark_GenericParseTypeUints/benchmark_genericParseTypeUints#08 - ns/op` | `0.0000373` ns/op | `0.0000247` ns/op | `1.51` |

This comment was automatically generated by [workflow](https://github.com/gofiber/fiber/actions?query=workflow%3ABenchmark) using [github-action-benchmark](https://github.com/marketplace/actions/continuous-benchmark).
<!-- github-benchmark-action-comment(end): Benchmark Alert -->"
3078707207,2857625065,coderabbitai[bot],COMMENTED,2025-05-21T12:57:02Z,"**Actionable comments posted: 1**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between e3663d596decfc0a70f0b6a829230205834611ae and 3b2f8c396e34dce1136d4289b572935a2cc2bbed.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `app.go` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 GitHub Check: unit (1.24.x, ubuntu-latest)</summary>

<details>
<summary>app.go</summary>

[failure] 902-902: 
undefined: msg

---

[failure] 898-898: 
undefined: msg

---

[failure] 894-894: 
undefined: msg

</details>

</details>
<details>
<summary>🪛 GitHub Check: unit (1.24.x, macos-latest)</summary>

<details>
<summary>app.go</summary>

[failure] 902-902: 
undefined: msg

---

[failure] 898-898: 
undefined: msg

---

[failure] 894-894: 
undefined: msg

</details>

</details>
<details>
<summary>🪛 GitHub Check: unit (1.23.x, macos-latest)</summary>

<details>
<summary>app.go</summary>

[failure] 902-902: 
undefined: msg

---

[failure] 898-898: 
undefined: msg

---

[failure] 894-894: 
undefined: msg

---

[failure] 902-902: 
undefined: msg

---

[failure] 898-898: 
undefined: msg

---

[failure] 894-894: 
undefined: msg

</details>

</details>
<details>
<summary>🪛 GitHub Check: unit (1.23.x, ubuntu-latest)</summary>

<details>
<summary>app.go</summary>

[failure] 902-902: 
undefined: msg

---

[failure] 898-898: 
undefined: msg

---

[failure] 894-894: 
undefined: msg

---

[failure] 902-902: 
undefined: msg

---

[failure] 898-898: 
undefined: msg

---

[failure] 894-894: 
undefined: msg

</details>

</details>
<details>
<summary>🪛 GitHub Check: lint</summary>

<details>
<summary>app.go</summary>

[failure] 902-902: 
undefined: msg (typecheck)

---

[failure] 898-898: 
undefined: msg

---

[failure] 894-894: 
undefined: msg

</details>

</details>
<details>
<summary>🪛 GitHub Check: govulncheck-check</summary>

<details>
<summary>app.go</summary>

[failure] 902-902: 
undefined: msg

---

[failure] 898-898: 
undefined: msg

---

[failure] 894-894: 
undefined: msg

</details>

</details>
<details>
<summary>🪛 GitHub Actions: golangci-lint</summary>

<details>
<summary>app.go</summary>

[error] 894-894: golangci-lint error: undefined variable 'msg'

</details>

</details>
<details>
<summary>🪛 GitHub Actions: Run govulncheck</summary>

<details>
<summary>app.go</summary>

[error] 894-894: Undefined identifier 'msg' at line 894, column 3.

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (3)</summary>

* GitHub Check: Compare
* GitHub Check: Analyse
* GitHub Check: repeated

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3078707207,2857796341,gaby,COMMENTED,2025-05-21T13:43:27Z,
3078707207,2860169227,efectn,COMMENTED,2025-05-22T07:50:22Z,
3078707207,2866834888,ReneWerner87,COMMENTED,2025-05-25T12:53:57Z,
3078707207,2866834927,ReneWerner87,COMMENTED,2025-05-25T12:54:04Z,
3078707207,2866835098,ReneWerner87,COMMENTED,2025-05-25T12:54:36Z,
3078707207,2866848877,gaby,COMMENTED,2025-05-25T13:44:36Z,
3078707207,2866849606,gaby,COMMENTED,2025-05-25T13:47:03Z,
3078707207,2869162352,coderabbitai[bot],COMMENTED,2025-05-26T21:11:47Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>docs/whats_new.md (2)</summary><blockquote>

`3-3`: **Grammar: Title apostrophe**  
Consider updating the title to ""🆕 What's New in v3"" (adding the apostrophe) for correct English.

---

`69-69`: **Include a link to the `NewErrorf` API docs and usage example**  
The new `NewErrorf` entry would benefit from a direct hyperlink to its detailed API documentation (e.g., `docs/api/fiber.md#NewErrorf`) and a brief code snippet showing its signature and usage. This aligns with other method entries and improves discoverability.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between bf21de811705f7423203e87415bc288d50e0e50b and ec6e7fe36fd4e8b4fa78b0ca7f453d18dc5a6a99.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `docs/api/fiber.md` (1 hunks)
* `docs/whats_new.md` (1 hunks)

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (1)</summary>

* docs/api/fiber.md

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (6)</summary>

* GitHub Check: unit (1.23.x, macos-13)
* GitHub Check: unit (1.24.x, windows-latest)
* GitHub Check: unit (1.23.x, macos-latest)
* GitHub Check: unit (1.23.x, windows-latest)
* GitHub Check: repeated
* GitHub Check: Compare

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3078707207,2869173684,ReneWerner87,APPROVED,2025-05-26T21:28:04Z,
3071803431,2848993587,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-18T13:50:35Z,"## Pull Request Overview

Prevent panics when mutating invalid inventory slots by replacing direct indexing with a safe lookup that returns an error.

- Replace direct `self.slots[index]` indexing with `get_mut` and return `InventoryAccessError::InvalidSlot`
- Preserve original `u16` index in error


<details>
<summary>Comments suppressed due to low confidence (3)</summary>

**crates/hyperion-inventory/src/lib.rs:331**
* Add a unit test that attempts to access an out-of-bounds slot to verify that `InvalidSlot` is returned and no panic occurs.
```
None => Err(InventoryAccessError::InvalidSlot { index }),
```
**crates/hyperion-inventory/src/lib.rs:324**
* [nitpick] Update the documentation for this method to mention that it returns `Err(InventoryAccessError::InvalidSlot)` when the slot index is out of bounds.
```
/// Returns remaining [`ItemStack`] if not all of the item was added to the slot
```
**crates/hyperion-inventory/src/lib.rs:329**
* [nitpick] You're calling `usize::from(index)` twice. Consider assigning `let idx = usize::from(index);` before the match to avoid duplication and improve readability.
```
match self.slots.get_mut(usize::from(index)) {
```
</details>

"
3071803431,2850656155,dyc3,APPROVED,2025-05-19T12:51:25Z,
3130771251,2910864131,leonardmq,COMMENTED,2025-06-09T17:53:43Z,
3130771251,2910864873,leonardmq,COMMENTED,2025-06-09T17:54:02Z,
3130771251,2917702037,scosman,APPROVED,2025-06-11T15:22:38Z,
3072060085,2849958018,PawelPeczek-Roboflow,APPROVED,2025-05-19T08:49:42Z,
3070312081,2847981665,ellipsis-dev[bot],COMMENTED,2025-05-17T04:55:41Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to e9f7248d2bb2f8bc9ea306fe1d379892547e440c in <ellipsistime>24 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `15` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `1` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>cli/src/julep_cli/importt.py:73</code></summary>
> 
> - **Draft comment:** 
> Docstring updated to clarify that only agents are supported. Consider adding a note that options for tasks and tools are present but not yet implemented to avoid future confusion.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_OzuyANzBl2auSZG6`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3119371116,2898336838,ellipsis-dev[bot],COMMENTED,2025-06-04T23:27:43Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to a0191176a57f55d03ef15a19263841cfef73f2a8 in <ellipsistime>39 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `16` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/onlook-dev/settings/code-review) and [rules](https://app.ellipsis.dev/onlook-dev/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>packages/utility/test/colors.test.ts:61</code></summary>
> 
> - **Draft comment:** 
> Good addition: the new 'Unknown Colors' test block correctly verifies the fallback to transparent for invalid inputs.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>packages/utility/test/colors.test.ts:63</code></summary>
> 
> - **Draft comment:** 
> Minor: Consider storing Color.from('not-a-color') in a variable to avoid duplicate calls.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_dEVgGzJQiKeY47I7`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=onlook-dev%2Fonlook&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/onlook-dev/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/onlook-dev/code-review/rules).</sup>"
3147411139,2929333030,panarch,COMMENTED,2025-06-15T12:26:57Z,
3147411139,2930583986,devgony,APPROVED,2025-06-16T04:15:39Z,
3091928471,2869071379,sourcery-ai[bot],COMMENTED,2025-05-26T19:27:09Z,"Hey @mldangelo - I've reviewed your changes - here's some feedback:

- If you’re on React 17+ with the automatic JSX runtime, you can remove the default `React` import from TSX files and rely solely on named imports.
- When you’re only importing types (e.g. `ReactNode`), use `import type { ReactNode } from 'react'` to avoid bundling unused React symbols.

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3131654790,2911530988,cubic-dev-ai[bot],COMMENTED,2025-06-09T22:44:26Z,cubic reviewed 4 files and found no issues. Review PR in [cubic.dev](https://cubic.dev/pr/cartography-cncf/cartography/pull/1619).
3131654790,2911593882,achantavy,COMMENTED,2025-06-09T23:17:38Z,
3131654790,2911668465,kunaals,COMMENTED,2025-06-10T00:27:37Z,
3131654790,2911674091,achantavy,COMMENTED,2025-06-10T00:29:38Z,
3131654790,2911674472,achantavy,COMMENTED,2025-06-10T00:30:01Z,
3131654790,2911676762,kunaals,COMMENTED,2025-06-10T00:32:31Z,
3131654790,2911676999,kunaals,APPROVED,2025-06-10T00:32:48Z,GTG after LIST_SQS_QUEUE_URLS removed
3131654790,2911678633,kunaals,COMMENTED,2025-06-10T00:34:26Z,
3117621789,2896517377,coderabbitai[bot],COMMENTED,2025-06-04T12:20:49Z,"**Actionable comments posted: 3**

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>examples/python/local_tool_search.py (2)</summary><blockquote>

`33-36`: **Add documentation and improve robustness.**

The `tool_cb` function should have documentation and better error handling:



```diff
 def tool_cb(name: str, args: dict) -> str:
+    """"""Handle tool callbacks by dispatching to the appropriate function.""""""
     if name == ""local_search"":
         return json.dumps(local_search(args.get(""query"", """")))
-    return """"
+    return json.dumps({""error"": f""Unknown tool: {name}""})
```

This provides better feedback when an unknown tool is called.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Pylint (3.3.7)</summary>

[convention] 33-33: Missing function or method docstring

(C0116)

</details>

</details>

---

`1-10`: **Add module documentation.**

Consider adding a module docstring to describe the example's purpose:



```diff
+""""""
+Example demonstrating local filesystem search using the tool callback feature.
+
+This example shows how to register a custom tool callback that implements
+a local file search functionality accessible to the language model.
+""""""
 import json
 import os
 from mistralrs import (
     Runner,
     Which,
     ChatCompletionRequest,
     Architecture,
     ToolChoice,
 )
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Pylint (3.3.7)</summary>

[convention] 1-1: Missing module docstring

(C0114)

---

[error] 3-9: Unable to import 'mistralrs'

(E0401)

</details>

</details>

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 39673eb8fa747235134e10367cdef90e2edafdd8 and 9e31a97c62b410839d14173ac616732c90c3ecfe.

</details>

<details>
<summary>📒 Files selected for processing (19)</summary>

* `examples/python/local_tool_search.py` (1 hunks)
* `mistralrs-core/src/engine/add_request.rs` (1 hunks)
* `mistralrs-core/src/engine/mod.rs` (3 hunks)
* `mistralrs-core/src/engine/search_request.rs` (7 hunks)
* `mistralrs-core/src/lib.rs` (10 hunks)
* `mistralrs-core/src/tools/mod.rs` (1 hunks)
* `mistralrs-pyo3/mistralrs.pyi` (2 hunks)
* `mistralrs-pyo3/src/lib.rs` (5 hunks)
* `mistralrs/examples/local_search/main.rs` (2 hunks)
* `mistralrs/src/anymoe.rs` (1 hunks)
* `mistralrs/src/gguf.rs` (5 hunks)
* `mistralrs/src/gguf_lora_model.rs` (1 hunks)
* `mistralrs/src/gguf_xlora_model.rs` (1 hunks)
* `mistralrs/src/lib.rs` (1 hunks)
* `mistralrs/src/lora_model.rs` (1 hunks)
* `mistralrs/src/speculative.rs` (1 hunks)
* `mistralrs/src/text_model.rs` (5 hunks)
* `mistralrs/src/vision_model.rs` (5 hunks)
* `mistralrs/src/xlora_model.rs` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (4)</summary>

<details>
<summary>mistralrs/src/gguf.rs (3)</summary><blockquote>

<details>
<summary>mistralrs-core/src/lib.rs (1)</summary>

* `with_tool_callback` (268-271)

</details>
<details>
<summary>mistralrs/src/vision_model.rs (1)</summary>

* `with_tool_callback` (100-103)

</details>
<details>
<summary>mistralrs/src/text_model.rs (1)</summary>

* `with_tool_callback` (140-143)

</details>

</blockquote></details>
<details>
<summary>mistralrs/src/text_model.rs (1)</summary><blockquote>

<details>
<summary>mistralrs-core/src/lib.rs (1)</summary>

* `with_tool_callback` (268-271)

</details>

</blockquote></details>
<details>
<summary>mistralrs/src/vision_model.rs (1)</summary><blockquote>

<details>
<summary>mistralrs-core/src/lib.rs (1)</summary>

* `with_tool_callback` (268-271)

</details>

</blockquote></details>
<details>
<summary>mistralrs-core/src/lib.rs (3)</summary><blockquote>

<details>
<summary>mistralrs/src/gguf.rs (1)</summary>

* `with_tool_callback` (86-89)

</details>
<details>
<summary>mistralrs/src/vision_model.rs (1)</summary>

* `with_tool_callback` (100-103)

</details>
<details>
<summary>mistralrs/src/text_model.rs (1)</summary>

* `with_tool_callback` (140-143)

</details>

</blockquote></details>

</details><details>
<summary>🪛 GitHub Check: Docs</summary>

<details>
<summary>mistralrs-core/src/engine/mod.rs</summary>

[failure] 77-77: 
failed to resolve: use of unresolved module or unlinked crate `tools`

---

[failure] 112-112: 
failed to resolve: use of unresolved module or unlinked crate `tools`

</details>
<details>
<summary>mistralrs-core/src/engine/search_request.rs</summary>

[failure] 459-459: 
mismatched types

---

[failure] 457-457: 
mismatched types

---

[failure] 525-525: 
mismatched types

---

[failure] 523-523: 
mismatched types

</details>

</details>
<details>
<summary>🪛 GitHub Check: Check (macOS-latest, stable)</summary>

<details>
<summary>mistralrs-core/src/engine/mod.rs</summary>

[failure] 77-77: 
failed to resolve: use of unresolved module or unlinked crate `tools`

---

[failure] 112-112: 
failed to resolve: use of unresolved module or unlinked crate `tools`

</details>
<details>
<summary>mistralrs-core/src/engine/search_request.rs</summary>

[failure] 459-459: 
mismatched types

---

[failure] 457-457: 
mismatched types

---

[failure] 525-525: 
mismatched types

---

[failure] 523-523: 
mismatched types

</details>

</details>
<details>
<summary>🪛 GitHub Check: Clippy</summary>

<details>
<summary>mistralrs-core/src/engine/mod.rs</summary>

[failure] 77-77: 
failed to resolve: use of unresolved module or unlinked crate `tools`

---

[failure] 112-112: 
failed to resolve: use of unresolved module or unlinked crate `tools`

</details>
<details>
<summary>mistralrs-core/src/engine/search_request.rs</summary>

[failure] 459-459: 
mismatched types

---

[failure] 457-457: 
mismatched types

---

[failure] 525-525: 
mismatched types

---

[failure] 523-523: 
mismatched types

</details>

</details>
<details>
<summary>🪛 Ruff (0.11.9)</summary>

<details>
<summary>examples/python/local_tool_search.py</summary>

18-18: Use a context manager for opening files

(SIM115)

</details>

</details>
<details>
<summary>🪛 Pylint (3.3.7)</summary>

<details>
<summary>examples/python/local_tool_search.py</summary>

[convention] 1-1: Missing module docstring

(C0114)

---

[error] 3-9: Unable to import 'mistralrs'

(E0401)

---

[convention] 11-11: Missing function or method docstring

(C0116)

---

[warning] 19-19: Catching too general exception Exception

(W0718)

---

[refactor] 18-18: Consider using 'with' for resource-allocating operations

(R1732)

---

[warning] 18-18: Using open without explicitly specifying an encoding

(W1514)

---

[convention] 33-33: Missing function or method docstring

(C0116)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (3)</summary>

* GitHub Check: Test Suite (macOS-latest, stable)
* GitHub Check: Test Suite (ubuntu-latest, stable)
* GitHub Check: Test Suite (windows-latest, stable)

</details>

<details>
<summary>🔇 Additional comments (44)</summary><blockquote>

<details>
<summary>mistralrs/src/lora_model.rs (1)</summary>

`96-98`: **LGTM! Consistent tool callback integration.**

The implementation correctly follows the established pattern used for `search_callback`. The conditional attachment and Arc cloning provide efficient callback sharing while maintaining thread safety.

</details>
<details>
<summary>mistralrs/src/anymoe.rs (1)</summary>

`123-125`: **LGTM! Consistent implementation across model builders.**

The tool callback integration follows the same reliable pattern as other model builders, with appropriate field access for the AnyMoe structure (`self.base.tool_callback`).

</details>
<details>
<summary>mistralrs/src/speculative.rs (1)</summary>

`106-108`: **LGTM! Correctly uses target model configuration.**

The implementation appropriately uses `self.target.tool_callback` for speculative decoding, where the target model's configuration drives the runner setup. This follows the established pattern while being architecturally correct.

</details>
<details>
<summary>mistralrs-core/src/tools/mod.rs (1)</summary>

`16-18`: **LGTM! Well-designed callback type with proper thread safety.**

The `ToolCallback` type alias is well-designed with:
- Clear documentation explaining its purpose
- Appropriate signature taking `&CalledFunction` and returning `anyhow::Result<String>`
- Thread safety requirements with `Send + Sync` bounds
- Flexible trait object design for custom tool implementations

</details>
<details>
<summary>mistralrs/src/lib.rs (1)</summary>

`123-123`: **LGTM! Clean API extension.**

The addition of `ToolCallback` to the public re-exports follows the established pattern and correctly exposes the new tool callback functionality to users of the crate.

</details>
<details>
<summary>mistralrs/src/xlora_model.rs (1)</summary>

`108-110`: **LGTM! Consistent implementation pattern.**

The tool callback integration follows the exact same pattern as the existing search callback handling, maintaining consistency in the codebase.

</details>
<details>
<summary>mistralrs-pyo3/mistralrs.pyi (1)</summary>

`351-351`: **LGTM! Well-defined Python binding interface.**

The tool callback parameter has appropriate type hints and clear documentation. The signature `Callable[[str, dict], str]` correctly represents a function that takes a tool name and arguments dictionary and returns a string result.



Also applies to: 396-396

</details>
<details>
<summary>mistralrs-core/src/engine/mod.rs (1)</summary>

`136-136`: **Structural integration looks good.**

The tool callback field initialization and integration into the Engine struct follows the established pattern used for search_callback. Once the import issue is resolved, this implementation will be correct.

</details>
<details>
<summary>mistralrs/src/gguf_xlora_model.rs (1)</summary>

`103-105`: **LGTM! Tool callback integration follows established pattern.**

The implementation correctly mirrors the search callback pattern above, ensuring consistent behavior across callback types.

</details>
<details>
<summary>mistralrs/src/gguf_lora_model.rs (1)</summary>

`91-93`: **LGTM! Consistent tool callback integration.**

The implementation correctly follows the established pattern for callback handling in model builders.

</details>
<details>
<summary>mistralrs-core/src/engine/add_request.rs (1)</summary>

`35-36`: **LGTM! Logic correctly expanded to support tool callbacks.**

The condition appropriately broadens when `search_request` is triggered to include cases where both a tool callback and tools are present, enabling the new tool callback functionality while maintaining backward compatibility.

</details>
<details>
<summary>mistralrs/src/gguf.rs (5)</summary>

`3-3`: **LGTM! Import addition is appropriate.**

Adding `ToolCallback` to the imports is necessary for the new functionality.

---

`23-23`: **LGTM! Field addition follows established pattern.**

The `tool_callback` field correctly follows the same pattern as the existing `search_callback` field.

---

`69-69`: **LGTM! Proper default initialization.**

Initializing `tool_callback` to `None` maintains backward compatibility and follows the established pattern.

---

`86-89`: **LGTM! Builder method follows established pattern.**

The `with_tool_callback` method correctly mirrors the implementation of `with_search_callback`, maintaining API consistency.

---

`269-271`: **LGTM! Proper integration in build method.**

The tool callback is correctly integrated into the runner using the same conditional pattern as the search callback, ensuring consistent behavior.

</details>
<details>
<summary>mistralrs/src/text_model.rs (5)</summary>

`3-3`: **LGTM: Import addition is correct.**

The explicit import of `ToolCallback` alongside `SearchCallback` is consistent and necessary for the new functionality.

---

`31-31`: **LGTM: Field addition follows established pattern.**

The `tool_callback` field correctly mirrors the `search_callback` pattern using `Option<Arc<ToolCallback>>` for thread-safe sharing.

---

`122-122`: **LGTM: Proper initialization.**

Initializing `tool_callback` to `None` is correct and consistent with other optional fields.

---

`139-143`: **LGTM: Builder method implementation is correct.**

The `with_tool_callback` method correctly follows the builder pattern, matches the signature from the relevant code snippet in `mistralrs-core/src/lib.rs` (lines 268-271), and maintains consistency with the existing `with_search_callback` method.

---

`387-389`: **LGTM: Consistent integration with runner.**

The tool callback integration in the `build` method correctly mirrors the search callback pattern, ensuring both callbacks are properly passed to the `MistralRsBuilder`.

</details>
<details>
<summary>mistralrs/src/vision_model.rs (5)</summary>

`3-3`: **LGTM: Consistent import pattern.**

The import addition matches the pattern established in `text_model.rs`, maintaining consistency across model builders.

---

`32-32`: **LGTM: Field addition maintains consistency.**

The `tool_callback` field follows the same pattern as in `TextModelBuilder`, ensuring consistent API across different model types.

---

`83-83`: **LGTM: Proper default initialization.**

Consistent initialization to `None` matches other model builders.

---

`100-103`: **LGTM: Builder method is properly implemented.**

The `with_tool_callback` method correctly follows the builder pattern and maintains API consistency with other model builders.

---

`329-331`: **LGTM: Proper runner integration.**

The tool callback is correctly passed to the `MistralRsBuilder`, following the established pattern from text models.

</details>
<details>
<summary>mistralrs/examples/local_search/main.rs (4)</summary>

`3-4`: **LGTM: Import updates support new tool callback mechanism.**

The new imports (`CalledFunction`, `Tool`, `ToolCallback`, `ToolChoice`, `ToolType`) are necessary for the tool callback implementation and properly replace the old search-specific approach.

---

`38-42`: **LGTM: Tool callback implementation is correct.**

The callback correctly:
- Handles `CalledFunction` parameter structure
- Parses JSON arguments to extract the query
- Calls the existing `local_search` function
- Serializes results back to JSON

This properly adapts the local search functionality to the new generic tool interface.

---

`46-57`: **LGTM: Tool metadata follows OpenAI function calling conventions.**

The `Tool` definition correctly specifies:
- Function type and name
- Descriptive metadata
- Parameter schema with type and description

This enables the language model to understand when and how to invoke the local search tool.

---

`61-63`: **LGTM: Request configuration uses new tools API correctly.**

The `RequestBuilder` properly:
- Registers the tool via `set_tools`
- Enables automatic tool selection with `ToolChoice::Auto`

This completes the migration from the deprecated search options to the new tool-based approach.

</details>
<details>
<summary>mistralrs-pyo3/src/lib.rs (4)</summary>

`35-37`: **LGTM: Import additions are appropriate.**

The explicit imports of `CalledFunction`, `SearchCallback`, `SearchFunctionParameters`, `SearchResult`, and `ToolCallback` provide the necessary types for Python-Rust integration.

---

`120-132`: **LGTM: Python-Rust bridge implementation is robust.**

The `wrap_tool_callback` function correctly:
- Uses `Python::with_gil` for proper GIL handling
- Leverages Python's `json` module for argument parsing
- Calls the Python callback with function name and parsed arguments
- Handles error conversion from `PyErr` to `anyhow::Error`

This provides a clean interface for Python functions to handle tool calls.

---

`547-547`: **LGTM: Parameter addition follows established pattern.**

The `tool_callback` parameter is properly added to the `Runner::new` signature as `Option<PyObject>`, consistent with the existing `search_callback` parameter.



Also applies to: 573-573

---

`868-868`: **LGTM: Integration with builder is correct.**

The tool callback is properly:
- Wrapped using `wrap_tool_callback` when present
- Passed to the `MistralRsBuilder` via `with_tool_callback`

This maintains consistency with the search callback integration pattern.



Also applies to: 873-875

</details>
<details>
<summary>mistralrs-core/src/lib.rs (6)</summary>

`113-115`: **LGTM! Proper public API exposure.**

The `ToolCallback` type is correctly re-exported alongside other tool-related types, maintaining API consistency.

---

`165-165`: **LGTM! Consistent field addition.**

The `tool_callback` field is properly added to `RebootState` with the correct type and follows the same pattern as `search_callback`.

---

`204-204`: **LGTM! Builder pattern consistency.**

The `tool_callback` field addition to `MistralRsBuilder` follows the established pattern and uses the appropriate type.

---

`229-229`: **LGTM! Proper initialization.**

The `tool_callback` field is correctly initialized to `None` in the builder constructor, maintaining consistency with optional fields.

---

`267-271`: **LGTM! Well-documented builder method.**

The `with_tool_callback` method follows the established builder pattern, includes proper documentation, and maintains method chaining.

---

`301-301`: **LGTM! Consistent callback propagation.**

The `tool_callback` is properly extracted from the builder, stored in the reboot state, and consistently passed to all `Engine::new` calls throughout the codebase including engine creation and reboot scenarios.



Also applies to: 326-326, 359-359, 382-382, 508-508

</details>
<details>
<summary>mistralrs-core/src/engine/search_request.rs (3)</summary>

`333-373`: **LGTM! Well-structured custom tool handler.**

The `do_custom_tool` function follows the same pattern as existing tool handlers (`do_search`, `do_extraction`). It properly:
- Adds the assistant message with tool call details
- Invokes the callback with proper error handling
- Adds the tool response message
- Sets `tool_choice` to `Auto` for continued interaction

The error handling with `unwrap_or_else` ensures graceful degradation when the callback fails.

---

`395-400`: **LGTM! Improved safety with conditional tool extension.**

The change from unconditional `unwrap()` to conditional extension based on `web_search_options` being `Some` prevents potential panics and makes the logic more robust.

---

`444-444`: **LGTM! Simplified tool call detection.**

The change from checking `search_tool_called` to accepting any single tool call (`calls.len() == 1`) makes the system more flexible and allows custom tools to be handled properly.



Also applies to: 512-512

</details>
<details>
<summary>examples/python/local_tool_search.py (1)</summary>

`53-67`: **LGTM! Excellent demonstration of the tool callback feature.**

The example effectively demonstrates:
- Tool callback registration with the `Runner`
- Proper JSON schema definition for the tool
- Integration with chat completion requests
- Automatic tool choice configuration

This is a clear and practical example of the new functionality.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3117621789,2903585000,coderabbitai[bot],COMMENTED,2025-06-06T02:16:36Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>mistralrs-pyo3/src/lib.rs (1)</summary><blockquote>

`521-547`: **Consider refactoring the function signature.**

The `Runner::new` constructor now has 26 parameters, which impacts readability and maintainability. Consider using a builder pattern or configuration struct for the Python bindings layer.



Example approach:
```diff
+#[pyclass]
+struct RunnerConfig {
+    // Group related parameters
+}
+
+impl Runner {
+    fn new_with_config(which: Which, config: RunnerConfig) -> PyApiResult<Self> {
+        // Implementation
+    }
+}
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 9e31a97c62b410839d14173ac616732c90c3ecfe and 67562585564ed66fd166fee02df264da382e66c1.

</details>

<details>
<summary>📒 Files selected for processing (4)</summary>

* `mistralrs-core/src/engine/mod.rs` (4 hunks)
* `mistralrs-core/src/engine/search_request.rs` (7 hunks)
* `mistralrs-pyo3/src/lib.rs` (5 hunks)
* `mistralrs/examples/local_search/main.rs` (2 hunks)

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (3)</summary>

* mistralrs/examples/local_search/main.rs
* mistralrs-core/src/engine/mod.rs
* mistralrs-core/src/engine/search_request.rs

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: Docs
* GitHub Check: Test Suite (ubuntu-latest, stable)
* GitHub Check: Clippy
* GitHub Check: Test Suite (macOS-latest, stable)
* GitHub Check: Test Suite (windows-latest, stable)
* GitHub Check: Check (macOS-latest, stable)
* GitHub Check: Check (windows-latest, stable)
* GitHub Check: Check (ubuntu-latest, stable)

</details>

<details>
<summary>🔇 Additional comments (4)</summary><blockquote>

<details>
<summary>mistralrs-pyo3/src/lib.rs (4)</summary>

`35-39`: **Import additions look correct.**

The new imports properly expose the tool callback types and PyList for JSON handling.

---

`119-131`: **Tool callback wrapper implementation is well-designed.**

The function correctly:
- Converts Python callable to Rust `Arc<ToolCallback>`
- Uses Python's json module for safe argument parsing
- Provides proper error handling with PyErr to anyhow conversion
- Ensures thread safety with `Arc` wrapper
- Handles GIL properly with `Python::with_gil`

---

`546-547`: **Parameter addition follows good backwards compatibility practices.**

Adding the optional `tool_callback` parameter at the end maintains API compatibility while enabling the new functionality.



Also applies to: 572-573

---

`867-874`: **Builder integration follows established patterns.**

The tool callback wrapping and builder integration mirrors the existing search callback implementation, ensuring consistency.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3117621789,2903671595,coderabbitai[bot],COMMENTED,2025-06-06T03:16:28Z,"**Actionable comments posted: 2**

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>examples/python/custom_tool_call.py (1)</summary><blockquote>

`11-30`: **Good example implementation with a minor improvement needed.**

The local search function effectively demonstrates the tool callback concept. However, the file opening should use a context manager for proper resource management.



Apply this diff to fix the file handling:

```diff
-                try:
-                    content = open(path).read()
-                except Exception:
-                    content = """"
+                try:
+                    with open(path, 'r', encoding='utf-8') as f:
+                        content = f.read()
+                except Exception:
+                    content = """"
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Ruff (0.11.9)</summary>

18-18: Use a context manager for opening files

(SIM115)

</details>
<details>
<summary>🪛 Pylint (3.3.7)</summary>

[refactor] 18-18: Consider using 'with' for resource-allocating operations

(R1732)

</details>

</details>

</blockquote></details>
<details>
<summary>mistralrs/examples/custom_search/main.rs (1)</summary><blockquote>

`21-21`: **Consider case-insensitive search for better user experience.**

The current implementation uses case-sensitive matching which might miss relevant files. Consider using `to_lowercase()` for both the filename and query for more inclusive search results.



```diff
-            if name.contains(query) {
+            if name.to_lowercase().contains(&query.to_lowercase()) {
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 67562585564ed66fd166fee02df264da382e66c1 and 3085231cd33d9155a1f46a6acfb6d75d2fa46afe.

</details>

<details>
<summary>📒 Files selected for processing (19)</summary>

* `examples/python/custom_tool_call.py` (1 hunks)
* `mistralrs-core/src/engine/add_request.rs` (1 hunks)
* `mistralrs-core/src/engine/mod.rs` (4 hunks)
* `mistralrs-core/src/engine/search_request.rs` (7 hunks)
* `mistralrs-core/src/lib.rs` (11 hunks)
* `mistralrs-core/src/tools/mod.rs` (1 hunks)
* `mistralrs-pyo3/mistralrs.pyi` (3 hunks)
* `mistralrs-pyo3/src/lib.rs` (5 hunks)
* `mistralrs/examples/custom_search/main.rs` (1 hunks)
* `mistralrs/examples/custom_tool_call/main.rs` (2 hunks)
* `mistralrs/src/anymoe.rs` (1 hunks)
* `mistralrs/src/gguf.rs` (5 hunks)
* `mistralrs/src/gguf_lora_model.rs` (1 hunks)
* `mistralrs/src/gguf_xlora_model.rs` (1 hunks)
* `mistralrs/src/lora_model.rs` (1 hunks)
* `mistralrs/src/speculative.rs` (1 hunks)
* `mistralrs/src/text_model.rs` (5 hunks)
* `mistralrs/src/vision_model.rs` (5 hunks)
* `mistralrs/src/xlora_model.rs` (1 hunks)

</details>

<details>
<summary>✅ Files skipped from review due to trivial changes (1)</summary>

* mistralrs-core/src/tools/mod.rs

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (12)</summary>

* mistralrs/src/lora_model.rs
* mistralrs/src/gguf_lora_model.rs
* mistralrs/src/speculative.rs
* mistralrs/src/anymoe.rs
* mistralrs/src/xlora_model.rs
* mistralrs/src/gguf_xlora_model.rs
* mistralrs-core/src/engine/mod.rs
* mistralrs/src/gguf.rs
* mistralrs-core/src/engine/add_request.rs
* mistralrs-pyo3/mistralrs.pyi
* mistralrs-core/src/lib.rs
* mistralrs-core/src/engine/search_request.rs

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>mistralrs/src/vision_model.rs (4)</summary><blockquote>

<details>
<summary>mistralrs-core/src/engine/mod.rs (1)</summary>

* `new` (100-153)

</details>
<details>
<summary>mistralrs-core/src/lib.rs (3)</summary>

* `new` (212-232)
* `new` (293-477)
* `with_tool_callback` (269-276)

</details>
<details>
<summary>mistralrs/src/gguf.rs (2)</summary>

* `new` (48-73)
* `with_tool_callback` (87-94)

</details>
<details>
<summary>mistralrs/src/text_model.rs (3)</summary>

* `new` (94-126)
* `new` (419-423)
* `with_tool_callback` (141-148)

</details>

</blockquote></details>

</details><details>
<summary>🪛 Ruff (0.11.9)</summary>

<details>
<summary>examples/python/custom_tool_call.py</summary>

18-18: Use a context manager for opening files

(SIM115)

</details>

</details>
<details>
<summary>🪛 Pylint (3.3.7)</summary>

<details>
<summary>examples/python/custom_tool_call.py</summary>

[refactor] 18-18: Consider using 'with' for resource-allocating operations

(R1732)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: Check (macOS-latest, stable)
* GitHub Check: Check (ubuntu-latest, stable)
* GitHub Check: Docs
* GitHub Check: Clippy
* GitHub Check: Check (windows-latest, stable)
* GitHub Check: Test Suite (macOS-latest, stable)
* GitHub Check: Test Suite (windows-latest, stable)
* GitHub Check: Test Suite (ubuntu-latest, stable)

</details>

<details>
<summary>🔇 Additional comments (17)</summary><blockquote>

<details>
<summary>mistralrs/examples/custom_tool_call/main.rs (3)</summary>

`35-46`: **LGTM! Excellent demonstration of the new tool callback system.**

The tool callback registration correctly:
- Extracts arguments from the `CalledFunction` JSON
- Safely handles the query parameter with a default fallback
- Returns properly serialized JSON results
- Uses descriptive naming that matches the schema

---

`50-62`: **Well-structured JSON schema definition.**

The tool schema properly defines:
- Function type and name matching the callback registration
- Clear parameter description and type constraints
- Required fields specification

This enables the model to understand how to invoke the tool automatically.

---

`67-69`: **Proper request configuration for automatic tool usage.**

The request setup correctly integrates the tool schema with `ToolChoice::Auto`, allowing the model to automatically determine when to invoke the custom tool.

</details>
<details>
<summary>mistralrs/src/vision_model.rs (4)</summary>

`3-4`: **LGTM! Proper imports for the new tool callback functionality.**

The imports correctly include `ToolCallback` and `HashMap` needed for the multiple tool callbacks feature.

---

`33-33`: **Consistent tool callbacks storage implementation.**

The addition of `tool_callbacks: HashMap<String, Arc<ToolCallback>>` and its initialization follows the same pattern used across other model builders in the codebase.




Also applies to: 84-84

---

`101-108`: **Well-implemented builder method for tool callback registration.**

The `with_tool_callback` method properly:
- Accepts flexible naming via `Into<String>`
- Stores the callback with the appropriate Arc wrapper
- Returns self for method chaining

---

`334-336`: **Correct integration with the runner builder.**

The loop properly iterates over registered tool callbacks and applies them to the runner, maintaining consistency with the existing search callback handling pattern.

</details>
<details>
<summary>mistralrs/src/text_model.rs (3)</summary>

`3-4`: **Consistent implementation matching the established pattern.**

The tool callbacks functionality is implemented identically to `VisionModelBuilder`, maintaining consistency across model builders.




Also applies to: 32-32, 123-123

---

`141-148`: **Well-documented and properly implemented builder method.**

The method includes clear documentation about registering callbacks for specific tool names and follows the same signature pattern as other model builders.

---

`392-394`: **Correct runner integration.**

The tool callbacks are properly applied to the `MistralRsBuilder` using the same iteration pattern, ensuring all registered callbacks are available during execution.

</details>
<details>
<summary>examples/python/custom_tool_call.py (3)</summary>

`33-36`: **Clean tool dispatcher implementation.**

The callback function properly handles tool name dispatch and argument extraction, with appropriate fallback for missing arguments.

---

`38-51`: **Comprehensive JSON schema definition.**

The schema correctly defines the function structure with proper parameter types and requirements, enabling automatic tool invocation by the model.

---

`53-66`: **Excellent demonstration of the Python tool callback integration.**

The example clearly shows:
- Tool callback registration via the `tool_callbacks` parameter
- Schema integration with `tool_schemas`
- Automatic tool choice configuration

This effectively demonstrates the end-to-end Python API for custom tool callbacks.

</details>
<details>
<summary>mistralrs/examples/custom_search/main.rs (1)</summary>

`41-73`: **LGTM! Well-structured example demonstrating custom search integration.**

The main function effectively demonstrates the new tool callback system:
- Properly configures the model with quantization and logging
- Correctly sets up the custom search callback using a closure
- Appropriately enables web search options to trigger the custom callback
- Clean error handling with anyhow::Result

This serves as a good reference implementation for users wanting to implement custom search functionality.

</details>
<details>
<summary>mistralrs-pyo3/src/lib.rs (3)</summary>

`120-132`: **LGTM! Proper Python-Rust interop for tool callbacks.**

The function correctly:
- Uses `Python::with_gil` for thread-safe Python interaction
- Parses JSON arguments using Python's json module
- Handles error conversion from PyErr to anyhow::Error
- Returns the expected string result for the ToolCallback trait

---

`134-151`: **LGTM! Clean implementation of dict-to-map conversion.**

The function properly:
- Handles Python dict downcast with descriptive error messages
- Efficiently builds the ToolCallbacks map
- Reuses the `wrap_tool_callback` helper function
- Provides clear error context for debugging

---

`566-566`: **LGTM! Well-integrated tool callbacks parameter.**

The changes properly extend Runner::new with tool callback support:
- Consistent optional parameter handling
- Follows the same pattern as existing search_callback parameter
- Correctly processes Python dict to ToolCallbacks map
- Appropriately registers callbacks with MistralRsBuilder using iterator

The implementation maintains consistency with the existing codebase patterns.




Also applies to: 592-592, 887-899

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3117621789,2904358159,coderabbitai[bot],COMMENTED,2025-06-06T09:23:51Z,"**Actionable comments posted: 1**

<details>
<summary>🧹 Nitpick comments (3)</summary><blockquote>

<details>
<summary>docs/TOOL_CALLING.md (3)</summary><blockquote>

`38-43`: **Enhance description clarity and punctuation**  
The sentence is split across lines and missing an Oxford comma. Consider merging and using the possessive form:

```diff
- You can override tool execution using a **tool callback**. The callback receives
- the tool name and a dictionary of arguments and must return the tool output as a
- string.
+ You can override tool execution using a **tool callback**. The callback receives the tool name and a dictionary of arguments, and must return the tool’s output as a string.
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[uncategorized] ~42-~42: Possible missing comma found.
Context: ...eives the tool name and a dictionary of arguments and must return the tool output as a st...

(AI_HYDRA_LEO_MISSING_COMMA)

</details>

</details>

---

`59-62`: **Add a concise Rust usage snippet for tool callbacks**  
Rather than directing users off-page, embed a minimal example:

```rust
let runner = TextModelBuilder::new(""YourModel/ID"")
    .with_tool_callback(|name, args| {
        // custom tool handling logic
    })
    .build();
```

---

`63-69`: **Provide a Python example for `search_callback`**  
To mirror the tool callback section, include:

```python
def search_cb(query: str) -> list[dict]:
    # custom search logic
    return [{""title"": ""..."", ""description"": ""..."", ""url"": ""..."", ""content"": ""...""}]

runner = Runner(..., search_callback=search_cb)
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 3085231cd33d9155a1f46a6acfb6d75d2fa46afe and 8eeba8fe0deb35187beb204a5b6bf0e8391eb768.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `README.md` (1 hunks)
* `docs/TOOL_CALLING.md` (1 hunks)

</details>

<details>
<summary>✅ Files skipped from review due to trivial changes (1)</summary>

* README.md

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 LanguageTool</summary>

<details>
<summary>docs/TOOL_CALLING.md</summary>

[uncategorized] ~42-~42: Possible missing comma found.
Context: ...eives the tool name and a dictionary of arguments and must return the tool output as a st...

(AI_HYDRA_LEO_MISSING_COMMA)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: Docs
* GitHub Check: Check (macOS-latest, stable)
* GitHub Check: Test Suite (windows-latest, stable)
* GitHub Check: Check (windows-latest, stable)
* GitHub Check: Test Suite (ubuntu-latest, stable)
* GitHub Check: Clippy
* GitHub Check: Check (ubuntu-latest, stable)
* GitHub Check: Test Suite (macOS-latest, stable)

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3078331713,2855706017,sourcery-ai[bot],COMMENTED,2025-05-20T22:09:46Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟡 **General issues**: 2 issues found
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3158797870,2941434641,gemini-code-assist[bot],COMMENTED,2025-06-19T03:37:51Z,"## Summary of Changes

Hello @gaby, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request significantly enhances the test coverage for the `binder` package by introducing a suite of new unit tests. The primary goal is to improve the robustness of the binding mechanisms by validating error handling, ensuring correct parsing behavior for various data structures, and confirming the proper functioning of custom parser configurations. This work aims to catch potential issues early and increase the overall reliability of the data binding process.

### Highlights

* **Error Path Testing**: I've added new test cases to `binder_test.go` to cover error paths for `QueryBinding` and `FormBinding`, specifically addressing invalid key formats and malformed multipart requests. This ensures the binder functions handle erroneous input gracefully.
* **Internal Function Testing**: I've introduced tests for internal functions like `getFieldCache` to verify panic conditions and `parseToMap` and `parse` to ensure correct handling of various map types and their parsing behavior.
* **Custom Parser Decoder Validation**: I've added comprehensive tests for `SetParserDecoder` to validate its behavior when `IgnoreUnknownKeys` is set to `false` (expecting errors for unknown fields) and to confirm that custom type converters are correctly applied during the binding process.
* **Type Mismatch Handling**: A new test case for `formatBindData` has been added to explicitly check for and confirm error reporting when an unsupported value type is encountered during binding.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configure Gemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3158797870,2941436537,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-19T03:38:31Z,"## Pull Request Overview

This PR enhances the binder package’s test suite by covering error paths and parser behavior, while removing a temporary test file.

- Added error-path tests for QueryBinding and FormBinding
- Introduced tests for parseToMap, parse, custom parser decoders, and formatBindData type mismatches
- Removed the temporary `binder_extra_test.go` file


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**binder/binder_test.go:44**
* Asserting an exact error message substring may be brittle if wording changes; consider checking for a custom error type or using a constant to make the test more resilient.
```
		require.Contains(t, err.Error(), ""unmatched brackets"")
```
**binder/binder_test.go:86**
* [nitpick] The test name mixes snake_case with Go’s CamelCase convention. Consider renaming to `TestParseFunctionMaps` for consistency with other tests.
```
func Test_parse_function_maps(t *testing.T) {
```
</details>

"
3158797870,2941439316,gemini-code-assist[bot],COMMENTED,2025-06-19T03:39:33Z,"## Code Review

This pull request significantly increases test coverage for the binder package, particularly focusing on error paths, custom parser configurations, and map handling. It also includes the removal of a temporary test file (`binder_extra_test.go`). The new tests are well-structured and utilize `t.Parallel()` for efficiency. The review identified a couple of areas for improvement to enhance test robustness: 

1.  Ensuring reliable reset of global state in `Test_SetParserDecoder_UnknownKeys` using `defer` to prevent potential flakiness in parallel test execution.
2.  Suggesting more explicit error handling in the custom converter function within `Test_SetParserDecoder_CustomConverter` as a best practice, even though the current test input is valid.

Overall, these changes are a valuable addition to the test suite."
3158797870,2941460745,github-actions[bot],COMMENTED,2025-06-19T03:49:42Z,"<!-- github-benchmark-action-comment(start): Benchmark Alert -->
# :warning: **Performance Alert** :warning:

Possible performance regression was detected for benchmark.
Benchmark result of this commit is worse than the previous benchmark result exceeding threshold `1.50`.

| Benchmark suite | Current: b948468dda67df73e33059ebf4f45882a95cd3e4 | Previous: a68b0e0883791ca0ab955d77f998079a9ab0dc6f | Ratio |
|-|-|-|-|
| `Benchmark_GenericParseTypeBytes/benchmark_genericParseTypeBytes#03` | `26.03` ns/op	       0 B/op	       0 allocs/op | `12.54` ns/op	       0 B/op	       0 allocs/op | `2.08` |
| `Benchmark_GenericParseTypeBytes/benchmark_genericParseTypeBytes#03 - ns/op` | `26.03` ns/op | `12.54` ns/op | `2.08` |

This comment was automatically generated by [workflow](https://github.com/gofiber/fiber/actions?query=workflow%3ABenchmark) using [github-action-benchmark](https://github.com/marketplace/actions/continuous-benchmark).
<!-- github-benchmark-action-comment(end): Benchmark Alert -->"
3158797870,2941736904,ReneWerner87,APPROVED,2025-06-19T06:28:42Z,
3164196672,2947106673,cubic-dev-ai[bot],COMMENTED,2025-06-20T19:24:21Z,"cubic reviewed 1 file and found no issues. Review PR in [cubic.dev](https://cubic.dev/pr/better-auth/better-auth/pull/3106).

<sub>React with 👍 or 👎 to teach cubic. Tag `@cubic-dev-ai` to give specific feedback.</sub>"
3088710464,2870447057,ChrisHuie,APPROVED,2025-05-27T09:57:48Z,
3083568715,2861781537,ntindle,APPROVED,2025-05-22T15:56:21Z,
3087084646,2865259893,coderabbitai[bot],COMMENTED,2025-05-23T17:44:04Z,"**Actionable comments posted: 1**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/components/contract-components/contract-publish-form/networks-fieldset.tsx (1)</summary><blockquote>

`26-64`: **Consider adding ARIA attributes for improved accessibility**

While migrating from Chakra UI to shadcn/ui, consider enhancing accessibility by adding appropriate ARIA attributes, especially for the select component.

```diff
- <div className=""flex flex-col gap-2"" data-required>
+ <div className=""flex flex-col gap-2"" data-required aria-required=""true"">
```

And for the select component:

```diff
- <SelectTrigger className=""w-full"">
+ <SelectTrigger className=""w-full"" aria-label=""Select deployment networks"">
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 916ecf494c20b100cd48c5dcdcc4b0369e4e60a2 and d9960870701046a5e8ece0935ddeee9d20d4f28e.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `apps/dashboard/src/components/contract-components/contract-publish-form/networks-fieldset.tsx` (3 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: E2E Tests (pnpm, esbuild)
* GitHub Check: Unit Tests
* GitHub Check: E2E Tests (pnpm, webpack)
* GitHub Check: E2E Tests (pnpm, vite)
* GitHub Check: Size
* GitHub Check: Lint Packages
* GitHub Check: Build Packages
* GitHub Check: Analyze (javascript)

</details>

<details>
<summary>🔇 Additional comments (5)</summary><blockquote>

<details>
<summary>apps/dashboard/src/components/contract-components/contract-publish-form/networks-fieldset.tsx (5)</summary>

`2-9`: **Imports aligned with shadcn/ui migration**

The additions of shadcn UI select components and the `cn` utility function properly support the migration from Chakra UI to shadcn/ui with Tailwind CSS.

---

`26-27`: **Container replacement follows Tailwind best practices**

The Chakra `Flex` components have been properly replaced with semantic HTML elements using Tailwind classes. The `cn` utility appropriately handles conditional spacing based on the `fromStandard` prop.

---

`33-48`: **Select implementation follows shadcn/ui pattern**

The shadcn/ui Select component is properly implemented with all necessary sub-components (Trigger, Value, Content, Items). The event handler has been correctly updated from the native `onChange` to shadcn's `onValueChange`, maintaining the same form update logic.

---

`49-51`: **Container structure properly maintained**

The div structure properly maintains separation between the select control and the conditional network selector.

---

`62-64`: **Proper closing tags for container structure**

The closing tags are properly placed to maintain the same component structure hierarchy.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3087084646,2865304937,joaquim-verges,APPROVED,2025-05-23T17:59:20Z,
3135350518,2928416566,ncolletti,APPROVED,2025-06-14T14:49:27Z,looks good
3148010785,2930316585,obi1kenobi,COMMENTED,2025-06-15T19:41:52Z,
3151800646,2933930404,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-17T02:04:03Z,"## Pull Request Overview

A fix for a typo in the error message of `sliceMessagesUntil`.

- Corrected ""liekly"" to ""likely"" in the thrown error message.


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**packages/react-ai-sdk/src/ui/utils/sliceMessagesUntil.tsx:12**
* Corrected typo 'liekly' to 'likely' to improve clarity in the error message.
```
""useVercelAIThreadState: Message not found. This is likely an internal bug in assistant-ui."",
```
</details>

"
3151800646,2933930093,greptile-apps[bot],COMMENTED,2025-06-17T02:04:16Z,"
## PR Summary
Fixed a typo in error message from `packages/react-ai-sdk/src/ui/utils/sliceMessagesUntil.tsx`, changing 'liekly' to 'likely' for improved error clarity when debugging.

<sub>1 file reviewed, no comments</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=assistant-ui_2117)</sub>"
3151800646,2933931238,cubic-dev-ai[bot],COMMENTED,2025-06-17T02:04:50Z,cubic reviewed 1 file and found no issues. Review PR in [cubic.dev](https://cubic.dev/pr/assistant-ui/assistant-ui/pull/2117).
3071706456,2848923708,lunary-bot,APPROVED,2025-05-18T12:25:12Z,
3072240366,2849202081,calebdoxsey,APPROVED,2025-05-19T01:40:23Z,
3088609977,2958633922,dcq01,COMMENTED,2025-06-25T15:20:54Z,"Hi! I'm a grad student working on a research project about using large language models to automate code review. Based on your commit cd10ab4de80e09ab797cc862f449492527b58bd1 and the changes in autogpt_platform/backend/backend/blocks/http.py, my tool generated this comment:
1. Handle the case where `input_data.headers` can be `None` to avoid potential `TypeError`.
2. 2. Ensure that `input_data.headers` is always a valid dictionary to prevent runtime errors.
3. 3. Validate that `input_data.method` is not `None` before being used in the request.
4. 4. Ensure that `input_data.url` is not `None` or an empty string before making the request.
5. 5. Validate that the `body` field is of an expected type (e.g., dict for JSON) before processing it.
6. 6. Ensure that sensitive information is not included in error messages.
7. 7. Sanitize the content of the response before returning or logging it to avoid leaking sensitive information.
8. 8. Ensure that sensitive data in requests or responses is not logged or is masked appropriately.
9. 9. Implement validation on the `url` and `method` fields in the `Input` class to prevent SSRF attacks.
10. 10. Ensure that `input_data.headers` is a dictionary and not `None`.
11. 11. Ensure that `response` is not `None` before accessing `response.content`.
12. 12. Ensure that `input_data.body` is of an expected type before parsing it as JSON.
13. 13. Ensure that `input_data.authorization.get_secret_value()` is called only if `input_data.authorization` is not `None`.
14. 14. Ensure that the `SecretStr` type from Pydantic is being used correctly for the `authorization` field in the `Input` class.
15. 15. Ensure that `get_secret_value()` is a valid method of `SecretStr`.
16. 16. Ensure that the `logger` used in `logger.warning(error_msg)` is defined and imported properly.
17. 17. Ensure that `SchemaField` is properly imported or defined in the code.
18. 18. Ensure that the default value for `json_format` aligns with the expected behavior of the function and is documented clearly.
19. 19. Consider using a more descriptive name like `request_headers` for the variable `headers` to clarify its purpose.
20. 20. Ensure that you are using the latest version of the `requests` library to avoid known vulnerabilities.
21. 21. It is generally better to catch specific exceptions unless there is a compelling reason to catch all exceptions.
22. 22. Add a test case to verify that when the `authorization` field is set, the `Authorization` header is correctly included in the request.
23. 23. Add a test case to ensure that if the `authorization` field is `None`, the `Authorization` header is not included in the request headers.
24. 24. Ensure that the new import statement for `SecretStr` should be placed in alphabetical order with the other imports.
25. 25. Consider refactoring the logic for handling the `json_format` flag into a separate method to adhere to the DRY (Don't Repeat Yourself) principle.
26. 26. Consider adding a logging statement before yielding unexpected exceptions for better debugging.
27. 27. Log exception details in the catch-all `except Exception as e` block to aid in debugging.
28. 28. Provide more context about the error when yielding, such as the input parameters that led to the error.
29. 29. When creating a dictionary from `input_data.headers`, consider using `input_data.headers.copy()` instead of `dict(input_data.headers)` to maintain the original dictionary's type if it is a subclass of `dict`.
30. 30. Ensure that the use of `yield` in the `run` method is intended and that the calling code handles the generator appropriately.
31. 31. Ensure that there is a single blank line between method definitions and class definitions for better separation.
32. 32. Ensure that `input_data.authorization` is not `None` before accessing its methods.
33. 33. Consider implementing limits on the size of the response that can be processed to avoid high memory usage with large responses.

As part of my research, I'm trying to understand how useful these comments are in real-world development. If you have a moment, I'd be super grateful if you could quickly reply to these two yes/no questions:
1. Does this comment provide suggestions from a dimension you hadn’t considered?
2. 2. Do you find this comment helpful?

Thanks a lot for your time and feedback! And sorry again if this message is a bother."
3072047554,2870676934,dev-aipolabs,APPROVED,2025-05-27T11:22:28Z,lgtm
3138010469,2918581631,acco,COMMENTED,2025-06-11T20:32:15Z,
3138010469,2918724866,davoclavo,COMMENTED,2025-06-11T21:01:41Z,
3138010469,2918854214,yordis,COMMENTED,2025-06-11T22:04:46Z,
3138010469,2918953836,yordis,COMMENTED,2025-06-11T23:10:47Z,
3138010469,2918957146,yordis,COMMENTED,2025-06-11T23:13:58Z,
3138010469,2918960018,davoclavo,COMMENTED,2025-06-11T23:16:39Z,
3138010469,2918961412,davoclavo,COMMENTED,2025-06-11T23:18:02Z,
3138010469,2918968841,davoclavo,COMMENTED,2025-06-11T23:25:22Z,
3138010469,2919042681,acco,COMMENTED,2025-06-12T00:40:27Z,
3138010469,2919049051,acco,COMMENTED,2025-06-12T01:04:28Z,"Looking good so far!

Addressing your questions @davoclavo :

> Should we handle propagating timestamps differently - especially when we are doing a backfill?
> Source: https://s2.dev/docs/rest/records/append-records#body-records-timestamp

Hmm... I'm not sure what we should do for timestamps! I'll ask their team now

> How to handle cases where the batch size exceeds the 1MiB that is required by S2?

Unfortunately, we won't know batch size until we make the JSON. And in Broadway (pipeline we're using to make batches) we can't say ""give me a batch that has this many items OR is of this size, whichever is lesser"". So we may get an extra large batch in `handle_batch`

The easiest/dumbest way to do it: if the batch is rejected for being too big, retry each message in the batch individually. We do this here (this pipeline is for a secret-menu feature of Sequin -- don't worry about context too much!):

https://github.com/sequinstream/sequin/blob/e11a1cf5d7840d4fb5315da76033e8a46574be2d/lib/sequin/runtime/http_push_pipeline.ex#L374-L388

This is ~fine for a batch of 10 messages, kinda falls apart at 100.

So, I'd say either:

1. Let's start with batch_size=1 to avoid this issue. Not the highest throughput, but OK to start.
2. Let's start with a small batch_size (like 10, not configurable) that minimizes chance of this issue and lets us do an easy fallback if we hit the limit

If an individual message is too big for S2, we can [silently drop it for now](https://github.com/sequinstream/sequin/issues/937) - or just fail it indefinitely."
3138010469,2919083775,shikhar,COMMENTED,2025-06-12T01:19:49Z,
3138010469,2919085986,shikhar,COMMENTED,2025-06-12T01:22:07Z,
3138010469,2919936848,davoclavo,COMMENTED,2025-06-12T07:49:37Z,
3138010469,2920023539,davoclavo,COMMENTED,2025-06-12T08:14:52Z,
3138010469,2920024354,davoclavo,COMMENTED,2025-06-12T08:15:10Z,
3138010469,2933199901,davoclavo,COMMENTED,2025-06-16T19:03:37Z,
3138010469,2933201013,davoclavo,COMMENTED,2025-06-16T19:04:08Z,
3077582070,2854854745,ellipsis-dev[bot],COMMENTED,2025-05-20T16:21:15Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to f57eda42a0d549368529b843ab94797771d2d31e in <ellipsistime>1 minute and 15 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `61` lines of code in `3` files
> - Skipped `0` files when reviewing.
> - Skipped posting `4` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>agents-api/agents_api/queries/usage/create_usage_record.py:98</code></summary>
> 
> - **Draft comment:** 
> Updated SQL column name from 'custom_api_used' to 'custom_key_used' for insertion. Verify that external consumers using the alias are aware of the change.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment is asking the PR author to verify that external consumers are aware of a change, which violates the rule against asking the author to ensure behavior is intended or to double-check things. The comment does not provide a specific code suggestion or ask for a specific test to be written.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>agents-api/agents_api/queries/usage/create_usage_record.py:121</code></summary>
> 
> - **Draft comment:** 
> RETURNING clause now aliases 'custom_key_used' as 'custom_api_used' to preserve external API compatibility. Confirm this aliasing is intentional.
> - **Reason this comment was not posted:**
> Comment looked like it was already resolved.
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>memory-store/migrations/000036_usage.up.sql:11</code></summary>
> 
> - **Draft comment:** 
> Column renamed to 'custom_key_used'. Ensure that existing deployments handle this schema change correctly (possibly needing an ALTER if table exists).
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment is asking the PR author to ensure that existing deployments handle the schema change correctly. This falls under the rule of not asking the author to ensure behavior is intended or tested. Therefore, this comment should be removed.
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>memory-store/migrations/000038_usage_cost_monthly.up.sql:7</code></summary>
> 
> - **Draft comment:** 
> Updated filter condition to use 'custom_key_used'. This ensures the continuous aggregate view reflects the renamed column.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is purely informative, explaining what was done and why. It doesn't provide a suggestion, ask for confirmation, or point out a potential issue.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_t00gdVswoTjUuLgs`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3130652368,2911505169,ChrisHuie,APPROVED,2025-06-09T22:28:51Z,
3138855376,2919853346,ccoVeille,COMMENTED,2025-06-12T07:24:09Z,
3138855376,2920481803,Umang01-hash,COMMENTED,2025-06-12T10:35:01Z,
3138855376,2920614921,ccoVeille,COMMENTED,2025-06-12T11:14:50Z,"Typo in a comment message : resovle

Except that 👍"
3138855376,2930775069,aryanmehrotra,APPROVED,2025-06-16T06:24:23Z,
3141458756,2922540752,gemini-code-assist[bot],COMMENTED,2025-06-12T20:17:23Z,"## Summary of Changes

Hello @rgerhards, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request enhances the robustness and security of the TCP server and input module (`imtcp`) by implementing better safeguards for handling configuration strings. It specifically addresses potential memory allocation issues and prevents a possible buffer overflow when copying timezone information.

### Highlights

* **Memory Allocation Checks**: Added `CHKmalloc` checks around calls to `es_str2cstr` in `imtcp.c` to ensure that memory allocations for various configuration strings (like port, address, name, timezone, ruleset, stream driver parameters, gnutls priority, and permitted peers) are successful, preventing potential crashes on allocation failure.
* **Buffer Overflow Prevention**: Replaced `strcpy` with `strncpy` and explicitly null-terminated the destination buffer when copying the default timezone string (`dfltTZ`) in `runtime/tcpsrv.c` to prevent a potential buffer overflow if the source string exceeds the buffer size.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configureGemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3141458756,2922542974,gemini-code-assist[bot],COMMENTED,2025-06-12T20:18:38Z,"## Code Review

This pull request makes good progress in hardening TCP configuration string handling. The use of `strncpy` in `tcpsrv.c` effectively mitigates a potential buffer overflow. In `imtcp.c`, most `es_str2cstr` calls are now correctly guarded by `CHKmalloc` to verify memory allocations. My review identified two instances related to `permittedpeer` handling where this check was missed. Addressing these will ensure comprehensive protection against allocation failures in the modified code sections."
3141458756,2924177983,gemini-code-assist[bot],COMMENTED,2025-06-13T10:02:33Z,"## Code Review

This pull request improves memory allocation handling in `imtcp.c` and prevents a buffer overflow in `tcpsrv.c`, enhancing the security and stability of the TCP modules."
3130011634,2916225620,ChrisHuie,APPROVED,2025-06-11T08:50:43Z,
3071144316,2848483626,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-18T00:25:13Z,"## Pull Request Overview

This PR fixes misuse of the Python `is` operator for numeric comparisons in unit tests, replacing identity checks with proper equality operators.

- Replace `is`/`is not` with `==`/`!=` for zero and numeric checks.
- Apply across multiple test modules to align with Python semantics.

### Reviewed Changes

Copilot reviewed 6 out of 6 changed files in this pull request and generated no comments.

<details>
<summary>Show a summary per file</summary>

| File                                              | Description                                                           |
| ------------------------------------------------- | --------------------------------------------------------------------- |
| python/tests/unit/simulation/test_world.py        | Replaced `is 0` checks with `== 0` for skeleton/frame counts.         |
| python/tests/unit/optimizer/test_optimizer.py     | Swapped `is 2` with `== 2` in dimension assertions.                   |
| python/tests/unit/math/test_random.py             | Changed `is i` seed check to `== i`.                                  |
| python/tests/unit/dynamics/test_meta_skeleton.py  | Updated `is`/`is not` to `==`/`!=` for body node, joint, and position counts. |
| python/tests/unit/dynamics/test_inverse_kinematics.py | Switched length checks from `is` to `==`.                             |
| python/tests/unit/collision/test_collision.py     | Converted `is` checks to `==`/`!=` for contact and shape frame counts. |
</details>




"
3092365507,2869382298,ellipsis-dev[bot],COMMENTED,2025-05-27T02:17:29Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed 71ded8dd263b0ad9f6280bc23f612fa1f999f1b0 in <ellipsistime>1 minute and 37 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `115` lines of code in `2` files
> - Skipped `0` files when reviewing.
> - Skipped posting `7` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern/cli/llm_setup.py:95</code></summary>
> 
> - **Draft comment:** 
> Added new Anthropic model options. Ensure that the keys (e.g. ANTHROPIC_CLAUDE3.5_HAIKU, ANTHROPIC_CLAUDE4_OPUS, ANTHROPIC_CLAUDE4_SONNET) match the backend config naming conventions.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>skyvern/forge/sdk/api/llm/config_registry.py:240</code></summary>
> 
> - **Draft comment:** 
> New config for ANTHROPIC_CLAUDE3.5_HAIKU added. Verify the endpoint 'anthropic/claude-3-5-haiku-latest' per API docs.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>skyvern/forge/sdk/api/llm/config_registry.py:249</code></summary>
> 
> - **Draft comment:** 
> New config for ANTHROPIC_CLAUDE4_OPUS added. Confirm that the endpoint 'anthropic/claude-opus-4-latest' is correct.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>skyvern/forge/sdk/api/llm/config_registry.py:259</code></summary>
> 
> - **Draft comment:** 
> New config for ANTHROPIC_CLAUDE4_SONNET added. Verify that its endpoint 'anthropic/claude-sonnet-4-latest' aligns with expected behavior.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>skyvern/forge/sdk/api/llm/config_registry.py:296</code></summary>
> 
> - **Draft comment:** 
> Added BEDROCK_ANTHROPIC_CLAUDE3.5_HAIKU config. Ensure the model endpoint 'bedrock/anthropic.claude-3-5-haiku-20241022-v1:0' is up-to-date.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>6. <code>skyvern/forge/sdk/api/llm/config_registry.py:323</code></summary>
> 
> - **Draft comment:** 
> Explicitly adding max_completion_tokens (8192) to one of the bedrock Anthropic configs improves consistency with others.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>7. <code>skyvern/forge/sdk/api/llm/config_registry.py:353</code></summary>
> 
> - **Draft comment:** 
> Added BEDROCK_ANTHROPIC_CLAUDE4_OPUS and BEDROCK_ANTHROPIC_CLAUDE4_SONNET configs. Confirm endpoints and settings (including max_completion_tokens) match Anthropic standards.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_SAh2lBkfyQXYGOjg`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3092365507,2869382759,ellipsis-dev[bot],COMMENTED,2025-05-27T02:17:58Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 71ded8dd263b0ad9f6280bc23f612fa1f999f1b0 in <ellipsistime>2 minutes and 6 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `115` lines of code in `2` files
> - Skipped `0` files when reviewing.
> - Skipped posting `7` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern/cli/llm_setup.py:97</code></summary>
> 
> - **Draft comment:** 
> New Anthropic model keys added. Ensure they match the registered config keys and expected env vars.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment is asking the PR author to ensure that the new model keys match the registered config keys and expected environment variables. This falls under asking the author to double-check things, which is against the rules.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>skyvern/forge/sdk/api/llm/config_registry.py:236</code></summary>
> 
> - **Draft comment:** 
> New registrations for Anthropic Claude models (Claude 3.5 Haiku, Claude 4 Opus, Claude 4 Sonnet) added. Consider wrapping these in an ENABLE_ANTHROPIC check if needed for consistency.
> - **Reason this comment was not posted:**
> Comment looked like it was already resolved.
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>skyvern/forge/sdk/api/llm/config_registry.py:253</code></summary>
> 
> - **Draft comment:** 
> Verify that the model identifiers for Claude 4 (Opus and Sonnet) are correct and follow naming conventions.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is asking the PR author to verify something, which is against the rules. It does not provide a specific suggestion or point out a specific issue with the code.
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>skyvern/forge/sdk/api/llm/config_registry.py:296</code></summary>
> 
> - **Draft comment:** 
> New Bedrock registrations for Anthropic models added. Ensure consistent max_completion_tokens (8192) and check if these should be conditionally registered based on ENABLE_ANTHROPIC/BEDROCK.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>skyvern/forge/sdk/api/llm/config_registry.py:353</code></summary>
> 
> - **Draft comment:** 
> Ensure the new Bedrock keys ""BEDROCK_ANTHROPIC_CLAUDE4_OPUS"" and ""BEDROCK_ANTHROPIC_CLAUDE4_SONNET"" have the correct model endpoint versions.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment is asking the author to ensure that the new Bedrock keys have the correct model endpoint versions. This falls under asking the author to ensure something is correct, which is against the rules.
> 
> 
> </details>
> 
> <details>
> <summary>6. <code>skyvern/forge/sdk/api/llm/config_registry.py:330</code></summary>
> 
> - **Draft comment:** 
> Typo: The config key 'BEDROCK_ANTHROPIC_CLAUDE3.5_SONNET_V1' appears to be inconsistent with the pull request title mentioning 'Haiku models'. Please verify if this is a typo and update the model name accordingly.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> <details>
> <summary>7. <code>skyvern/forge/sdk/api/llm/config_registry.py:379</code></summary>
> 
> - **Draft comment:** 
> The model configuration for Claude 3 has some potential inconsistencies: - The key is named `BEDROCK_ANTHROPIC_CLAUDE3.7_SONNET_INFERENCE_PROFILE` and the version in the model string is `claude-3-7-sonnet-20250219-v1:0`, but the PR title mentions support for Claude 3.5. Please double-check if the version number should be 3.5 instead of 3.7. - Additionally, the model string uses a `us.anthropic` prefix, whereas the other configurations use just `anthropic`. Is this intentional? Please verify these values for correctness.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_b00tMCA0Kyj8WKHp`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3092365507,2869383001,ellipsis-dev[bot],COMMENTED,2025-05-27T02:18:15Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed 45a543964c790536f6aa3330e38a5b1b7a4ef1dd in <ellipsistime>1 minute and 18 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `115` lines of code in `2` files
> - Skipped `0` files when reviewing.
> - Skipped posting `3` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern/cli/llm_setup.py:96</code></summary>
> 
> - **Draft comment:** 
> New Anthropic model options are added. Verify that the order/grouping (3.5 SONNET, 3.7 SONNET, 3.5 HAIKU, 4 OPUS, 4 SONNET) is intentional for clarity.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment is asking the PR author to verify the order/grouping of model options, which is not allowed according to the rules. It does not provide a specific suggestion or point out a clear issue, but rather asks for confirmation of intention.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>skyvern/forge/sdk/api/llm/config_registry.py:236</code></summary>
> 
> - **Draft comment:** 
> New Anthropic Claude config registrations (CLAUDE3.5_HAIKU, CLAUDE4_OPUS, CLAUDE4_SONNET) are added. Confirm that the endpoint strings and parameters match current API specifications.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment is asking the PR author to confirm that the endpoint strings and parameters match current API specifications. This falls under the category of asking the author to double-check things, which is against the rules. Therefore, this comment should be removed.
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>skyvern/forge/sdk/api/llm/config_registry.py:296</code></summary>
> 
> - **Draft comment:** 
> New bedrock Anthropic config registrations (BEDROCK_ANTHROPIC_CLAUDE3.5_HAIKU, BEDROCK_ANTHROPIC_CLAUDE4_OPUS, BEDROCK_ANTHROPIC_CLAUDE4_SONNET) are added. Ensure the deployment endpoints and parameters are correctly specified per vendor documentation.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment is asking the PR author to ensure that deployment endpoints and parameters are correctly specified, which falls under asking the author to double-check things. This violates the rules.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_3P0fs4Hi8vmWU4dR`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3150644025,2932851289,FrozenPandaz,COMMENTED,2025-06-16T16:55:10Z,
3150644025,2932862176,claude[bot],COMMENTED,2025-06-16T16:59:30Z,
3150644025,2932830984,graphite-app[bot],COMMENTED,2025-06-16T17:11:06Z,
3150644025,2936185246,FrozenPandaz,CHANGES_REQUESTED,2025-06-17T15:38:51Z,
3150644025,2936198739,claude[bot],COMMENTED,2025-06-17T15:43:06Z,
3080333429,2858398469,llcnt,COMMENTED,2025-05-21T16:16:36Z,"Look already good to me :)
I have a general question: don't you think we should add some deprecation messages somewhere for the user(s) using awq with pruna ?
Also, what about models on hf hub that are already quantized with awq, do you think we will be able to still re-load them with `pruna` thanks to this [PR](https://github.com/PrunaAI/pruna/pull/144)?"
3080333429,2864263018,llcnt,APPROVED,2025-05-23T12:35:29Z,Looks good to me:)
3080333429,2868637990,johannaSommer,APPROVED,2025-05-26T14:35:48Z,
3096397240,2873991060,coderabbitai[bot],COMMENTED,2025-05-28T07:53:33Z,"**Actionable comments posted: 2**

<details>
<summary>🧹 Nitpick comments (3)</summary><blockquote>

<details>
<summary>apps/dashboard/src/components/embedded-wallets/Users/SearchInput.tsx (2)</summary><blockquote>

`6-10`: **Extract the props interface for better reusability and type safety.**

Consider extracting the props interface to improve reusability and make the component more maintainable.



```diff
+interface SearchInputProps {
+  placeholder: string;
+  value: string;
+  onValueChange: (value: string) => void;
+}
+
-export function SearchInput(props: {
-  placeholder: string;
-  value: string;
-  onValueChange: (value: string) => void;
-}) {
+export function SearchInput(props: SearchInputProps) {
```

---

`6-22`: **Component implementation looks good with minor accessibility enhancement needed.**

The SearchInput component is well-structured and follows React best practices. Consider adding accessibility attributes for better screen reader support.




```diff
 export function SearchInput(props: {
   placeholder: string;
   value: string;
   onValueChange: (value: string) => void;
 }) {
   return (
     <div className=""relative"">
       <Input
         placeholder={props.placeholder}
         value={props.value}
         onChange={(e) => props.onValueChange(e.target.value)}
         className=""bg-card pl-9""
+        aria-label=""Search wallet users""
       />
       <SearchIcon className=""-translate-y-1/2 absolute top-1/2 left-3 size-4 text-muted-foreground"" />
     </div>
   );
 }
```

</blockquote></details>
<details>
<summary>apps/dashboard/src/components/embedded-wallets/Users/index.tsx (1)</summary><blockquote>

`114-138`: **Consider performance optimizations for the filtering logic.**

The current filtering approach runs on every render and could be expensive for large datasets. Consider adding debouncing and memoization.



```diff
+import { useMemo } from ""react"";
+// Also consider adding a debouncing hook like useDebounce

-  const filteredWallets = searchValue
-    ? wallets.filter((wallet) => {
-        const term = searchValue.toLowerCase();
-        if (wallet.id.toLowerCase().includes(term)) {
-          return true;
-        }
-        if (
-          wallet.wallets?.some((w) => w.address?.toLowerCase().includes(term))
-        ) {
-          return true;
-        }
-        if (
-          wallet.linkedAccounts?.some((acc) => {
-            return Object.values(acc.details).some(
-              (detail) =>
-                typeof detail === ""string"" &&
-                detail.toLowerCase().includes(term),
-            );
-          })
-        ) {
-          return true;
-        }
-        return false;
-      })
-    : wallets;
+  const filteredWallets = useMemo(() => {
+    if (!searchValue) return wallets;
+    
+    const term = searchValue.toLowerCase();
+    return wallets.filter((wallet) => {
+      if (wallet.id.toLowerCase().includes(term)) {
+        return true;
+      }
+      if (
+        wallet.wallets?.some((w) => w.address?.toLowerCase().includes(term))
+      ) {
+        return true;
+      }
+      if (
+        wallet.linkedAccounts?.some((acc) => {
+          return Object.values(acc.details).some(
+            (detail) =>
+              typeof detail === ""string"" &&
+              detail.toLowerCase().includes(term),
+          );
+        })
+      ) {
+        return true;
+      }
+      return false;
+    });
+  }, [wallets, searchValue]);
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between e14a1349e120b684c5cbf05a80eca5f1a7a2ad5d and f55c007b31c66981a6693e92d74458f4e4ac1ab8.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `apps/dashboard/src/components/embedded-wallets/Users/SearchInput.tsx` (1 hunks)
* `apps/dashboard/src/components/embedded-wallets/Users/index.tsx` (4 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>apps/dashboard/src/components/embedded-wallets/Users/index.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/components/embedded-wallets/Users/SearchInput.tsx (1)</summary>

* `SearchInput` (6-22)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: Unit Tests
* GitHub Check: Size
* GitHub Check: E2E Tests (pnpm, esbuild)
* GitHub Check: E2E Tests (pnpm, webpack)
* GitHub Check: Build Packages
* GitHub Check: E2E Tests (pnpm, vite)
* GitHub Check: Lint Packages
* GitHub Check: Analyze (javascript)

</details>

<details>
<summary>🔇 Additional comments (11)</summary><blockquote>

<details>
<summary>apps/dashboard/src/components/embedded-wallets/Users/SearchInput.tsx (1)</summary>

`11-22`: **LGTM! Clean and well-structured search input component.**

The component implementation is clean with proper controlled component pattern, appropriate styling, and good icon positioning.

</details>
<details>
<summary>apps/dashboard/src/components/embedded-wallets/Users/index.tsx (10)</summary>

`107-107`: **LGTM! Proper state management for search functionality.**

The search state is appropriately initialized and managed.

---

`176-183`: **LGTM! Well-positioned search input in the UI.**

The search input is appropriately placed alongside the download button with proper responsive styling.

---

`199-199`: **LGTM! Correct data flow with filtered results.**

The table correctly receives the filtered wallet data instead of the raw data.

---

`23-23`: **LGTM! Clean import of the SearchInput component.**

The import statement is properly placed and follows the project's import conventions.

---

`127-131`: <details>
<summary>❓ Verification inconclusive</summary>

**Verify type safety of the details object access.**

The filtering logic uses `Object.values(acc.details)` which might not be type-safe if the details structure is unexpected.

---

🏁 Script executed:

```shell
#!/bin/bash
# Check the WalletUser type definition to understand the structure of linkedAccounts.details
ast-grep --pattern 'type WalletUser = $$$'
ast-grep --pattern 'interface WalletUser {$$$}'
ast-grep --pattern 'linkedAccounts$$$details'
```

Length of output: 240

---

🏁 Script executed:

```shell
#!/bin/bash
# Search for the usage of acc.details in the Users component
rg -n ""acc\\.details"" -A5 -B5 apps/dashboard/src/components/embedded-wallets/Users/index.tsx
# Also locate the definition/type of acc to see where details comes from
rg -n ""users\\s*[:=]"" -A5 -B5 apps/dashboard/src/components/embedded-wallets/Users/index.tsx
rg -n ""map\\("" -A5 -B5 apps/dashboard/src/components/embedded-wallets/Users/index.tsx
```

Length of output: 1752

---



</details>

**Verify type safety of `acc.details` before filtering**

The code at `apps/dashboard/src/components/embedded-wallets/Users/index.tsx` (lines 127–131) does:

```ts
return Object.values(acc.details).some(
  (detail) =>
    typeof detail === ""string"" &&
    detail.toLowerCase().includes(term),
);
```

This assumes that:
- `acc.details` is always a non-null object
- All values are (or safely coerced to) strings

Please confirm the actual type of `linkedAccounts` and its `details` field as returned by `getAllEmbeddedWallets()`. If `details` can be undefined, null, or contain non-string values, you should either:

- Tighten the TypeScript definition (e.g. `Record<string, string>`)
- Add a runtime guard, for example:
  ```ts
  if (typeof acc.details !== ""object"" || acc.details == null) {
    return false;
  }
  return Object.values(acc.details).some(/* … */);
  ```
- Or transform/validate `details` at the API boundary to ensure it’s always in the expected shape.

---

`23-23`: **Import looks good.**

Clean import of the SearchInput component.

---

`107-107`: **State management is appropriate.**

Adding searchValue state for controlled input is the right approach.

---

`176-183`: **UI integration looks clean.**

The SearchInput is well-positioned in the header section with appropriate responsive styling. The layout with the download button works well.

---

`199-199`: **Correct data source for filtered results.**

Good integration - passing the filtered wallets to the table component instead of the original data.

---

`114-138`: **Consider user experience with pagination and search interaction.**

The current implementation filters only the wallets on the current page. Users might expect the search to work across all their wallet users, not just the current page. Consider whether this behavior aligns with user expectations.



Verify if the current page-level filtering meets the product requirements or if a different approach (like server-side search or client-side search across all pages) would be more appropriate.


Also applies to: 199-199

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3078814177,2856415868,ReneWerner87,APPROVED,2025-05-21T06:12:24Z,
3101858317,2889378150,sourcery-ai[bot],COMMENTED,2025-06-02T17:37:29Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟡 **General issues**: 1 issue found
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3143758141,2925026510,gemini-code-assist[bot],COMMENTED,2025-06-13T14:24:47Z,"## Summary of Changes

Hello @gaby, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request refactors the timeout middleware to be fully configurable using a new `Config` struct. This significantly enhances its flexibility by allowing per-route timeouts, excluding specific paths from timeout enforcement, and providing a custom handler for timeout events. The changes maintain backward compatibility, ensuring existing middleware usage remains functional while offering powerful new customization options.

### Highlights

* **Configurable Timeout**: Introduced a `Config` struct (`middleware/timeout/config.go`) to provide flexible configuration options for the timeout middleware.
* **Per-Route Timeouts**: Added support for specifying different timeout durations for individual routes using the `Routes` field in the `Config` struct.
* **Path Exclusion**: Implemented the ability to skip the timeout middleware for specific paths using the `SkipPaths` field in the `Config` struct.
* **Custom Timeout Handler**: Allowed users to define a custom `fiber.Handler` (`OnTimeout` field in `Config`) to be executed when a request times out, instead of the default `fiber.ErrRequestTimeout`.
* **Backward Compatibility**: The `New` function (`middleware/timeout/timeout.go`) was updated to accept the `Config` struct but retains backward compatibility with the previous signature by using variadic arguments and default configuration handling.
* **Documentation & Testing**: Updated documentation (`docs/middleware/timeout.md`, `docs/whats_new.md`) to reflect the new configuration options and added new tests (`middleware/timeout_test.go`) to cover the new features.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configureGemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3143758141,2925030942,gemini-code-assist[bot],COMMENTED,2025-06-13T14:26:13Z,"## Code Review

This pull request introduces a configurable timeout middleware, a valuable addition that enhances control over timeout behavior. However, the documentation in `whats_new.md` needs revision for accuracy regarding backward compatibility, and additional test coverage is suggested for combined configurations."
3143758141,2925061781,github-actions[bot],COMMENTED,2025-06-13T14:36:28Z,"<!-- github-benchmark-action-comment(start): Benchmark Alert -->
# :warning: **Performance Alert** :warning:

Possible performance regression was detected for benchmark.
Benchmark result of this commit is worse than the previous benchmark result exceeding threshold `1.50`.

| Benchmark suite | Current: 25f2986f51c3d543665150e3aac425e6dec70375 | Previous: 670fbd5e4553a69c31eccce4535bd53e557b488c | Ratio |
|-|-|-|-|
| `Benchmark_GenericParseTypeBytes/benchmark_genericParseTypeBytes` | `35.06` ns/op	       8 B/op	       1 allocs/op | `21.74` ns/op	       8 B/op	       1 allocs/op | `1.61` |
| `Benchmark_GenericParseTypeBytes/benchmark_genericParseTypeBytes - ns/op` | `35.06` ns/op | `21.74` ns/op | `1.61` |
| `Benchmark_GenericParseTypeString/benchmark_genericParseTypeString#01` | `13.99` ns/op	       0 B/op	       0 allocs/op | `8.867` ns/op	       0 B/op	       0 allocs/op | `1.58` |
| `Benchmark_GenericParseTypeString/benchmark_genericParseTypeString#01 - ns/op` | `13.99` ns/op | `8.867` ns/op | `1.58` |

This comment was automatically generated by [workflow](https://github.com/gofiber/fiber/actions?query=workflow%3ABenchmark) using [github-action-benchmark](https://github.com/marketplace/actions/continuous-benchmark).
<!-- github-benchmark-action-comment(end): Benchmark Alert -->"
3143758141,2927080469,Andrei-hub11,COMMENTED,2025-06-14T03:27:48Z,@gaby. I reviewed your timeout middleware implementation and identified a few small but impactful improvements.
3143758141,2930323444,coderabbitai[bot],COMMENTED,2025-06-15T20:15:59Z,"**Actionable comments posted: 2**

<details>
<summary>🧹 Nitpick comments (5)</summary><blockquote>

<details>
<summary>middleware/timeout/timeout.go (2)</summary><blockquote>

`22-29`: **Exact-match path skipping only – verify expectations**

`skip` is a `map[string]struct{}` keyed by the raw request path.  
Because no normalisation (e.g. `path.Clean`, trailing-slash handling, wildcards) is performed, `/health/` will not match `/health`, `%2Fhealth` etc.

If the intent is prefix / wildcard skipping, consider using `strings.HasPrefix` or a radix tree.  
If exact match is deliberate, please document it in the README to avoid surprises.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 GitHub Check: codecov/patch</summary>

[warning] 24-25: middleware/timeout/timeout.go#L24-L25
Added lines #L24 - L25 were not covered by tests

</details>

</details>

---

`30-36`: **Map lookup every request could be avoided**

`cfg.Routes` is consulted for every request (`if cfg.Routes != nil { ... }`).  
For large route maps this is an O(1) lookup but still costs one hash each time even when the majority of routes share the default timeout.

If memory allows, you can pre-split the middleware into two instances (default / custom timeout) at registration time or cache the resolved duration inside a `middlewareCtx`.  
Not critical, just a perf note.

</blockquote></details>
<details>
<summary>middleware/timeout/timeout_test.go (1)</summary><blockquote>

`133-145`: **Test name & comment mismatch**

The test is called `TestTimeout_NegativeDuration` but the comment copy-pastes the “zero duration” explanation.  
Consider updating the comment so future readers understand what is really being checked.

```diff
-// TestTimeout_NegativeDuration tests the edge case where the timeout is set to zero.
-// Usually this means the request can never exceed a 'deadline' – effectively no timeout.
+// TestTimeout_NegativeDuration verifies that a negative timeout is treated the same
+// as zero – i.e. no timeout is applied.
```

</blockquote></details>
<details>
<summary>docs/middleware/timeout.md (1)</summary><blockquote>

`7-17`: **Typo – “passed executions”**

> “If the context passed executions … takes longer”

Perhaps meant “If the *wrapped* executions” or “If the operations executed within the context”.

Minor wording issue, but docs are user-facing.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[uncategorized] ~13-~13: The abbreviation “e.g.” (= for example) requires two periods.
Context: ...()`.  If the context passed executions (eg. DB ops, Http calls) takes longer than t...

(E_G)

---

[misspelling] ~15-~15: This word is normally spelled with a hyphen.
Context: ...zed `ErrorHandler`.  It does not cancel long running executions. Underlying executions must ...

(EN_COMPOUNDS_LONG_RUNNING)

</details>

</details>

</blockquote></details>
<details>
<summary>docs/whats_new.md (1)</summary><blockquote>

`1240-1243`: **Phrase could be clearer on breaking change**

The note says “existing code must be updated accordingly”, which is correct, but earlier marketing material in the same file mentions “retaining backward compatibility”.  
Consider explicitly calling out that the `timeout.New` signature change is **breaking** to prevent confusion during migration.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 670fbd5e4553a69c31eccce4535bd53e557b488c and 25f2986f51c3d543665150e3aac425e6dec70375.

</details>

<details>
<summary>📒 Files selected for processing (5)</summary>

* `docs/middleware/timeout.md` (4 hunks)
* `docs/whats_new.md` (1 hunks)
* `middleware/timeout/config.go` (1 hunks)
* `middleware/timeout/timeout.go` (1 hunks)
* `middleware/timeout/timeout_test.go` (6 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>middleware/timeout/config.go (1)</summary><blockquote>

<details>
<summary>ctx_interface_gen.go (1)</summary>

* `Ctx` (17-379)

</details>

</blockquote></details>

</details><details>
<summary>🪛 GitHub Check: codecov/patch</summary>

<details>
<summary>middleware/timeout/timeout.go</summary>

[warning] 24-25: middleware/timeout/timeout.go#L24-L25
Added lines #L24 - L25 were not covered by tests

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (2)</summary>

* GitHub Check: Compare
* GitHub Check: repeated

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>middleware/timeout/timeout_test.go (1)</summary>

`151-160`: **Missing test for `Next` skip function**

Lines 23-25 in `timeout.go` are uncovered (Codecov warning).  
Add a unit test that sets `cfg.Next` to return `true` for a specific request and assert that the wrapped handler executes without timeout enforcement.

This will both improve coverage and protect against regressions on the `Next` logic.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3143758141,2932686713,ReneWerner87,CHANGES_REQUESTED,2025-06-16T15:54:10Z,Let's talk about routes and skipPaths
3143758141,2933726073,Andrei-hub11,COMMENTED,2025-06-16T23:01:29Z,
3143758141,2933849749,gaby,COMMENTED,2025-06-17T00:50:03Z,
3143758141,2933886232,Andrei-hub11,COMMENTED,2025-06-17T01:26:59Z,
3143758141,2933897175,gaby,COMMENTED,2025-06-17T01:36:53Z,
3143758141,2934428561,ReneWerner87,COMMENTED,2025-06-17T07:17:03Z,
3143758141,2944933445,Andrei-hub11,COMMENTED,2025-06-20T08:00:19Z,
3143758141,2961732329,ReneWerner87,COMMENTED,2025-06-26T11:21:36Z,
3143758141,2962288635,coderabbitai[bot],COMMENTED,2025-06-26T14:11:50Z,"**Actionable comments posted: 3**

<details>
<summary>♻️ Duplicate comments (2)</summary><blockquote>

<details>
<summary>middleware/timeout/config.go (1)</summary><blockquote>

`59-61`: **Fix missing timeout validation.**

Based on past review comments, there should be validation for negative timeout values to ensure consistency with route-specific timeouts.



Apply this diff to add timeout validation:

```diff
+	if cfg.Timeout < 0 {
+		cfg.Timeout = ConfigDefault.Timeout
+	}
	if cfg.Errors == nil {
		cfg.Errors = ConfigDefault.Errors
	}
```

</blockquote></details>
<details>
<summary>middleware/timeout/timeout.go (1)</summary><blockquote>

`27-37`: **Critical: Timeout context is not propagated to the handler.**

The timeout context `tCtx` is created but the handler is still executed with the original `ctx`. This means the handler and any downstream code (DB drivers, HTTP clients, etc.) never receive the timeout signal, defeating the main purpose of the middleware.




Apply this diff to fix the timeout context propagation:

```diff
 tCtx, cancel := context.WithTimeout(ctx, timeout)
+old := ctx.Context()
+ctx.SetContext(tCtx)
 defer cancel()
+defer ctx.SetContext(old)

-err := runHandler(ctx, h, cfg)
+err := runHandler(ctx, h, cfg)
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between e6a16fe5ea68350d0c8da23de881ca232b80537a and 97c4b23b7a8f72d866e5a938de480799199b03ad.

</details>

<details>
<summary>📒 Files selected for processing (5)</summary>

* `docs/middleware/timeout.md` (4 hunks)
* `docs/whats_new.md` (1 hunks)
* `middleware/timeout/config.go` (1 hunks)
* `middleware/timeout/timeout.go` (1 hunks)
* `middleware/timeout/timeout_test.go` (5 hunks)

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (2)</summary>

* docs/whats_new.md
* docs/middleware/timeout.md

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧠 Learnings (4)</summary>

<details>
<summary>📓 Common learnings</summary>

```
Learnt from: sixcolors
PR: gofiber/fiber#3016
File: middleware/session/middleware_test.go:190-191
Timestamp: 2024-10-12T10:01:44.206Z
Learning: When testing session `IdleTimeout` expiration, it's acceptable to use `time.Sleep` to simulate the passage of time in tests.
```

```
Learnt from: sixcolors
PR: gofiber/fiber#3016
File: middleware/session/middleware_test.go:190-191
Timestamp: 2024-09-25T17:05:06.991Z
Learning: When testing session `IdleTimeout` expiration, it's acceptable to use `time.Sleep` to simulate the passage of time in tests.
```

```
Learnt from: sixcolors
PR: gofiber/fiber#3016
File: middleware/session/config.go:16-26
Timestamp: 2024-10-08T19:06:06.583Z
Learning: In the session middleware `Config` struct, `Store` is backed by `fiber.Storage`; they are different entities serving distinct purposes in session management.
```

```
Learnt from: sixcolors
PR: gofiber/fiber#3016
File: middleware/session/config.go:16-26
Timestamp: 2024-09-25T16:17:00.969Z
Learning: In the session middleware `Config` struct, `Store` is backed by `fiber.Storage`; they are different entities serving distinct purposes in session management.
```

</details>
<details>
<summary>middleware/timeout/timeout_test.go (21)</summary>

```
Learnt from: sixcolors
PR: gofiber/fiber#3016
File: middleware/session/middleware_test.go:190-191
Timestamp: 2024-10-12T10:01:44.206Z
Learning: When testing session `IdleTimeout` expiration, it's acceptable to use `time.Sleep` to simulate the passage of time in tests.
```

```
Learnt from: sixcolors
PR: gofiber/fiber#3016
File: middleware/session/middleware_test.go:190-191
Timestamp: 2024-09-25T17:05:06.991Z
Learning: When testing session `IdleTimeout` expiration, it's acceptable to use `time.Sleep` to simulate the passage of time in tests.
```

```
Learnt from: sixcolors
PR: gofiber/fiber#3051
File: middleware/session/session.go:215-216
Timestamp: 2024-10-08T19:06:06.583Z
Learning: Parallel tests for `Session.Save` already exist in the `middleware/session/session_test.go` file, specifically in the `Test_Session_Save` and `Test_Session_Save_Expiration` functions.
```

```
Learnt from: sixcolors
PR: gofiber/fiber#3051
File: middleware/session/session.go:215-216
Timestamp: 2024-06-30T00:38:06.580Z
Learning: Parallel tests for `Session.Save` already exist in the `middleware/session/session_test.go` file, specifically in the `Test_Session_Save` and `Test_Session_Save_Expiration` functions.
```

```
Learnt from: efectn
PR: gofiber/fiber#3162
File: app_test.go:893-895
Timestamp: 2024-11-29T12:37:27.581Z
Learning: In the `Test_App_ShutdownWithContext` function in `app_test.go`, the `clientDone` channel is used to synchronize the client's request completion before proceeding, eliminating the need for additional `time.Sleep` calls.
```

```
Learnt from: ReneWerner87
PR: gofiber/fiber#3161
File: app.go:923-932
Timestamp: 2024-11-15T07:56:21.623Z
Learning: In the Fiber framework, breaking changes are acceptable when moving from version 2 to version 3, including modifications to method signatures such as in the `Test` method in `app.go`.
```

```
Learnt from: gaby
PR: gofiber/fiber#3193
File: middleware/adaptor/adaptor.go:111-111
Timestamp: 2024-11-10T23:44:13.704Z
Learning: In the `middleware/adaptor/adaptor.go` file of the Fiber framework, when updating context handling, replacing `c.Context()` with `c.RequestCtx()` is appropriate to access the `fasthttp.RequestCtx`.
```

```
Learnt from: sixcolors
PR: gofiber/fiber#3016
File: middleware/session/middleware_test.go:400-407
Timestamp: 2024-09-25T17:09:03.756Z
Learning: In the `Test_Session_Next` function in `middleware/session/middleware_test.go`, the variable `doNext` is properly synchronized with the `muNext` mutex for both read and write access.
```

```
Learnt from: sixcolors
PR: gofiber/fiber#3016
File: middleware/csrf/csrf_test.go:164-165
Timestamp: 2024-09-25T17:08:07.693Z
Learning: In the `Test_CSRF_WithSession_Middleware` function, calling `session.NewWithStore()` without arguments is acceptable, as the default configuration is sufficient.
```

```
Learnt from: sixcolors
PR: gofiber/fiber#3016
File: middleware/csrf/csrf_test.go:164-165
Timestamp: 2024-10-08T19:06:06.583Z
Learning: In the `Test_CSRF_WithSession_Middleware` function, calling `session.NewWithStore()` without arguments is acceptable, as the default configuration is sufficient.
```

```
Learnt from: efectn
PR: gofiber/fiber#3162
File: hooks_test.go:228-228
Timestamp: 2024-12-13T08:14:22.851Z
Learning: In Go test files, prefer using the `require` methods from the `testify` package for assertions instead of manual comparisons and calls to `t.Fatal` or `t.Fatalf`.
```

```
Learnt from: sixcolors
PR: gofiber/fiber#3016
File: middleware/session/store.go:164-167
Timestamp: 2024-10-02T23:03:31.727Z
Learning: Unit tests in this project use testify require.
```

```
Learnt from: sixcolors
PR: gofiber/fiber#3016
File: middleware/session/store.go:164-167
Timestamp: 2024-10-08T19:06:06.583Z
Learning: Unit tests in this project use testify require.
```

```
Learnt from: sixcolors
PR: gofiber/fiber#2922
File: middleware/cors/utils.go:63-71
Timestamp: 2024-07-26T21:00:12.902Z
Learning: The project uses the testify/assert package for assertions in unit tests.
```

```
Learnt from: sixcolors
PR: gofiber/fiber#2922
File: middleware/cors/utils.go:63-71
Timestamp: 2024-10-08T19:06:06.583Z
Learning: The project uses the testify/assert package for assertions in unit tests.
```

```
Learnt from: ckoch786
PR: gofiber/fiber#3230
File: docs/whats_new.md:944-951
Timestamp: 2024-12-15T19:56:45.935Z
Learning: Detailed usage examples and explanations for new methods like `RemoveRoute` and `RemoveRouteByName` are documented in `docs/api/app.md`, so it's unnecessary to duplicate them in `docs/whats_new.md`.
```

```
Learnt from: sixcolors
PR: gofiber/fiber#3016
File: middleware/csrf/csrf_test.go:188-193
Timestamp: 2024-09-25T15:57:10.221Z
Learning: In the Fiber framework tests, using `ctx.Response.Header.Cookie` may not be suitable for parsing cookies from the response header, as it requires a `*Cookie` and fills it rather than returning a string value; thus, manual parsing of the `Set-Cookie` header may be necessary.
```

```
Learnt from: sixcolors
PR: gofiber/fiber#3016
File: middleware/csrf/csrf_test.go:188-193
Timestamp: 2024-10-08T19:06:06.583Z
Learning: In the Fiber framework tests, using `ctx.Response.Header.Cookie` may not be suitable for parsing cookies from the response header, as it requires a `*Cookie` and fills it rather than returning a string value; thus, manual parsing of the `Set-Cookie` header may be necessary.
```

```
Learnt from: mdelapenya
PR: gofiber/fiber#3434
File: app.go:623-636
Timestamp: 2025-05-08T08:14:37.302Z
Learning: In the gofiber/fiber framework, service startup failures should panic rather than allowing the application to continue running with degraded functionality, as this is the agreed-upon design decision.
```

```
Learnt from: sixcolors
PR: gofiber/fiber#3016
File: middleware/session/config.go:122-122
Timestamp: 2024-10-08T19:06:06.583Z
Learning: In `DefaultErrorHandler(c *fiber.Ctx, err error)`, since `c` is a pointer to an interface, we need to dereference `*c` when calling interface methods like `SendStatus`.
```

```
Learnt from: sixcolors
PR: gofiber/fiber#3016
File: middleware/session/config.go:122-122
Timestamp: 2024-09-25T16:18:34.719Z
Learning: In `DefaultErrorHandler(c *fiber.Ctx, err error)`, since `c` is a pointer to an interface, we need to dereference `*c` when calling interface methods like `SendStatus`.
```

</details>
<details>
<summary>middleware/timeout/config.go (5)</summary>

```
Learnt from: gaby
PR: gofiber/fiber#3193
File: middleware/adaptor/adaptor.go:111-111
Timestamp: 2024-11-10T23:44:13.704Z
Learning: In the `middleware/adaptor/adaptor.go` file of the Fiber framework, when updating context handling, replacing `c.Context()` with `c.RequestCtx()` is appropriate to access the `fasthttp.RequestCtx`.
```

```
Learnt from: sixcolors
PR: gofiber/fiber#3016
File: middleware/session/config.go:16-26
Timestamp: 2024-10-08T19:06:06.583Z
Learning: In the session middleware `Config` struct, `Store` is backed by `fiber.Storage`; they are different entities serving distinct purposes in session management.
```

```
Learnt from: sixcolors
PR: gofiber/fiber#3016
File: middleware/session/config.go:16-26
Timestamp: 2024-09-25T16:17:00.969Z
Learning: In the session middleware `Config` struct, `Store` is backed by `fiber.Storage`; they are different entities serving distinct purposes in session management.
```

```
Learnt from: sixcolors
PR: gofiber/fiber#3016
File: middleware/session/middleware_test.go:190-191
Timestamp: 2024-10-12T10:01:44.206Z
Learning: When testing session `IdleTimeout` expiration, it's acceptable to use `time.Sleep` to simulate the passage of time in tests.
```

```
Learnt from: sixcolors
PR: gofiber/fiber#3016
File: middleware/session/middleware_test.go:190-191
Timestamp: 2024-09-25T17:05:06.991Z
Learning: When testing session `IdleTimeout` expiration, it's acceptable to use `time.Sleep` to simulate the passage of time in tests.
```

</details>
<details>
<summary>middleware/timeout/timeout.go (7)</summary>

```
Learnt from: gaby
PR: gofiber/fiber#3193
File: middleware/adaptor/adaptor.go:111-111
Timestamp: 2024-11-10T23:44:13.704Z
Learning: In the `middleware/adaptor/adaptor.go` file of the Fiber framework, when updating context handling, replacing `c.Context()` with `c.RequestCtx()` is appropriate to access the `fasthttp.RequestCtx`.
```

```
Learnt from: gaby
PR: gofiber/fiber#3193
File: middleware/cache/cache_test.go:897-897
Timestamp: 2024-11-08T04:10:42.990Z
Learning: In the Fiber framework, `Context()` is being renamed to `RequestCtx()`, and `UserContext()` to `Context()` to improve clarity and align with Go's context conventions.
```

```
Learnt from: sixcolors
PR: gofiber/fiber#3016
File: middleware/session/config.go:122-122
Timestamp: 2024-10-08T19:06:06.583Z
Learning: In `DefaultErrorHandler(c *fiber.Ctx, err error)`, since `c` is a pointer to an interface, we need to dereference `*c` when calling interface methods like `SendStatus`.
```

```
Learnt from: sixcolors
PR: gofiber/fiber#3016
File: middleware/session/config.go:122-122
Timestamp: 2024-09-25T16:18:34.719Z
Learning: In `DefaultErrorHandler(c *fiber.Ctx, err error)`, since `c` is a pointer to an interface, we need to dereference `*c` when calling interface methods like `SendStatus`.
```

```
Learnt from: sixcolors
PR: gofiber/fiber#3016
File: middleware/session/middleware_test.go:190-191
Timestamp: 2024-10-12T10:01:44.206Z
Learning: When testing session `IdleTimeout` expiration, it's acceptable to use `time.Sleep` to simulate the passage of time in tests.
```

```
Learnt from: sixcolors
PR: gofiber/fiber#3016
File: middleware/session/middleware_test.go:190-191
Timestamp: 2024-09-25T17:05:06.991Z
Learning: When testing session `IdleTimeout` expiration, it's acceptable to use `time.Sleep` to simulate the passage of time in tests.
```

```
Learnt from: efectn
PR: gofiber/fiber#3162
File: app_test.go:893-895
Timestamp: 2024-11-29T12:37:27.581Z
Learning: In the `Test_App_ShutdownWithContext` function in `app_test.go`, the `clientDone` channel is used to synchronize the client's request completion before proceeding, eliminating the need for additional `time.Sleep` calls.
```

</details>

</details><details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>middleware/timeout/timeout.go (2)</summary><blockquote>

<details>
<summary>middleware/timeout/config.go (1)</summary>

* `Config` (10-34)

</details>
<details>
<summary>constants.go (1)</summary>

* `ErrRequestTimeout` (124-124)

</details>

</blockquote></details>

</details><details>
<summary>🪛 GitHub Check: lint</summary>

<details>
<summary>middleware/timeout/config.go</summary>

[failure] 33-33: 
expected declaration, found 'return' (typecheck)

---

[failure] 32-32: 
expected '}', found 'if' (typecheck)

---

[failure] 23-23: 
expected type, found ':' (typecheck)

---

[failure] 23-23: 
syntax error: unexpected :, expected type (typecheck)

</details>

</details>
<details>
<summary>🪛 GitHub Check: govulncheck-check</summary>

<details>
<summary>middleware/timeout/config.go</summary>

[failure] 4-4: 
""time"" imported and not used

---

[failure] 33-33: 
expected declaration, found 'return'

---

[failure] 32-32: 
expected ';', found len

---

[failure] 32-32: 
expected '}', found 'if'

---

[failure] 23-23: 
expected type, found ':'

---

[failure] 23-23: 
expected ';', found ':'

</details>
<details>
<summary>middleware/timeout/timeout.go</summary>

[failure] 14-14: 
undefined: configDefault

</details>

</details>
<details>
<summary>🪛 GitHub Actions: Run govulncheck</summary>

<details>
<summary>middleware/timeout/config.go</summary>

[error] 23-23: Syntax error: expected ';', found ':' at line 23.

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (6)</summary>

* GitHub Check: Compare
* GitHub Check: unit (1.24.x, macos-13)
* GitHub Check: Analyse
* GitHub Check: unit (1.24.x, windows-latest)
* GitHub Check: repeated
* GitHub Check: unit (1.24.x, macos-latest)

</details>

<details>
<summary>🔇 Additional comments (3)</summary><blockquote>

<details>
<summary>middleware/timeout/timeout_test.go (1)</summary>

`49-124`: **Excellent test coverage for new configuration options.**

The tests comprehensively cover the new Config struct functionality including route-specific timeouts, custom handlers, and skip paths. The test structure is well-organized and follows good testing practices.

</details>
<details>
<summary>middleware/timeout/timeout.go (2)</summary>

`13-25`: **Excellent refactoring to use Config struct.**

The middleware refactoring to use a Config struct instead of positional parameters is well-implemented. The conditional logic for skipping middleware and handling zero timeouts is correct.

---

`41-51`: **Well-implemented timeout error handling.**

The `runHandler` function properly handles both deadline exceeded errors and custom timeout errors, with appropriate fallback to the default timeout error when no custom handler is provided.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3095408254,2873044184,nsajko,APPROVED,2025-05-27T23:35:20Z,
3131034017,2910886505,cubic-dev-ai[bot],COMMENTED,2025-06-09T18:03:28Z,"cubic found 1 issue across 7 files. Review it in [cubic.dev](https://cubic.dev/pr/cartography-cncf/cartography/pull/1614)

<sub>React with 👍 or 👎 to teach cubic. Tag `@cubic-dev-ai` to give specific feedback.</sub>"
3131034017,2911276490,achantavy,APPROVED,2025-06-09T20:30:22Z,
3151828698,2933953542,gemini-code-assist[bot],COMMENTED,2025-06-17T02:22:45Z,"## Summary of Changes

Hello @gaby, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request significantly enhances the security and robustness of the BasicAuth middleware. It introduces new configuration options to give developers more control over authentication behavior, improves the parsing of authentication headers, and strengthens the default security posture by preventing plaintext password storage and adding security-focused response headers. The changes are accompanied by updated documentation and new test cases to ensure correctness.

### Highlights

* **Enhanced Security Defaults**: The BasicAuth middleware no longer stores plaintext passwords in the request context by default, significantly improving security. A new `StorePassword` option allows explicit control over this behavior.
* **Improved Header Handling**: The `Authorization` header parsing has been made more robust by using `utils.Trim` and a new package-level constant for the 'Basic' scheme. The default `WWW-Authenticate` challenge now includes `charset=""UTF-8""` and sets `Cache-Control: no-store` and `Vary: Authorization` for better security and caching control.
* **New Configuration Options**: Introduced a `Charset` option to allow customization of the `charset` parameter in the `WWW-Authenticate` header, and the `StorePassword` option to control password storage in the context.
* **Constant-Time Comparison for Authorizer**: The default `Authorizer` function now uses `subtle.ConstantTimeCompare` for both username and password validation, mitigating potential timing attacks.
* **Comprehensive Testing**: A new test case (`Test_BasicAuth_NoStorePassword`) has been added to specifically verify that passwords are not stored in the context when the `StorePassword` option is disabled.
* **Documentation Updates**: The `docs/middleware/basicauth.md` and `docs/whats_new.md` files have been updated to reflect the new security enhancements, configuration options, and changes to the `WWW-Authenticate` header.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configure Gemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3151828698,2933955671,gemini-code-assist[bot],COMMENTED,2025-06-17T02:23:42Z,"## Code Review

This pull request improves the security of the BasicAuth middleware by refining header parsing, removing extraneous comments, and adding a test for password omission. The changes enhance robustness and provide better control over password storage."
3151828698,2933967306,github-actions[bot],COMMENTED,2025-06-17T02:34:25Z,"<!-- github-benchmark-action-comment(start): Benchmark Alert -->
# :warning: **Performance Alert** :warning:

Possible performance regression was detected for benchmark.
Benchmark result of this commit is worse than the previous benchmark result exceeding threshold `1.50`.

| Benchmark suite | Current: d959b799f5786ca9f1ffb9840634dcbc21a56e99 | Previous: 3b2af61152d0dc9bb75bd9451e506274266b638e | Ratio |
|-|-|-|-|
| `Benchmark_Ctx_SendString_B` | `14.96` ns/op	       0 B/op	       0 allocs/op | `9.364` ns/op	       0 B/op	       0 allocs/op | `1.60` |
| `Benchmark_Ctx_SendString_B - ns/op` | `14.96` ns/op | `9.364` ns/op | `1.60` |

This comment was automatically generated by [workflow](https://github.com/gofiber/fiber/actions?query=workflow%3ABenchmark) using [github-action-benchmark](https://github.com/marketplace/actions/continuous-benchmark).
<!-- github-benchmark-action-comment(end): Benchmark Alert -->"
3151828698,2933970914,coderabbitai[bot],COMMENTED,2025-06-17T02:37:42Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (6)</summary><blockquote>

<details>
<summary>docs/whats_new.md (1)</summary><blockquote>

`978-979`: **Comma missing in explanatory sentence**

Minor style nit: add a comma before “so” to separate the two independent clauses.

```diff
-The BasicAuth middleware now validates the `Authorization` header more rigorously and sets security-focused response headers. The default challenge includes the `charset=""UTF-8""` parameter and disables caching. Passwords are no longer stored in the request context by default; use the new `StorePassword` option to retain them. A `Charset` option controls the value used in the challenge header.
+The BasicAuth middleware now validates the `Authorization` header more rigorously and sets security-focused response headers. The default challenge includes the `charset=""UTF-8""` parameter and disables caching. Passwords are no longer stored in the request context by default; use the new `StorePassword` option to retain them. A `Charset` option controls the value used in the challenge header, so clients know how credentials are encoded.
```

</blockquote></details>
<details>
<summary>middleware/basicauth/basicauth_test.go (1)</summary><blockquote>

`95-114`: **Close the response body to avoid fd leaks**

All new test cases read or at least open `resp.Body` but never close it.  
While Go’s GC will eventually do this, closing explicitly keeps `go test -count=N -run … -race` squeaky-clean.

```diff
-	resp, err := app.Test(req)
+	resp, err := app.Test(req)
 	require.NoError(t, err)
 	require.Equal(t, fiber.StatusOK, resp.StatusCode)
+	_ = resp.Body.Close()
```
Apply the same pattern to other tests that open bodies.

</blockquote></details>
<details>
<summary>middleware/basicauth/basicauth.go (1)</summary><blockquote>

`35-44`: **Broaden trimming to all whitespace characters**

`utils.Trim(s, ' ')` only strips the ASCII space; headers with leading tabs (`\t`) or newlines will slip through.  
`strings.TrimSpace` handles the full Unicode white-space set and is inlinable.

```diff
-		auth := utils.Trim(c.Get(fiber.HeaderAuthorization), ' ')
+		auth := strings.TrimSpace(c.Get(fiber.HeaderAuthorization))
```
Remember to add `strings` to the imports and drop `utils` if it becomes unused in this file.

</blockquote></details>
<details>
<summary>middleware/basicauth/config.go (2)</summary><blockquote>

`45-56`: **Field docs are clear but could mention security trade-off**

Consider adding a short warning that enabling `StorePassword` places the plaintext password in memory for the lifetime of the request and should be enabled only when absolutely necessary.

---

`100-108`: **Header construction – minor readability tweak**

Using `fmt.Sprintf` makes the composition easier to scan and avoids the nested `if`.

```diff
-			header := ""Basic realm="" + strconv.Quote(cfg.Realm)
-			if cfg.Charset != """" {
-				header += "", charset="" + strconv.Quote(cfg.Charset)
-			}
+			header := fmt.Sprintf(""Basic realm=%s, charset=%s"",
+				strconv.Quote(cfg.Realm),
+				strconv.Quote(cfg.Charset))
```

Functionally identical, purely cosmetic.

</blockquote></details>
<details>
<summary>docs/middleware/basicauth.md (1)</summary><blockquote>

`81-83`: **Punctuation: add comma before “so”**

Same nit as in *whats_new.md* – comma separates clauses.

```diff
-| Charset         | `string`                    | Charset sent in the `WWW-Authenticate` header so clients know how credentials are encoded. | `""UTF-8""` |
+| Charset         | `string`                    | Charset sent in the `WWW-Authenticate` header, so clients know how credentials are encoded. | `""UTF-8""` |
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 0590709556719da7e9adb1b413f1a094f1380ceb and b913ae93e7978abb1099c97e24c7d2e1f6808c4a.

</details>

<details>
<summary>📒 Files selected for processing (5)</summary>

* `docs/middleware/basicauth.md` (3 hunks)
* `docs/whats_new.md` (1 hunks)
* `middleware/basicauth/basicauth.go` (3 hunks)
* `middleware/basicauth/basicauth_test.go` (3 hunks)
* `middleware/basicauth/config.go` (3 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>middleware/basicauth/basicauth.go (2)</summary><blockquote>

<details>
<summary>constants.go (1)</summary>

* `HeaderAuthorization` (161-161)

</details>
<details>
<summary>ctx.go (1)</summary>

* `Locals` (1007-1019)

</details>

</blockquote></details>

</details><details>
<summary>🪛 LanguageTool</summary>

<details>
<summary>docs/middleware/basicauth.md</summary>

[uncategorized] ~81-~81: Use a comma before ‘so’ if it connects two independent clauses (unless they are closely connected and short).
Context: ...et sent in the `WWW-Authenticate` header so clients know how credentials are encode...

(COMMA_COMPOUND_SENTENCE_2)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (2)</summary>

* GitHub Check: repeated
* GitHub Check: Compare

</details>

<details>
<summary>🔇 Additional comments (5)</summary><blockquote>

<details>
<summary>middleware/basicauth/basicauth_test.go (2)</summary>

`39-40`: **Test reveals intent clearly – nice!**

Enabling `StorePassword: true` in the main happy-path test makes the assertion on `PasswordFromContext` explicit.  
No further comments here.

---

`125-125`: **Header expectation updated – LGTM**

The assertion now matches the new `charset=""UTF-8""` default.  
Looks good.

</details>
<details>
<summary>middleware/basicauth/basicauth.go (2)</summary>

`21-21`: **Good extraction of the scheme constant**

Replacing the magic string with `basicScheme` improves readability.

---

`71-76`: **Conditional password storage implemented correctly**

The conditional call respects the new flag and keeps PII out of context by default – nice defensive design.

</details>
<details>
<summary>middleware/basicauth/config.go (1)</summary>

`60-68`: **Defaults extended – LGTM**

Including sane defaults for `Charset` and `StorePassword` keeps behaviour predictable.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3151828698,2934452325,ReneWerner87,APPROVED,2025-06-17T07:25:27Z,
3092512259,2869512920,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-27T04:13:59Z,"## Pull Request Overview

This PR enhances the BasicAuth middleware by improving header parsing and formatting while adding tests for additional scenarios and updating documentation.  
- The WWW-Authenticate header now correctly quotes the realm parameter using strconv.Quote.  
- Header parsing in the middleware has been tightened by trimming whitespace and splitting the authorization header into tokens.  
- New tests have been added to validate handling of whitespace and the proper error response with invalid headers.

### Reviewed Changes

Copilot reviewed 4 out of 4 changed files in this pull request and generated no comments.

| File                                | Description                                                                |
| ----------------------------------- | -------------------------------------------------------------------------- |
| middleware/basicauth/config.go      | Updates the WWW-Authenticate header to include a quoted realm value.       |
| middleware/basicauth/basicauth.go     | Refines header parsing by trimming whitespace and tokenizing the header.   |
| middleware/basicauth/basicauth_test.go| Adds tests for BasicAuth header value variations and whitespace handling.  |
| docs/middleware/basicauth.md        | Documents the default challenge header update.                           |



"
3092512259,2869529457,github-actions[bot],COMMENTED,2025-05-27T04:27:37Z,"<!-- github-benchmark-action-comment(start): Benchmark Alert -->
# :warning: **Performance Alert** :warning:

Possible performance regression was detected for benchmark.
Benchmark result of this commit is worse than the previous benchmark result exceeding threshold `1.50`.

| Benchmark suite | Current: 37a01b3d752fd4c64197df119ecbb862faa8181d | Previous: 804a2b923e3c98e51e108742ab62637d3a8b2c34 | Ratio |
|-|-|-|-|
| `Benchmark_GenericParseTypeInts/bench_genericParseTypeInt64s#04` | `0.000062` ns/op	       0 B/op	       0 allocs/op | `0.0000389` ns/op	       0 B/op	       0 allocs/op | `1.59` |
| `Benchmark_GenericParseTypeInts/bench_genericParseTypeInt64s#04 - ns/op` | `0.000062` ns/op | `0.0000389` ns/op | `1.59` |
| `Benchmark_GenericParseTypeUints/benchmark_genericParseTypeUint8s#02` | `0.00004` ns/op	       0 B/op	       0 allocs/op | `0.0000236` ns/op	       0 B/op	       0 allocs/op | `1.69` |
| `Benchmark_GenericParseTypeUints/benchmark_genericParseTypeUint8s#02 - ns/op` | `0.00004` ns/op | `0.0000236` ns/op | `1.69` |
| `Benchmark_GenericParseTypeUints/benchmark_genericParseTypeUint8s#06` | `0.0000572` ns/op	       0 B/op	       0 allocs/op | `0.0000365` ns/op	       0 B/op	       0 allocs/op | `1.57` |
| `Benchmark_GenericParseTypeUints/benchmark_genericParseTypeUint8s#06 - ns/op` | `0.0000572` ns/op | `0.0000365` ns/op | `1.57` |
| `Benchmark_GenericParseTypeUints/benchmark_genericParseTypeUint32s#08` | `0.0000743` ns/op	       0 B/op	       0 allocs/op | `0.0000305` ns/op	       0 B/op	       0 allocs/op | `2.44` |
| `Benchmark_GenericParseTypeUints/benchmark_genericParseTypeUint32s#08 - ns/op` | `0.0000743` ns/op | `0.0000305` ns/op | `2.44` |
| `Benchmark_GenericParseTypeUints/benchmark_genericParseTypeUint32s#09` | `0.000055` ns/op	       0 B/op	       0 allocs/op | `0.0000356` ns/op	       0 B/op	       0 allocs/op | `1.54` |
| `Benchmark_GenericParseTypeUints/benchmark_genericParseTypeUint32s#09 - ns/op` | `0.000055` ns/op | `0.0000356` ns/op | `1.54` |

This comment was automatically generated by [workflow](https://github.com/gofiber/fiber/actions?query=workflow%3ABenchmark) using [github-action-benchmark](https://github.com/marketplace/actions/continuous-benchmark).
<!-- github-benchmark-action-comment(end): Benchmark Alert -->"
3092512259,2870326704,ReneWerner87,APPROVED,2025-05-27T09:17:57Z,"LGTM
@gaby 
- [x] add this to Whatsnew.md"
3092512259,2870644222,ReneWerner87,COMMENTED,2025-05-27T11:10:35Z,
3092512259,2870838496,ReneWerner87,APPROVED,2025-05-27T12:18:56Z,
3139316930,2920042489,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-12T08:21:16Z,"## Pull Request Overview

A PR to improve the filtering and layout functionality of the Table UI by adding a new StatusFilter component and integrating additional control support across several components.
- Added a new StatusFilter component and integrated it into TenantDetails for filtering segments.
- Updated TableToolbar, Table, and SimpleAccordion to support an additionalControls prop for enhanced layout flexibility.

### Reviewed Changes

Copilot reviewed 5 out of 5 changed files in this pull request and generated 1 comment.

<details>
<summary>Show a summary per file</summary>

| File | Description |
| ---- | ----------- |
| pinot-controller/src/main/resources/app/pages/TenantDetails.tsx | Integrates StatusFilter for segment filtering and updates segment data display logic. |
| pinot-controller/src/main/resources/app/components/TableToolbar.tsx | Adds an additionalControls prop and adjusts layout to include additional UI elements. |
| pinot-controller/src/main/resources/app/components/Table.tsx | Incorporates additionalControls support and introduces related styling enhancements. |
| pinot-controller/src/main/resources/app/components/StatusFilter.tsx | Introduces the StatusFilter component with status chips and custom styles. |
| pinot-controller/src/main/resources/app/components/SimpleAccordion.tsx | Modifies layout to include a container for additional controls alongside the search bar. |
</details>




"
3139316930,2930967267,jayeshchoudhary,COMMENTED,2025-06-16T07:42:52Z,
3139316930,2932417934,KKcorps,COMMENTED,2025-06-16T14:39:24Z,
3139316930,2937808512,jayeshchoudhary,APPROVED,2025-06-18T05:48:02Z,
3139316930,2937812676,yashmayya,APPROVED,2025-06-18T05:50:37Z,
3148027458,2930338678,obi1kenobi,COMMENTED,2025-06-15T21:22:15Z,
3148027458,2930338981,obi1kenobi,COMMENTED,2025-06-15T21:23:38Z,
3148027458,2930339096,obi1kenobi,COMMENTED,2025-06-15T21:24:07Z,
3148027458,2930339252,obi1kenobi,COMMENTED,2025-06-15T21:24:52Z,
3148027458,2930339409,obi1kenobi,COMMENTED,2025-06-15T21:25:26Z,
3148027458,2930570138,obi1kenobi,COMMENTED,2025-06-16T04:01:05Z,
3112390510,2890620078,greptile-apps[bot],COMMENTED,2025-06-03T04:51:19Z,"<sub>3 file(s) reviewed, no comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=promptfoo_4290)</sub>"
3112390510,2890627764,sourcery-ai[bot],COMMENTED,2025-06-03T04:52:52Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3134885336,2917989526,Skylion007,COMMENTED,2025-06-11T16:47:04Z,
3134885336,2918051766,ColinPeppler,COMMENTED,2025-06-11T17:07:37Z,
3134885336,2918057146,ColinPeppler,COMMENTED,2025-06-11T17:08:59Z,
3134885336,2922893735,ColinPeppler,COMMENTED,2025-06-12T23:32:53Z,
3134885336,2922895854,ColinPeppler,COMMENTED,2025-06-12T23:35:03Z,
3134885336,2922896312,ColinPeppler,COMMENTED,2025-06-12T23:35:32Z,
3134885336,2922897109,ColinPeppler,COMMENTED,2025-06-12T23:36:21Z,
3134885336,2923341801,ezyang,APPROVED,2025-06-13T03:49:07Z,"yes, make the bad pattern harder to write :)"
3134885336,2925568850,laithsakka,APPROVED,2025-06-13T17:13:42Z,
3134885336,2933460235,jingsh,APPROVED,2025-06-16T20:44:18Z,
3132601272,2912472782,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-10T08:15:50Z,"## Pull Request Overview

This PR introduces an optional high-pass filter for the audio processing unit, adds API endpoints for configuration, and updates documentation accordingly.
- Add HighPassFilter enum and integrate audio filtering in the APU.
- Expose new API methods in the GameBoy interface for getting and setting the filter mode.
- Update README and CHANGELOG to document the new feature.

### Reviewed Changes

Copilot reviewed 4 out of 4 changed files in this pull request and generated 1 comment.

| File       | Description                                                            |
| ---------- | ---------------------------------------------------------------------- |
| src/gb.rs  | Added API endpoints in the GameBoy struct to configure the filter mode. |
| src/apu.rs | Added HighPassFilter enum, filtering functionality in audio output, and state serialization. |
| README.md  | Updated feature list to include the high-pass filter option.            |
| CHANGELOG.md| Documented the new high-pass filter feature.                           |


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**src/apu.rs:1313**
* It may be helpful to document the mapping between the HighPassFilter variants and their underlying u8 values to ensure that future changes to the enum keep state compatibility.
```
write_u8(&mut cursor, self.filter_mode as u8)?;
```
</details>

"
3132601272,2912476961,coderabbitai[bot],COMMENTED,2025-06-10T08:17:12Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (3)</summary><blockquote>

<details>
<summary>src/apu.rs (1)</summary><blockquote>

`783-800`: **Solid high-pass filter implementation with room for documentation improvement.**

The first-order IIR high-pass filter implementation is mathematically correct. However, the specific coefficient values (0.996 and 0.999_958) would benefit from documentation explaining their corresponding cutoff frequencies.



Consider adding a comment explaining the filter coefficients:

```diff
 fn filter_sample(&mut self, sample: u8, channel: usize) -> u8 {
     match self.filter_mode {
         HighPassFilter::Disable => sample,
         HighPassFilter::Preserve | HighPassFilter::Accurate => {
+            // Preserve: ~100Hz cutoff, Accurate: ~40Hz cutoff (at 44.1kHz sample rate)
             let coef = if self.filter_mode == HighPassFilter::Preserve {
                 0.996
             } else {
                 0.999_958
             };
```

</blockquote></details>
<details>
<summary>CHANGELOG.md (1)</summary><blockquote>

`12-12`: **Inconsistent variant naming in CHANGELOG entry**  
The entry lists the filter mode as “Disable” while the README uses “Disabled.” Please align the variant naming across documentation to match the code.

</blockquote></details>
<details>
<summary>README.md (1)</summary><blockquote>

`15-15`: **Unify filter variant naming and improve clarity**  
Replace the parenthetical list to match the enum names and stay consistent with the CHANGELOG.  

```diff
- * Optional high-pass audio filter (Preserve, Accurate or Disabled)
+ * Optional high-pass audio filter modes (Preserve, Accurate, Disable)
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 07f0cedeaacd2a7faa7ab0b6a5a57622351284d7 and 9d59cf4dcccdc6169bf58db093b7ec0941563b75.

</details>

<details>
<summary>📒 Files selected for processing (4)</summary>

* `CHANGELOG.md` (1 hunks)
* `README.md` (1 hunks)
* `src/apu.rs` (11 hunks)
* `src/gb.rs` (2 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (11)</summary>

* GitHub Check: Build SDL (1.83.0)
* GitHub Check: Build (1.83.0)
* GitHub Check: Build SDL (1.85.0)
* GitHub Check: Build SDL (1.82.0)
* GitHub Check: Build Simple (1.83.0)
* GitHub Check: Build (1.84.0)
* GitHub Check: Build Simple (1.82.0)
* GitHub Check: Build (latest)
* GitHub Check: Build (1.82.0)
* GitHub Check: Build Windows
* GitHub Check: Build Mac

</details>

<details>
<summary>🔇 Additional comments (10)</summary><blockquote>

<details>
<summary>src/apu.rs (8)</summary>

`41-56`: **LGTM! Well-structured enum with proper serialization support.**

The `HighPassFilter` enum is properly designed with appropriate derive traits and a clean `from_u8` implementation for deserialization. The default case mapping to `Disable` is a safe fallback.

---

`153-156`: **Filter state fields properly designed for stereo processing.**

The addition of `filter_mode`, `filter_prev_in`, and `filter_prev_out` fields correctly supports stereo audio processing with separate state tracking per channel. Using `f32` for DSP calculations is appropriate.

---

`247-249`: **Safe default initialization.**

The filter defaults to `Disable` mode with zero-initialized state, which prevents any audio artifacts on startup.

---

`326-328`: **Proper filter state reset on APU reset.**

Correctly clears the filter's previous input/output state when the APU is reset, preventing audio artifacts from persisting across resets.

---

`382-390`: **Clean integration of filtering into audio pipeline.**

The filter is properly applied per channel before samples are added to the audio buffer. The channel indexing (0 for left, 1 for right) aligns with the stereo output logic.

---

`878-886`: **Excellent filter mode management with state reset.**

The getter/setter implementation properly resets the filter state when the mode changes, preventing audio artifacts that could occur from stale filter state.

---

`1313-1313`: **State serialization correctly updated.**

The filter mode is properly included in state serialization using the enum's `u8` representation and deserialized with the `from_u8` method.



Also applies to: 1401-1401

---

`1548-1548`: **Test assertions correctly updated for new state size.**

The state size assertion is updated from 100 to 101 bytes to account for the new filter mode field, and the default filter mode test correctly expects `Disable` (value 2).



Also applies to: 1633-1633

</details>
<details>
<summary>src/gb.rs (2)</summary>

`32-32`: **Import statement correctly updated.**

The `HighPassFilter` enum is properly added to the import from the apu module, making it available for the public API.

---

`1502-1508`: **Clean API integration following established patterns.**

The new public methods `audio_filter_mode()` and `set_audio_filter_mode()` properly delegate to the underlying APU implementation, maintaining consistency with other audio-related methods in this file.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3132601272,2912808486,coderabbitai[bot],COMMENTED,2025-06-10T09:59:10Z,"**Actionable comments posted: 0**

<details>
<summary>♻️ Duplicate comments (1)</summary><blockquote>

<details>
<summary>src/apu.rs (1)</summary><blockquote>

`247-249`: _🛠️ Refactor suggestion_

**Extract magic coefficient into named constant.**

The magic number `0.999_958` should be extracted into a named constant for better maintainability and clarity.



Apply this diff to improve code clarity:

```diff
+const HIGH_PASS_FILTER_BASE_COEF: f64 = 0.999_958;
+
 impl Apu {
     pub fn new(sampling_rate: u16, channels: u8, buffer_size: f32, clock_freq: u32) -> Self {
         // ... other fields ...
-            filter_rate: (0.999_958_f64.powf(clock_freq as f64 / sampling_rate as f64)) as f32,
+            filter_rate: (HIGH_PASS_FILTER_BASE_COEF.powf(clock_freq as f64 / sampling_rate as f64)) as f32,
```

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>src/apu.rs (1)</summary><blockquote>

`782-808`: **LGTM: Correct high-pass filter implementation with minor optimization opportunity.**

The filter implementations are mathematically correct:
- **Disable**: Properly bypasses filtering and resets state
- **Accurate**: Implements a standard first-order high-pass filter
- **Preserve**: Uses master volume for filter coefficient calculation

The `clamp(0.0, 255.0)` ensures output stays within valid u8 range.



Consider extracting the volume calculation into a helper method to reduce code duplication and improve readability:

```diff
+    fn get_channel_volume(&self, channel: usize) -> f32 {
+        let volume_bits = if channel == 0 {
+            ((self.master >> 4) & 0x07) as f32
+        } else {
+            (self.master & 0x07) as f32
+        };
+        (volume_bits + 1.0) * 15.0
+    }
+
     fn filter_sample(&mut self, sample: u8, channel: usize) -> u8 {
         // ... existing code ...
         HighPassFilter::Preserve => {
             let output = input - self.filter_diff[channel];
-            let volume_bits = if channel == 0 {
-                ((self.master >> 4) & 0x07) as f32
-            } else {
-                (self.master & 0x07) as f32
-            };
-            let volume = (volume_bits + 1.0) * 15.0;
+            let volume = self.get_channel_volume(channel);
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 2f7004019eb6522d64a8ae7f8ec9fafcec9d0c80 and 5f225e348c9a2d40594d3e3bb20f781b3be85b85.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `src/apu.rs` (13 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (38)</summary>

* GitHub Check: Build Libretro (1.84.0)
* GitHub Check: Build Libretro (1.82.0)
* GitHub Check: Build Libretro (1.83.0)
* GitHub Check: Build WASM (1.83.0, 18)
* GitHub Check: Build WASM (latest, 18)
* GitHub Check: Build WASM (1.84.0, 18)
* GitHub Check: Build Libretro (latest)
* GitHub Check: Build Libretro (1.85.0)
* GitHub Check: Build WASM (1.85.0, 18)
* GitHub Check: Build WASM (1.82.0, 18)
* GitHub Check: Build (1.85.0)
* GitHub Check: Build Documentation (rustlang/rust:nightly)
* GitHub Check: Build SDL (latest)
* GitHub Check: Build Documentation (rust:1.85.0)
* GitHub Check: Build SDL (1.85.0)
* GitHub Check: Build SDL (1.84.0)
* GitHub Check: Build Documentation (rust:latest)
* GitHub Check: Build SDL (1.83.0)
* GitHub Check: Build Documentation (rust:1.83.0)
* GitHub Check: Build Documentation (rust:1.84.0)
* GitHub Check: Build Libretro Android (latest)
* GitHub Check: Build SDL (1.82.0)
* GitHub Check: Build Libretro Android (1.85.0)
* GitHub Check: Build Documentation (rust:1.82.0)
* GitHub Check: Build Libretro Android (1.82.0)
* GitHub Check: Build Libretro Android (1.84.0)
* GitHub Check: Build Libretro Android (1.83.0)
* GitHub Check: Build Simple (1.84.0)
* GitHub Check: Build Simple (latest)
* GitHub Check: Build (1.84.0)
* GitHub Check: Build Simple (1.85.0)
* GitHub Check: Build Simple (1.83.0)
* GitHub Check: Build Mac
* GitHub Check: Build (latest)
* GitHub Check: Build (1.82.0)
* GitHub Check: Build Simple (1.82.0)
* GitHub Check: Build (1.83.0)
* GitHub Check: Build Windows

</details>

<details>
<summary>🔇 Additional comments (8)</summary><blockquote>

<details>
<summary>src/apu.rs (8)</summary>

`7-8`: **LGTM: Import additions support filter state serialization.**

The addition of `read_f32` and `write_f32` functions appropriately supports serializing the filter's floating-point state values.

---

`41-56`: **LGTM: Well-designed enum with appropriate conversion method.**

The `HighPassFilter` enum clearly defines the three filter modes, and the `from_u8` method provides a safe conversion with `Disable` as the default fallback for invalid values.

---

`153-155`: **LGTM: Appropriate fields for filter state management.**

The three new fields (`filter_mode`, `filter_rate`, `filter_diff`) properly encapsulate the filter's configuration and state.

---

`326-326`: **LGTM: Proper filter state reset.**

Resetting `filter_diff` during APU reset ensures clean filter state when the audio system is reinitialized.

---

`381-389`: **LGTM: Clean integration of filtering into audio pipeline.**

The filtering is properly integrated into the audio output pipeline, applying to both left and right channels as appropriate.

---

`886-893`: **LGTM: Standard accessor pattern with proper state management.**

The getter/setter methods follow Rust conventions, and the setter appropriately resets filter history when the mode changes to prevent audio artifacts.

---

`1428-1428`: **LGTM: Comprehensive test coverage for new functionality.**

The tests appropriately cover:
- Filter behavior for each mode
- State serialization/deserialization with updated size (109 bytes)
- Filter history reset when mode changes
- Filter state preservation across save/load cycles

The floating-point comparisons use proper epsilon-based testing.



Also applies to: 1561-1561, 1646-1691

---

`1320-1322`: <details>
<summary>❓ Verification inconclusive</summary>

**Verify filter_rate recalculation consistency.**

The state serialization correctly saves and loads the filter mode and history. However, `filter_rate` is recalculated during deserialization, which could cause inconsistency if `clock_freq` or `sampling_rate` have changed since serialization.


Consider whether `filter_rate` should also be serialized to maintain exact state consistency, or if the current approach of recalculation is intentional for adaptability to different hardware configurations.




Also applies to: 1410-1414

---

🏁 Script executed:

```shell
#!/bin/bash
# Check if clock_freq or sampling_rate can be modified after APU construction
rg -A 3 ""set_clock_freq\|set_sampling_rate"" --type rust
```

Length of output: 57

---

🏁 Script executed:

```shell
#!/bin/bash
# Inspect the Apu struct definition and its clock_freq/sampling_rate fields
rg -n 'struct Apu' -A 15 --type rust src/apu.rs
rg -n '(clock_freq|sampling_rate)' -A 5 --type rust src/apu.rs
```

Length of output: 3608

---



</details>

**Ensure filter_rate stays in sync with serialized state and runtime config**

The current implementation writes only `filter_mode` and `filter_diff` to the save state (lines 1320–1322) but omits `filter_rate`. On deserialization (around lines 1410–1414), `filter_rate` is recomputed using the current `self.clock_freq` and `self.sampling_rate`. Since you can call `Apu::set_clock_freq(...)` after construction (but there’s no corresponding update of `filter_rate` there), and `sampling_rate` comes from the saved state, this leads to two potential consistency issues:

- A mismatch between the original `filter_rate` at save‐time and the newly computed value if either clock or sampling rate has changed.
- A stale `filter_rate` when `set_clock_freq` is used without recomputing the filter coefficient.

You should decide whether to:
- **Serialize `filter_rate`** alongside `filter_diff` so you restore the exact filter cutoff on load (add `write_f32(&mut cursor, self.filter_rate)` / `read_f32(&mut cursor, self.filter_rate)`), or  
- **Keep recomputing** for adaptability, but then also recalculate `filter_rate` in `set_clock_freq` (and any future `set_sampling_rate`) to avoid stale coefficients.

Please review the serialization block at **src/apu.rs:1320–1322** and the deserialization logic at **src/apu.rs:1410–1414** and update accordingly.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3132601272,2913062574,coderabbitai[bot],COMMENTED,2025-06-10T11:02:58Z,"**Actionable comments posted: 4**

<details>
<summary>🔭 Outside diff range comments (2)</summary><blockquote>

<details>
<summary>src/apu.rs (2)</summary><blockquote>

`754-807`: _⚠️ Potential issue_

**Fix corrupted output() and filter_sample() method definitions.**

The code contains multiple syntax errors including duplicate method definitions and malformed function signatures that are causing the pipeline failure.


```diff
-    pub fn output(&self) -> i16 {
-        let sample = self.ch1_output() + self.ch2_output() + self.ch3_output() + self.ch4_output();
-        ((sample as i16) - 128) << 8
-    fn filter_sample(&mut self, sample: i16, channel: usize) -> i16 {
-                output.clamp(i16::MIN as f32, i16::MAX as f32) as i16
-                let volume = ((volume_bits + 1.0) * 15.0 - 128.0) * 256.0;
-                output.clamp(i16::MIN as f32, i16::MAX as f32) as i16
```

Apply this fix to properly define the methods:

```diff
+    #[inline(always)]
+    pub fn output(&self) -> u16 {
+        self.ch1_output() as u16
+            + self.ch2_output() as u16
+            + self.ch3_output() as u16
+            + self.ch4_output() as u16
+    }
+
+    fn filter_sample(&mut self, sample: u16, channel: usize) -> i16 {
+        let input = sample as f32;
+        match self.filter_mode {
+            HighPassFilter::Disable => {
+                self.filter_diff[channel] = 0.0;
+                sample as i16
+            }
+            HighPassFilter::Accurate => {
+                let output = input - self.filter_diff[channel];
+                self.filter_diff[channel] =
+                    input - (input - self.filter_diff[channel]) * self.filter_rate;
+                output as i16
+            }
+            HighPassFilter::Preserve => {
+                let output = input - self.filter_diff[channel];
+                let volume_bits = if channel == 0 {
+                    ((self.master >> 4) & 0x07) as f32
+                } else {
+                    (self.master & 0x07) as f32
+                };
+                let volume = (volume_bits + 1.0) * 15.0;
+                self.filter_diff[channel] = volume * (1.0 - self.filter_rate)
+                    + self.filter_diff[channel] * self.filter_rate;
+                output as i16
+            }
+        }
+    }
```

---

`873-928`: _⚠️ Potential issue_

**Remove duplicate audio_buffer methods.**

The `audio_buffer()` and `audio_buffer_mut()` methods are defined twice, which will cause compilation errors.


```diff
-    pub fn audio_buffer(&self) -> &VecDeque<i16> {
-    pub fn audio_buffer_mut(&mut self) -> &mut VecDeque<i16> {
-    }
```

</blockquote></details>

</blockquote></details>

<details>
<summary>♻️ Duplicate comments (1)</summary><blockquote>

<details>
<summary>src/apu.rs (1)</summary><blockquote>

`34-36`: **Extract magic coefficient into named constant.**


Consider extracting the magic coefficient value (0.999_958) into a named constant to improve code clarity and maintainability, as suggested in the previous review.

```diff
+const FILTER_RATE_ACCURATE_COEF: f64 = 0.999958;
+
/// The base rate for the filter, this is used to calculate the
/// filter rate based on the clock frequency and the sampling rate.
-const FILTER_RATE_BASE: f64 = 0.999958;
+const FILTER_RATE_BASE: f64 = FILTER_RATE_ACCURATE_COEF;
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between d430bcfc06e75caf09b411598ca1203799d6bec9 and 9007081ca50525c5f7e8895ed98fe0e84c9faea0.

</details>

<details>
<summary>📒 Files selected for processing (6)</summary>

* `CHANGELOG.md` (1 hunks)
* `README.md` (1 hunks)
* `frontends/libretro/src/core.rs` (1 hunks)
* `frontends/sdl/src/main.rs` (1 hunks)
* `src/apu.rs` (18 hunks)
* `src/gb.rs` (6 hunks)

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (3)</summary>

* README.md
* CHANGELOG.md
* src/gb.rs

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 GitHub Actions: Main Workflow</summary>

<details>
<summary>src/apu.rs</summary>

[error] 1723-1723: Syntax error: unclosed delimiter detected in file. The delimiter starting at line 180 is not properly closed, causing parsing failure.

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (1)</summary>

* GitHub Check: Build Windows

</details>

<details>
<summary>🔇 Additional comments (5)</summary><blockquote>

<details>
<summary>src/apu.rs (3)</summary>

`268-270`: **Approve filter mode initialization.**

The default filter mode initialization to `HighPassFilter::Accurate` and filter state setup look correct.

---

`406-412`: **Approve filter sample application in audio output.**

The integration of the filter into the audio output pipeline is well implemented, correctly applying the filter per channel before pushing to the audio buffer.

---

`917-920`: **Approve filter mode setter with history reset.**

The `set_filter_mode` method correctly resets the filter history when changing modes, which prevents artifacts from previous filter states.

</details>
<details>
<summary>frontends/sdl/src/main.rs (1)</summary>

`45-45`: **Approve volume scaling adjustment for 16-bit audio.**

The volume constant change from `64.0` to `32768.0` correctly accommodates the transition from 8-bit to 16-bit audio samples, maintaining appropriate volume scaling for the new audio format.

</details>
<details>
<summary>frontends/libretro/src/core.rs (1)</summary>

`343-343`: **LGTM! Audio sample processing correctly updated for 16-bit samples.**

The direct copy operation with `.copied()` is appropriate now that audio samples are handled as `i16` values instead of the previous `u8` scaling approach. This change aligns perfectly with the architectural shift to 16-bit audio samples throughout the codebase.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3132601272,2913080475,coderabbitai[bot],COMMENTED,2025-06-10T11:06:40Z,"**Actionable comments posted: 0**

<details>
<summary>♻️ Duplicate comments (1)</summary><blockquote>

<details>
<summary>src/apu.rs (1)</summary><blockquote>

`1591-1591`: **Update state size assertion for new filter fields.**

The state size assertion needs to be updated to account for the additional filter fields (1 byte + 2 * 4 bytes = 9 additional bytes).


```diff
-        assert_eq!(state.len(), 109);
+        assert_eq!(state.len(), 118);
```

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>src/apu.rs (2)</summary><blockquote>

`34-36`: **Improve constant naming and add documentation.**

Consider making the constant name more descriptive and adding documentation to explain its mathematical significance in the high-pass filter implementation.


```diff
-/// The base rate for the filter, this is used to calculate the
-/// filter rate based on the clock frequency and the sampling rate.
-const FILTER_RATE_BASE: f64 = 0.999958;
+/// High-pass filter base coefficient used to calculate the filter rate.
+/// This value determines the cutoff frequency characteristics of the filter
+/// when combined with clock frequency and sampling rate.
+const HIGH_PASS_FILTER_BASE_COEFFICIENT: f64 = 0.999958;
```

---

`801-834`: **Mathematically sound filter implementation with minor improvement opportunity.**

The implementation correctly handles all three filter modes with proper mathematical formulas. Consider extracting magic numbers for better maintainability.



```diff
+/// Volume scaling factor used in preserve filter mode
+const PRESERVE_FILTER_VOLUME_SCALE: f32 = 15.0;

             let volume = (volume_bits + 1.0) * 15.0;
+            let volume = (volume_bits + 1.0) * PRESERVE_FILTER_VOLUME_SCALE;
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 9007081ca50525c5f7e8895ed98fe0e84c9faea0 and 1126aa2ae1b2d9248dd2abfb3a5d7fce9262df15.

</details>

<details>
<summary>📒 Files selected for processing (4)</summary>

* `CHANGELOG.md` (1 hunks)
* `README.md` (1 hunks)
* `src/apu.rs` (14 hunks)
* `src/gb.rs` (6 hunks)

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (3)</summary>

* README.md
* CHANGELOG.md
* src/gb.rs

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (17)</summary>

* GitHub Check: Build Documentation (rust:latest)
* GitHub Check: Build Libretro Android (1.83.0)
* GitHub Check: Build SDL (1.84.0)
* GitHub Check: Build Documentation (rust:1.85.0)
* GitHub Check: Build Documentation (rustlang/rust:nightly)
* GitHub Check: Build Documentation (rust:1.83.0)
* GitHub Check: Build Libretro Android (latest)
* GitHub Check: Build Libretro Android (1.82.0)
* GitHub Check: Build Documentation (rust:1.84.0)
* GitHub Check: Build Documentation (rust:1.82.0)
* GitHub Check: Build SDL (1.85.0)
* GitHub Check: Build Libretro Android (1.85.0)
* GitHub Check: Build Libretro Android (1.84.0)
* GitHub Check: Build SDL (latest)
* GitHub Check: Build SDL (1.82.0)
* GitHub Check: Build SDL (1.83.0)
* GitHub Check: Build Windows

</details>

<details>
<summary>🔇 Additional comments (10)</summary><blockquote>

<details>
<summary>src/apu.rs (10)</summary>

`7-8`: **LGTM: Import additions support new filter state serialization.**

The addition of `read_f32` and `write_f32` imports is necessary for serializing the new floating-point filter state fields.

---

`45-67`: **Excellent enum design with proper conversion handling.**

The `HighPassFilter` enum is well-implemented with:
- Clear variant names representing different filter modes
- Safe conversion from `u8` with fallback to `Disable`
- Appropriate trait derivations
- Both explicit method and trait implementation for conversions

---

`161-175`: **Well-designed struct field additions for filter functionality.**

The new fields are appropriately typed and documented:
- `output_timer_delta` optimizes sample timing calculations
- Audio buffer type change to `i16` provides better precision
- Filter fields are properly organized and typed

---

`263-263`: **Proper initialization of new filter-related fields.**

The constructor correctly initializes:
- `output_timer_delta` for optimized timing calculations
- Default filter mode as `Accurate` (reasonable choice)
- Filter rate using proper mathematical formula
- Filter state array to zero initial state



Also applies to: 268-270

---

`347-347`: **Appropriate filter state reset behavior.**

Correctly clears filter history while preserving the filter mode configuration, which is the expected behavior for a reset operation.

---

`395-418`: **Well-integrated filtering logic in clock method.**

The changes properly:
- Maintain existing audio buffer overflow handling
- Apply filtering per channel using the new `filter_sample` method
- Use optimized `output_timer_delta` for timing calculations
- Preserve the original audio processing flow

---

`912-919`: **Clean and well-designed API methods.**

The new methods follow good practices:
- Simple getter/setter pattern for filter mode
- Setter properly resets filter history to prevent artifacts
- Audio buffer type signatures correctly updated to `i16`
- Consistent with existing API design patterns



Also applies to: 921-921, 925-925

---

`943-945`: **Correct handling of frequency-dependent calculations.**

Properly updates both `filter_rate` and `output_timer_delta` when clock frequency changes, ensuring all frequency-dependent calculations remain consistent.

---

`1349-1351`: **Complete and correct state serialization implementation.**

The serialization properly handles:
- Filter mode as `u8` for compact storage
- Both filter diff values as `f32` for precision
- Reconstruction of dependent values during deserialization
- Proper ordering and type handling



Also applies to: 1439-1444

---

`1458-1458`: **Excellent test coverage for filter functionality.**

The tests comprehensively cover:
- All three filter modes (Disable, Preserve, Accurate)
- Filter history reset behavior when changing modes
- State serialization/deserialization of filter data
- Proper filter behavior with different input values

The test implementations are thorough and verify key functionality.



Also applies to: 1676-1721

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3132601272,2913113499,coderabbitai[bot],COMMENTED,2025-06-10T11:19:19Z,"**Actionable comments posted: 0**

<details>
<summary>♻️ Duplicate comments (1)</summary><blockquote>

<details>
<summary>src/apu.rs (1)</summary><blockquote>

`1600-1600`: **Fix outdated state size assertion.**

Based on previous review comments, the state size should be 118 bytes (adding 9 bytes for filter fields: 1 byte for filter_mode + 8 bytes for filter_diff), not 109 bytes.


```diff
-        assert_eq!(state.len(), 109);
+        assert_eq!(state.len(), 118);
```

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>src/apu.rs (2)</summary><blockquote>

`34-36`: **Add documentation for the filter coefficient.**

Consider documenting the mathematical basis or derivation of the `FILTER_RATE_BASE` value (0.999958) to improve code maintainability and understanding.


```diff
/// The base rate for the filter, this is used to calculate the
/// filter rate based on the clock frequency and the sampling rate.
+/// This coefficient represents the cutoff frequency relationship for the high-pass filter.
const FILTER_RATE_BASE: f64 = 0.999958;
```

---

`52-77`: **Consider alignment between default behaviors.**

The `from_u8` method defaults to `HighPassFilter::Disable` for unknown values, while the `Apu` constructor defaults to `HighPassFilter::Accurate`. Consider whether this inconsistency is intentional or if both should use the same default.


```diff
pub fn from_u8(value: u8) -> Self {
    match value {
        1 => HighPassFilter::Disable,
        2 => HighPassFilter::Preserve,
        3 => HighPassFilter::Accurate,
-       _ => HighPassFilter::Disable,
+       _ => HighPassFilter::Accurate, // Match constructor default
    }
}
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 1126aa2ae1b2d9248dd2abfb3a5d7fce9262df15 and 0c8605f6cf90efd3297ca00ebbd3a4d87f0dc8f7.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `src/apu.rs` (14 hunks)
* `src/gb.rs` (6 hunks)

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (1)</summary>

* src/gb.rs

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (17)</summary>

* GitHub Check: Build SDL (latest)
* GitHub Check: Build SDL (1.85.0)
* GitHub Check: Build SDL (1.83.0)
* GitHub Check: Build Documentation (rust:latest)
* GitHub Check: Build SDL (1.84.0)
* GitHub Check: Build SDL (1.82.0)
* GitHub Check: Build Documentation (rust:1.83.0)
* GitHub Check: Build Documentation (rustlang/rust:nightly)
* GitHub Check: Build Documentation (rust:1.84.0)
* GitHub Check: Build Documentation (rust:1.85.0)
* GitHub Check: Build Documentation (rust:1.82.0)
* GitHub Check: Build Libretro Android (1.85.0)
* GitHub Check: Build Libretro Android (1.84.0)
* GitHub Check: Build Libretro Android (latest)
* GitHub Check: Build Libretro Android (1.82.0)
* GitHub Check: Build Libretro Android (1.83.0)
* GitHub Check: Build Windows

</details>

<details>
<summary>🔇 Additional comments (12)</summary><blockquote>

<details>
<summary>src/apu.rs (12)</summary>

`7-8`: **LGTM: Import additions support new floating-point serialization.**

The added `read_f32` and `write_f32` imports are necessary for serializing the new filter state fields.

---

`171-185`: **LGTM: Struct field additions support the filter feature.**

The new fields are well-documented and appropriately typed for the high-pass filter implementation. The audio buffer type change to `i16` provides better audio quality.

---

`273-280`: **LGTM: Constructor properly initializes filter fields.**

The initialization of filter-related fields is mathematically sound, with appropriate default values and calculated coefficients.

---

`357-357`: **LGTM: Properly clears filter history on reset.**

Resetting the filter difference array prevents audio artifacts when the APU is reset.

---

`405-428`: **LGTM: Filtering integrated correctly into audio pipeline.**

The filter application is positioned appropriately in the audio processing chain, and the timer delta optimization improves performance.

---

`921-928`: **LGTM: Filter mode management handles state correctly.**

The setter appropriately resets filter history when the mode changes, preventing audio artifacts from previous filter states.

---

`930-936`: **LGTM: Audio buffer methods updated for new sample type.**

The method signatures correctly reflect the change from `u8` to `i16` audio samples.

---

`952-954`: **LGTM: Clock frequency changes properly update filter parameters.**

Recalculating `filter_rate` and `output_timer_delta` when the clock frequency changes maintains correct audio timing and filtering.

---

`1358-1360`: **LGTM: Filter state properly serialized.**

The filter mode and difference arrays are correctly included in the state serialization.

---

`1448-1453`: **LGTM: Filter state properly deserialized with derived value recalculation.**

The restoration correctly reads filter state and recalculates frequency-dependent coefficients based on current configuration.

---

`1688-1730`: **LGTM: Comprehensive test coverage for filter functionality.**

The test suite properly verifies all filter modes, mode switching behavior, and state persistence. The test assertions appear mathematically consistent with the filter implementations.

---

`811-843`: <details>
<summary>❌ Incorrect review comment</summary>

**Verify safe type conversion for audio samples.**

The `u16` to `i16` conversion in the filter methods could potentially overflow for sample values > 32767. Consider adding bounds checking or documenting the expected sample range.

---

🏁 Script executed:

```shell
#!/bin/bash
# Search for maximum possible audio sample values in the codebase
rg -A 3 -B 3 'ch[1-4]_volume.*=' --type rust
```

Length of output: 5733

---

🏁 Script executed:

```shell
#!/bin/bash
# Locate ch1_output and related channel output methods in src/apu.rs
rg -n ""fn ch[1-4]_output"" -C4 --type rust src/apu.rs
```

Length of output: 874

---



</details>

**Incorrect overflow concern – sample ranges are bounded well below i16 limits**  

I checked the channel outputs (`ch1_output`…`ch4_output`), which return `u8` samples (0–15 for square/wave channels or 0–volume for noise). Even summed (max ≈ 60) and run through the high-pass filter (which subtracts a running average), the floating-point result will stay within ±~60. Casting an `f32` of this magnitude to `i16` cannot overflow the ±32 767 range. No additional bounds checks are needed.



> Likely an incorrect or invalid review comment.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3132601272,2913313714,coderabbitai[bot],COMMENTED,2025-06-10T12:18:14Z,"**Actionable comments posted: 1**

<details>
<summary>♻️ Duplicate comments (1)</summary><blockquote>

<details>
<summary>src/apu.rs (1)</summary><blockquote>

`1614-1614`: _⚠️ Potential issue_

**Fix incorrect state size assertion.**

The state size assertion is outdated. With the addition of filter fields (1 byte for `filter_mode` + 8 bytes for `filter_diff`), the expected state length should be 118, not 109.



```diff
-        assert_eq!(state.len(), 109);
+        assert_eq!(state.len(), 118);
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 0c8605f6cf90efd3297ca00ebbd3a4d87f0dc8f7 and d959e1cf267731e9cca7acb12119dd0cb36e3aaa.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `src/apu.rs` (14 hunks)
* `src/gb.rs` (7 hunks)

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (1)</summary>

* src/gb.rs

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (28)</summary>

* GitHub Check: Build Documentation (rust:1.84.0)
* GitHub Check: Build Documentation (rustlang/rust:nightly)
* GitHub Check: Build Documentation (rust:1.85.0)
* GitHub Check: Build Documentation (rust:latest)
* GitHub Check: Build Documentation (rust:1.82.0)
* GitHub Check: Build Documentation (rust:1.83.0)
* GitHub Check: Build Libretro Android (latest)
* GitHub Check: Build Libretro Android (1.85.0)
* GitHub Check: Build Libretro Android (1.84.0)
* GitHub Check: Build Libretro Android (1.83.0)
* GitHub Check: Build Libretro Android (1.82.0)
* GitHub Check: Build SDL (1.83.0)
* GitHub Check: Build SDL (1.85.0)
* GitHub Check: Build SDL (1.82.0)
* GitHub Check: Build SDL (latest)
* GitHub Check: Build SDL (1.84.0)
* GitHub Check: Build WASM (latest, 18)
* GitHub Check: Build Windows
* GitHub Check: Build WASM (1.83.0, 18)
* GitHub Check: Build WASM (1.84.0, 18)
* GitHub Check: Build WASM (1.85.0, 18)
* GitHub Check: Build Mac
* GitHub Check: Build WASM (1.82.0, 18)
* GitHub Check: Build (latest)
* GitHub Check: Build (1.82.0)
* GitHub Check: Build (1.83.0)
* GitHub Check: Build (1.84.0)
* GitHub Check: Build (1.85.0)

</details>

<details>
<summary>🔇 Additional comments (14)</summary><blockquote>

<details>
<summary>src/apu.rs (14)</summary>

`7-8`: **LGTM on import additions.**

The new `read_f32` and `write_f32` imports are correctly added to support serialization of the floating-point filter state.

---

`34-36`: **Well-documented filter constant.**

The `FILTER_RATE_BASE` constant is properly documented and will be used for filter rate calculations.

---

`45-77`: **Well-implemented filter mode enum.**

The `HighPassFilter` enum is properly defined with consistent bidirectional u8 conversions and appropriate derive traits.

---

`172-185`: **Appropriate struct field additions.**

The new filter-related fields are well-documented and properly typed. The audio buffer type change to `i16` correctly supports the new filtering functionality.

---

`273-280`: **Proper initialization of new filter fields.**

The new fields are correctly initialized with appropriate calculations for `output_timer_delta` and `filter_rate`, and reasonable defaults for the filter state.

---

`357-357`: **Correct filter state reset.**

Properly clears the filter history when resetting the APU.

---

`414-422`: **Correct integration of filtering into audio pipeline.**

The filtering is properly applied to each audio channel before adding samples to the buffer, and the timer delta calculation is correctly updated.




Also applies to: 428-428

---

`810-824`: **Well-documented raw output method.**

The method correctly returns the sum of all channel outputs as `u16` and is properly documented as providing unfiltered raw output.

---

`826-857`: **Solid high-pass filter implementation.**

The three filter modes are correctly implemented with appropriate mathematical formulas and proper per-channel state management.

---

`935-942`: **Appropriate filter mode accessor methods.**

The getter and setter are correctly implemented, with the setter properly resetting filter history to prevent state contamination when changing modes.

---

`944-950`: **Consistent audio buffer type updates.**

The getter methods correctly reflect the new `i16` audio buffer type.

---

`966-969`: **Correct recalculation on clock frequency change.**

Properly updates both `filter_rate` and `output_timer_delta` when the clock frequency changes, maintaining filter and timing accuracy.

---

`1372-1375`: **Complete state serialization for filter functionality.**

Correctly serializes and deserializes the filter state, with proper recalculation of dependent values during restoration.




Also applies to: 1462-1467

---

`1702-1755`: **Comprehensive filter functionality tests.**

The new test methods provide excellent coverage of all filter modes, state management, and serialization behavior with appropriate assertions.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3076603836,2853722268,greptile-apps[bot],COMMENTED,2025-05-20T11:03:35Z,"
## PR Summary

This PR enhances the changelog enforcer workflow by adding automated functionality to ping Claude when a changelog entry is missing in pull requests.

- Added `continue-on-error` to the enforce step to allow subsequent actions to run
- Added new step to create a PR comment mentioning `@claude` when changelog is missing
- Added explicit workflow failure step after Claude is pinged to maintain enforcement
- Improved error handling by adding step ID for outcome checking

<sub>1 file(s) reviewed, 1 comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=extensions_19305)</sub>"
3076603836,2853732036,thomaspaulmann,COMMENTED,2025-05-20T11:04:34Z,
3076603836,2861061805,pernielsentikaer,APPROVED,2025-05-22T12:37:15Z,
3081843614,2859588468,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-22T02:25:05Z,"## Pull Request Overview

This PR refactors proxy middleware tests to remove reliance on external network calls by spinning up local HTTP servers for redirect and real URL scenarios.

- Added `createRedirectServer` helper to simulate HTTP redirects in tests  
- Updated `Test_Proxy_Do_*` and `Test_Proxy_DoRedirects_*` to use local servers and assert against controlled responses


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**middleware/proxy/proxy_test.go:62**
* [nitpick] The variable name 'addr' is quite generic; consider renaming to something like 'redirectServerAddr' to make its purpose clearer.
```
var addr string
```
</details>

"
3081843614,2859589287,coderabbitai[bot],COMMENTED,2025-05-22T02:25:53Z,"**Actionable comments posted: 1**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 273df5f86bf1b857d6404243b8102c40a5412bdf and 23dd777e0f645e55606b5b9d440d24b7a639baf8.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `middleware/proxy/proxy_test.go` (4 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 GitHub Check: lint</summary>

<details>
<summary>middleware/proxy/proxy_test.go</summary>

[failure] 58-58: 
createRedirectServer - result 0 (*github.com/gofiber/fiber/v3.App) is never used (unparam)

</details>

</details>
<details>
<summary>🪛 GitHub Actions: golangci-lint</summary>

<details>
<summary>middleware/proxy/proxy_test.go</summary>

[error] 58-58: golangci-lint: createRedirectServer - result 0 (*github.com/gofiber/fiber/v3.App) is never used (unparam)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: unit (1.23.x, macos-13)
* GitHub Check: unit (1.24.x, windows-latest)
* GitHub Check: unit (1.23.x, windows-latest)
* GitHub Check: Compare
* GitHub Check: repeated

</details>

<details>
<summary>🔇 Additional comments (11)</summary><blockquote>

<details>
<summary>middleware/proxy/proxy_test.go (11)</summary>

`527-529`: **Good replacement of external URL dependency!**

The test now uses a local server created with `createProxyTestServerIPv4` instead of an external URL, making the test more predictable and reliable.

---

`533-533`: **Good update to use local test server URL!**

This change ensures the test uses the local server address rather than an external URL.

---

`545-545`: **Appropriate assertion update!**

The expected response has been updated to match the local server's response (""real url"").

---

`552-552`: **Good implementation of local redirect server!**

The test now uses the new `createRedirectServer` function instead of relying on external redirect behavior.

---

`556-556`: **Proper use of local server address!**

This correctly uses the address returned by `createRedirectServer`.

---

`566-567`: **Correct assertions for local redirect server!**

The expected response body (""redirect"") and status code (301) now match what the local redirect server returns.

---

`574-574`: **Good reuse of redirect server in another test!**

Using the same redirect server helper function across multiple tests ensures consistency.

---

`578-578`: **Appropriate use of DoRedirects with local server!**

The test now properly tests the redirect functionality with a controlled local environment.

---

`586-588`: **Proper assertions for redirect follow-through!**

These assertions correctly verify that the `DoRedirects` function follows the redirect and receives the ""final"" response.

---

`597-597`: **Consistent use of redirect server!**

Using the same helper function across all redirect-related tests ensures testing consistency.

---

`601-601`: **Good test for too many redirects!**

Setting max redirects to 0 is a good way to test the too many redirects error handling.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3081843614,2859607824,coderabbitai[bot],COMMENTED,2025-05-22T02:39:20Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>middleware/proxy/proxy_test.go (1)</summary><blockquote>

`58-79`: **Well-designed helper function for offline testing**

The new `createRedirectServer` function is well-implemented, creating a local HTTP server that handles redirects without requiring external network access. This approach makes the tests more reliable and consistent.

There's a good use of `t.Helper()` to mark this as a test helper function, and the cleanup function properly closes the listener when the test completes.



One minor issue is that the error from `ln.Close()` is not being checked, as flagged by the linter. Apply this fix:

```diff
-	t.Cleanup(func() { ln.Close() })
+	t.Cleanup(func() { 
+		err := ln.Close()
+		if err != nil {
+			t.Logf(""failed to close listener: %v"", err)
+		}
+	})
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 GitHub Check: lint</summary>

[failure] 73-73: 
Error return value of `ln.Close` is not checked (errcheck)

</details>
<details>
<summary>🪛 GitHub Actions: golangci-lint</summary>

[error] 73-73: golangci-lint: Error return value of `ln.Close` is not checked (errcheck)

</details>

</details>

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 9b3f6ad5cb273d2fbb0c3e7b677987e1ffd688be and bd9c02b3c43449d4133c21232c4072868f3d75a4.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `middleware/proxy/proxy_test.go` (4 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 GitHub Check: lint</summary>

<details>
<summary>middleware/proxy/proxy_test.go</summary>

[failure] 73-73: 
Error return value of `ln.Close` is not checked (errcheck)

</details>

</details>
<details>
<summary>🪛 GitHub Actions: golangci-lint</summary>

<details>
<summary>middleware/proxy/proxy_test.go</summary>

[error] 73-73: golangci-lint: Error return value of `ln.Close` is not checked (errcheck)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: unit (1.24.x, windows-latest)
* GitHub Check: Compare
* GitHub Check: unit (1.24.x, macos-13)
* GitHub Check: unit (1.23.x, windows-latest)
* GitHub Check: repeated

</details>

<details>
<summary>🔇 Additional comments (11)</summary><blockquote>

<details>
<summary>middleware/proxy/proxy_test.go (11)</summary>

`527-531`: **Good replacement of external URL dependency**

Replacing the external URL with a local test server is a great improvement. This change eliminates network dependencies and makes the test more reliable and faster.

---

`534-535`: **Properly updated the test case with local server URL**

The test logic is maintained while replacing the external dependency with a local server URL.

---

`546-546`: **Appropriate assertion update for local server response**

The assertion has been correctly updated to match the response from the local server.

---

`553-553`: **Good use of the new redirect server helper**

The test now uses the newly created `createRedirectServer` function, eliminating the dependency on external network resources.

---

`556-557`: **Properly updated test logic for local redirect server**

The test logic has been maintained while using the local redirect server URL.

---

`566-567`: **Appropriate assertions for redirect behavior**

The assertions correctly verify the redirect response and status code from the local server.

---

`574-574`: **Good application of redirect server for testing complex scenarios**

Using the local redirect server for testing multi-redirect scenarios is an excellent approach.

---

`577-578`: **Well-structured test for redirect following**

The test properly sets up the redirect limit parameter (1) to test that the proxy follows redirects as expected.

---

`585-587`: **Appropriate assertions for final redirect destination**

The assertions correctly verify that the final response after following redirects is as expected.

---

`596-596`: **Good use of redirect server for error testing**

Using the local redirect server to test error conditions is a smart approach.

---

`599-600`: **Well-crafted test for redirect limits**

Setting the redirect limit to 0 is an excellent way to test the ""too many redirects"" error condition.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3081843614,2859609089,gaby,COMMENTED,2025-05-22T02:40:31Z,
3081843614,2859612944,github-actions[bot],COMMENTED,2025-05-22T02:44:13Z,"<!-- github-benchmark-action-comment(start): Benchmark Alert -->
# :warning: **Performance Alert** :warning:

Possible performance regression was detected for benchmark.
Benchmark result of this commit is worse than the previous benchmark result exceeding threshold `1.50`.

| Benchmark suite | Current: 60a122afd958592057cea5962076b61838150c94 | Previous: 81edaf094d058a411a407caee3ce2283417f4267 | Ratio |
|-|-|-|-|
| `Benchmark_Compress_Levels_Parallel/Brotli_LevelBestCompression - B/op` | `1` B/op | `0` B/op | `+∞` |

This comment was automatically generated by [workflow](https://github.com/gofiber/fiber/actions?query=workflow%3ABenchmark) using [github-action-benchmark](https://github.com/marketplace/actions/continuous-benchmark).
<!-- github-benchmark-action-comment(end): Benchmark Alert -->"
3081843614,2860969268,ReneWerner87,APPROVED,2025-05-22T12:06:48Z,
3081843614,2860969400,ReneWerner87,APPROVED,2025-05-22T12:06:51Z,
3147471163,2937002632,ChrisHuie,APPROVED,2025-06-17T20:26:41Z,
3085150302,2863171964,sourcery-ai[bot],COMMENTED,2025-05-23T04:58:48Z,"Hey @mldangelo - I've reviewed your changes and found some issues that need to be addressed.

**Blocking issues**:
- Test suite is reportedly failing due to a peer dependency issue. ([link](https://github.com/promptfoo/promptfoo/pull/4132/files#diff-5d05b32d0280c6f138d5a34b6b5f76912d2c64e97109802bb9ecf409432a8052R160))

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🔴 **Testing**: 1 blocking issue
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3085150302,2864966239,sklein12,DISMISSED,2025-05-23T16:10:00Z,
3075942194,2852959261,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-20T07:13:25Z,"## Pull Request Overview

This PR introduces support for the JetBrains Mono font by adding it to the existing Font enumeration and documenting the change in a new changeset file.
- Adds a new enum entry in common/types/configType.ts to include 'JetBrains Mono'.
- Creates a changeset file to document the addition.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated no comments.

| File                                  | Description                                          |
| ------------------------------------- | ---------------------------------------------------- |
| common/types/configType.ts            | Added JetBrains Mono entry in the Font enum          |
| .changeset/add-jetbrains-mono-font.md | Added documentation for the new JetBrains Mono font  |



"
3124610640,2904745351,github-actions[bot],COMMENTED,2025-06-06T12:15:29Z,"Your PR title doesn't match the required format. The title should be in this format: 

```
chore: update Text docs
fix: text not rendering
feat: add new feature to Text
breaking: remove Text#resolution 
```"
3070968990,2848365125,ellipsis-dev[bot],COMMENTED,2025-05-17T18:03:16Z,"> [!CAUTION]
> **Changes requested  :x:**
> <details>
> <summary>Reviewed everything up to 69e800c61b59d5a61fef1abcccdd8a048185493c in <ellipsistime>1 minute and 43 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `190` lines of code in `7` files
> - Skipped `0` files when reviewing.
> - Skipped posting `6` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>CHANGELOG.md:33</code></summary>
> 
> - **Draft comment:** 
> New changelog section looks good. Ensure the dates and version order align with release policies.
> - **Reason this comment was not posted:**
> Confidence changes required: `20%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>memory-store/migrations/000015_entries.up.sql:92</code></summary>
> 
> - **Draft comment:** 
> Switching to use NEW.model in the token calculation function improves flexibility; however, monitor the performance impact of tokenizing content on every trigger execution.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is purely informative and does not provide a specific suggestion or question related to the code changes. It suggests monitoring performance, which is not actionable feedback for the PR author.
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>memory-store/migrations/000042_doc_fk_and_token_function.down.sql:15</code></summary>
> 
> - **Draft comment:** 
> The down migration reverts the token function to use a hardcoded 'gpt-4o'. Confirm that this rollback behavior matches the intended previous state.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `40%` <= threshold `50%` The comment is asking the PR author to confirm the rollback behavior, which violates the rule against asking for confirmation of intention. However, it does point out a specific change in the code, which is the use of a hardcoded 'gpt-4o'. This could be a valid concern if the rollback behavior is not as expected, but the phrasing is not ideal as it asks for confirmation.
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>memory-store/migrations/000042_doc_fk_and_token_function.up.sql:3</code></summary>
> 
> - **Draft comment:** 
> Adding the unique constraint on docs may be redundant if it was already applied in an earlier migration. Verify the migration order to avoid conflicts.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `30%` <= threshold `50%` The comment is asking the PR author to verify the migration order, which is similar to asking them to double-check something. This violates the rule against asking the author to confirm or verify things. However, it does point out a potential redundancy, which could be useful if rephrased to suggest checking for redundancy without asking for verification.
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>memory-store/migrations/000042_doc_fk_and_token_function.up.sql:11</code></summary>
> 
> - **Draft comment:** 
> The updated token count function now uses NEW.model, aligning with other changes. Ensure this behavior is backward compatible with existing triggers and workflows.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is asking the PR author to ensure backward compatibility, which is similar to asking them to double-check or verify something. This violates the rule against asking the author to confirm or ensure behavior.
> 
> 
> </details>
> 
> <details>
> <summary>6. <code>memory-store/migrations/000042_doc_fk_and_token_function.down.sql:15</code></summary>
> 
> - **Draft comment:** 
> Typo alert: The string literal 'gpt-4o' on this line looks like it might be a typographical error. If this is intended to be 'gpt-4', please update accordingly.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 10% vs. threshold = 50% Since this is a .down.sql file, it's meant to revert changes from the corresponding .up.sql file. The model name 'gpt-4o' seems unusual, but without seeing the .up.sql file, I can't be certain if this is actually a typo or if it's intentionally reverting to an old model name that was previously used. The comment is making an assumption without full context. I might be overlooking the possibility that 'gpt-4o' is a valid model name or configuration in their system. Also, since this is a down migration, it might be intentionally restoring an old state. Given this is a migration file, we should be extremely cautious about suggesting changes without full context of both the up and down migrations. The comment should be deleted as we don't have enough context to be certain that 'gpt-4o' is actually a typo rather than an intentional value being restored in this down migration.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_dWzmh0lbU9hW2b6L`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3079721124,2857150660,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-21T10:21:10Z,"## Pull Request Overview

This PR fixes a minor typo in the docstrings across model initialization methods.

- Correct spelling of “suppresses” in docstrings.
- Applied the correction in both regressor and classifier modules.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated no comments.

| File                          | Description                                 |
|-------------------------------|---------------------------------------------|
| src/tabpfn/regressor.py      | Fixed typo “supresses” → “suppresses” in docstring |
| src/tabpfn/classifier.py     | Fixed typo “supresses” → “suppresses” in docstring |



"
3146758450,2928845577,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-14T21:11:42Z,"## Pull Request Overview

This PR aims to fix an issue with orphaned cache files by ensuring only file objects are processed and by correctly computing relative paths prior to deletion.  
- Filters the cache directory to include only file objects.  
- Replaces a string split with a more direct substitute to compute relative paths.



"
3137692025,2918215206,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-11T18:05:25Z,"## Pull Request Overview

This PR removes the deprecated `legacyBehavior` prop from Next.js `Link` components across the site and adds a changeset for the `site` package.

- Removed all instances of `legacyBehavior` on `<NextLink>` components
- Ensured `passHref` is applied where custom anchor children remain
- Added a changeset to bump the `site` package patch version

### Reviewed Changes

Copilot reviewed 5 out of 5 changed files in this pull request and generated no comments.

<details>
<summary>Show a summary per file</summary>

| File                                  | Description                                           |
| ------------------------------------- | ----------------------------------------------------- |
| site/pages/index.tsx                  | Dropped `legacyBehavior` on CTA links, retained `passHref` |
| site/components/Sidebar/Sidebar.tsx   | Removed `legacyBehavior` from sidebar doc links        |
| site/components/Header/Header.tsx     | Cleaned up legacy prop on the logo link               |
| site/components/DocsLayout/DocsLayout.tsx | Updated pagination links to drop `legacyBehavior` and keep `passHref` |
| .changeset/remove-legacy-link-site.md | Added changeset for `site` package patch              |
</details>




"
3101467092,2879967824,cirospaciari,COMMENTED,2025-05-30T01:26:54Z,
3101467092,2879968385,cirospaciari,COMMENTED,2025-05-30T01:27:29Z,
3101467092,2879968610,cirospaciari,APPROVED,2025-05-30T01:27:44Z,
3070860414,2848316558,ellipsis-dev[bot],COMMENTED,2025-05-17T15:18:57Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to b759974c937794ece2423a9172d17cf09a321302 in <ellipsistime>36 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `12` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `1` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>agents-api/agents_api/queries/projects/__init__.py:10</code></summary>
> 
> - **Draft comment:** 
> Good clean-up removing the unused '# ruff: noqa: F401, F403, F405'. Ensure that static analysis (ruff) acknowledges the use of imported functions via the __all__ list to prevent false positive unused import warnings.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_iM5jdpqXPt0zzbzA`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3105520772,2884136170,dev-aipolabs,APPROVED,2025-05-31T14:03:18Z,"lgtm
"
3127340685,2907737865,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-07T20:22:44Z,"## Pull Request Overview

This PR fixes BMP file and image size calculations to account for row padding and enforces little-endian encoding, and adds tests to validate the BMP header structure.

- Compute `row_bytes` padded to 4-byte boundaries and derive `image_size` accordingly.
- Update `file_size` calculation and write both sizes using little-endian encoding.
- Add unit tests for BMP header fields and LE encoding.


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**crates/common/src/util.rs:259**
* Tests validate header fields but don’t check the actual pixel bytes or padding; consider adding assertions for the pixel data order and padding bytes to fully cover the new logic.
```
// header checks
```
</details>

"
3127340685,2907821639,coderabbitai[bot],COMMENTED,2025-06-07T21:54:17Z,"**Actionable comments posted: 1**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>src/bin/bosc-thumbnail.rs (1)</summary><blockquote>

`37-40`: **Consider memory usage for large files.**

The current implementation reads the entire file into memory. While this is likely acceptable for BOSC files (which are compressed state files), consider streaming approaches if you expect to handle very large files in the future.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 3b42451d699315f4851bfa93cd45e764404d1520 and bd6848328ba635b8e083ef567f69498b572af64b.

</details>

<details>
<summary>📒 Files selected for processing (4)</summary>

* `Cargo.toml` (1 hunks)
* `crates/common/src/util.rs` (5 hunks)
* `src/bin/bosc-decompress.rs` (1 hunks)
* `src/bin/bosc-thumbnail.rs` (1 hunks)

</details>

<details>
<summary>✅ Files skipped from review due to trivial changes (2)</summary>

* src/bin/bosc-decompress.rs
* Cargo.toml

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (1)</summary>

* crates/common/src/util.rs

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (38)</summary>

* GitHub Check: Build SDL (latest)
* GitHub Check: Build Documentation (rustlang/rust:nightly)
* GitHub Check: Build WASM (1.85.0, 18)
* GitHub Check: Build SDL (1.84.0)
* GitHub Check: Build SDL (1.82.0)
* GitHub Check: Build WASM (1.82.0, 18)
* GitHub Check: Build Documentation (rust:1.83.0)
* GitHub Check: Build Documentation (rust:latest)
* GitHub Check: Build SDL (1.85.0)
* GitHub Check: Build SDL (1.83.0)
* GitHub Check: Build WASM (latest, 18)
* GitHub Check: Build Documentation (rust:1.85.0)
* GitHub Check: Build Documentation (rust:1.84.0)
* GitHub Check: Build WASM (1.83.0, 18)
* GitHub Check: Build Documentation (rust:1.82.0)
* GitHub Check: Build (latest)
* GitHub Check: Build Libretro Android (1.84.0)
* GitHub Check: Build Simple (latest)
* GitHub Check: Build Simple (1.85.0)
* GitHub Check: Build Libretro (1.84.0)
* GitHub Check: Build Libretro Android (1.83.0)
* GitHub Check: Build WASM (1.84.0, 18)
* GitHub Check: Build Libretro Android (latest)
* GitHub Check: Build Libretro (1.83.0)
* GitHub Check: Build Simple (1.83.0)
* GitHub Check: Build Libretro Android (1.85.0)
* GitHub Check: Build Libretro (1.85.0)
* GitHub Check: Build Libretro Android (1.82.0)
* GitHub Check: Build Libretro (1.82.0)
* GitHub Check: Build Libretro (latest)
* GitHub Check: Build Simple (1.84.0)
* GitHub Check: Build (1.85.0)
* GitHub Check: Build Simple (1.82.0)
* GitHub Check: Build (1.84.0)
* GitHub Check: Build (1.83.0)
* GitHub Check: Build (1.82.0)
* GitHub Check: Build Windows
* GitHub Check: Build Mac

</details>

<details>
<summary>🔇 Additional comments (4)</summary><blockquote>

<details>
<summary>src/bin/bosc-thumbnail.rs (4)</summary>

`1-9`: **LGTM! Well-documented module.**

The module documentation is clear, comprehensive, and follows Rust documentation conventions.

---

`10-11`: **LGTM! Appropriate imports.**

All necessary modules are imported and utilized correctly.

---

`13-16`: **LGTM! Clear usage instructions.**

The helper function provides clear and concise usage information.

---

`18-24`: **LGTM! Good overall structure and error handling.**

The main function has a clear structure with appropriate error handling using the `?` operator and meaningful progress messages.



Also applies to: 35-35, 54-57

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3114894747,2893586633,dnr,APPROVED,2025-06-03T18:15:08Z,
3123528512,2903694869,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-06T03:43:43Z,"## Pull Request Overview

This PR updates the `getWidth` function to correctly calculate display width by iterating over Unicode code points instead of using a replace-and-count hack.

- Replaces `s.replaceAll(/./g, …).length` with explicit code-point iteration via `Array.from(s)`
- Accumulates width using `eastasianwidth.characterLength` per code point


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**packages/@markuplint/cli-utils/src/get-width.ts:6**
* There are no unit tests covering edge cases like emoji, combining marks, or flags. Consider adding tests to validate width calculations for these multicode-point sequences.
```
export function getWidth(s: string): number {
```
**packages/@markuplint/cli-utils/src/get-width.ts:4**
* [nitpick] The abbreviation `eaw` is unclear. Renaming it to `eastAsianWidth` or `widthCalculator` would improve readability.
```
const eaw: { characterLength: (char: string) => number } = eastasianwidth;
```
</details>

"
3123528512,2903697273,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-06T03:46:25Z,"## Pull Request Overview

This PR updates the `getWidth` function to correctly calculate string widths by iterating over Unicode code points instead of using a regex-based replacement.

- Replaced `replaceAll` + length hack with a `for…of` loop summing `eaw.characterLength`
- Ensures wide and multibyte characters are handled per code point
- Simplifies implementation for readability and accuracy


<details>
<summary>Comments suppressed due to low confidence (3)</summary>

**packages/@markuplint/cli-utils/src/get-width.ts:5**
* [nitpick] The alias `eaw` is terse and may not clearly convey its purpose. Consider renaming to `eastAsianWidth` for clarity.
```
const eaw: { characterLength: (char: string) => number } = eastasianwidth;
```
**packages/@markuplint/cli-utils/src/get-width.ts:6**
* [nitpick] Add a JSDoc comment describing the function behavior, parameters, and return value, especially noting it counts visual widths of Unicode code points.
```
export function getWidth(s: string): number {
```
**packages/@markuplint/cli-utils/src/get-width.ts:8**
* Add unit tests covering various multibyte scenarios (e.g., fullwidth CJK, emojis, combining marks) to verify `getWidth` handles all edge cases correctly.
```
for (const char of s) {
```
</details>

"
3071839438,2849009608,github-actions[bot],DISMISSED,2025-05-18T14:46:05Z,"The PR title does not conform to the '[\<Project\>] Title' format. Please update the PR title. 

 Typical [\<Project\>] values include: 

 * `[stdlib]` — indicates a change to the Mojo standard library code
 * `[docs]` — indicates a change to the documentation 

 It's okay to include multiple labels on a PR that affect multiple areas of work. 

 Thank you for contributing to Mojo!🔥 

 <small> You can also use a tool like www.regex101.com to see why your PR title fails to conform. Use ``` ^(Revert "")?(\[\S.*\]\s?)+\s+[a-zA-Z`].* ``` as the regex to test and ```Fix typos across repository``` as the test string.</small>"
3071839438,2849010242,dukebw,APPROVED,2025-05-18T14:48:57Z,LGTM!
3070338307,2847986464,ellipsis-dev[bot],COMMENTED,2025-05-17T05:01:16Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 5dcd25fcd44000020035bc0599ce6452c7fbdb3a in <ellipsistime>1 minute and 39 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `70` lines of code in `4` files
> - Skipped `0` files when reviewing.
> - Skipped posting `5` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>CHANGELOG.md:33</code></summary>
> 
> - **Draft comment:** 
> New changelog entry added. Ensure consistent date formatting (e.g., verify if 'Apri' should be 'April') and that entries remain in descending order.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>documentation/guides/cookbooks/community-examples.mdx:11</code></summary>
> 
> - **Draft comment:** 
> Replaced placeholder content with actual community example cookbook links; looks good.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>documentation/guides/cookbooks/industry-solutions.mdx:11</code></summary>
> 
> - **Draft comment:** 
> Industry solutions now include cookbook links; verify that all URLs are correct.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>documentation/guides/cookbooks/quick-solutions.mdx:11</code></summary>
> 
> - **Draft comment:** 
> Quick solutions updated with cookbook links. Consider using commit hashes for stability instead of the 'dev' branch if long-term link integrity is a concern.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>CHANGELOG.md:38</code></summary>
> 
> - **Draft comment:** 
> Typo: ""Apri"" appears in the version heading. It should likely be corrected to ""Apr"" or ""April"" for consistency.
> - **Reason this comment was not posted:**
> Comment was on unchanged code.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_psETbP72h4HS1ygm`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3085231629,2863241030,ellipsis-dev[bot],COMMENTED,2025-05-23T05:35:02Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 84bfafcdf59547f1867f479dc149bf37a0052303 in <ellipsistime>1 minute and 52 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `61` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `4` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern/forge/sdk/workflow/service.py:1223</code></summary>
> 
> - **Draft comment:** 
> Consider using a robust URL join method (e.g., urllib.parse.urljoin) to construct 'app_url' rather than manual string concatenation.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 20% vs. threshold = 50% While urljoin is generally good practice for URL construction, the current code is already handling the main edge case (trailing slashes) explicitly with rstrip(). The URL structure is very simple - just joining path segments. urljoin would not add significant value here since we're not dealing with complex URL components like query params, fragments, or relative paths. The current approach is clear and handles the necessary edge cases. I could be underestimating the value of using standard library URL handling. There could be edge cases with malformed base URLs that urljoin would handle better. The URL construction here is very basic path joining. The rstrip() handles the main edge case we care about. urljoin would be overkill and make the code more complex for little benefit. Delete the comment. The current string concatenation approach with rstrip() is appropriate for this simple URL construction case. Using urljoin would add unnecessary complexity.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>skyvern/forge/sdk/workflow/service.py:1228</code></summary>
> 
> - **Draft comment:** 
> Verify that the field mappings in WorkflowRunResponse (including RunStatus conversion) align with the expected schema.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is asking the PR author to verify that the field mappings align with the expected schema. This falls under the category of asking the author to double-check things, which is against the rules.
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>skyvern/forge/sdk/workflow/service.py:1251</code></summary>
> 
> - **Draft comment:** 
> Merging dictionaries from workflow_run_status_response and workflow_run_response may override duplicate keys; ensure that the merge order is intentional for backward compatibility.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 20% vs. threshold = 50% The code is explicitly merging two model dumps in a specific order. This appears to be intentional as the comment on L1223 states ""build new schema for backward compatible webhook payload"". The merge order matters for backward compatibility - newer fields from workflow_run_response should override older fields from workflow_run_status_response. The comment is speculative (""may override"") and asks for verification of something that appears to be working as designed. The comment raises a valid technical concern about dictionary merging. Perhaps there are important fields that should not be overridden. The code comment on L1223 indicates this is an intentional backward compatibility change. The merge order is explicit and deliberate - not something that needs verification. Delete the comment. The dictionary merge behavior appears to be intentional for backward compatibility, and the comment is asking for unnecessary verification of intended behavior.
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>skyvern/forge/sdk/workflow/service.py:1255</code></summary>
> 
> - **Draft comment:** 
> Using json.dumps with default=str may not yield ISO-formatted datetimes; consider using a custom serializer if specific formatting is required.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 20% vs. threshold = 50% While the comment raises a valid technical point about datetime serialization, several things make me lean towards deleting it: 1) The code is working with webhook payloads where exact datetime format is rarely critical 2) The default=str approach is a common and acceptable pattern 3) The comment is speculative (""may not yield"") rather than pointing out a definite issue 4) If datetime format was critical, it would likely be enforced by the model schema validation The comment does identify a real technical consideration about datetime serialization that could potentially cause issues if exact ISO format is needed by webhook consumers. While datetime serialization is important, this appears to be working code and there's no evidence that the current approach is causing any problems. The comment is more of a general observation than identifying a specific issue that needs fixing. Delete the comment. While technically accurate, it's speculative and doesn't identify a clear problem that needs fixing. The current serialization approach is reasonable for webhook payloads.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_s8dMFCH7xv1vNRE3`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3136273177,2918016853,Skylion007,APPROVED,2025-06-11T16:57:09Z,
3150335504,2932499757,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-16T14:57:50Z,"## Pull Request Overview

This PR refactors the S3 URL validation logic in extractS3KeyFromUrl to use the URL constructor for improved parsing and includes better error handling.  
- Replaces regex-based URL extraction with URL parsing  
- Adds a try-catch block to handle both full URLs and relative key formats


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**apps/portal/src/utils/s3.ts:57**
* [nitpick] The fallback logic in the catch block uses a split on '/' without an explanatory comment. Consider adding a comment to clarify its intent as a fallback for relative key formats.
```
if (!url.includes('amazonaws.com') && url.split('/').length > 1) {
```
</details>

"
3150335504,2932508467,github-advanced-security[bot],COMMENTED,2025-06-16T15:00:03Z,
3150335504,2932526308,cursor[bot],COMMENTED,2025-06-16T15:04:56Z,"<details open>
<summary><h3>Bug: URL Parsing Regressions in S3 Key Extraction</h3></summary>

The `extractS3KeyFromUrl` function's new URL parsing logic introduces several regressions by incorrectly handling various URL formats:

*   It fails to extract S3 keys from malformed S3 URLs missing a protocol (e.g., `bucket.s3.amazonaws.com/key`), instead returning the full string or treating them as relative paths.
*   The fallback logic for non-S3 URLs is overly permissive, accepting simple filenames (e.g., `file.txt`) that lack path separators. This occurs because the `new URL` constructor with a base URL always sets the host to `example.com` for relative paths, rendering the subsequent host validation ineffective.
*   Certain protocol-relative S3 URLs (e.g., `//bucket.amazonaws.com/path`) may fall through to an error state instead of being properly processed.

<p></p>

<details>
<summary><code>apps/portal/src/utils/s3.ts#L53-L70</code></summary>

https://github.com/trycompai/comp/blob/8e895dec7d9f45ed06f16f641b18f5082e6b2b14/apps/portal/src/utils/s3.ts#L53-L70

</details>

<a href=""https://cursor.com/open?data=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImJ1Z2JvdC12MSJ9.eyJ0eXBlIjoiQlVHQk9UX0ZJWF9JTl9DVVJTT1IiLCJkYXRhIjp7ImJ1ZyI6ImV5SnNiMk5oZEdsdmJuTWlPbHQ3SW1acGJHVWlPaUpoY0hCekwzQnZjblJoYkM5emNtTXZkWFJwYkhNdmN6TXVkSE1pTENKemRHRnlkRXhwYm1VaU9qVXpMQ0psYm1STWFXNWxJam8zTUN3aVkyOWtaVXhwYm1WeklqcGJYWDFkTENKcFpDSTZJalExWlRFM01qTXdMVFF5WldJdE5HVTNNQzFpWTJNd0xXVXpNelprWm1KbE1USTFaaUlzSW1SbGMyTnlhWEIwYVc5dUlqb2lWR2hsSUdCbGVIUnlZV04wVXpOTFpYbEdjbTl0VlhKc1lDQm1kVzVqZEdsdmJpZHpJRzVsZHlCVlVrd2djR0Z5YzJsdVp5QnNiMmRwWXlCcGJuUnliMlIxWTJWeklITmxkbVZ5WVd3Z2NtVm5jbVZ6YzJsdmJuTWdZbmtnYVc1amIzSnlaV04wYkhrZ2FHRnVaR3hwYm1jZ2RtRnlhVzkxY3lCVlVrd2dabTl5YldGMGN6cGNibHh1S2lBZ0lFbDBJR1poYVd4eklIUnZJR1Y0ZEhKaFkzUWdVek1nYTJWNWN5Qm1jbTl0SUcxaGJHWnZjbTFsWkNCVE15QlZVa3h6SUcxcGMzTnBibWNnWVNCd2NtOTBiMk52YkNBb1pTNW5MaXdnWUdKMVkydGxkQzV6TXk1aGJXRjZiMjVoZDNNdVkyOXRMMnRsZVdBcExDQnBibk4wWldGa0lISmxkSFZ5Ym1sdVp5QjBhR1VnWm5Wc2JDQnpkSEpwYm1jZ2IzSWdkSEpsWVhScGJtY2dkR2hsYlNCaGN5QnlaV3hoZEdsMlpTQndZWFJvY3k1Y2Jpb2dJQ0JVYUdVZ1ptRnNiR0poWTJzZ2JHOW5hV01nWm05eUlHNXZiaTFUTXlCVlVreHpJR2x6SUc5MlpYSnNlU0J3WlhKdGFYTnphWFpsTENCaFkyTmxjSFJwYm1jZ2MybHRjR3hsSUdacGJHVnVZVzFsY3lBb1pTNW5MaXdnWUdacGJHVXVkSGgwWUNrZ2RHaGhkQ0JzWVdOcklIQmhkR2dnYzJWd1lYSmhkRzl5Y3k0Z1ZHaHBjeUJ2WTJOMWNuTWdZbVZqWVhWelpTQjBhR1VnWUc1bGR5QlZVa3hnSUdOdmJuTjBjblZqZEc5eUlIZHBkR2dnWVNCaVlYTmxJRlZTVENCaGJIZGhlWE1nYzJWMGN5QjBhR1VnYUc5emRDQjBieUJnWlhoaGJYQnNaUzVqYjIxZ0lHWnZjaUJ5Wld4aGRHbDJaU0J3WVhSb2N5d2djbVZ1WkdWeWFXNW5JSFJvWlNCemRXSnpaWEYxWlc1MElHaHZjM1FnZG1Gc2FXUmhkR2x2YmlCcGJtVm1abVZqZEdsMlpTNWNiaW9nSUNCRFpYSjBZV2x1SUhCeWIzUnZZMjlzTFhKbGJHRjBhWFpsSUZNeklGVlNUSE1nS0dVdVp5NHNJR0F2TDJKMVkydGxkQzVoYldGNmIyNWhkM011WTI5dEwzQmhkR2hnS1NCdFlYa2dabUZzYkNCMGFISnZkV2RvSUhSdklHRnVJR1Z5Y205eUlITjBZWFJsSUdsdWMzUmxZV1FnYjJZZ1ltVnBibWNnY0hKdmNHVnliSGtnY0hKdlkyVnpjMlZrTGlJc0ltTnZibVpwWkdWdVkyVWlPakF1T1Rrd01USTROakF4TWpnM05qazJNU3dpWTJGMFpXZHZjbmtpT2lKTVQwZEpRMTlDVlVjaWZRIiwiYnJhbmNoIjoiY29kZXgvZml4LXVybC1zdWJzdHJpbmctc2FuaXRpemF0aW9uLWlzc3VlIn0sImlhdCI6MTc1MDA4NjI5NiwiZXhwIjoxNzUwNjkxMDk2fQ.G0yFwuPSsfd216xU6NGfjDPfzK7zXUDO3aciUKvLTzJm6YnAUzvJTia3hQmPLxETPnlgWjy2TvIv-_8xh0a6SQq3CxDyHo2TfgumpXyae-M-yyt5DDOtESsJ6DJ2lDOaWR57-2wdl7gz8WX-wIZeRyfKDTJWsYkkubo2oAoX__PI8WE2TeKFQA2u_8SgF_4OjX7meVXmDQfjGD5mh_hpOKZtjeLBbDnBQE0woeSL_ZiIMXg-LHAg5ilgrXmbPed94fiSyz2YkaOPV6QHyR_GlZnE_e2JGpVVoGywJgxjkDPIg7vnYOEiWGW-gqhJEDQ8esNz_Ej0E-WgGejfLZX33Q"">Fix in Cursor</a>

</details>

---

<details open>
<summary><h3>Bug: S3 URL Parsing Vulnerabilities</h3></summary>

The `extractS3KeyFromUrl` function contains two bugs:
1.  The host validation `parsedUrl.host.endsWith('.amazonaws.com')` is overly permissive, allowing malicious domains (e.g., `evil-amazonaws.com`) to be accepted as valid S3 URLs, posing a security risk.
2.  It can return an empty string as an S3 key for URLs ending with a slash (e.g., `https://bucket.s3.amazonaws.com/`), which are invalid S3 keys and should instead cause an error.

<p></p>

<details>
<summary><code>apps/portal/src/utils/s3.ts#L43-L48</code></summary>

https://github.com/trycompai/comp/blob/8e895dec7d9f45ed06f16f641b18f5082e6b2b14/apps/portal/src/utils/s3.ts#L43-L48

</details>

<a href=""https://cursor.com/open?data=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImJ1Z2JvdC12MSJ9.eyJ0eXBlIjoiQlVHQk9UX0ZJWF9JTl9DVVJTT1IiLCJkYXRhIjp7ImJ1ZyI6ImV5SnNiMk5oZEdsdmJuTWlPbHQ3SW1acGJHVWlPaUpoY0hCekwzQnZjblJoYkM5emNtTXZkWFJwYkhNdmN6TXVkSE1pTENKemRHRnlkRXhwYm1VaU9qUXpMQ0psYm1STWFXNWxJam8wT0N3aVkyOWtaVXhwYm1WeklqcGJYWDFkTENKcFpDSTZJamcxTjJZd09URTNMVGt6T1RNdE5EQmhPUzFpWVRBMExXVXpZMlppWW1NMU9EVmtZU0lzSW1SbGMyTnlhWEIwYVc5dUlqb2lWR2hsSUdCbGVIUnlZV04wVXpOTFpYbEdjbTl0VlhKc1lDQm1kVzVqZEdsdmJpQmpiMjUwWVdsdWN5QjBkMjhnWW5WbmN6cGNiakV1SUNCVWFHVWdhRzl6ZENCMllXeHBaR0YwYVc5dUlHQndZWEp6WldSVmNtd3VhRzl6ZEM1bGJtUnpWMmwwYUNnbkxtRnRZWHB2Ym1GM2N5NWpiMjBuS1dBZ2FYTWdiM1psY214NUlIQmxjbTFwYzNOcGRtVXNJR0ZzYkc5M2FXNW5JRzFoYkdsamFXOTFjeUJrYjIxaGFXNXpJQ2hsTG1jdUxDQmdaWFpwYkMxaGJXRjZiMjVoZDNNdVkyOXRZQ2tnZEc4Z1ltVWdZV05qWlhCMFpXUWdZWE1nZG1Gc2FXUWdVek1nVlZKTWN5d2djRzl6YVc1bklHRWdjMlZqZFhKcGRIa2djbWx6YXk1Y2JqSXVJQ0JKZENCallXNGdjbVYwZFhKdUlHRnVJR1Z0Y0hSNUlITjBjbWx1WnlCaGN5QmhiaUJUTXlCclpYa2dabTl5SUZWU1RITWdaVzVrYVc1bklIZHBkR2dnWVNCemJHRnphQ0FvWlM1bkxpd2dZR2gwZEhCek9pOHZZblZqYTJWMExuTXpMbUZ0WVhwdmJtRjNjeTVqYjIwdllDa3NJSGRvYVdOb0lHRnlaU0JwYm5aaGJHbGtJRk16SUd0bGVYTWdZVzVrSUhOb2IzVnNaQ0JwYm5OMFpXRmtJR05oZFhObElHRnVJR1Z5Y205eUxpSXNJbU52Ym1acFpHVnVZMlVpT2pBdU16WXlNemN3TURRek16WTNNakU0TXl3aVkyRjBaV2R2Y25raU9pSlRSVU5WVWtsVVdWOUpVMU5WUlNKOSIsImJyYW5jaCI6ImNvZGV4L2ZpeC11cmwtc3Vic3RyaW5nLXNhbml0aXphdGlvbi1pc3N1ZSJ9LCJpYXQiOjE3NTAwODYyOTYsImV4cCI6MTc1MDY5MTA5Nn0.VgBeeIhoWwtS5n69jO6HSdfPQvsYyZPGEbPCA5Kb9R4EVyXbBeaqLyBd3iEhQz4QREH9w9PFa7kmd1x-MkYRDetpDDQzzp6UyoEKwG05Ob6YafGFQatS52KPLaK_OyiGb6oal1XV-6dSzw3lEZ5MFcV2GDoYObilUWdFL-rSagsOtY_LzaG8LcvA1cO2s46to1Kz47fP0fU4AjgJzdDDi4Wtx4u9RdZflRkhXc_0kHhwQ5bpI8xID729JhzBsV9JBgT6Co7fUaF2TcxxjjJdNn1D80w1R4OJmsDQMnVrJckF-KLetlrgqlT2_NmPx3OsMT-7XS3AnKgNFE1oT-mFLQ"">Fix in Cursor</a>

</details>

---


**BugBot free trial expires on June 17, 2025**
You have used $0.00 of your $60.00 spend limit so far. Manage your spend limit in the [Cursor dashboard](https://cursor.com/dashboard?tab=bugbot).

_Was this report helpful? Give feedback by reacting with 👍 or 👎_
"
3150335504,2932551399,github-advanced-security[bot],COMMENTED,2025-06-16T15:12:29Z,
3150335504,2932551691,cursor[bot],COMMENTED,2025-06-16T15:12:34Z,"### ✅ BugBot reviewed your changes and found no bugs!

---

_Was this report helpful? Give feedback by reacting with 👍 or 👎_
"
3150335504,2932554825,cursor[bot],COMMENTED,2025-06-16T15:13:36Z,"### ✅ BugBot reviewed your changes and found no bugs!

---

_Was this report helpful? Give feedback by reacting with 👍 or 👎_
"
3151841469,2933963908,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-17T02:31:11Z,"## Pull Request Overview

This PR fixes the error text used in the deleteMessage function of the MessageRepository to improve clarity.
- Changed error message from ""Optimistic message not found..."" to ""Message not found...""


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**packages/react/src/runtimes/utils/MessageRepository.tsx:333**
* [nitpick] The updated error message improves clarity but consider whether additional context (like a message ID or state details) might help diagnose issues more effectively in production.
```
MessageRepository(deleteMessage): Message not found. This is likely an internal bug in assistant-ui.
```
</details>

"
3151841469,2933963829,greptile-apps[bot],COMMENTED,2025-06-17T02:31:56Z,"
## PR Summary
Updated error message text in `packages/react/src/runtimes/utils/MessageRepository.tsx` from 'Optimistic message not found' to 'Message not found' to improve accuracy since the deletion method applies to all message types.

- Modified error text in `deleteMessage` method to be more generic and accurate by removing the 'Optimistic' qualifier
- Maintains existing error pattern with 'This is likely an internal bug in assistant-ui' suffix
- Change improves code clarity by using more precise error messaging

<sub>1 file reviewed, no comments</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=assistant-ui_2119)</sub>"
3151841469,2933965039,cubic-dev-ai[bot],COMMENTED,2025-06-17T02:32:17Z,cubic reviewed 1 file and found no issues. Review PR in [cubic.dev](https://cubic.dev/pr/assistant-ui/assistant-ui/pull/2119).
3119688458,2903188262,graphite-app[bot],COMMENTED,2025-06-06T00:17:24Z,
3119688458,2903195614,graphite-app[bot],COMMENTED,2025-06-06T00:19:29Z,
3119688458,2903492131,graphite-app[bot],COMMENTED,2025-06-06T03:25:45Z,
3119688458,2903714627,graphite-app[bot],COMMENTED,2025-06-06T04:42:52Z,
3119688458,2903755411,graphite-app[bot],COMMENTED,2025-06-06T04:45:20Z,
3119688458,2903808461,graphite-app[bot],COMMENTED,2025-06-07T02:10:10Z,
3119688458,2906746176,graphite-app[bot],COMMENTED,2025-06-07T12:26:40Z,
3119688458,2914847835,graphite-app[bot],COMMENTED,2025-06-10T19:40:40Z,
3119688458,2914911573,graphite-app[bot],COMMENTED,2025-06-10T21:51:12Z,
3119688458,2915474333,dylan-conway,APPROVED,2025-06-11T02:40:40Z,
3159916588,2942552601,sanjushahgupta,APPROVED,2025-06-19T11:09:57Z,
3159916588,2942561166,terzioglub,APPROVED,2025-06-19T11:13:35Z,
3071123087,2945125989,hangy,APPROVED,2025-06-20T09:02:38Z,
3077558416,2854833881,ellipsis-dev[bot],COMMENTED,2025-05-20T16:13:37Z,"> [!CAUTION]
> **Changes requested  :x:**
> <details>
> <summary>Reviewed everything up to e0009d59025e5cc5623415f281ef126ab7631ab1 in <ellipsistime>2 minutes and 45 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `115` lines of code in `2` files
> - Skipped `0` files when reviewing.
> - Skipped posting `4` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>memory-store/migrations/000043_session_lookup_party_model.down.sql:38</code></summary>
> 
> - **Draft comment:** 
> The INSERT into 'doc_owners' pulls data from 'document_owners'. Ensure the source table 'document_owners' exists in the target schema, or this step may fail.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment is asking the PR author to ensure that a table exists, which is similar to asking them to double-check something. This violates the rule against asking the author to confirm or ensure things. The comment does not provide a specific code suggestion or ask for a specific test to be written.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>memory-store/migrations/000043_session_lookup_party_model.up.sql:1</code></summary>
> 
> - **Draft comment:** 
> Consider wrapping all migration statements in a transaction block to ensure atomicity and rollback safety in case of errors.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>memory-store/migrations/000043_session_lookup_party_model.up.sql:6</code></summary>
> 
> - **Draft comment:** 
> Ensure that the join columns (developer_id and user_id/agent_id) are properly indexed to optimize the update queries on large tables.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>memory-store/migrations/000043_session_lookup_party_model.up.sql:48</code></summary>
> 
> - **Draft comment:** 
> Renaming 'file_owners_party' to 'file_owners' here may conflict with the down migration logic that expects 'file_owners_party'. Ensure consistent table naming for easy reversibility.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 20% vs. threshold = 50% This is a speculative comment about what might happen in the down migration. Without seeing the down migration file, we can't verify if this is actually an issue. The comment is asking the author to ""ensure"" something, which violates our rules. It's making assumptions about migration reversibility requirements that may not be valid. The comment could be raising a legitimate concern about migration reversibility. Database migrations often need careful handling of renames. While migration reversibility is important, this comment is speculative without seeing the down migration, and asks for verification rather than pointing out a concrete issue. Delete this comment as it's speculative, asks for verification, and requires context we don't have to validate the concern.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_QizU0qcSfCSUu1zU`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3135348301,2922822334,dgirardi,APPROVED,2025-06-12T22:40:13Z,
3116487130,2895271183,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-04T05:28:44Z,"## Pull Request Overview

This PR replaces the manual QR code generation with the new `cuer` library and cleans up dependencies.

- Swap out custom SVG dot logic and `qrcode` utility for `<Cuer>` component  
- Introduce an `ErrorCorrectionLevel` union type and a mapper helper  
- Update `package.json` to remove `qrcode` and add `cuer`

### Reviewed Changes

Copilot reviewed 2 out of 3 changed files in this pull request and generated 1 comment.

| File                                             | Description                                                            |
| ------------------------------------------------ | ---------------------------------------------------------------------- |
| packages/rainbowkit/src/components/QRCode/QRCode.tsx | Replaced manual matrix/SVG dot rendering with `<Cuer>` and mapped props |
| packages/rainbowkit/package.json                 | Removed `qrcode` and its types, added `cuer` dependency                |

<details>
<summary>Files not reviewed (1)</summary>

* **pnpm-lock.yaml**: Language not supported
</details>

<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**packages/rainbowkit/src/components/QRCode/QRCode.tsx:27**
* [nitpick] The helper function `mapErrorCorrection` could be renamed to `mapToCuerErrorCorrection` to clarify that it maps internal error levels to Cuer's expected values.
```
function mapErrorCorrection(
```
**packages/rainbowkit/src/components/QRCode/QRCode.tsx:48**
* The new conditional arena rendering for the logo is not covered by existing tests. Consider adding unit tests to verify that the logo appears correctly when `logoUrl` is provided and is omitted otherwise.
```
const arena = logoUrl ? (
```
</details>

"
3159305613,2941926659,greptile-apps[bot],COMMENTED,2025-06-19T07:36:31Z,"
## PR Summary
Enhances markdown component memoization in the react-markdown package to prevent unnecessary re-renders and improve performance.

- Added type and tagName comparisons in `areNodesEqual` for more accurate node matching in `packages/react-markdown/src/memoization.tsx`
- Implemented property sanitization by removing position data from node comparison to prevent irrelevant re-renders
- Added comprehensive test suite in `packages/react-markdown/src/memoization.test.tsx` to validate node comparison logic
- Introduced Vitest configuration in `packages/react-markdown/vitest.config.ts` for testing infrastructure

<sub>4 files reviewed, 1 comment</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=assistant-ui_2131)</sub>"
3159305613,2941930812,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-19T07:37:22Z,"## Pull Request Overview

This PR refines the memoization logic for React Markdown nodes by factoring in element type and tag name, stripping out non-essential properties before comparison, and bolstering test coverage.

- Added Vitest configuration and test scripts
- Enhanced `areNodesEqual` to early-exit on type/tag mismatches and sanitize properties
- Introduced unit tests for `areNodesEqual`

### Reviewed Changes

Copilot reviewed 4 out of 5 changed files in this pull request and generated 2 comments.

| File                                      | Description                                                      |
| ----------------------------------------- | ---------------------------------------------------------------- |
| packages/react-markdown/vitest.config.ts  | Added Vitest setup for running `.test.tsx` files in Node env     |
| packages/react-markdown/src/memoization.tsx | Updated node comparison: check `type`/`tagName`, strip `position` |
| packages/react-markdown/src/memoization.test.tsx | New tests for undefined nodes, type/tag mismatches, props, children |
| packages/react-markdown/package.json      | Added `test` scripts and `vitest` dependency                     |

<details>
<summary>Files not reviewed (1)</summary>

* **pnpm-lock.yaml**: Language not supported
</details>

<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**packages/react-markdown/src/memoization.test.tsx:13**
* [nitpick] It may help to add a positive test case verifying that two identical nodes (same type, tagName, properties, and children) return `true` to cover the standard equality path.
```
describe(""areNodesEqual"", () => {
```
</details>

"
3159305613,2941936871,coderabbitai[bot],COMMENTED,2025-06-19T07:39:17Z,"**Actionable comments posted: 1**

<details>
<summary>🧹 Nitpick comments (3)</summary><blockquote>

<details>
<summary>packages/react-markdown/src/memoization.test.tsx (2)</summary><blockquote>

`22-22`: **Improve type safety by avoiding 'as any' casting.**

Consider creating a proper type for text nodes instead of using `as any`.


```diff
-    expect(areNodesEqual(base, { ...base, type: ""text"" as any })).toBe(false);
+    expect(areNodesEqual(base, { ...base, type: ""text"" })).toBe(false);
```

You may need to adjust the Element type or create a union type that includes text nodes.

---

`32-34`: **Improve type safety for test node creation.**

The `as any` casting for children could be avoided with better typing.


```diff
-    const prev = createNode({ children: [{ type: ""text"", value: ""a"" }] as any });
-    const next = createNode({ children: [{ type: ""text"", value: ""b"" }] as any });
+    const prev = createNode({ children: [{ type: ""text"", value: ""a"" }] });
+    const next = createNode({ children: [{ type: ""text"", value: ""b"" }] });
```

Consider extending the Element type or creating a union type that properly handles text nodes.

</blockquote></details>
<details>
<summary>packages/react-markdown/src/memoization.tsx (1)</summary><blockquote>

`28-31`: **Consider making the sanitize function more robust.**

The current implementation handles the common case well, but could be more defensive against edge cases.


```diff
-  const sanitize = (props: Element[""properties""]) => {
-    const { position, ...rest } = (props as Record<string, unknown>) || {};
-    return rest;
-  };
+  const sanitize = (props: Element[""properties""]) => {
+    if (!props) return {};
+    const { position, ...rest } = props as Record<string, unknown>;
+    return rest;
+  };
```

This change provides clearer handling when properties is undefined.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 27a771cd664badbe11ba6a4c11535ef6a97ce2d8 and e617f881dc0162b01e4e3277dc1a0737c703f6a2.

</details>

<details>
<summary>⛔ Files ignored due to path filters (1)</summary>

* `pnpm-lock.yaml` is excluded by `!**/pnpm-lock.yaml`

</details>

<details>
<summary>📒 Files selected for processing (4)</summary>

* `packages/react-markdown/package.json` (2 hunks)
* `packages/react-markdown/src/memoization.test.tsx` (1 hunks)
* `packages/react-markdown/src/memoization.tsx` (1 hunks)
* `packages/react-markdown/vitest.config.ts` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 GitHub Actions: Code Quality</summary>

<details>
<summary>packages/react-markdown/src/memoization.test.tsx</summary>

[error] 1-1: Prettier formatting check failed. Run 'prettier --write' to fix code style issues.

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (1)</summary>

* GitHub Check: Analyze (javascript-typescript)

</details>

<details>
<summary>🔇 Additional comments (7)</summary><blockquote>

<details>
<summary>packages/react-markdown/vitest.config.ts (1)</summary>

`1-10`: **LGTM! Clean and appropriate Vitest configuration.**

The configuration properly sets up the Node environment, specifies the correct test file patterns, and enables globals for a seamless testing experience.

</details>
<details>
<summary>packages/react-markdown/src/memoization.test.tsx (1)</summary>

`13-36`: **Excellent test coverage for the areNodesEqual function.**

The test suite comprehensively covers all the key scenarios:
- Undefined node handling
- Type and tagName comparison
- Position property sanitization
- Children differences

This provides good confidence in the memoization improvements.

</details>
<details>
<summary>packages/react-markdown/package.json (2)</summary>

`28-29`: **LGTM! Appropriate test scripts added.**

The test scripts follow standard conventions with both single-run and watch modes.

---

`57-57`: **Verify Vitest version for security and compatibility.**

Please ensure this version is secure and compatible with your project requirements.


```web
What is the latest stable version of Vitest and are there any known security vulnerabilities in version 3.2.3?
```

</details>
<details>
<summary>packages/react-markdown/src/memoization.tsx (3)</summary>

`25-26`: **Excellent addition of explicit type and tagName checks.**

These explicit comparisons improve the accuracy of node equality detection and make the logic more robust.

---

`33-37`: **Solid implementation of the improved comparison logic.**

The sanitized property comparison effectively ignores positional metadata while maintaining accurate equality detection. The combination with children comparison provides comprehensive node equality checking.

---

`19-38`: **Great improvement to memoization accuracy!**

The enhanced `areNodesEqual` function successfully addresses the PR objectives by:
- Adding explicit type and tagName validation
- Sanitizing properties to ignore position metadata
- Maintaining robust children comparison

This will prevent unnecessary re-renders caused by irrelevant positional differences.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3159305613,2942214755,AVGVSTVS96,COMMENTED,2025-06-19T09:12:15Z,
3098924861,2876825736,Jarred-Sumner,COMMENTED,2025-05-29T01:48:52Z,
3098924861,2876892450,Jarred-Sumner,COMMENTED,2025-05-29T02:48:58Z,
3098924861,2877085536,nektro,COMMENTED,2025-05-29T05:19:03Z,"given the readStart comment and there being a comment in the node source that this is a private api, we might want to hold off on this just a bit longer"
3073780610,2850699391,ellipsis-dev[bot],COMMENTED,2025-05-19T13:04:30Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 022f8ee5c66b6a635f0a3a6e93cbec5ee2822de1 in <ellipsistime>52 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `34` lines of code in `3` files
> - Skipped `0` files when reviewing.
> - Skipped posting `3` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>agents-api/agents_api/queries/AGENTS.md:11</code></summary>
> 
> - **Draft comment:** 
> Added AIDEV-NOTE guideline to clarify module purpose. Ensure this note is maintained consistently across all query modules.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>agents-api/agents_api/queries/sessions/count_sessions.py:2</code></summary>
> 
> - **Draft comment:** 
> The AIDEV-NOTE now indicates the function returns a single integer. Confirm that after all decorator transformations the final result matches this description.
> - **Reason this comment was not posted:**
> Confidence changes required: `50%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>agents-api/agents_api/queries/sessions/create_session.py:2</code></summary>
> 
> - **Draft comment:** 
> AIDEV-NOTE addition clearly outlines the module’s purpose. Verify that the note remains aligned with any future changes in the returned session object.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_I4JXckZTpf9lSLEf`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3091741548,2868929049,jomido,APPROVED,2025-05-26T17:27:09Z,
3091741548,2868929619,ellipsis-dev[bot],COMMENTED,2025-05-26T17:27:39Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to f7470338f48d8fc0728b78f27638d6e0ec562dd6 in <ellipsistime>50 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `37` lines of code in `2` files
> - Skipped `0` files when reviewing.
> - Skipped posting `3` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern-frontend/src/routes/workflows/WorkflowRun.tsx:262</code></summary>
> 
> - **Draft comment:** 
> Ensure the empty string fallback for webhookCallbackUrl is intentional. Consider using null if no URL is provided and verify downstream components handle this value correctly.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>skyvern-frontend/src/routes/workflows/WorkflowRunParameters.tsx:34</code></summary>
> 
> - **Draft comment:** 
> Consider destructuring location.state or adding type guards to avoid repetitive null checks. Casting location.state.webhookCallbackUrl as string without validation may lead to runtime issues if state structure is unexpected.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>skyvern-frontend/src/routes/workflows/WorkflowRunParameters.tsx:110</code></summary>
> 
> - **Draft comment:** 
> Double-check the fallback order for webhookCallbackUrl. Verify that using the value from state, then workflow.webhook_callback_url, and finally an empty string, meets the expected behavior and type consistency.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_tfOmlJxZ8YwI8p2R`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3091741548,2868929707,ellipsis-dev[bot],COMMENTED,2025-05-26T17:27:43Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed f7470338f48d8fc0728b78f27638d6e0ec562dd6 in <ellipsistime>56 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `37` lines of code in `2` files
> - Skipped `0` files when reviewing.
> - Skipped posting `3` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern-frontend/src/routes/workflows/WorkflowRun.tsx:262</code></summary>
> 
> - **Draft comment:** 
> Ensure that using an empty string as the fallback for webhookCallbackUrl is the intended behavior. This preserves the callback URL correctly, but double‐check if a null value might be more appropriate in some cases.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>skyvern-frontend/src/routes/workflows/WorkflowRunParameters.tsx:34</code></summary>
> 
> - **Draft comment:** 
> Consider defining a TypeScript interface for location.state to ensure type safety for webhookCallbackUrl (and proxyLocation).
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>skyvern-frontend/src/routes/workflows/WorkflowRunParameters.tsx:110</code></summary>
> 
> - **Draft comment:** 
> The fallback chain (webhookCallbackUrl ?? workflow.webhook_callback_url ?? """") in initialSettings is clear. Confirm that this priority order covers all intended scenarios.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_pCCnyWcQO0rgin10`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3121902962,2906577580,ChrisHuie,APPROVED,2025-06-07T02:10:26Z,
3132034121,2923372112,devgony,APPROVED,2025-06-13T04:19:33Z,
3123553761,2905958864,stephanos,COMMENTED,2025-06-06T19:25:02Z,
3123553761,2937254418,stephanos,COMMENTED,2025-06-17T22:36:05Z,
3123553761,2937401715,ychebotarev,APPROVED,2025-06-18T00:37:05Z,
3123553761,2937689763,ychebotarev,APPROVED,2025-06-18T04:28:52Z,
3074376887,2864316409,ellipsis-dev[bot],COMMENTED,2025-05-23T12:53:26Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 1cde02ebe7d53862eb5acbc3d2d666fe960c0bcd in <ellipsistime>1 minute and 2 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `35` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>agents-api/agents_api/web.py:19</code></summary>
> 
> - **Draft comment:** 
> Import update looks correct. Ensure that BadRequestError is not a subclass of APIError, or if it is, that the specific handler takes precedence over the general APIError handler.
> - **Reason this comment was not posted:**
> Comment looked like it was already resolved.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>agents-api/agents_api/web.py:443</code></summary>
> 
> - **Draft comment:** 
> The new exception handler for BadRequestError is properly implemented. Consider adding logging for the exception to aid in debugging.
> - **Reason this comment was not posted:**
> Confidence changes required: `50%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_FXAZwEi0C6zIZtvt`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3071083616,2849034294,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-18T16:13:00Z,"## Pull Request Overview

This PR replaces SQLite with DuckDB as the default database backend, updating configuration, indexing logic, tests, and documentation accordingly.  
- Switch default DB URL and dependencies from SQLite to DuckDB across code, docs, and tests  
- Refactor `create_database_engine` to install DuckDB extensions (FTS & VSS) and manage FTS/VSS indexes  
- Update search and insert routines to use DuckDB’s native FTS and HNSW vector search APIs

### Reviewed Changes

Copilot reviewed 17 out of 17 changed files in this pull request and generated 3 comments.

<details>
<summary>Show a summary per file</summary>

| File                             | Description                                                      |
| -------------------------------- | ---------------------------------------------------------------- |
| tests/test_search.py             | Updated tests to use `duckdb:///:memory:` URLs                   |
| tests/test_database.py           | Added DuckDB engine creation tests                              |
| tests/conftest.py                | Renamed fixtures from SQLite to DuckDB and updated URL logic    |
| src/raglite/_typing.py           | Refactored embedding comparator to use SQLAlchemy `FunctionElement` and added DistanceMetric |
| src/raglite/_search.py           | Unified vector search; added DuckDB BM25 keyword query           |
| src/raglite/_insert.py           | Added manual DuckDB FTS index update after document insertion   |
| src/raglite/_database.py         | Overhauled engine creation for DuckDB: extension loading and index setup |
| src/raglite/_config.py           | Changed default `db_url` to DuckDB and expanded index metric options |
| pyproject.toml                   | Switched description and added `duckdb` & `duckdb-engine` deps  |
| README.md                        | Updated documentation to reference DuckDB instead of SQLite      |
| Dockerfile                       | Configured clang as default compiler for macOS Dev Containers    |
</details>



<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**tests/test_insert.py:43**
* Calling `"""".join` on a string will iterate over each character rather than join chunks. You can remove this join and use the accumulated string directly, or build a list of chunk bodies and join that list.
```
restored_document = """".join(restored_document)
```
**src/raglite/_search.py:95**
* The variable `db_backend` is no longer defined in this function, leading to a NameError. You should reintroduce or recompute `db_backend = make_url(config.db_url).get_backend_name()` before this conditional.
```
elif db_backend == ""duckdb"":
```
</details>

"
3071083616,2849050035,lsorber,COMMENTED,2025-05-18T17:33:06Z,
3071083616,2849050201,lsorber,COMMENTED,2025-05-18T17:34:04Z,
3071083616,2849050238,lsorber,COMMENTED,2025-05-18T17:34:18Z,
3071083616,2850246923,ThomasDelsart,COMMENTED,2025-05-19T10:22:44Z,
3071083616,2850249849,ThomasDelsart,COMMENTED,2025-05-19T10:23:50Z,
3071083616,2850275283,lsorber,COMMENTED,2025-05-19T10:33:04Z,
3157563491,2940010338,coderabbitai[bot],CHANGES_REQUESTED,2025-06-18T16:46:34Z,"**Actionable comments posted: 1**

<details>
<summary>🧹 Nitpick comments (4)</summary><blockquote>

<details>
<summary>AGENTS.md (4)</summary><blockquote>

`1-4`: **Include repository context in the header**  
The title “Codex Agent Guidelines” is generic—consider prefixing with the repo name (e.g. “Cloud Posse Atmos Agent Guidelines”) so it’s clear which project it applies to.

---

`7-7`: **Document lint configuration**  
`make lint` fails without a config file. Please reference or include the required lint config (e.g. `.golangci.yml`) so contributors can run it locally.

---

`8-8`: **Normalize spelling to match repo conventions**  
The word “behaviour” is British English. If the rest of the repo uses American English, change it to “behavior” for consistency.

---

`10-12`: **Link directly to the PR template**  
Rather than just naming the file, add a relative link to `.github/PULL_REQUEST_TEMPLATE.md` or summarize the required sections (what/why, test plan, etc.) to make adoption smoother.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 80f5f5ceeeb11e09e38e246f8139ad30cbd4ddae and 9fbf27eb86dcdd32c88de45a15592480fc236c01.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `AGENTS.md` (1 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (12)</summary>

* GitHub Check: Analyze (go)
* GitHub Check: Analyze (javascript-typescript)
* GitHub Check: Lint (golangci)
* GitHub Check: Build (ubuntu-latest, linux)
* GitHub Check: Build (windows-latest, windows)
* GitHub Check: Build (macos-latest, macos)
* GitHub Check: Lint (golangci)
* GitHub Check: Analyze (go)
* GitHub Check: Analyze (go)
* GitHub Check: Lint (golangci)
* GitHub Check: autofix
* GitHub Check: Summary

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3157563491,2940047079,coderabbitai[bot],APPROVED,2025-06-18T16:59:57Z,
3146266154,2928458221,themisvaltinos,APPROVED,2025-06-14T15:33:55Z,
3161777718,2944425108,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-20T03:02:15Z,"## Pull Request Overview

This PR adds regression tests to ensure that the CSRF middleware correctly warns when an unsupported cookie SameSite value is used and that token deletion works across both session and storage branches.
- Added a test (Test_configDefault_WarnCookieSameSite) to verify that a warning is logged when using CookieSameSite ""None"".
- Added a test (Test_deleteTokenFromStorage) that confirms token deletion functionality for both session and storage implementations.



"
3161777718,2944425172,gemini-code-assist[bot],COMMENTED,2025-06-20T03:02:20Z,"## Summary of Changes

Hello @gaby, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request primarily focuses on enhancing the test coverage for the CSRF middleware. It introduces new regression tests that validate critical aspects of CSRF token management, specifically ensuring that appropriate warnings are issued for potentially insecure cookie configurations and confirming the robust functionality of token deletion across various storage types.

### Highlights

* **CSRF Cookie SameSite Warning Test**: I've added a new test case (`Test_configDefault_WarnCookieSameSite`) to ensure that a warning is logged when the CSRF cookie's `SameSite` attribute is set to 'None' while the `KeyLookup` is configured to use a cookie. This configuration is generally not recommended for security, and the test verifies that the system correctly alerts developers to this potential issue.
* **CSRF Token Deletion Test**: I've implemented a new test (`Test_deleteTokenFromStorage`) to verify the correct behavior of the `deleteTokenFromStorage` function. This test ensures that the function properly handles CSRF token deletion from both session-based and general storage mechanisms, covering different scenarios for token invalidation.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configure Gemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3161777718,2944426303,gemini-code-assist[bot],COMMENTED,2025-06-20T03:03:20Z,"## Code Review

The pull request adds two valuable regression tests for the CSRF middleware. `Test_configDefault_WarnCookieSameSite` correctly verifies the logging of warnings for specific cookie configurations. `Test_deleteTokenFromStorage` thoroughly checks token deletion logic for both session-based and direct storage mechanisms. The tests are well-written, clear, and effectively cover the intended scenarios. No issues of medium or higher severity were found."
3161777718,2944438385,github-actions[bot],COMMENTED,2025-06-20T03:14:12Z,"<!-- github-benchmark-action-comment(start): Benchmark Alert -->
# :warning: **Performance Alert** :warning:

Possible performance regression was detected for benchmark.
Benchmark result of this commit is worse than the previous benchmark result exceeding threshold `1.50`.

| Benchmark suite | Current: c385b2e024e274d9f4518ec1e95ea2229b4e2400 | Previous: 3b2af61152d0dc9bb75bd9451e506274266b638e | Ratio |
|-|-|-|-|
| `Benchmark_Ctx_SendString_B` | `16.87` ns/op	       0 B/op	       0 allocs/op | `9.364` ns/op	       0 B/op	       0 allocs/op | `1.80` |
| `Benchmark_Ctx_SendString_B - ns/op` | `16.87` ns/op | `9.364` ns/op | `1.80` |

This comment was automatically generated by [workflow](https://github.com/gofiber/fiber/actions?query=workflow%3ABenchmark) using [github-action-benchmark](https://github.com/marketplace/actions/continuous-benchmark).
<!-- github-benchmark-action-comment(end): Benchmark Alert -->"
3161777718,2944764475,ReneWerner87,APPROVED,2025-06-20T06:47:51Z,
3071443553,2848735862,sourcery-ai[bot],COMMENTED,2025-05-18T05:49:14Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3142623985,2923812500,kolaente,COMMENTED,2025-06-13T08:17:39Z,
3116167999,2894905370,rm-openai,COMMENTED,2025-06-04T03:20:00Z,
3116167999,2897086211,pakrym-oai,APPROVED,2025-06-04T14:52:24Z,
3165466021,2948001557,batikankarakan,APPROVED,2025-06-21T22:22:09Z,
3125675582,2905959455,greptile-apps[bot],COMMENTED,2025-06-06T19:26:03Z,"
## PR Summary

Adds comprehensive pagination support to the ClickHouse store, enabling efficient retrieval of large datasets through paginated endpoints for threads, messages, traces, and evaluations.

- Added `getThreadsByResourceIdPaginated` with optimized index usage through `createdAt`-based sorting
- Exposed standardized `PaginationArgs` and `PaginationInfo` types for consistent pagination interfaces
- Included total count calculations in pagination metadata for better client-side pagination handling
- Implemented date range filtering support for more granular data retrieval

<sub>1 file(s) reviewed, no comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=mastra_4793)</sub>"
3086827583,2864923696,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-23T15:57:08Z,"## Pull Request Overview

This PR improves error reporting when parsing environment settings by including the setting name in error messages.  
- Passes the setting name to the parse function  
- Updates error messages to display the involved setting name



"
3078444990,2855804965,typpo,DISMISSED,2025-05-20T23:26:00Z,
3078444990,2855845562,typpo,COMMENTED,2025-05-20T23:53:30Z,Can we just call it simulated-user and not tau?  like the plugin
3078444990,2947211960,coderabbitai[bot],COMMENTED,2025-06-20T20:24:39Z,"**Actionable comments posted: 4**

<details>
<summary>📜 Review details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: ASSERTIVE**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between fca9846ffbed15858ffd80a8b2e164148ac87c6a and 02d48611b3ac6d2d5b13cdd4125eebee0ad5c4fb.

</details>

<details>
<summary>📒 Files selected for processing (18)</summary>

* `site/docs/_shared/data/strategies.ts` (1 hunks)
* `site/docs/guides/chatbase-redteam.md` (1 hunks)
* `site/docs/red-team/agents.md` (1 hunks)
* `site/docs/red-team/strategies/index.md` (1 hunks)
* `site/docs/red-team/strategies/multi-turn.md` (3 hunks)
* `site/docs/red-team/strategies/simulated-user.md` (1 hunks)
* `site/static/config-schema.json` (2 hunks)
* `src/app/src/pages/redteam/setup/components/strategies/utils.ts` (2 hunks)
* `src/providers/registry.ts` (3 hunks)
* `src/redteam/constants/metadata.ts` (5 hunks)
* `src/redteam/constants/strategies.ts` (2 hunks)
* `src/redteam/providers/simulatedUser.ts` (1 hunks)
* `src/redteam/strategies/index.ts` (3 hunks)
* `src/redteam/strategies/simulatedUser.ts` (1 hunks)
* `test/providers/registry.test.ts` (1 hunks)
* `test/redteam/constants/strategies.test.ts` (2 hunks)
* `test/redteam/strategies/simulatedUser.test.ts` (1 hunks)
* `test/redteam/strategies/strategyId.test.ts` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 LanguageTool</summary>

<details>
<summary>site/docs/red-team/strategies/simulated-user.md</summary>

[uncategorized] ~23-~23: Possible missing comma found.
Context: ...ops when the maximum number of turns is reached or the agent responds with `###STOP###`...

(AI_HYDRA_LEO_MISSING_COMMA)

</details>

</details>
<details>
<summary>🪛 markdownlint-cli2 (0.17.2)</summary>

<details>
<summary>site/docs/red-team/strategies/simulated-user.md</summary>

7-7: Multiple top-level headings in the same document
null

(MD025, single-title, single-h1)

</details>

</details>

</details>

<details>
<summary>🔇 Additional comments (34)</summary><blockquote>

<details>
<summary>test/providers/registry.test.ts (1)</summary>

`165-165`: **Register simulated-user in redteamPaths**  
The new `'promptfoo:redteam:simulated-user'` entry ensures the simulated-user provider is recognized by the registry.

</details>
<details>
<summary>test/redteam/strategies/strategyId.test.ts (1)</summary>

`97-97`: **Map `simulated-user` to its implementation file**  
The `'simulated-user': 'simulatedUser.ts'` entry aligns the strategy ID with the correct filename.

</details>
<details>
<summary>src/app/src/pages/redteam/setup/components/strategies/utils.ts (2)</summary>

`2-2`: **Import new strategy constant**  
Bringing in `REDTEAM_SIMULATED_USER_STRATEGY_ID` allows the probe‐multiplier mapping to include the new strategy.

---

`39-39`: **Add probe multiplier for simulated-user**  
Assigning multiplier `5` is consistent with other multi‐turn strategies like `goat`.

</details>
<details>
<summary>site/docs/red-team/strategies/index.md (1)</summary>

`101-101`: **Include `simulated-user` in recommended multi-turn strategies**  
The example now lists `simulated-user` alongside `goat` and `crescendo`.

</details>
<details>
<summary>site/docs/guides/chatbase-redteam.md (1)</summary>

`90-92`: **Add `simulated-user` example to Chatbase config**  
The YAML snippet correctly demonstrates how to enable the new strategy with `stateful: true`.

</details>
<details>
<summary>site/docs/red-team/agents.md (1)</summary>

`106-106`: **LGTM! Appropriate strategy addition for memory poisoning detection.**

The inclusion of `simulated-user` strategy in the memory poisoning detection configuration is well-placed, as memory poisoning vulnerabilities are particularly relevant in multi-turn conversation scenarios.

</details>
<details>
<summary>site/docs/red-team/strategies/multi-turn.md (3)</summary>

`20-20`: **LGTM! Consistent strategy addition.**

The `simulated-user` strategy is appropriately added to the strategies list alongside `crescendo`.

---

`32-34`: **LGTM! Clear configuration example.**

The configuration example for `simulated-user` follows the established pattern with appropriate `maxTurns` parameter documentation.

---

`80-80`: **LGTM! Proper cross-reference documentation.**

The reference to ""Simulated User Strategy"" provides helpful context linking to detailed documentation.

</details>
<details>
<summary>test/redteam/constants/strategies.test.ts (1)</summary>

`29-29`: **LGTM! Consistent test constant updates.**

The addition of `'simulated-user'` to the expected arrays (`MULTI_TURN_STRATEGIES`, `AGENTIC_STRATEGIES`, and `ADDITIONAL_STRATEGIES`) properly reflects the strategy's characteristics and maintains test coverage for the strategy constants.



Also applies to: 36-36, 67-67

</details>
<details>
<summary>site/static/config-schema.json (2)</summary>

`1493-1493`: **LGTM! Schema enum update for new strategy.**

The addition of `""simulated-user""` to the enum correctly enables validation for the new strategy in configuration files.

---

`1522-1522`: **LGTM! Schema description update.**

The description properly includes `simulated-user` in the list of supported strategies, maintaining consistency with the enum values.

</details>
<details>
<summary>src/redteam/strategies/simulatedUser.ts (3)</summary>

`1-3`: **LGTM: Clean imports and dependencies.**

The imports are properly structured with the correct type definition and strategy constant.

---

`4-8`: **LGTM: Well-defined function signature.**

The function signature is clear with appropriate TypeScript types for all parameters.

---

`9-27`: **LGTM: Solid implementation with proper immutability.**

The function correctly:
- Uses immutable mapping to transform test cases
- Properly spreads existing test case properties
- Adds provider configuration with the correct ID format
- Handles optional assertions safely with conditional chaining
- Extends metadata appropriately

The logic is sound and follows functional programming best practices.

</details>
<details>
<summary>site/docs/red-team/strategies/simulated-user.md (3)</summary>

`1-6`: **LGTM: Proper documentation frontmatter.**

The frontmatter is correctly structured with appropriate metadata for the documentation system.

---

`9-24`: **LGTM: Clear implementation documentation.**

The implementation section provides:
- Good contextual reference to Tau-bench
- Clear configuration example
- Proper explanation of the strategy behavior including termination conditions

The YAML configuration example is accurate and matches the implementation.

---

`25-32`: **LGTM: Comprehensive related concepts section.**

The related concepts section provides good cross-references to similar strategies and the underlying provider documentation.

</details>
<details>
<summary>src/redteam/constants/strategies.ts (4)</summary>

`11-12`: **LGTM: Consistent constant definition.**

The constant is well-named following the existing pattern and uses the appropriate string value.

---

`16-21`: **LGTM: Proper categorization in multi-turn strategies.**

The simulated user strategy is correctly categorized as a multi-turn strategy, which aligns with its functionality of conducting multi-turn conversations.

---

`23-31`: **LGTM: Appropriate inclusion in agentic strategies.**

The strategy is correctly included in agentic strategies since it involves an agent conducting multi-turn conversations with the target system.

---

`46-73`: **LGTM: Consistent placement in additional strategies.**

The constant is properly placed in the ADDITIONAL_STRATEGIES array in alphabetical order, maintaining consistency with the existing organization.

</details>
<details>
<summary>src/redteam/strategies/index.ts (3)</summary>

`9-9`: **LGTM: Clean import of strategy constant.**

The import of the strategy constant follows the established pattern and is properly organized with other imports.

---

`31-31`: **LGTM: Proper import of strategy function.**

The import of the `addSimulatedUser` function is correctly placed and follows the alphabetical ordering pattern.

---

`115-123`: **LGTM: Well-implemented strategy integration.**

The strategy object is properly structured with:
- Correct use of the strategy constant for the ID
- Consistent async action function signature
- Appropriate debug logging that matches the pattern of other strategies
- Proper function call to `addSimulatedUser`

The implementation follows the established patterns perfectly.

</details>
<details>
<summary>site/docs/_shared/data/strategies.ts (1)</summary>

`138-147`: **LGTM: Comprehensive strategy metadata.**

The strategy metadata is well-structured with:
- Correct categorization as ""Multi-turn"" 
- Appropriate cost rating of ""High"" consistent with other multi-turn strategies
- Reasonable ASR increase estimate of ""60-80%"" that aligns with similar strategies
- Clear and descriptive display name and descriptions
- Proper documentation link

The metadata accurately represents the strategy's characteristics and follows the established patterns.

</details>
<details>
<summary>src/redteam/constants/metadata.ts (2)</summary>

`3-3`: **LGTM!**

The import of `REDTEAM_SIMULATED_USER_STRATEGY_ID` follows the established pattern and ensures consistent usage of the strategy identifier across the codebase.

---

`34-34`: **Comprehensive metadata integration looks good.**

The simulated user strategy has been consistently added to all relevant metadata mappings with appropriate descriptions:
- Clear subcategory description emphasizing multi-turn conversations
- Consistent display names across different contexts
- Detailed strategy description explaining the multi-turn conversation approach

All entries follow the established patterns and provide accurate information about the new strategy.



Also applies to: 165-165, 665-665, 703-703

</details>
<details>
<summary>src/providers/registry.ts (2)</summary>

`5-5`: **Import statements are properly positioned.**

The imports for `REDTEAM_SIMULATED_USER_STRATEGY_ID` and `RedteamSimulatedUserProvider` are correctly placed alongside other redteam imports and follow the established patterns in the file.



Also applies to: 15-15

---

`1033-1043`: **Provider factory implementation follows established patterns.**

The simulated user provider factory entry is correctly implemented:
- Uses the strategy constant to construct the provider path consistently
- Follows the same structure as other redteam provider factories
- Properly instantiates the provider with the configuration

The implementation ensures the provider can be resolved and created through the standard provider registry mechanism.

</details>
<details>
<summary>src/redteam/providers/simulatedUser.ts (3)</summary>

`1-10`: **Imports are well-organized and complete.**

All imported dependencies are appropriately used in the implementation:
- `SimulatedUser` for delegation
- Type imports for proper typing
- `invariant` for configuration validation
- Strategy constant for consistent identification

---

`24-26`: **ID method correctly follows established patterns.**

The `id()` method properly constructs the provider identifier using the strategy constant, ensuring consistency with other redteam providers in the registry.

---

`28-42`: **CallApi method implements clean delegation pattern.**

The implementation correctly:
- Creates a `SimulatedUser` instance with proper configuration
- Uses template injection syntax (`{{${this.injectVar}}}`) for dynamic instruction injection
- Delegates the API call while maintaining the provider contract
- Passes through all parameters appropriately

The delegation pattern allows leveraging the existing `SimulatedUser` functionality while providing the redteam-specific interface.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3078444990,2955428565,sklein12,CHANGES_REQUESTED,2025-06-24T21:36:16Z,"1. Needs to show the stateful configuration UI
2. Needs to support stateful true/false
3. Needs to support sessionIds"
3078444990,2962731249,sklein12,COMMENTED,2025-06-26T16:29:14Z,
3078444990,2962738165,sklein12,COMMENTED,2025-06-26T16:31:55Z,
3078444990,2962764793,will-holley,COMMENTED,2025-06-26T16:42:56Z,
3078444990,2962765893,will-holley,COMMENTED,2025-06-26T16:43:23Z,
3078444990,2963134541,sklein12,COMMENTED,2025-06-26T18:34:05Z,
3078444990,2963135050,sklein12,COMMENTED,2025-06-26T18:34:18Z,
3141275933,2922287085,ellipsis-dev[bot],COMMENTED,2025-06-12T18:58:18Z,
3141275933,2922401837,ellipsis-dev[bot],COMMENTED,2025-06-12T19:35:08Z,
3141275933,2922742386,ellipsis-dev[bot],COMMENTED,2025-06-12T21:44:14Z,
3141275933,2922282984,graphite-app[bot],COMMENTED,2025-06-12T21:44:24Z,
3141275933,2922801774,ellipsis-dev[bot],COMMENTED,2025-06-12T22:23:48Z,
3141275933,2922802276,graphite-app[bot],COMMENTED,2025-06-12T22:24:08Z,
3141275933,2922829199,graphite-app[bot],COMMENTED,2025-06-12T22:44:50Z,
3141275933,2922849889,ellipsis-dev[bot],COMMENTED,2025-06-12T23:00:53Z,
3103429389,2887064408,sourcery-ai[bot],COMMENTED,2025-06-02T07:14:19Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3120398551,2900390122,turtleDev,COMMENTED,2025-06-05T13:40:57Z,
3120398551,2900394607,turtleDev,COMMENTED,2025-06-05T13:42:03Z,
3120398551,2900398207,turtleDev,COMMENTED,2025-06-05T13:42:57Z,
3120398551,2900398553,karakanb,COMMENTED,2025-06-05T13:43:01Z,
3120398551,2905060855,turtleDev,APPROVED,2025-06-06T14:12:44Z,
3121336753,2922508383,cratelyn,APPROVED,2025-06-12T20:03:51Z,"this looks good, but the DCO check is currently failing."
3101801459,2879927905,greptile-apps[bot],COMMENTED,2025-05-30T00:55:14Z,"
## PR Summary

Improves arrow orientation logic in `TetheredButton.swift` by adding pinned mode support through `FeatureFlagManager` integration.

- Added `arrowRotation` computed property in `/macos/Onit/UI/Content/TetheredButton.swift` to handle arrow direction based on pinned mode state
- Ensures arrow points correctly (0 degrees) when `usePinnedMode` is enabled
- Missing foreground color specification in Text elements could cause visibility issues in light mode

<sub>1 file(s) reviewed, 1 comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=onit_244)</sub>"
3097679780,2877446836,pullrequest[bot],COMMENTED,2025-05-29T08:03:25Z,":white_check_mark: This pull request was succesfully scanned and it was determined that it does not contain any changes that present immediate security concerns. If you would still like for it to be reviewed by an expert from our reviewer community, you can submit it manually via the HackerOne PullRequest [dashboard](https://app.pullrequest.com/dash/1/writer).

:stopwatch: Latest scan covered changes up to commit 69aea2e8b1a20ce03223920bbf54e927d71e388b (latest)"
3097679780,2877819116,pullrequest[bot],COMMENTED,2025-05-29T10:30:58Z,":white_check_mark: This pull request was succesfully scanned and it was determined that it does not contain any changes that present immediate security concerns. If you would still like for it to be reviewed by an expert from our reviewer community, you can submit it manually via the HackerOne PullRequest [dashboard](https://app.pullrequest.com/dash/1/writer).

:stopwatch: Latest scan covered changes up to commit 301c94d4d23e4de03b491e2e3e05de1e09b94b21 (latest)"
3097679780,2877819196,pullrequest[bot],COMMENTED,2025-05-29T10:30:59Z,":white_check_mark: This pull request was succesfully scanned and it was determined that it does not contain any changes that present immediate security concerns. If you would still like for it to be reviewed by an expert from our reviewer community, you can submit it manually via the HackerOne PullRequest [dashboard](https://app.pullrequest.com/dash/1/writer).

:stopwatch: Latest scan covered changes up to commit 301c94d4d23e4de03b491e2e3e05de1e09b94b21 (latest)"
3097679780,2877819833,coderabbitai[bot],COMMENTED,2025-05-29T10:31:15Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>src/ui/src/components/blueprints/BlueprintsAutogen.vue (1)</summary><blockquote>

`106-136`: **Good error handling implementation with one minor improvement needed.**

The try-catch-finally pattern effectively improves user experience by preventing unhandled exceptions and providing user feedback. The early return on HTTP errors is a good approach.

However, the error message in the catch block needs improvement:

```diff
-		window.alert(`Autogen failed: ${error}`);
+		window.alert(`Autogen failed: ${error.message || error}`);
```

The current implementation would display `[object Error]` instead of the actual error message. Using `error.message` provides a more user-friendly error description.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between df08b8979987babf3a319bd1bcba32364bf5d5e8 and 301c94d4d23e4de03b491e2e3e05de1e09b94b21.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `src/ui/src/components/blueprints/BlueprintsAutogen.vue` (1 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (18)</summary>

* GitHub Check: build (3.13)
* GitHub Check: build (3.13)
* GitHub Check: build (3.13)
* GitHub Check: build (3.12)
* GitHub Check: build (3.12)
* GitHub Check: build (3.12)
* GitHub Check: build (3.11)
* GitHub Check: build (3.11)
* GitHub Check: tests (webkit)
* GitHub Check: build (3.11)
* GitHub Check: build (3.10)
* GitHub Check: build (3.10)
* GitHub Check: tests (firefox)
* GitHub Check: build (3.10)
* GitHub Check: build (3.9)
* GitHub Check: build (3.9)
* GitHub Check: tests (chromium)
* GitHub Check: build (3.9)

</details>

<details>
<summary>🔇 Additional comments (2)</summary><blockquote>

<details>
<summary>src/ui/src/components/blueprints/BlueprintsAutogen.vue (2)</summary>

`133-135`: **Excellent use of finally block for state management.**

The finally block ensures that `isBusy.value` is reset regardless of success or failure, preventing the UI from getting stuck in a loading state.

---

`118-123`: **Good UX improvement with user-friendly error messaging.**

Replacing thrown exceptions with user alerts and early returns provides a much better user experience. The error message is clear and actionable.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3077581063,2854853042,ellipsis-dev[bot],COMMENTED,2025-05-20T16:20:35Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 588ba49a998271b47cba264b9076822494445ac0 in <ellipsistime>1 minute and 2 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `243` lines of code in `7` files
> - Skipped `0` files when reviewing.
> - Skipped posting `7` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>agents-api/agents_api/queries/sessions/__init__.py:17</code></summary>
> 
> - **Draft comment:** 
> New query imports for 'get_session_agents' and 'get_session_users' have been added and included in __all__; structure is consistent.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>agents-api/agents_api/queries/sessions/get_session_agents.py:40</code></summary>
> 
> - **Draft comment:** 
> The agent query function is well structured with proper error handling, metrics, and parameterized SQL.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>agents-api/agents_api/queries/sessions/get_session_users.py:35</code></summary>
> 
> - **Draft comment:** 
> The user query function mirrors the agent query; it properly uses decorators and parameterized SQL for security.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>agents-api/agents_api/routers/sessions/__init__.py:8</code></summary>
> 
> - **Draft comment:** 
> Router initialization now includes the new session agents and users endpoints; naming and import order are consistent.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>agents-api/agents_api/routers/sessions/get_session_agents.py:16</code></summary>
> 
> - **Draft comment:** 
> The FastAPI endpoint for listing session agents is clear; dependency injection and return type (ListResponse[Agent]) are used appropriately.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>6. <code>agents-api/agents_api/routers/sessions/get_session_users.py:14</code></summary>
> 
> - **Draft comment:** 
> The FastAPI endpoint for listing session users is implemented similarly; it correctly uses dependency injection and returns the expected ListResponse.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>7. <code>typespec/sessions/endpoints.tsp:25</code></summary>
> 
> - **Draft comment:** 
> New Typespec endpoints for 'listAgents' and 'listUsers' are added with proper annotations; ensure they align with backend response models.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_MvOTvnpMbpHljU1Q`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3077581063,2907062102,qodo-merge-for-open-source[bot],COMMENTED,2025-06-07T07:35:49Z,
3085154567,2863175239,sourcery-ai[bot],COMMENTED,2025-05-23T05:00:38Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟡 **General issues**: 1 issue found
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3097580126,2875328775,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-28T14:25:22Z,"## Pull Request Overview

This PR fixes the incorrect removal of the 'wheel' event listener by ensuring that the correct callback (this.onPointerMove) is used.  
- Corrects the callback used during the removal of the 'wheel' event listener  
- Updates the unsubscribe handler logic in the HoverPlugin


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**src/plugins/hover.ts:100**
* The removal callback for the 'wheel' event has been updated correctly to onPointerMove. Please verify that the event listener for 'wheel' is also added using onPointerMove to ensure consistency.
```
container.removeEventListener('wheel', this.onPointerMove)
```
</details>

"
3125657433,2905933173,ellipsis-dev[bot],COMMENTED,2025-06-06T19:16:49Z,"> [!CAUTION]
> **Changes requested  :x:**
> <details>
> <summary>Reviewed everything up to 1df4fb4386a34af34061cd798a79297f4f02a789 in <ellipsistime>1 minute and 24 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `59` lines of code in `2` files
> - Skipped `0` files when reviewing.
> - Skipped posting `1` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/onlook-dev/settings/code-review) and [rules](https://app.ellipsis.dev/onlook-dev/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>packages/ui/src/hooks/use-pointer-stroke.tsx:73</code></summary>
> 
> - **Draft comment:** 
> The updated comment and implementation for handling missing pointerUp events in onPointerMove is clear. Consider logging a warning when this branch is hit to help diagnose unexpected pointer behavior.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 10% vs. threshold = 50% The code is handling a known edge case where onPointerUp doesn't fire. The handling looks complete and robust. Adding logging would just add noise since this is an expected case that's already handled properly. The existing comment in the code is sufficient documentation. Perhaps logging could help track how often this occurs in production and identify patterns in when it happens. Since this is a known and handled edge case, logging would just add noise without providing actionable information. The code is working as designed. Delete the comment. Adding logging for an expected and properly handled edge case would not improve the code.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_6KdPbt6RAlQBjfRF`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=onlook-dev%2Fonlook&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/onlook-dev/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/onlook-dev/code-review/rules).</sup>"
3075403080,2855157973,jnsdls,APPROVED,2025-05-20T18:10:31Z,
3085512966,2864184882,coderabbitai[bot],COMMENTED,2025-05-23T12:03:51Z,"**Actionable comments posted: 2**

<details>
<summary>🧹 Nitpick comments (7)</summary><blockquote>

<details>
<summary>packages/docs/packages/adapters/qdrant.md (1)</summary><blockquote>

`17-19`: **Ensure consistent Node.js phrasing and linking**  
To align with other docs, consider using the ""20+"" notation and adding a link:  
```diff
- - Node.js 20 or later
+ - [Node.js 20+](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)
```

</blockquote></details>
<details>
<summary>packages/docs/versioned_docs/version-0.25.9/faq.md (1)</summary><blockquote>

`69-69`: **Unify nvm version notation**  
Consider using `nvm install v20` (instead of `20.0.0`) for consistency across guides, since other docs recommend `v20`.

</blockquote></details>
<details>
<summary>packages/docs/packages/plugins/sgx.md (1)</summary><blockquote>

`87-88`: **Pinning Node.js version may require maintenance**  
Locking `apt install -y nodejs=20.0.0-1nodesource1` might break when patch versions update. Consider using `apt install -y nodejs` after adding NodeSource, or using a version pattern (`20.*`) to future-proof this step.

</blockquote></details>
<details>
<summary>package.json (1)</summary><blockquote>

`65-66`: **Broaden Node.js engine to “>=20”**  
Switching from a fixed `23.3.0` to `>=20` is great for flexibility. Remember to align your `@types/node` version with Node 20 for type accuracy.

</blockquote></details>
<details>
<summary>.github/workflows/tauri-release.yml (1)</summary><blockquote>

`167-167`: **Add NSIS for Windows installer bundling**  
Including `choco install nsis -y` ensures NSIS is available for Tauri’s Windows packaging. Consider adding a check (e.g., `choco list --localonly nsis`) to fail early if the install doesn’t succeed.

</blockquote></details>
<details>
<summary>.github/workflows/tauri-ci.yml (1)</summary><blockquote>

`67-69`: **Install NSIS in CI Windows job**  
Adding NSIS to the Windows dependencies step enables Tauri bundling during CI. You might validate the installation result to catch failures early.

</blockquote></details>
<details>
<summary>README.md (1)</summary><blockquote>

`66-66`: **Fix Markdown heading formatting.**  
The line should be a level-4 heading, not a list item.  
Apply this diff:
```diff
- -#### Prerequisites
+ #### Prerequisites
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 933afdb18c0a997b3c8d36c8e36c2c0c4f805d5c and a8837c633f4774fdec277cd9fce56ef15f0db7fc.

</details>

<details>
<summary>📒 Files selected for processing (21)</summary>

* `.github/workflows/tauri-ci.yml` (2 hunks)
* `.github/workflows/tauri-release.yml` (6 hunks)
* `.nvmrc` (1 hunks)
* `Dockerfile` (2 hunks)
* `README.md` (3 hunks)
* `llms.txt` (3 hunks)
* `package.json` (1 hunks)
* `packages/docs/archive/guides/remote-deployment.md` (1 hunks)
* `packages/docs/archive/notes/docker-setup.md` (1 hunks)
* `packages/docs/docs/faq.md` (1 hunks)
* `packages/docs/docs/intro.md` (1 hunks)
* `packages/docs/docs/quickstart.md` (2 hunks)
* `packages/docs/package.json` (1 hunks)
* `packages/docs/packages/adapters/qdrant.md` (1 hunks)
* `packages/docs/packages/plugins/sgx.md` (1 hunks)
* `packages/docs/static/llms-community.txt` (3 hunks)
* `packages/docs/static/llms-full.txt` (4 hunks)
* `packages/docs/versioned_docs/version-0.25.9/faq.md` (2 hunks)
* `packages/docs/versioned_docs/version-0.25.9/guides/remote-deployment.md` (1 hunks)
* `packages/docs/versioned_docs/version-0.25.9/intro.md` (1 hunks)
* `packages/docs/versioned_docs/version-0.25.9/quickstart.md` (4 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧠 Learnings (6)</summary>

<details>
<summary>📓 Common learnings</summary>

```
Learnt from: wtfsayo
PR: elizaOS/eliza#2448
File: packages/plugin-initia/package.json:36-36
Timestamp: 2025-01-18T06:40:17.139Z
Learning: The project uses Node.js version 23.3, and the corresponding @types/node package version should match this major version.
```

</details>
<details>
<summary>package.json (1)</summary>

```
Learnt from: wtfsayo
PR: elizaOS/eliza#2448
File: packages/plugin-initia/package.json:36-36
Timestamp: 2025-01-18T06:40:17.139Z
Learning: The project uses Node.js version 23.3, and the corresponding @types/node package version should match this major version.
```

</details>
<details>
<summary>packages/docs/docs/quickstart.md (1)</summary>

```
Learnt from: wtfsayo
PR: elizaOS/eliza#2448
File: packages/plugin-initia/package.json:36-36
Timestamp: 2025-01-18T06:40:17.139Z
Learning: The project uses Node.js version 23.3, and the corresponding @types/node package version should match this major version.
```

</details>
<details>
<summary>packages/docs/versioned_docs/version-0.25.9/quickstart.md (1)</summary>

```
Learnt from: wtfsayo
PR: elizaOS/eliza#2448
File: packages/plugin-initia/package.json:36-36
Timestamp: 2025-01-18T06:40:17.139Z
Learning: The project uses Node.js version 23.3, and the corresponding @types/node package version should match this major version.
```

</details>
<details>
<summary>packages/docs/static/llms-community.txt (1)</summary>

undefined

<retrieved_learning>
Learnt from: wtfsayo
PR: elizaOS/eliza#2448
File: packages/plugin-initia/package.json:36-36
Timestamp: 2025-01-18T06:40:17.139Z
Learning: The project uses Node.js version 23.3, and the corresponding @types/node package version should match this major version.
</retrieved_learning>

</details>
<details>
<summary>packages/docs/static/llms-full.txt (1)</summary>

undefined

<retrieved_learning>
Learnt from: wtfsayo
PR: elizaOS/eliza#2448
File: packages/plugin-initia/package.json:36-36
Timestamp: 2025-01-18T06:40:17.139Z
Learning: The project uses Node.js version 23.3, and the corresponding @types/node package version should match this major version.
</retrieved_learning>

</details>

</details>

</details>

<details>
<summary>🔇 Additional comments (26)</summary><blockquote>

<details>
<summary>packages/docs/versioned_docs/version-0.25.9/intro.md (1)</summary>

`60-62`: **Node.js version requirement updated correctly**  
The Node.js prerequisite has been lowered to 20+ and the link is valid.

</details>
<details>
<summary>packages/docs/docs/intro.md (1)</summary>

`59-61`: **Node.js version requirement updated correctly**  
The Node.js prerequisite has been lowered to 20+ and matches the project standard.

</details>
<details>
<summary>.nvmrc (1)</summary>

`1-1`: **.nvmrc aligned with new Node.js version**  
The `.nvmrc` now points to `v20`, matching the downgraded Node.js requirement.

</details>
<details>
<summary>packages/docs/archive/guides/remote-deployment.md (1)</summary>

`110-114`: **Fix Node.js version installation commands**  
Updated `nvm install`/`use` commands to `v20` are correct and consistent with the rest of the project.

</details>
<details>
<summary>packages/docs/versioned_docs/version-0.25.9/guides/remote-deployment.md (1)</summary>

`112-113`: **Update Node.js version to v20**  
The nvm commands now install and use the latest v20.x release, aligning with the project-wide downgrade.

</details>
<details>
<summary>packages/docs/archive/notes/docker-setup.md (1)</summary>

`16-16`: **Align NVM install step to Node.js v20**  
Using `nvm install v20` will grab the latest v20.x patch, which is preferable to pinning a specific patch version.

</details>
<details>
<summary>packages/docs/versioned_docs/version-0.25.9/faq.md (1)</summary>

`54-54`: **Specify Node.js version requirement**  
The bullet now correctly states Node.js 20+ (20.0.0 recommended), matching the CI and docs.

</details>
<details>
<summary>packages/docs/package.json (1)</summary>

`63-64`: **Broaden Node.js engine range**  
Changing `""node""` to `"">=20""` allows any future major Node.js releases to be used by this package.

</details>
<details>
<summary>Dockerfile (2)</summary>

`1-1`: **Align Docker builder base image to Node.js 20**  
Updating the builder stage from Node 23 to Node 20 matches the project-wide Node version requirement. Nice consistency.

---

`30-30`: **Align Docker runtime base image to Node.js 20**  
The final stage now also uses Node 20, keeping build and runtime environments in sync.

</details>
<details>
<summary>packages/docs/docs/quickstart.md (2)</summary>

`14-14`: **Updated Prerequisites to Node.js 20+**  
The Quickstart now correctly reflects the new minimum Node 20 requirement.

---

`172-174`: **Verify troubleshooting instructions match configs**  
You’ve updated the Troubleshooting to Node 20. Ensure that the repository’s `.nvmrc` (and any CI configs) also target `v20`.

</details>
<details>
<summary>.github/workflows/tauri-release.yml (1)</summary>

`63-63`: **Downgrade Node.js to v20 across release jobs**  
All `actions/setup-node` steps now use Node 20, ensuring uniformity with Docker, docs, and engine settings.  



Also applies to: 145-145, 225-225, 309-309, 416-416

</details>
<details>
<summary>.github/workflows/tauri-ci.yml (1)</summary>

`39-39`: **Align CI build to Node.js 20**  
Updating `actions/setup-node` to Node 20 ensures CI tests run against the supported engine.

</details>
<details>
<summary>packages/docs/docs/faq.md (2)</summary>

`32-32`: **Update Node.js version requirement to v20+.**  
The documentation correctly lowers the requirement from 23+ to 20+.

---

`40-40`: **Adjust nvm instruction to v20.**  
The troubleshooting step now correctly instructs using Node.js v20.0.0.

</details>
<details>
<summary>README.md (2)</summary>

`50-50`: **Lower Node.js prerequisite to v20+.**  
The quickstart prerequisites now correctly reflect Node.js 20+.

---

`68-68`: **Update manual start Node.js recommendation.**  
The manual-start prerequisites now correctly recommend Node.js v20+.

</details>
<details>
<summary>packages/docs/versioned_docs/version-0.25.9/quickstart.md (3)</summary>

`11-11`: **Lower Node.js prerequisite to v20+.**  
The quickstart now consistently recommends Node.js 20+.

---

`96-96`: **Adjust Node.js Issues section to v20.0.0.**  
The troubleshooting steps now reference Node.js 20.0.0 appropriately.

---

`121-121`: **Update pnpm env use command to Node 20.**  
The pnpm environment command now correctly targets Node.js 20.

</details>
<details>
<summary>packages/docs/static/llms-full.txt (2)</summary>

`10264-10265`: **Correct Node.js version requirement.**

The package.json correctly specifies Node.js 20+ as the minimum version requirement, which aligns with the PR objective.

---

`10233-10234`: <details>
<summary>❓ Verification inconclusive</summary>

**Update @types/node version to match Node.js requirement.**

The @types/node version (^22.15.3) doesn't align with the Node.js version requirement (>=20) specified in the engines field. According to project standards, these versions should match their major version numbers.
 
```diff
    ""@types/bun"": ""latest"",
-   ""@types/node"": ""^22.15.3"",
+   ""@types/node"": ""^20.10.5"",
```

---

🏁 Script executed:

```shell
#!/bin/bash
# Check if @types/node version is available
npm view @types/node versions --json | grep -o '""20[^""]*""' | sort -V | tail -5
```

Length of output: 239

---

```bash
#!/bin/bash
# Fetch the latest @types/node v23.x versions
npm view @types/node versions --json | grep -o '""23[^""]*""' | sort -V | tail -5
```

---

🏁 Script executed:

```shell
#!/bin/bash
# Check for latest @types/node v23.x versions
npm view @types/node versions --json | grep -o '""23[^""]*""' | sort -V | tail -5
```

Length of output: 184

---



</details>

**Update `@types/node` to align with Node.js v23.x requirement**  
The project uses Node.js 23.3, so the type definitions should match that major version. Please verify the latest `@types/node` v23 patch before applying.

Suggested change:
```diff
-   ""@types/node"": ""^22.15.3"",
+   ""@types/node"": ""^23.3.1"",  # replace with the latest v23.x available
```

</details>
<details>
<summary>llms.txt (1)</summary>

`1-2710`: No changed code segments detected in this file as part of the PR.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Gitleaks (8.26.0)</summary>

2385-2387: Detected a Generic API Key, potentially exposing access to various services and sensitive operations.

(generic-api-key)

</details>

</details>

</details>
<details>
<summary>packages/docs/static/llms-community.txt (2)</summary>

`6612-6612`: **Approve Node.js version downgrade to 20+**  
The general prerequisites now correctly reference Node.js 20+ in line with the PR’s objectives.

---

`6737-6737`: **Approve Node.js version downgrade to 20+**  
The ElizaOS prerequisites section has been updated to require Node.js 20+, matching the overall version standardization.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3135847691,2916113993,the-praxs,COMMENTED,2025-06-11T08:15:37Z,"Fetching models data from OpenRouter reduces the number to roughly 1/3rd of the data we get from the LiteLLM repo's dictionary.

OpenRouter contains the data for the latest models while the LiteLLM dictionary has the data for other inference providers (SambaNova, Azure, Bedrock etc.).

I would prefer using LiteLLM instead of switching to OpenRouter."
3070601228,2848232531,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-17T10:23:41Z,"## Pull Request Overview

Add two new documentation files providing contribution guidelines tailored for Codex and Claude AI agents, expanding the contributor instructions in `AGENTS.md`.
- Introduce `CLAUDE.md` with comprehensive Claude Code guidelines  
- Introduce `AGENTS.md` with Codex Agent guidelines (expanded contributor instructions)

### Reviewed Changes

Copilot reviewed 3 out of 3 changed files in this pull request and generated 1 comment.

| File       | Description                                      |
|------------|--------------------------------------------------|
| CLAUDE.md  | New document outlining Claude Code contribution standards and workflows |
| AGENTS.md  | New document outlining Codex Agent contribution standards and workflows |


<details>
<summary>Comments suppressed due to low confidence (3)</summary>

**CLAUDE.md:7**
* [nitpick] The indentation of nested list items is inconsistent here; consider aligning sub-list bullets under `/src/zenml/` for proper Markdown rendering.
```
- `/src/zenml/` - Core source code
```
**CLAUDE.md:1**
* [nitpick] The title uses “Code Guidelines” while `AGENTS.md` uses “Agent Guidelines”; consider standardizing the naming pattern across both documents for clarity.
```
# ZenML Claude Code Guidelines
```
**AGENTS.md:1**
* [nitpick] Both `AGENTS.md` and `CLAUDE.md` share large overlapping sections; consider extracting common guidelines into a shared include or template to reduce duplication and ease future updates.
```
# ZenML Codex Agent Guidelines
```
</details>

"
3070601228,2852992207,bcdurak,CHANGES_REQUESTED,2025-05-20T07:36:00Z,
3070601228,2853256876,strickvl,COMMENTED,2025-05-20T08:36:51Z,
3070601228,2853273752,strickvl,COMMENTED,2025-05-20T08:39:31Z,
3070601228,2862123943,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-22T17:57:38Z,"## Pull Request Overview

This PR adds comprehensive guidelines documentation for ZenML AI coding agents and updates a couple of artifact store interfaces for improved consistency.  
- Fixed a syntax error in the open() method signature in the custom stack component guide.  
- Updated parameter names and return types in the artifact store interfaces for better clarity and consistency.  
- Added new guideline documents for Claude Code and Codex agents.

### Reviewed Changes

Copilot reviewed 5 out of 5 changed files in this pull request and generated 1 comment.

| File | Description |
| ---- | ----------- |
| docs/book/component-guide/contribute/custom-stack-component.md | Fixed syntax error in the open() method signature. |
| docs/book/component-guide/artifact-stores/custom.md | Renamed parameter in open() and updated the return type of the name() method. |
| CLAUDE.md | Added comprehensive guidelines for Claude Code. |
| AGENTS.md | Added comprehensive guidelines for Codex agents. |


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**docs/book/component-guide/artifact-stores/custom.md:43**
* Renaming the parameter from 'name' to 'path' improves clarity by aligning the parameter with its intended use in file operations.
```
def open(self, path: PathType, mode: str = ""r"") -> Any:
```
**docs/book/component-guide/artifact-stores/custom.md:109**
* [nitpick] Changing the return type to a string better reflects that the method returns a flavor identifier; consider if renaming the method (e.g., to 'identifier') would further clarify its purpose.
```
def name(self) -> str:
```
</details>

"
3070601228,2863190684,htahir1,APPROVED,2025-05-23T05:09:13Z,
3070601228,2863423785,bcdurak,APPROVED,2025-05-23T07:08:04Z,
3159976237,2942994748,terzioglub,APPROVED,2025-06-19T13:18:35Z,
3146174697,2931303400,juliendenize,APPROVED,2025-06-16T09:25:19Z,Thanks !
3076943612,2854092074,ellipsis-dev[bot],COMMENTED,2025-05-20T13:02:17Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to d564ebfc0b5b9ac2b2c08771759056a48343774e in <ellipsistime>1 minute and 42 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `15` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `1` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>agents-api/agents_api/autogen/openapi_model.py:83</code></summary>
> 
> - **Draft comment:** 
> Consider defining the strict schema configuration (extra: 'forbid') directly in the model class definition rather than patching model_config externally. Also, ensure ConfigDict is explicitly imported to avoid potential NameError.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 20% vs. threshold = 50% The comment makes valid suggestions from a code organization perspective, but several factors make me hesitant: 1) The external patching pattern is used consistently throughout this file, suggesting it's an intentional pattern 2) ConfigDict must be imported somewhere since the code works 3) The current approach, while not ideal, is functional and clear 4) The comment is more about style than correctness. I might be too accepting of the existing pattern just because it's used elsewhere in the file. Also, explicit imports are generally better than implicit ones. While the suggestions are valid, they represent style preferences rather than clear improvements in correctness or maintainability. The consistent use of external patching throughout the file suggests this is an intentional pattern. The comment should be deleted as it suggests style changes that go against the established patterns in the codebase without providing significant benefits.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_hX7fpxp9ZNaI3tSZ`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3122448595,2931716452,LiveSurendra,APPROVED,2025-06-16T11:31:12Z,
3127367943,2907673679,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-07T18:47:21Z,"## Pull Request Overview

The PR addresses multiple spelling and typo corrections across code, comments, and documentation.

- Renamed internal variables and error identifiers for correct English usage.
- Fixed typos in comments, error messages, and documentation titles/signatures.
- Updated signature parameter naming (`convertor` → `converter`) and error constant spelling.

### Reviewed Changes

Copilot reviewed 18 out of 18 changed files in this pull request and generated no comments.

<details>
<summary>Show a summary per file</summary>

| File                                   | Description                                        |
|----------------------------------------|----------------------------------------------------|
| prefork.go                             | Renamed `childs` to `children`                     |
| path_test.go                           | Corrected ""charaters"" → ""characters"" in comment    |
| path.go                                | Fixed ""segement"" → ""segment"" in comment            |
| middleware/static/static_test.go       | Corrected ""compressable"" → ""compressible""          |
| middleware/earlydata/earlydata_test.go | Fixed ""unsuported"" → ""unsupported""                 |
| middleware/cors/cors_test.go           | Added apostrophe in ""won't""                        |
| middleware/cors/cors.go                | Fixed ""Ommit"" → ""Omit""                             |
| listen.go                              | Corrected ""certficate"" → ""certificate""             |
| helpers.go                             | Renamed `convertor` → `converter`                  |
| docs/whats_new.md                      | Changed title to ""What's New""                      |
| docs/middleware/encryptcookie.md       | Fixed ""Intitializes"" → ""Initializes""               |
| docs/guide/utils.md                    | Renamed `convertor` → `converter`                  |
| docs/api/bind.md                       | Fixed ""therefor"" → ""therefore""                     |
| ctx.go                                 | Corrected ""retured"" → ""returned""                   |
| binder/mapping_test.go                 | Fixed `ErrMapNotConvertable` → `ErrMapNotConvertible` in test |
| binder/mapping.go                      | Fixed return error `ErrMapNotConvertable` → `ErrMapNotConvertible` |
| binder/binder.go                       | Renamed `ErrMapNotConvertable` → `ErrMapNotConvertible` |
| bind_test.go                           | Updated test to use `ErrMapNotConvertible`         |
</details>



<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**docs/guide/utils.md:16**
* The documented signature shows a pointer return type `*T` but the actual `Convert` function returns `(T, error)`. Update the docs signature to match the implementation.
```
func Convert[T any](value string, converter func(string) (T, error), defaultValue ...T) (*T, error)
```
</details>

"
3127367943,2907674267,coderabbitai[bot],COMMENTED,2025-06-07T18:49:25Z,"**Actionable comments posted: 1**

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>docs/api/bind.md (1)</summary><blockquote>

`541-541`: **Refine punctuation around 'therefore' for clarity.**

Add a semicolon or comma before and after 'therefore' to improve readability. For example:
```diff
- This function does NOT panic therefore you must still return on error explicitly
+ This function does NOT panic; therefore, you must still return on error explicitly
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[typographical] ~541-~541: The word “therefore” is an adverb that can’t be used like a conjunction, and therefore needs to be separated from the sentence.
Context: ...00 Bad Request`. This function does NOT panic therefore you must still return on error explicit...

(THUS_SENTENCE)

</details>

</details>

</blockquote></details>
<details>
<summary>helpers.go (1)</summary><blockquote>

`745-746`: **Parameter rename aligned with docs; add unit tests for `Convert`.**

Renamed `convertor` to `converter`, and updated its invocation. Please add unit tests to cover the new `Convert` function implementation.  
Do you want me to generate a test suite for this function?

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 GitHub Check: codecov/patch</summary>

[warning] 745-746: helpers.go#L745-L746
Added lines #L745 - L746 were not covered by tests

</details>

</details>

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between f9eec854fd52e93cbd08efff77a132d554772080 and 61b687519b7dca124092f930a9db912b4d4362e9.

</details>

<details>
<summary>📒 Files selected for processing (18)</summary>

* `bind_test.go` (1 hunks)
* `binder/binder.go` (1 hunks)
* `binder/mapping.go` (1 hunks)
* `binder/mapping_test.go` (1 hunks)
* `ctx.go` (1 hunks)
* `docs/api/bind.md` (1 hunks)
* `docs/guide/utils.md` (1 hunks)
* `docs/middleware/encryptcookie.md` (1 hunks)
* `docs/whats_new.md` (1 hunks)
* `helpers.go` (1 hunks)
* `listen.go` (1 hunks)
* `middleware/cors/cors.go` (1 hunks)
* `middleware/cors/cors_test.go` (1 hunks)
* `middleware/earlydata/earlydata_test.go` (1 hunks)
* `middleware/static/static_test.go` (5 hunks)
* `path.go` (1 hunks)
* `path_test.go` (1 hunks)
* `prefork.go` (2 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (3)</summary>

<details>
<summary>binder/mapping.go (1)</summary><blockquote>

<details>
<summary>binder/binder.go (1)</summary>

* `ErrMapNotConvertible` (11-11)

</details>

</blockquote></details>
<details>
<summary>binder/mapping_test.go (1)</summary><blockquote>

<details>
<summary>binder/binder.go (1)</summary>

* `ErrMapNotConvertible` (11-11)

</details>

</blockquote></details>
<details>
<summary>bind_test.go (1)</summary><blockquote>

<details>
<summary>binder/binder.go (1)</summary>

* `ErrMapNotConvertible` (11-11)

</details>

</blockquote></details>

</details><details>
<summary>🪛 GitHub Check: codecov/patch</summary>

<details>
<summary>binder/mapping.go</summary>

[warning] 116-116: binder/mapping.go#L116
Added line #L116 was not covered by tests

</details>
<details>
<summary>helpers.go</summary>

[warning] 745-746: helpers.go#L745-L746
Added lines #L745 - L746 were not covered by tests

</details>

</details>
<details>
<summary>🪛 LanguageTool</summary>

<details>
<summary>docs/api/bind.md</summary>

[typographical] ~541-~541: The word “therefore” is an adverb that can’t be used like a conjunction, and therefore needs to be separated from the sentence.
Context: ...00 Bad Request`. This function does NOT panic therefore you must still return on error explicit...

(THUS_SENTENCE)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (3)</summary>

* GitHub Check: Compare
* GitHub Check: unit (1.24.x, windows-latest)
* GitHub Check: repeated

</details>

<details>
<summary>🔇 Additional comments (24)</summary><blockquote>

<details>
<summary>prefork.go (3)</summary>

`79-81`: **Consistent renaming of map variable**  
Renamed the map from `childs` to the grammatically correct `children`. Declaration aligns with usage in subsequent code.

---

`84-92`: **Updated references in deferred cleanup loop**  
Loop over `children` instead of the old `childs` identifier; logic for killing child processes remains unchanged.

---

`118-122`: **Stored child process in `children` map**  
Assignment updated to use `children[pid] = cmd`. Verified no other references to the older variable name.

</details>
<details>
<summary>middleware/cors/cors.go (1)</summary>

`141-141`: **Fix typo in comment: ""Omit""**  
Corrects the spelling from ""Ommit"" to ""Omit"" in the simple request CORS handling comment; no behavior change.

</details>
<details>
<summary>path.go (1)</summary>

`263-263`: **Fix typo in comment: ""segment""**  
Updates the comment to correct ""segement"" to ""segment"" for clarity; functionality unaffected.

</details>
<details>
<summary>path_test.go (1)</summary>

`61-61`: **Fix typo in test comment: ""characters""**  
Corrects the spelling in the heavy test case comment; no logic changes.

</details>
<details>
<summary>docs/whats_new.md (1)</summary>

`3-3`: **Add missing apostrophe in title**  
Updates the frontmatter title to ""What's New in v3"" to include the missing apostrophe.

</details>
<details>
<summary>docs/middleware/encryptcookie.md (1)</summary>

`16-16`: **Fix typo in comment: ""Initializes""**  
Corrects the spelling in the middleware signature comment to ""Initializes"".

</details>
<details>
<summary>ctx.go (1)</summary>

`1756-1756`: **Typo fixed in comment.**

Corrected “retured” to “returned” in the Subdomains method comment.

</details>
<details>
<summary>middleware/cors/cors_test.go (1)</summary>

`860-860`: **Fixed contraction in comment.**

Updated “wildcard wont set” to “wildcard won't set” for grammatical accuracy.

</details>
<details>
<summary>middleware/earlydata/earlydata_test.go (1)</summary>

`52-52`: **Corrected spelling in error message.**

Changed “unsuported” to “unsupported” in the early-data middleware test.

</details>
<details>
<summary>listen.go (3)</summary>

`75-79`: **Typo fix in CertFile comment**  
Corrected “certficate” to “certificate” for the `CertFile` field, improving clarity and consistency.

---

`81-85`: **Typo fix in CertKeyFile comment**  
Updated the comment to refer to the certificate’s private key correctly.

---

`87-91`: **Typo fix in CertClientFile comment**  
Fixed “certficate” to “certificate” in the `CertClientFile` field description.

</details>
<details>
<summary>middleware/static/static_test.go (5)</summary>

`743-743`: **Typo fix: non-compressible**  
Replaced “non-compressable” with the correct “non-compressible” spelling in the comment.

---

`753-753`: **Typo fix: compressible**  
Updated “compressable” to the correct “compressible” in the comment.

---

`775-775`: **Typo fix in Test_Static_Compress_WithoutEncoding**  
Corrected “compressable” to “compressible” in the test comment.

---

`784-784`: **Typo fix: compressible context**  
Standardized the phrase “request compressible file with different encodings.”

---

`830-830`: **Typo fix in Test_Static_Compress_WithFileSuffixes**  
Corrected comment to use “compressible” for consistency.

</details>
<details>
<summary>binder/mapping_test.go (1)</summary>

`153-156`: **Consistent error naming in test**  
Updated assertion to use `ErrMapNotConvertible` matching the renamed error constant.

</details>
<details>
<summary>binder/mapping.go (2)</summary>

`116-116`: **Consistent error constant usage**  
Replaced `ErrMapNotConvertable` with `ErrMapNotConvertible` in the slice branch.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 GitHub Check: codecov/patch</summary>

[warning] 116-116: binder/mapping.go#L116
Added line #L116 was not covered by tests

</details>

</details>

---

`123-123`: **Consistent error constant usage**  
Replaced `ErrMapNotConvertable` with `ErrMapNotConvertible` in the string/interface branch.

</details>
<details>
<summary>bind_test.go (1)</summary>

`150-153`: **Consistent error naming in bind_test**  
Updated the map error assertion to use `binder.ErrMapNotConvertible`.

</details>
<details>
<summary>binder/binder.go (1)</summary>

`11-11`: **Typo in error variable corrected.**

Renamed `ErrMapNotConvertable` to `ErrMapNotConvertible` and updated the message to ""map is not convertible"". Consistency with other mapping error handling is maintained.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3127367943,2907679233,github-actions[bot],COMMENTED,2025-06-07T18:57:12Z,"<!-- github-benchmark-action-comment(start): Benchmark Alert -->
# :warning: **Performance Alert** :warning:

Possible performance regression was detected for benchmark.
Benchmark result of this commit is worse than the previous benchmark result exceeding threshold `1.50`.

| Benchmark suite | Current: 61b687519b7dca124092f930a9db912b4d4362e9 | Previous: f9eec854fd52e93cbd08efff77a132d554772080 | Ratio |
|-|-|-|-|
| `Benchmark_SlashRecognition/forEach` | `6.36` ns/op	       0 B/op	       0 allocs/op | `3.707` ns/op	       0 B/op	       0 allocs/op | `1.72` |
| `Benchmark_SlashRecognition/forEach - ns/op` | `6.36` ns/op | `3.707` ns/op | `1.72` |

This comment was automatically generated by [workflow](https://github.com/gofiber/fiber/actions?query=workflow%3ABenchmark) using [github-action-benchmark](https://github.com/marketplace/actions/continuous-benchmark).
<!-- github-benchmark-action-comment(end): Benchmark Alert -->"
3127367943,2907755757,ReneWerner87,APPROVED,2025-06-07T20:34:15Z,
3118902779,2900017611,rxinui,APPROVED,2025-06-05T11:55:37Z,"/lgtm

it seems more OOP then you use to be @amorey hehe"
3155023758,2939824324,ColinPeppler,COMMENTED,2025-06-18T15:55:28Z,
3155023758,2939826553,ColinPeppler,COMMENTED,2025-06-18T15:56:04Z,
3121845520,2901743041,ChrisHuie,APPROVED,2025-06-05T18:55:09Z,
3070068738,2852050463,TylerBarnes,COMMENTED,2025-05-19T21:37:27Z,
3070068738,2852043008,greptile-apps[bot],COMMENTED,2025-05-19T21:37:53Z,"
## PR Summary

This PR implements significant breaking changes to the Memory class, removing default fallbacks and simplifying configuration. The changes enforce explicit configuration of storage, vector, and embedder components while standardizing working memory to use tool-call mode exclusively.

- Removed default fallbacks for storage/vector/embedder in `Memory` class, now requiring explicit configuration
- Changed memory defaults: `lastMessages` from 40 to 10, disabled `semanticRecall` by default, and set `generateTitle` to false
- Removed `workingMemory.use` option, making tool-call the only mode and removing text-stream functionality
- Added storage inheritance from Mastra instance if memory storage is not explicitly configured
- Removed `fastembed.ts` and its dependencies from `@mastra/core`, requiring users to explicitly install and configure embedding solutions

<sub>23 file(s) reviewed, 5 comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=mastra_4309)</sub>"
3070068738,2853644271,wardpeet,APPROVED,2025-05-20T10:32:56Z,
3070068738,2854779498,TylerBarnes,COMMENTED,2025-05-20T15:59:07Z,
3128327342,2915362762,ChrisHuie,APPROVED,2025-06-11T01:05:06Z,
3148048568,2930336192,obi1kenobi,COMMENTED,2025-06-15T21:11:09Z,
3157140778,2939537693,coderabbitai[bot],COMMENTED,2025-06-18T14:42:31Z,"**Actionable comments posted: 4**

<details>
<summary>🧹 Nitpick comments (3)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/adapters/remote_config.py (1)</summary><blockquote>

`24-33`: **Consider passing an explicit User-Agent and shorter connect timeout**

Some CDNs block default `python-requests/X` agents, and 10 s total timeout can hang startup. A quick improvement:

```diff
-    response = requests.get(url, timeout=10)
+    response = requests.get(
+        url,
+        timeout=(3, 5),  # (connect, read)
+        headers={""User-Agent"": ""KilnRemoteConfig/1.0""},
+    )
```

</blockquote></details>
<details>
<summary>app/desktop/desktop_server.py (2)</summary><blockquote>

`25-26`: **Hard-coded placeholder URL**

`https://example.com/kiln_model_list.json` looks like a stub. Ship a real URL or make it configurable via env/CLI so production instances don’t attempt to download from a dead endpoint.

---

`47-48`: **Asynchronous task scheduling error handling**

If `load_remote_models` logs failures (see earlier comment) you might also want to propagate an application metric / health indicator here so UI can show “remote config not loaded”.  
No immediate change required, but worth tracking.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between f43557109e49dce0ad18bf7bf0f73efdfa75f263 and 81a629fb4eb6a99233186c6f1fc25af9926da428.

</details>

<details>
<summary>📒 Files selected for processing (5)</summary>

* `.github/workflows/publish_remote_config.yml` (1 hunks)
* `app/desktop/desktop_server.py` (3 hunks)
* `app/desktop/dev_server.py` (1 hunks)
* `libs/core/kiln_ai/adapters/remote_config.py` (1 hunks)
* `libs/core/kiln_ai/adapters/test_remote_config.py` (1 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (10)</summary>

* GitHub Check: Web UI Code Format, Lint, Typecheck, Test, and Build
* GitHub Check: Web UI Code Format, Lint, Typecheck, Test, and Build
* GitHub Check: Build, Typecheck, and Test Python (3.11)
* GitHub Check: Build, Typecheck, and Test Python (3.10)
* GitHub Check: Build Desktop Apps (windows-latest)
* GitHub Check: Build Desktop Apps (ubuntu-22.04)
* GitHub Check: Build Desktop Apps (macos-latest)
* GitHub Check: Build Desktop Apps (ubuntu-22.04-arm)
* GitHub Check: Build, Typecheck, and Test Python (3.13)
* GitHub Check: Build, Typecheck, and Test Python (3.12)

</details>

<details>
<summary>🔇 Additional comments (2)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/adapters/remote_config.py (1)</summary>

`50-50`: **`get_event_loop()` may return a loop that is not running**

`loop.create_task()` on a loop that has not been started raises `RuntimeError` on ≥ 3.11. Guard with `asyncio.get_running_loop()` when possible, or defer via `asyncio.run_coroutine_threadsafe`.

_No diff provided because the fix may vary; please verify in the target runtime._

</details>
<details>
<summary>.github/workflows/publish_remote_config.yml (1)</summary>

`22-24`: **Python 3.13 is not GA yet**

`uv python install 3.13` will break once nightly tags shift. Stick to the latest stable (3.12) unless you need bleeding-edge features.

```diff
-      - name: Set up Python
-        run: uv python install 3.13
+      - name: Set up Python
+        run: uv python install 3.12
```

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3130370124,2910133351,ellipsis-dev[bot],COMMENTED,2025-06-09T13:48:40Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 03fe889bea0616997dcb08f6f8e5b9092354f775 in <ellipsistime>44 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `210` lines of code in `5` files
> - Skipped `0` files when reviewing.
> - Skipped posting `6` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>agents-api/agents_api/common/utils/usage.py:21</code></summary>
> 
> - **Draft comment:** 
> New tracking parameters (execution_id, transition_id, session_id, entry_id, provider) are added and included in the function docstring and call to create_usage_record. Confirm that these match the DB schema.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>agents-api/agents_api/queries/usage/create_usage_record.py:96</code></summary>
> 
> - **Draft comment:** 
> SQL query and function signature are updated with new fields; ensure parameter order in the query matches the params list.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>memory-store/README.md:12</code></summary>
> 
> - **Draft comment:** 
> The README update clearly documents the new usage table columns, which improves clarity for future migrations.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>memory-store/migrations/000042_usage_reference_fields.up.sql:4</code></summary>
> 
> - **Draft comment:** 
> Migration script correctly adds new columns and creates indexes. Consider using CREATE INDEX CONCURRENTLY for production environments if downtime is a concern.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>memory-store/migrations/000042_usage_reference_fields.down.sql:3</code></summary>
> 
> - **Draft comment:** 
> Down migration properly removes the new columns and drops the corresponding indexes.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>6. <code>agents-api/agents_api/common/utils/usage.py:29</code></summary>
> 
> - **Draft comment:** 
> Typo: It looks like there's an extra colon in the function signature. The closing line reads `): -> None:`. It should likely be `) -> None:`.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_YHqFwlycLjPqvwqo`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3087364774,2865533115,ellipsis-dev[bot],COMMENTED,2025-05-23T19:41:41Z,
3087364774,2865534423,sourcery-ai[bot],COMMENTED,2025-05-23T19:42:23Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟡 **General issues**: 2 issues found
- 🟢 **Security**: all looks good
- 🟡 **Testing**: 1 issue found
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3087364774,2865544265,mldangelo,COMMENTED,2025-05-23T19:46:43Z,
3087364774,2866954722,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-25T22:09:12Z,"## Pull Request Overview

This PR adds a new camelCase strategy for text transformation to the redteam suite, as requested by a customer. The key changes include a new transformation function (toCamelCase), updates to tests (validators, encodings, index, and constants), and corresponding documentation updates.

### Reviewed Changes

Copilot reviewed 11 out of 11 changed files in this pull request and generated no comments.

<details>
<summary>Show a summary per file</summary>

| File                                                                   | Description                                                     |
| ---------------------------------------------------------------------- | --------------------------------------------------------------- |
| test/redteam/validators.test.ts                                        | Adjusted tests to account for schema deduplication of strategies.|
| test/redteam/strategies/otherEncodings.test.ts                          | Added tests for the new camelCase conversion and encoding behavior.|
| test/redteam/strategies/index.test.ts                                   | Included camelCase in strategy validation and loading tests.     |
| test/redteam/constants.test.ts                                          | Updated strategy mappings and descriptions to reflect camelCase.   |
| src/redteam/strategies/otherEncodings.ts                                | Implemented the new toCamelCase function and integrated it into the encoder selections.|
| src/redteam/strategies/index.ts                                          | Added a new strategy entry for camelCase.                         |
| src/redteam/constants.ts                                                 | Extended constants to include camelCase in various mappings and collections.|
| site/static/config-schema.json                                          | Updated configuration schema to list camelCase.                   |
| site/docs/red-team/strategies/other-encodings.md                         | Revised documentation to include camelCase usage and details.       |
| site/docs/_shared/data/strategies.ts                                     | Added data for the camelCase strategy in the strategy documentation. |
</details>




"
3070276012,2948340655,breynolds007,APPROVED,2025-06-22T21:12:26Z,"Formatting looks good. 

I checked all the samples and they run correctly on my local machine (Mac Mini)."
3151039142,2933237792,greptile-apps[bot],COMMENTED,2025-06-16T19:19:25Z,"
## PR Summary
Made several readability improvements to `packages/twenty-website/README.md` focusing on grammar fixes and formatting enhancements.

- Fixed incorrect phrase 'in anyway' to 'in any way', improving grammar accuracy
- Enhanced code block readability by adding consistent spacing around blocks
- Simplified document structure by removing redundant title repetitions
- Added proper formatting for code blocks and technical terms
- Note: Failed nx format check indicates potential build/lint configuration issues that should be addressed

<sub>1 file reviewed, no comments</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=twenty_12641)</sub>"
3154483234,2936788104,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-17T19:04:19Z,"## Pull Request Overview

This PR integrates a new Anthropic Claude provider into Neural, including code, Vim integration, documentation, and tests.

- Introduce Python implementation for Anthropic Claude with streaming completion and error handling.
- Add Vimscript defaults and source registration for Anthropic, plus corresponding Vader tests.
- Update documentation and add comprehensive Python and Vim tests.

### Reviewed Changes

Copilot reviewed 7 out of 7 changed files in this pull request and generated 3 comments.

<details>
<summary>Show a summary per file</summary>

| File                             | Description                                           |
|----------------------------------|-------------------------------------------------------|
| test/vim/test_config.vader       | Added a Vader test for default Anthropic config       |
| test/vim/test_anthropic.vader    | Added a Vader test for the Anthropic source dictionary|
| test/python/test_anthropic.py    | Added unit tests for config loading, streaming, and errors |
| neural_providers/anthropic.py    | New Anthropic Claude provider implementation          |
| autoload/neural/source/anthropic.vim | Vimscript function for Anthropic source            |
| autoload/neural/config.vim       | Added default Anthropic settings to config            |
| doc/neural.txt                   | Updated TOC and added Anthropic Claude docs           |
</details>



<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**test/python/test_anthropic.py:49**
* [nitpick] The test name `test_main_function_rate_other_error` is misleading—it tests generic HTTP errors, not rate-limit errors. Renaming to something like `test_main_function_other_http_error` would improve clarity.
```
def test_main_function_rate_other_error() -> None:
```
</details>

"
3118120081,2897190146,coderabbitai[bot],COMMENTED,2025-06-04T15:23:24Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>packages/web/src/components/resizable/resizable-handle/calc-resize.spec.ts (1)</summary><blockquote>

`192-197`: **Good test coverage for the main scenario, consider expanding for edge cases.**

The test correctly verifies that extreme negative deltas don't produce negative dimensions. Consider adding tests for:
- Other resize positions (e.g., 'bottom', 'top-left') 
- Negative dy values
- Edge cases where the result should be exactly 1
- Verification of exact clamped values




Example additional test cases:

```diff
+test('sizes are clamped to positive values - comprehensive', () => {
+  // Test different resize positions
+  const positions = ['top', 'bottom', 'left', 'right', 'top-left', 'top-right', 'bottom-left', 'bottom-right'] as const
+  
+  positions.forEach(position => {
+    const [w2, h2] = calcResize(position, 100, 200, -500, -500, null)
+    expect(w2).toBeGreaterThanOrEqual(1)
+    expect(h2).toBeGreaterThanOrEqual(1)
+  })
+  
+  // Test exact minimum values
+  const [w3, h3] = calcResize('right', 1, 1, -1, 0, null)
+  expect(w3).toBe(1)
+  expect(h3).toBe(1)
+})
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between b9475131c126bd0872e7e40c6ccae13e1e6fffd2 and 79fa2eddb4bc00fd62294fa3f7fd665018401710.

</details>

<details>
<summary>📒 Files selected for processing (3)</summary>

* `.changeset/clamp-negative-resize.md` (1 hunks)
* `packages/web/src/components/resizable/resizable-handle/calc-resize.spec.ts` (1 hunks)
* `packages/web/src/components/resizable/resizable-handle/calc-resize.ts` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>packages/web/src/components/resizable/resizable-handle/calc-resize.spec.ts (1)</summary><blockquote>

<details>
<summary>packages/web/src/components/resizable/resizable-handle/calc-resize.ts (1)</summary>

* `calcResize` (3-47)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>🔇 Additional comments (3)</summary><blockquote>

<details>
<summary>.changeset/clamp-negative-resize.md (1)</summary>

`1-6`: **LGTM! Well-documented changeset.**

The changeset properly documents the patch-level change and provides a clear description that aligns with the implementation.

</details>
<details>
<summary>packages/web/src/components/resizable/resizable-handle/calc-resize.ts (2)</summary>

`22-25`: **Excellent implementation of the clamping helper function.**

The `clamp` helper is well-designed with a clear purpose and appropriate minimum value of 1. Using `Math.max` ensures both width and height remain positive, which is essential for UI elements.

---

`29-43`: **Consistent and thorough application of clamping across all resize positions.**

The implementation correctly applies the `clamp` function to all resize calculation results, ensuring no resize operation can produce negative dimensions regardless of the handle position or delta values.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3131656383,2911529791,cubic-dev-ai[bot],COMMENTED,2025-06-09T22:43:45Z,"cubic found 2 issues across 8 files. Review them in [cubic.dev](https://cubic.dev/pr/cartography-cncf/cartography/pull/1620)

<sub>React with 👍 or 👎 to teach cubic. Tag `@cubic-dev-ai` to give specific feedback.</sub>"
3131656383,2948933700,achantavy,COMMENTED,2025-06-23T07:17:14Z,
3131656383,2948934074,achantavy,COMMENTED,2025-06-23T07:17:23Z,
3131656383,2948995117,cubic-dev-ai[bot],COMMENTED,2025-06-23T07:38:39Z,"cubic found 2 issues across 11 files. Review them in [cubic.dev](https://cubic.dev/pr/cartography-cncf/cartography/pull/1620)

<sub>React with 👍 or 👎 to teach cubic. Tag `@cubic-dev-ai` to give specific feedback.</sub>"
3131656383,2949762900,jychp,APPROVED,2025-06-23T12:03:07Z,"**LGTM (but not tested)**

One remark and a question — I was a bit confused by the schema, so I made a Mermaid diagram to clarify things.

A few things stand out:

* There's no relationship between `ECSCluster` and `ECSContainer`, even though there is one between `ECSCluster` and `ECSContainerInstance`
* There's no link between `ECSContainer` and `ECSContainerInstance`
* There's no link between `ECSContainerDefinition` and either `ECSContainer` or `ECSContainerInstance`"
3077799254,2916911209,cursor[bot],COMMENTED,2025-06-11T12:21:34Z,"<details open>
<summary><h3>Bug: SVG Export Method Returns Incorrect Data Type</h3></summary>

The `export_chart_svg` method is type-hinted to return `bytes`, but can return non-bytes data. If `svg_str` (from `chart_data.charts[0].data`) is neither a string nor bytes, it is returned directly, violating the type contract and causing runtime errors for callers expecting bytes. Additionally, the `base64.b64decode` call can raise an unhandled `binascii.Error` if the base64 data is malformed.

<p></p>

<details>
<summary><code>pygwalker/api/pygwalker.py#L317-L330</code></summary>

https://github.com/Kanaries/pygwalker/blob/1c0d3b0e3a8c5a7f10cadf8e6246454413394c9d/pygwalker/api/pygwalker.py#L317-L330

</details>

<a href=""https://cursor.com/open?data=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImJ1Z2JvdC12MSJ9.eyJ0eXBlIjoiQlVHQk9UX0ZJWF9JTl9DVVJTT1IiLCJkYXRhIjp7ImJ1ZyI6ImV5SnNiMk5oZEdsdmJuTWlPbHQ3SW1acGJHVWlPaUp3ZVdkM1lXeHJaWEl2WVhCcEwzQjVaM2RoYkd0bGNpNXdlU0lzSW5OMFlYSjBUR2x1WlNJNk16RTNMQ0psYm1STWFXNWxJam96TXpBc0ltTnZaR1ZNYVc1bGN5STZXMTE5WFN3aWFXUWlPaUk0WVRObVpEaGtNaTAxT1RZMkxUUmtNVEV0WVRnNVlpMHdZalkyWkdVMU1HTmpaV1FpTENKa1pYTmpjbWx3ZEdsdmJpSTZJbFJvWlNCZ1pYaHdiM0owWDJOb1lYSjBYM04yWjJBZ2JXVjBhRzlrSUdseklIUjVjR1V0YUdsdWRHVmtJSFJ2SUhKbGRIVnliaUJnWW5sMFpYTmdMQ0JpZFhRZ1kyRnVJSEpsZEhWeWJpQnViMjR0WW5sMFpYTWdaR0YwWVM0Z1NXWWdZSE4yWjE5emRISmdJQ2htY205dElHQmphR0Z5ZEY5a1lYUmhMbU5vWVhKMGMxc3dYUzVrWVhSaFlDa2dhWE1nYm1WcGRHaGxjaUJoSUhOMGNtbHVaeUJ1YjNJZ1lubDBaWE1zSUdsMElHbHpJSEpsZEhWeWJtVmtJR1JwY21WamRHeDVMQ0IyYVc5c1lYUnBibWNnZEdobElIUjVjR1VnWTI5dWRISmhZM1FnWVc1a0lHTmhkWE5wYm1jZ2NuVnVkR2x0WlNCbGNuSnZjbk1nWm05eUlHTmhiR3hsY25NZ1pYaHdaV04wYVc1bklHSjVkR1Z6TGlCQlpHUnBkR2x2Ym1Gc2JIa3NJSFJvWlNCZ1ltRnpaVFkwTG1JMk5HUmxZMjlrWldBZ1kyRnNiQ0JqWVc0Z2NtRnBjMlVnWVc0Z2RXNW9ZVzVrYkdWa0lHQmlhVzVoYzJOcGFTNUZjbkp2Y21BZ2FXWWdkR2hsSUdKaGMyVTJOQ0JrWVhSaElHbHpJRzFoYkdadmNtMWxaQzRpTENKamIyNW1hV1JsYm1ObElqb3hMQ0pqWVhSbFoyOXllU0k2SWt4UFIwbERYMEpWUnlKOSIsImJyYW5jaCI6ImNvZGV4L2Rlc2lnbi1kZXZlbG9wZXItZnJpZW5kbHktYXBpLWZvci1weWd3YWxrZXItaW1hZ2UtZXhwb3J0In0sImlhdCI6MTc0OTY0NDQ5NCwiZXhwIjoxNzUwMjQ5Mjk0fQ.KQ07tf2dAe6vR5wThogzYt5f9bSzZ4YXD_c8Qyi7sK4wQf3ylOSLCTZEwIIvW81pmOG8llAKGxtm5RwTHz3R_F4kR5h59adJzQROAZYqfw4D4XaWJZNLEsdMT5K0FkLO3S346usPbxSSo3caPvcuf-1ZRDDOvdvbX0LXJ6Cq8aGgXltXB6HKmbhdjczMBsXp0OIlSomUaLFXu9dFJrnSTXMA96wkofWoPD86HqoakJm8RWRhkxbgJ3q7iRc8IsQRGE3ZW0XCUyvHBOm8hY5W1vjYlKBquUwCZanaRqrD3iDQf3Jge0PjT7qlxszJYP3Pk6uxsatjTlcSQzO6tlvifg"">Fix in Cursor</a>

</details>

---


**BugBot free trial expires on June 17, 2025**
You have used $0.00 of your $50.00 spend limit so far. Manage your spend limit in the [Cursor dashboard](https://cursor.com/dashboard?tab=bugbot).

_Was this report helpful? Give feedback by reacting with 👍 or 👎_
"
3117029222,2895895920,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-04T08:58:33Z,"## Pull Request Overview

Adds a new tool to build Swift packages via `swift build`, integrates it into the tool registry, documents the corresponding environment variable, and provides an example Swift package for manual testing.
- Introduce `registerBuildSwiftPackageTool` in the tool registry
- Implement the Swift Package build logic (`src/tools/build-swift-package.ts`)
- Update documentation (`TOOL_OPTIONS.md`) and add an example project

### Reviewed Changes

Copilot reviewed 6 out of 6 changed files in this pull request and generated no comments.

<details>
<summary>Show a summary per file</summary>

| File                                    | Description                                               |
| --------------------------------------- | --------------------------------------------------------- |
| src/utils/register-tools.ts             | Registered the new Swift Package build tool               |
| src/tools/build-swift-package.ts        | Added implementation for `build_swift_package`            |
| example_projects/spm/Sources/main.swift | Sample “Hello, world!” Swift executable                   |
| example_projects/spm/Package.swift      | Swift package manifest                                    |
| example_projects/spm/.gitignore         | Ignored Swift package build artifacts                     |
| TOOL_OPTIONS.md                         | Documented `XCODEBUILDMCP_TOOL_BUILD_SWIFT_PACKAGE` usage |
</details>



<details>
<summary>Comments suppressed due to low confidence (3)</summary>

**src/tools/build-swift-package.ts:32**
* [nitpick] The parameter name 'archs' is abbreviated and may be unclear. Consider renaming it to 'architectures' for better readability and consistency.
```
      archs: archSchema,
```
**example_projects/spm/Sources/main.swift:1**
* An example project was added but there are no automated tests covering the new Swift package build tool. Consider adding integration tests to validate both success and failure build scenarios.
```
// The Swift Programming Language
```
**src/tools/build-swift-package.ts:48**
* This validation branch is unreachable since the Zod schema only allows 'debug' or 'release'. Consider removing this else-if and relying on Zod for validation.
```
      } else if (params.configuration && params.configuration.toLowerCase() !== 'debug') {
```
</details>

"
3117029222,2897995229,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-04T20:17:50Z,"## Pull Request Overview

Adds a new Swift Package Manager workflow to the MCP server, including tooling for building, testing, running, stopping, listing, and cleaning Swift packages, plus an example SPM project for validation.

- Introduce `SWIFT_PACKAGE_WORKFLOW` and register six Swift package tools in the registry  
- Implement `build`, `test`, `run` (with background/foreground modes), `list`, `stop`, and `clean` commands  
- Provide a sample Swift package, update documentation, and bump changelog to v1.7.0

### Reviewed Changes

Copilot reviewed 17 out of 17 changed files in this pull request and generated 1 comment.

<details>
<summary>Show a summary per file</summary>

| File                                      | Description                                                     |
| ----------------------------------------- | --------------------------------------------------------------- |
| src/utils/tool-groups.ts                  | Added `SWIFT_PACKAGE_WORKFLOW` enum entry                       |
| src/utils/register-tools.ts               | Imported and registered all Swift package tools                 |
| src/tools/build-swift-package.ts          | New tool for `swift build` with `--arch`, `--target`, etc.      |
| src/tools/test-swift-package.ts           | New tool for `swift test` with filters, parallel, coverage flags |
| src/tools/run-swift-package.ts            | New `swift run` tool plus `list`, `stop`, and `clean` helpers   |
| example_projects/spm/...                  | Added example SPM project (sources, tests, package files)       |
| TOOL_OPTIONS.md                           | Documented new environment variables for SPM tools              |
| README.md                                 | Added Swift Package Manager section to feature list             |
| CHANGELOG.md                              | Released v1.7.0 with SPM tool entries                           |
| .cursorrules                              | Minor header tweak                                              |
</details>



<details>
<summary>Comments suppressed due to low confidence (3)</summary>

**CHANGELOG.md:10**
* The changelog references `swift_package_list_processes` but the actual tool ID is `swift_package_list`. Please update the entry for consistency.
```
- `swift_package_list_processes`
```
**src/tools/run-swift-package.ts:226**
* [nitpick] Function name `registerListSwiftPackageProcessesTool` and tool ID `swift_package_list` are inconsistent. Consider renaming to `registerListSwiftPackageTool` for clarity and alignment.
```
export function registerListSwiftPackageProcessesTool(server: McpServer): void {
```
**src/tools/test-swift-package.ts:17**
* There are no automated tests for the new Swift package test tool. Consider adding unit tests to verify parameter validation, argument construction, and error handling.
```
export function registerTestSwiftPackageTool(server: McpServer): void {
```
</details>

"
3117029222,2898033451,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-04T20:34:27Z,"## Pull Request Overview

Introduces full Swift Package Manager (SPM) support by defining a new workflow group, registering workflow tools, implementing SPM commands, and providing example projects and documentation updates.
- Defined `SWIFT_PACKAGE_WORKFLOW` and registered build/test/run/list/stop/clean tools.
- Implemented SPM tool handlers (`swift_package_build`, `swift_package_test`, `swift_package_run`, etc.).
- Updated documentation, examples, and the changelog to reflect SPM support.

### Reviewed Changes

Copilot reviewed 18 out of 18 changed files in this pull request and generated 1 comment.

<details>
<summary>Show a summary per file</summary>

| File | Description |
| ---- | ----------- |
| src/utils/tool-groups.ts | Added `SWIFT_PACKAGE_WORKFLOW` enum value |
| src/utils/register-tools.ts | Registered all SPM tools in the registry |
| src/tools/common.ts | Added Zod schemas for SPM configuration and architectures |
| src/tools/build-swift-package.ts | Implemented `swift_package_build` tool handler |
| src/tools/test-swift-package.ts | Implemented `swift_package_test` tool handler |
| src/tools/run-swift-package.ts | Implemented `swift_package_run`, `swift_package_list`, `swift_package_stop`, and `swift_package_clean` |
| example_projects/spm/ | Added example Swift package with executables and tests |
| TOOL_OPTIONS.md | Documented environment flags for SPM tools |
| README.md | Added Swift Package Manager section |
| CHANGELOG.md | Added `v1.7.0` entry for SPM support |
</details>



<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**src/utils/register-tools.ts:160**
* No tests currently cover the registration of the new Swift package tools. Add unit or integration tests to verify that each tool is registered and discoverable by the server.
```
{
```
**src/tools/test-swift-package.ts:47**
* The `--test-product` flag may not be supported by `swift test`. Verify the correct CLI option (e.g., `--filter`) or remove this parameter to avoid unexpected failures.
```
args.push('--test-product', params.testProduct);
```
</details>

"
3072041626,2849963905,PawelPeczek-Roboflow,APPROVED,2025-05-19T08:51:28Z,
3075945404,2852967785,coderabbitai[bot],COMMENTED,2025-05-20T07:16:42Z,"**Actionable comments posted: 0**

<details>
<summary>🔭 Outside diff range comments (1)</summary><blockquote>

<details>
<summary>app/server/appsmith-server/src/main/java/com/appsmith/server/controllers/ConsolidatedAPIController.java (1)</summary><blockquote>

`89-176`: _💡 Verification agent_

<details>
<summary>🧩 Analysis chain</summary>

**Verify test coverage for the authentication logic.**

Ensure there are unit tests that verify:
1. Requests with defaultPageId but no authentication return 401
2. Requests with defaultPageId and valid authentication proceed normally
3. Requests without defaultPageId proceed regardless of authentication status

The PR mentioned test failures but indicated they were due to environment issues rather than code problems.

---

🏁 Script executed:

```shell
#!/bin/bash
# Search for test files that might cover this controller
echo ""Searching for test files related to ConsolidatedAPIController...""
fd -t f "".*Test.*"" | grep -i consolidated | grep -i api | grep -i controller
```

Length of output: 217

---



</details>

**Add unit tests for `ConsolidatedAPIController` authentication logic**

I didn’t find any existing tests covering the new auth checks in  
`app/server/appsmith-server/src/main/java/com/appsmith/server/controllers/ConsolidatedAPIController.java` (lines 89–176). Please add tests for:

- Requests with a non-null `defaultPageId` but no authenticated user → HTTP 401  
- Requests with a non-null `defaultPageId` and an authenticated user → HTTP 200 + response body  
- Requests when `defaultPageId` is null (regardless of auth) → HTTP 200 + response body

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>app/server/appsmith-server/src/main/java/com/appsmith/server/controllers/ConsolidatedAPIController.java (2)</summary><blockquote>

`116-121`: **Authentication enforcement implemented correctly.**

This correctly implements the requirement to return 401 Unauthorized when a defaultPageId is provided but the user is not authenticated. 

Consider adding an error message to the response for better API usability:

```diff
-new ResponseDTO<>(HttpStatus.UNAUTHORIZED, null);
+new ResponseDTO<>(HttpStatus.UNAUTHORIZED, null, ""Authentication required to access page with ID "" + defaultPageId);
```

---

`113-170`: **Consider extracting methods to improve readability.**

The code structure has become deeply nested, which makes it harder to follow. Consider extracting the authentication logic and response generation into separate private methods to improve readability.

For example:
```java
private Mono<ResponseEntity<ResponseDTO<ConsolidatedAPIResponseDTO>>> handleUnauthenticatedRequest() {
    ResponseDTO<ConsolidatedAPIResponseDTO> responseDTO = new ResponseDTO<>(HttpStatus.UNAUTHORIZED, null);
    return Mono.just(new ResponseEntity<>(responseDTO, HttpStatus.UNAUTHORIZED));
}

private Mono<ResponseEntity<ResponseDTO<ConsolidatedAPIResponseDTO>>> fetchAndProcessPageData(...) {
    // Current implementation from lines 123-169
}
```

This would make the main method more concise:
```java
return isAuthenticatedMono
    .flatMap(isAuthenticated -> {
        if (StringUtils.hasLength(defaultPageId) && !isAuthenticated) {
            return handleUnauthenticatedRequest();
        }
        return fetchAndProcessPageData(...);
    })
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 338357d50439ba3238e74d2ecc4ed4a820029925 and 923e8b4be7698af8e48f26e8061ab89e722b6bf3.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `app/server/appsmith-server/src/main/java/com/appsmith/server/controllers/ConsolidatedAPIController.java` (3 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (2)</summary>

* GitHub Check: server-unit-tests / server-unit-tests
* GitHub Check: server-spotless / spotless-check

</details>

<details>
<summary>🔇 Additional comments (3)</summary><blockquote>

<details>
<summary>app/server/appsmith-server/src/main/java/com/appsmith/server/controllers/ConsolidatedAPIController.java (3)</summary>

`11-11`: **Appropriate import for authentication.**

The SessionUserService import is correctly added to support the authentication check implementation.

---

`39-39`: **Constructor dependency injection looks good.**

Proper constructor injection for the SessionUserService dependency. This follows Spring's recommended dependency injection pattern.



Also applies to: 41-47

---

`108-112`: **Well-implemented reactive authentication check.**

The authentication check is implemented properly using reactive programming patterns. The `getCurrentUser()` followed by mapping to a boolean and providing a default value handles both authenticated and unauthenticated scenarios correctly.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3075945404,2852968353,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-20T07:16:55Z,"## Pull Request Overview

This PR adds an authentication guard to the consolidated API endpoint to return a 401 when `defaultPageId` is provided but no user is authenticated.  
- Injects `SessionUserService` into `ConsolidatedAPIController`  
- Wraps the existing API call in a check that returns 401 for unauthenticated requests with a `defaultPageId`  
- Preserves original ETag computation and response logic under authenticated or no-`defaultPageId` conditions


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**app/server/appsmith-server/src/main/java/com/appsmith/server/controllers/ConsolidatedAPIController.java:116**
* Add unit and integration tests covering the unauthorized scenario when a defaultPageId is provided but the user is unauthenticated, to verify a 401 status is returned.
```
if (StringUtils.hasLength(defaultPageId) && !isAuthenticated) {
```
</details>

"
3075945404,2852976737,trishaanand,COMMENTED,2025-05-20T07:19:59Z,
3075945404,2852992368,dvj1988,COMMENTED,2025-05-20T07:25:06Z,
3116895468,2895723540,coderabbitai[bot],COMMENTED,2025-06-04T08:06:28Z,"**Actionable comments posted: 1**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>src/utils/resource-formatter.ts (1)</summary><blockquote>

`138-144`: **Solid implementation for consistent resource URI formatting.**

The normalization logic correctly handles pluralization of resource types, ensuring consistent URI generation. The approach using a `base` variable is clean and maintainable.


Consider extracting the normalization logic into a separate function for better testability and reusability:

```diff
+function normalizeResourceType(resourceType: string): string {
+  if (resourceType === 'workflow') {
+    return 'workflows';
+  } else if (resourceType === 'execution') {
+    return 'executions';
+  }
+  return resourceType;
+}
+
 export function formatResourceUri(resourceType: 'workflow' | 'execution' | 'workflows' | 'execution-stats', id?: string): string {
-  let base: string = resourceType;
-
-  if (resourceType === 'workflow') {
-    base = 'workflows';
-  } else if (resourceType === 'execution') {
-    base = 'executions';
-  }
+  const base = normalizeResourceType(resourceType);
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between b04464e9f549d3657552ec53b84a264b3726b2d4 and 214cab112bfdb81b362393d0b940632c2db47fed.

</details>

<details>
<summary>📒 Files selected for processing (3)</summary>

* `src/utils/resource-formatter.ts` (1 hunks)
* `tests/unit/tools/workflow/simple-tool.test.ts` (1 hunks)
* `tests/unit/utils/resource-formatter.test.ts` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>tests/unit/utils/resource-formatter.test.ts (1)</summary><blockquote>

<details>
<summary>src/utils/resource-formatter.ts (1)</summary>

* `formatResourceUri` (137-150)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>🔇 Additional comments (2)</summary><blockquote>

<details>
<summary>tests/unit/tools/workflow/simple-tool.test.ts (1)</summary>

`46-46`: **Good type safety improvement!**

The explicit TypeScript type annotations enhance code clarity and type safety. The `Array<any>` type for workflows and `{ active?: boolean }` for the filter parameter are appropriate for this test helper function.

</details>
<details>
<summary>src/utils/resource-formatter.ts (1)</summary>

`147-149`: **Correct usage of normalized base value.**

The return statements properly use the normalized `base` value, ensuring consistent URI formatting for both cases (with and without ID).

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3127318171,2907640052,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-07T17:54:19Z,"## Pull Request Overview

This PR improves timing accuracy by refining the PPU mode transitions and enhancing the CPU interrupt handling to prioritize the highest priority interrupt. It also adds regression tests to verify the correct behavior of these changes.  
- Improved PPU clock handling with a loop-based mechanism to allow multiple mode transitions per clock call.  
- Refactored CPU interrupt handling to extract the highest priority interrupt using a bitwise mask.  
- Added regression tests for verifying interrupt prioritization and large cycle handling in the PPU.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated 1 comment.

| File      | Description                                                                         |
|-----------|-------------------------------------------------------------------------------------|
| src/ppu.rs | Adjusted timing boundaries and mode transitions with loop-based condition checks.    |
| src/cpu.rs | Refactored interrupt handling using bit manipulation for determining the highest priority interrupt.  |


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**src/ppu.rs:869**
* Consider using named constants (e.g., OAM_READ_DURATION) instead of hardcoded values like 80, 172, 204, and 456 to improve code readability and maintainability.
```
if self.mode_clock < 80 { break; }
```
</details>

"
3127318171,2908249443,coderabbitai[bot],COMMENTED,2025-06-08T08:11:22Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>CHANGELOG.md (1)</summary><blockquote>

`16-16`: **Apply hyphenation for compound adjective.**

Consider hyphenating ""priority based"" to ""priority-based"" as it functions as a compound adjective modifying ""handling"".



```diff
-* Added priority based handling of interrupts in the CPU
+* Added priority-based handling of interrupts in the CPU
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[uncategorized] ~16-~16: This expression is usually spelled with a hyphen.
Context: ...ed]  ### Added  *  ### Changed  * Added priority based handling of interrupts in the CPU  ### ...

(BASED_HYPHEN)

</details>

</details>

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 98e56be9e3d39ff717749a47d5301bb4398f2c8b and 02491d10e1512e42adebd83de5c351403efe736f.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `CHANGELOG.md` (1 hunks)
* `src/cpu.rs` (2 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 LanguageTool</summary>

<details>
<summary>CHANGELOG.md</summary>

[uncategorized] ~16-~16: This expression is usually spelled with a hyphen.
Context: ...ed]  ### Added  *  ### Changed  * Added priority based handling of interrupts in the CPU  ### ...

(BASED_HYPHEN)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (28)</summary>

* GitHub Check: Build Documentation (rustlang/rust:nightly)
* GitHub Check: Build Documentation (rust:latest)
* GitHub Check: Build Documentation (rust:1.85.0)
* GitHub Check: Build Documentation (rust:1.83.0)
* GitHub Check: Build Documentation (rust:1.84.0)
* GitHub Check: Build Documentation (rust:1.82.0)
* GitHub Check: Build SDL (1.85.0)
* GitHub Check: Build SDL (latest)
* GitHub Check: Build Libretro Android (1.82.0)
* GitHub Check: Build SDL (1.83.0)
* GitHub Check: Build SDL (1.84.0)
* GitHub Check: Build Libretro Android (latest)
* GitHub Check: Build SDL (1.82.0)
* GitHub Check: Build Libretro Android (1.83.0)
* GitHub Check: Build Libretro Android (1.85.0)
* GitHub Check: Build Libretro Android (1.84.0)
* GitHub Check: Build WASM (latest, 18)
* GitHub Check: Build WASM (1.85.0, 18)
* GitHub Check: Build WASM (1.82.0, 18)
* GitHub Check: Build WASM (1.84.0, 18)
* GitHub Check: Build WASM (1.83.0, 18)
* GitHub Check: Build (1.85.0)
* GitHub Check: Build (latest)
* GitHub Check: Build (1.84.0)
* GitHub Check: Build (1.82.0)
* GitHub Check: Build (1.83.0)
* GitHub Check: Build Mac
* GitHub Check: Build Windows

</details>

<details>
<summary>🔇 Additional comments (4)</summary><blockquote>

<details>
<summary>src/cpu.rs (4)</summary>

`189-196`: **Excellent implementation of priority-based interrupt handling.**

The refactoring correctly implements Game Boy interrupt priority by using bitwise manipulation to extract the highest priority interrupt. The use of `pending & (!pending + 1)` effectively isolates the lowest set bit, which corresponds to the highest priority interrupt.



The comments are clear and explain the logic well, addressing the previous review feedback about clarifying the bitwise manipulation.

---

`204-232`: **Well-structured interrupt dispatch logic.**

The match statement cleanly handles each interrupt type with proper acknowledgment calls and debug logging. The use of a mask-based approach ensures only one interrupt is processed per clock cycle, which aligns with Game Boy hardware behavior.

---

`233-240`: **Proper interrupt servicing completion.**

The logic correctly sets the PC to the interrupt handler address and clears the halted state. The early return with 20 cycles matches the documented Game Boy interrupt handling timing.

---

`949-978`: **Comprehensive test coverage for interrupt priority.**

The test effectively verifies that when multiple interrupts are pending (VBlank and JoyPad), the CPU services the higher priority interrupt (VBlank) first while leaving the lower priority interrupt pending. This validates the core functionality of the priority-based interrupt handling.



The test setup is thorough and the assertions correctly verify both the interrupt that was handled and the one that remains pending.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3127318171,2908408016,coderabbitai[bot],COMMENTED,2025-06-08T11:29:43Z,"**Actionable comments posted: 0**

<details>
<summary>♻️ Duplicate comments (1)</summary><blockquote>

<details>
<summary>src/cpu.rs (1)</summary><blockquote>

`194-196`: **Excellent bit manipulation technique for interrupt prioritization.**

The implementation correctly uses `pending & (!pending + 1)` to extract the lowest set bit, which corresponds to the highest priority interrupt in the Game Boy's interrupt system. The clarifying comment addresses the previous review feedback.

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>CHANGELOG.md (1)</summary><blockquote>

`16-16`: **Minor grammar improvement needed.**

Consider changing ""priority based"" to ""priority-based"" for proper hyphenation of compound adjectives.


```diff
-* Added priority based handling of interrupts in the CPU
+* Added priority-based handling of interrupts in the CPU
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[uncategorized] ~16-~16: This expression is usually spelled with a hyphen.
Context: ...lank DMA transfer  ### Changed  * Added priority based handling of interrupts in the CPU * Imp...

(BASED_HYPHEN)

</details>

</details>

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between dd877b2701991978f5fa88cbcb075f316c0154d7 and 6ff9d74cf7bcf23f9682842d242583baf975b846.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `CHANGELOG.md` (1 hunks)
* `src/cpu.rs` (2 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 LanguageTool</summary>

<details>
<summary>CHANGELOG.md</summary>

[uncategorized] ~16-~16: This expression is usually spelled with a hyphen.
Context: ...lank DMA transfer  ### Changed  * Added priority based handling of interrupts in the CPU * Imp...

(BASED_HYPHEN)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (27)</summary>

* GitHub Check: Build Documentation (rustlang/rust:nightly)
* GitHub Check: Build Documentation (rust:latest)
* GitHub Check: Build Documentation (rust:1.83.0)
* GitHub Check: Build Documentation (rust:1.84.0)
* GitHub Check: Build Libretro Android (1.83.0)
* GitHub Check: Build Documentation (rust:1.85.0)
* GitHub Check: Build Documentation (rust:1.82.0)
* GitHub Check: Build Libretro Android (latest)
* GitHub Check: Build Libretro Android (1.85.0)
* GitHub Check: Build Libretro Android (1.84.0)
* GitHub Check: Build Libretro Android (1.82.0)
* GitHub Check: Build WASM (1.82.0, 18)
* GitHub Check: Build WASM (1.85.0, 18)
* GitHub Check: Build WASM (latest, 18)
* GitHub Check: Build WASM (1.84.0, 18)
* GitHub Check: Build WASM (1.83.0, 18)
* GitHub Check: Build (latest)
* GitHub Check: Build (1.85.0)
* GitHub Check: Build (1.84.0)
* GitHub Check: Build (1.83.0)
* GitHub Check: Build SDL (1.84.0)
* GitHub Check: Build (1.82.0)
* GitHub Check: Build SDL (1.85.0)
* GitHub Check: Build SDL (latest)
* GitHub Check: Build SDL (1.83.0)
* GitHub Check: Build SDL (1.82.0)
* GitHub Check: Build Windows

</details>

<details>
<summary>🔇 Additional comments (4)</summary><blockquote>

<details>
<summary>src/cpu.rs (3)</summary>

`189-193`: **Clear documentation of interrupt priority handling.**

The updated comments accurately describe the Game Boy's interrupt prioritization system and improve code readability.

---

`198-232`: **Well-structured interrupt handling with correct vector addresses.**

The match statement approach provides a clean, maintainable structure for handling different interrupt types. All interrupt vector addresses are correct and the logic properly acknowledges each interrupt type.

---

`950-993`: **Comprehensive test for interrupt priority handling.**

This test thoroughly validates the priority-based interrupt handling by setting up multiple simultaneous interrupts and verifying they are processed in the correct order. The test covers all critical aspects: priority ordering, flag clearing, IME state transitions, and PC updates.

</details>
<details>
<summary>CHANGELOG.md (1)</summary>

`12-17`: **Changelog accurately documents the implemented features.**

The entries properly document both the HBlank DMA transfer support and the CPU interrupt handling improvements, providing clear visibility into the timing accuracy enhancements.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[uncategorized] ~16-~16: This expression is usually spelled with a hyphen.
Context: ...lank DMA transfer  ### Changed  * Added priority based handling of interrupts in the CPU * Imp...

(BASED_HYPHEN)

</details>

</details>

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3079015394,2856383564,coderabbitai[bot],COMMENTED,2025-05-21T05:55:24Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (9)</summary><blockquote>

<details>
<summary>packages/grida-canvas-io-svg/README.md (3)</summary><blockquote>

`1-4`: **Consider adding installation instructions**  
The README currently lacks a quickstart or installation section. Including a snippet like below helps users get started immediately:

```markdown
## Installation

```bash
npm install @grida/io-svg
```
```

---

`5-7`: **Unify API-stability phrasing**  
In other READMEs you use “API may change without notice.” Here it reads “API may change without notice” vs. “API may change.” For consistency, consider standardizing to something like:

> This package is **under development**; APIs may change without notice.

---

`9-13`: **Clarify limitations with guidance or links**  
You list unsupported features but don’t indicate what happens if users hit them. Consider linking to an issue tracker or adding a note on fallback behavior, e.g.:

```markdown
- Only a subset of SVG elements are recognized. (_Unsupported tags will be ignored — see [issues](…)_)
```

</blockquote></details>
<details>
<summary>packages/grida-canvas-bitmap/README.md (3)</summary><blockquote>

`1-6`: **Refine description and add installation**  
- Rephrase line 3 for clarity:

```diff
-Pixel-based graphics editor utilities used by the Grida canvas.
+Pixel-based graphics editor utilities for the Grida Canvas platform.
```

- Add a quick install section:

```markdown
## Installation

```bash
npm install @grida/bitmap
```
```

---

`7-10`: **Consistent API-stability statement**  
Here you say “APIs may change and features are incomplete.” To match the other packages, consider:

> This package is **under development**; APIs may change without notice and features may be incomplete.

---

`11-15`: **Enhance limitations with examples or links**  
The limitations are clear, but you might add sample code or links to issues for deeper context. E.g.:

```markdown
- Only basic brush modes and flood fill are implemented. (_See examples in [brush-utils.md](…)_)
```

</blockquote></details>
<details>
<summary>packages/grida-canvas-io-figma/README.md (3)</summary><blockquote>

`1-4`: **Add installation and usage sections**  
A quick install & usage snippet lowers the barrier for new users:

```markdown
## Installation

```bash
npm install @grida/io-figma
```

## Usage

```js
import { convertFigmaNode } from '@grida/io-figma';
// ...
```
```

---

`5-8`: **Standardize API-stability phrasing**  
The text “API may change without notice” should mirror the style used in the other READMEs. E.g.:

> This package is **under development**; APIs may change without notice.

---

`11-13`: **Typographical correction: hyphen and Oxford comma**  
In the second limitation bullet, add a hyphen and an Oxford comma:

```diff
- Boolean operations, component nodes and FigJam specific nodes are not handled.
+ Boolean operations, component nodes, and FigJam-specific nodes are not handled.
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 55adfd1e3f63d8df97fb34efb49679bd97dbddc8 and 220f5f5d54d9f4a6178c3373c760aaa9cb879c39.

</details>

<details>
<summary>📒 Files selected for processing (3)</summary>

* `packages/grida-canvas-bitmap/README.md` (1 hunks)
* `packages/grida-canvas-io-figma/README.md` (1 hunks)
* `packages/grida-canvas-io-svg/README.md` (1 hunks)

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3101601039,2879732351,greptile-apps[bot],COMMENTED,2025-05-29T22:16:24Z,"
## PR Summary

Adds automatic panel launch on application startup by modifying `AppDelegate.swift`. The implementation raises several concerns:

- Using `DispatchQueue.main.async` in `applicationDidFinishLaunching` could create race conditions with `PanelStateCoordinator.shared.state` initialization
- Need to ensure `PanelStateCoordinator` is properly configured before calling `launchPanel()` since it manages accessibility permissions
- Should verify panel state before launching in `applicationShouldHandleReopen` to avoid duplicate launches
- Consider using `NSScreen.visibleFrame` instead of `.frame` in panel positioning code to account for MenuBar/Dock

<sub>1 file(s) reviewed, no comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=onit_243)</sub>"
3089166694,2866779434,JamesHenry,COMMENTED,2025-05-25T09:22:59Z,
3089166694,2866779486,claude[bot],COMMENTED,2025-05-25T09:23:13Z,
3118566947,2897581575,ArthurSonzogni,COMMENTED,2025-06-04T17:40:30Z,+1
3128365797,2908483844,cursor[bot],COMMENTED,2025-06-08T13:44:59Z,"### ✅ BugBot reviewed your changes and found no bugs!

---

_Was this report helpful? Give feedback by reacting with 👍 or 👎_
"
3128365797,2908489602,cursor[bot],COMMENTED,2025-06-08T14:00:24Z,"### ✅ BugBot reviewed your changes and found no bugs!

---

_Was this report helpful? Give feedback by reacting with 👍 or 👎_
"
3128365797,2908494854,cursor[bot],COMMENTED,2025-06-08T14:16:58Z,"### ✅ BugBot reviewed your changes and found no bugs!

---

_Was this report helpful? Give feedback by reacting with 👍 or 👎_
"
3070310324,2847979935,ellipsis-dev[bot],COMMENTED,2025-05-17T04:53:16Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 00e4f49057eadf0c761893b30172293a8f3bba05 in <ellipsistime>44 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `13` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `1` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>documentation/integrations/supported-models.mdx:123</code></summary>
> 
> - **Draft comment:** 
> Fix typo: 'paramters' should be 'parameters'.
> - **Reason this comment was not posted:**
> Comment looked like it was already resolved.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_4mHWiVoyjE3QGraa`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3101786321,2879998831,sourcery-ai[bot],COMMENTED,2025-05-30T01:53:37Z,"Hey @mldangelo - I've reviewed your changes - here's some feedback:

- I see `visiblePromptCount` logic duplicated in both `ResultsView` and `ResultsTable`—consider extracting it into a shared hook or utility to DRY up the code.
- The prop name `showDifferentOption` is a bit generic—something like `enableDiffFilter` might more clearly convey its intent.

<details>
<summary>Here's what I looked at during the review</summary>

- 🟡 **General issues**: 1 issue found
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3101786321,2880159733,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-30T04:41:29Z,"## Pull Request Overview

This PR enhances the evaluation UI by hiding the “Show different outputs” filter when only a single prompt column is visible. Key changes:
- Compute `visiblePromptCount` in both `ResultsView` and `ResultsTable` to conditionally hide the diff option.
- Pass a new `showDifferentOption` prop into `FilterModeSelector`.
- Update `FilterModeSelector` and its tests to respect the new prop.

### Reviewed Changes

Copilot reviewed 4 out of 4 changed files in this pull request and generated 1 comment.

| File                                                     | Description                                                          |
| -------------------------------------------------------- | -------------------------------------------------------------------- |
| src/pages/eval/components/ResultsView.tsx                | Adds `visiblePromptCount` and passes `showDifferentOption` to selector |
| src/pages/eval/components/ResultsTable.tsx               | Adds `visiblePromptCount` and gates `showDiffs` on prompt count      |
| src/pages/eval/components/FilterModeSelector.tsx         | Introduces `showDifferentOption` prop and filters out “different” option |
| src/pages/eval/components/FilterModeSelector.test.tsx    | Adds tests to verify conditional rendering of the “different” option  |


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**src/app/src/pages/eval/components/ResultsTable.tsx:195**
* New behavior for hiding diffs based on `visiblePromptCount` isn’t covered by existing tests; consider adding unit tests to verify that `showDiffs` is false when only one prompt is visible.
```
const visiblePromptCount = React.useMemo(
```
</details>

"
3076876850,2854011820,ellipsis-dev[bot],COMMENTED,2025-05-20T12:38:39Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 0fe2f96b3e04da0b2d20f297b3b4b041384f2bc0 in <ellipsistime>54 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `25` lines of code in `2` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>.env.example:143</code></summary>
> 
> - **Draft comment:** 
> Ensure all components reference the updated variable name (HASURA_GRAPHQL_ADMIN_SECRET) consistently. Also update corresponding documentation if needed.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>hasura/docker-compose.yml:17</code></summary>
> 
> - **Draft comment:** 
> The default fallback value 'hasura' for HASURA_GRAPHQL_ADMIN_SECRET might pose a security risk in production. Consider requiring an explicit secret.
> - **Reason this comment was not posted:**
> Comment was on unchanged code.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_njyO9d5RRbkKFVnB`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3130798860,2910609930,coderabbitai[bot],COMMENTED,2025-06-09T16:33:30Z,"**Actionable comments posted: 1**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/utils/dataset_import.py (1)</summary><blockquote>

`224-224`: **Explicit UTF-8 encoding applied — approved**  
Specifying `encoding=""utf-8""` ensures Unicode CSVs are read correctly.  


**Consider BOM handling for UTF-8 files**  
If your CSVs sometimes include a BOM, switch to `encoding=""utf-8-sig""` to strip it automatically.  

Apply this diff if BOMs are encountered:

```diff
-    with open(dataset_path, ""r"", newline="""", encoding=""utf-8"") as csvfile:
+    with open(dataset_path, ""r"", newline="""", encoding=""utf-8-sig"") as csvfile:
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 67a1e865c3ff5fb97572eb6c750eb251d98a8f42 and 92570286886dbad1a5b3bc3a8e26a2b7505d124d.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `libs/core/kiln_ai/utils/dataset_import.py` (1 hunks)
* `libs/core/kiln_ai/utils/test_dataset_import.py` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>libs/core/kiln_ai/utils/test_dataset_import.py (1)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/utils/dataset_import.py (4)</summary>

* `DatasetFileImporter` (281-294)
* `ImportConfig` (25-44)
* `DatasetImportFormat` (16-21)
* `create_runs_from_file` (289-294)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (11)</summary>

* GitHub Check: Format and Lint Python
* GitHub Check: Web UI Code Format, Lint, Typecheck, Test, and Build
* GitHub Check: Build Desktop Apps (ubuntu-22.04-arm)
* GitHub Check: Build Desktop Apps (windows-latest)
* GitHub Check: Build Desktop Apps (macos-latest)
* GitHub Check: Build Desktop Apps (macos-13)
* GitHub Check: Build Desktop Apps (ubuntu-22.04)
* GitHub Check: Build, Typecheck, and Test Python (3.10)
* GitHub Check: Build, Typecheck, and Test Python (3.13)
* GitHub Check: Build, Typecheck, and Test Python (3.12)
* GitHub Check: Build, Typecheck, and Test Python (3.11)

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3130798860,2910850730,leonardmq,COMMENTED,2025-06-09T17:49:46Z,
3130798860,2911208752,leonardmq,COMMENTED,2025-06-09T20:04:57Z,
3130798860,2911210270,coderabbitai[bot],COMMENTED,2025-06-09T20:05:24Z,
3130798860,2911825624,scosman,APPROVED,2025-06-10T02:51:51Z,
3142207549,2923714745,hackwaly,COMMENTED,2025-06-13T07:39:08Z,
3087345437,2963154415,ChrisHuie,APPROVED,2025-06-26T18:40:57Z,
3104167804,2882404097,greptile-apps[bot],COMMENTED,2025-05-30T20:07:57Z,"
## PR Summary

Updates WebSearchButton styling to improve visual feedback when active, matching the Local Mode button's behavior in the toolbar.

- In `macos/Onit/UI/Prompt/WebSearchButton.swift`, text color in help tooltip should be explicitly set to avoid potential light mode readability issues
- The `activeColor` property in IconButton is set to white, which ensures consistent visibility against dark backgrounds
- Button uses `.gray700` for disabled state when API token isn't validated, providing clear visual feedback
- Uses `.blue400` for the inactive-but-available state, maintaining consistency with other toolbar buttons

<sub>1 file(s) reviewed, no comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=onit_249)</sub>"
3070854363,2848313413,ellipsis-dev[bot],COMMENTED,2025-05-17T15:15:31Z,"> [!CAUTION]
> **Changes requested  :x:**
> <details>
> <summary>Reviewed everything up to 5b8c0332d242a711bf06191b63a46583fc59ec88 in <ellipsistime>1 minute and 7 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `21` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `0` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> 
> Workflow ID: <workflowid>`wflow_5l2Ml8P1HODVygq4`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3132028438,2911866748,cubic-dev-ai[bot],COMMENTED,2025-06-10T03:32:57Z,"cubic found 1 issue across 3 files. Review it in [cubic.dev](https://cubic.dev/pr/cartography-cncf/cartography/pull/1624)

<sub>React with 👍 or 👎 to teach cubic. Tag `@cubic-dev-ai` to give specific feedback.</sub>"
3103760719,2889205473,ChrisHuie,APPROVED,2025-06-02T16:42:31Z,
3077536986,2854793778,github-actions[bot],COMMENTED,2025-05-20T16:03:03Z,"Your PR title doesn't match the required format. The title should be in this format: 

```
chore: update Text docs
fix: text not rendering
feat: add new feature to Text
breaking: remove Text#resolution 
```"
3077536986,2888216630,Zyie,APPROVED,2025-06-02T12:39:04Z,
3075460584,2852450431,jojocys,APPROVED,2025-05-20T03:39:44Z,
3086614280,2864697125,sourcery-ai[bot],COMMENTED,2025-05-23T14:48:00Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3086614280,2866955181,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-25T22:11:42Z,"## Pull Request Overview

Refactors prompt splitting in text files to line-based parsing, ensuring delimiters only split when on their own lines and preventing unwanted splits (e.g., repeated hyphens), with corresponding test updates.

- Switch from `.split(PROMPT_DELIMITER)` to a buffered, line-by-line flush approach.
- Update existing tests to wrap delimiters in newlines and add a new test for repeated hyphens.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated 1 comment.

| File                                  | Description                                                                         |
| ------------------------------------- | ----------------------------------------------------------------------------------- |
| test/prompts/processors/text.test.ts  | Adjusted test inputs to place delimiters on separate lines and added repeated-hyphen test |
| src/prompts/processors/text.ts        | Implemented line-buffer parsing with a `flush` helper, replacing simple `.split`   |


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**src/prompts/processors/text.ts:24**
* [nitpick] The comment `// no config` is vague and may confuse readers. Consider removing it or replacing it with a more descriptive explanation if needed.
```
// no config
```
**src/prompts/processors/text.ts:14**
* Add a test case to verify that CRLF (`\r\n`) line endings are handled correctly, ensuring splitting works on Windows-formatted files.
```
const lines = fileContent.split(/\r?\n/);
```
</details>

"
3101806239,2879931807,greptile-apps[bot],COMMENTED,2025-05-30T00:54:25Z,"
## PR Summary

Removes the unused 'How it Works' menu item and its associated file from the menu bar implementation.

- Removed `macos/Onit/Menu Bar/Content Rows/MenuHowItWorks.swift` file
- File name comment in `MenuBarContent.swift` ('MenuBarLabel.swift') doesn't match actual filename and should be updated
- Consider documenting the reason for removal in commit message or PR description to track the decision

<sub>2 file(s) reviewed, no comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=onit_245)</sub>"
3081555677,2919665611,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-12T06:13:55Z,"## Pull Request Overview

This PR introduces the Aegis dataset plugin for red teaming, wiring up its fetching, grading, configuration, documentation, and tests.

- Implements `fetchDataset`, `AegisPlugin`, and `AegisGrader` in code  
- Registers the plugin in plugin index, constants, config schema, and sidebars  
- Adds documentation pages and test coverage for fetch logic

### Reviewed Changes

Copilot reviewed 13 out of 13 changed files in this pull request and generated 1 comment.

<details>
<summary>Show a summary per file</summary>

| File                                    | Description                                           |
| --------------------------------------- | ----------------------------------------------------- |
| src/redteam/plugins/aegis.ts            | Implements dataset fetcher, plugin, and grader        |
| src/redteam/plugins/index.ts            | Registers `AegisPlugin` in plugin factory list        |
| src/redteam/constants/strategies.ts     | Adds `'aegis'` to dataset plugins list                |
| src/redteam/constants/plugins.ts        | Adds `'aegis'` to additional plugins                  |
| src/redteam/constants/metadata.ts       | Adds metadata mappings for `aegis`                    |
| src/redteam/graders.ts                  | Registers `AegisGrader` in graders map                |
| test/redteam/plugins/aegis.test.ts      | Tests fetch/filter and grader ID                      |
| test/redteam/constants/strategies.test.ts | Updates expected strategies list                     |
| test/redteam/constants.test.ts          | Updates dataset plugins length expectation            |
| site/static/config-schema.json          | Updates config schema to allow `aegis`                |
| site/sidebars.js                        | Adds `aegis` plugin to sidebar                        |
| site/docs/red-team/plugins/aegis.md     | New documentation page for Aegis plugin               |
| site/docs/_shared/data/plugins.ts       | Adds Aegis entry (and a duplicate Harmbench block)    |
</details>



<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**test/redteam/plugins/aegis.test.ts:43**
* Consider adding a test for `AegisPlugin.generateTests()` to verify that it correctly maps fetched cases into test cases with the expected `vars`, `metadata`, and `assert` fields.
```
describe('AegisGrader', () => {
```
**site/docs/_shared/data/plugins.ts:257**
* This block for the Harmbench plugin appears to be a duplicate and is inserted in the wrong location. It should be removed (or corrected) so that only the Aegis entry remains in this section.
```
description: 'Tests prompt injection attacks using the Harmbench dataset',
```
</details>

"
3081555677,2919673081,coderabbitai[bot],COMMENTED,2025-06-12T06:17:44Z,"**Actionable comments posted: 6**

<details>
<summary>🧹 Nitpick comments (12)</summary><blockquote>

<details>
<summary>test/redteam/constants/strategies.test.ts (1)</summary><blockquote>

`42-53`: **Consider decoupling tests from literal ordering of `DATASET_PLUGINS`**

The test uses `toEqual` against a hard-coded, order-sensitive array.  
Every time a new plugin is appended *anywhere* in `DATASET_PLUGINS`, both the constant **and** this fixture must be edited in lock-step, which is easy to forget and adds friction.

Two lightweight alternatives:
1. Assert membership only:

```ts
expect(DATASET_PLUGINS).toEqual(expect.arrayContaining(expectedPlugins));
```

2. Or sort both sides before comparison:

```ts
expect([...DATASET_PLUGINS].sort()).toEqual([...expectedPlugins].sort());
```

Either keeps the test green regardless of insertion position while still guaranteeing completeness.

</blockquote></details>
<details>
<summary>site/sidebars.js (1)</summary><blockquote>

`221-233`: **Maintain alphabetical ordering to reduce merge conflicts**

`'red-team/plugins/aegis'` is inserted after `'harmbench'`, ahead of `'harmful'`.  
Keeping the list alphabetically sorted (aegis → beavertails → …) makes future diff reviews simpler and minimizes merge-conflict frequency when multiple contributors touch this file.

```diff
-            'red-team/plugins/harmbench',
-            'red-team/plugins/aegis',
-            'red-team/plugins/harmful',
+            'red-team/plugins/aegis',
+            'red-team/plugins/beavertails',
+            'red-team/plugins/contracts',
+            // ...
```

(Re-shuffle the full block, not just the excerpt.)

</blockquote></details>
<details>
<summary>src/redteam/constants/strategies.ts (1)</summary><blockquote>

`26-36`: **Array order is inconsistent with alphabetical convention**

`'aegis'` is appended after `'toxic-chat'`.  In most of our constant lists we keep values alphabetical for readability; this one now deviates.

If ordering is *not* semantically meaningful (i.e. consumers iterate but don’t rely on position), consider:

```diff
-  'harmbench',
-  'toxic-chat',
-  'aegis',
-  'pliny',
+  'harmbench',
+  'aegis',
+  'pliny',
+  'toxic-chat',
```

and then amending tests to be order-agnostic (see prior comment) to avoid brittle coupling.

</blockquote></details>
<details>
<summary>src/redteam/constants/plugins.ts (1)</summary><blockquote>

`144-151`: **`'aegis'` breaks alphabetical ordering at the start of `ADDITIONAL_PLUGINS`**

The list has so far been alphabetical, aiding quick look-ups.  Dropping a new id at the head hampers that benefit and increases merge-conflict surface.

Either sort the array or, better, generate `ALL_PLUGINS` from a `Set` then `.sort()` (which you already do) and make tests rely on the sorted value, freeing individual source arrays from ordering constraints.

```diff
-export const ADDITIONAL_PLUGINS = [
-  'aegis',
-  'ascii-smuggling',
+export const ADDITIONAL_PLUGINS = [
+  'ascii-smuggling',
+  'aegis',
```

</blockquote></details>
<details>
<summary>src/redteam/plugins/index.ts (2)</summary><blockquote>

`20-23`: **Import ordering becoming harder to scan**

The new `AegisPlugin` import is wedged between unrelated util imports and the long block of plugin imports.  Keeping all plugin-specific imports grouped (and preferably alphabetised) improves readability and makes future merge-conflict resolution easier.



```diff
-import { AegisPlugin } from './aegis';
...
-import { ToxicChatPlugin } from './toxicchat';
-import { UnsafeBenchPlugin } from './unsafebench';
-import { XSTestPlugin } from './xstest';
+import { ToxicChatPlugin } from './toxicchat';
+import { UnsafeBenchPlugin } from './unsafebench';
+import { XSTestPlugin } from './xstest';
+import { AegisPlugin } from './aegis';         // move to keep all plugin imports together
```

---

`170-178`: **Plugin list is no longer alphabetically sorted**

In `pluginFactories`, entries are roughly in alphabetical order; inserting `'aegis'` after `'toxic-chat'` deviates.  Consider moving it up (e.g. right after `'ascii-smuggling'`) to keep the list predictable.

</blockquote></details>
<details>
<summary>site/static/config-schema.json (1)</summary><blockquote>

`1244-1252`: **Schema bloat starting to hurt maintainability**

The ever-growing static enum list is already ~1 400 items.  Editing by hand is error-prone.  Consider generating this section from `src/redteam/constants/plugins.ts` during the docs build to avoid manual sync issues.

</blockquote></details>
<details>
<summary>test/redteam/plugins/aegis.test.ts (2)</summary><blockquote>

`1-8`: **`jest.mocked` loses type-safety without explicit casting**

`jest.mocked(fetchHuggingFaceDataset)` returns `undefined` typing unless `@types/jest` ≥29 and `esModuleInterop` are enabled.  To avoid TS errors, cast explicitly:



```diff
-import { fetchHuggingFaceDataset } from '../../../src/integrations/huggingfaceDatasets';
+import { fetchHuggingFaceDataset } from '../../../src/integrations/huggingfaceDatasets';
+import type { Mocked } from 'jest-mock';
```

…and use `const mockedHf = fetchHuggingFaceDataset as Mocked<typeof fetchHuggingFaceDataset>;`

---

`36-40`: **Prefer `clearAllMocks` over `resetAllMocks`**

`resetAllMocks` re-creates mock implementations but also resets usage data, which is overkill here.  `clearAllMocks` keeps the mocks but wipes call counts, making tests slightly faster.

</blockquote></details>
<details>
<summary>src/redteam/plugins/aegis.ts (1)</summary><blockquote>

`68-80`: **Labels lost in variable injection**

`fetchDataset` already extracts `labels_0`, but `generateTests` drops it from `vars`; it is only placed in `metadata`.  
Down-stream graders that rely on `${{labels_0}}` inside their rubric/templates will not see it.

Either keep the label in `vars` or document that graders must read it from `metadata`.

</blockquote></details>
<details>
<summary>src/redteam/constants/metadata.ts (1)</summary><blockquote>

`422-423`: **Sorting nit – keep dataset list alphabetical**

For readability the `Datasets` category is alphabetically ordered; inserting `'aegis'` mid-list breaks that convention.  
Move `'aegis'` above `'beavertails'`.

</blockquote></details>
<details>
<summary>site/docs/red-team/plugins/aegis.md (1)</summary><blockquote>

`59-63`: **Minor grammar – missing “of”**

> “Nuanced handling **of** ambiguous ‘Needs Caution’ cases”

```diff
- - Nuanced handling of ambiguous ""Needs Caution"" cases
+ - Nuanced handling of ambiguous ""Needs Caution"" cases
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[uncategorized] ~61-~61: Possible missing preposition found.
Context: ... - Nuanced handling of ambiguous ""Needs Caution"" cases - Consistent safety responses ac...

(AI_HYDRA_LEO_MISSING_OF)

</details>

</details>

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between c592fdb6291ceadb0e4a73f206dad2ed23186930 and 77c04c3155bd73c3d7160cde66a5e94d35c23f09.

</details>

<details>
<summary>📒 Files selected for processing (13)</summary>

* `site/docs/_shared/data/plugins.ts` (1 hunks)
* `site/docs/red-team/plugins/aegis.md` (1 hunks)
* `site/sidebars.js` (1 hunks)
* `site/static/config-schema.json` (2 hunks)
* `src/redteam/constants/metadata.ts` (6 hunks)
* `src/redteam/constants/plugins.ts` (1 hunks)
* `src/redteam/constants/strategies.ts` (1 hunks)
* `src/redteam/graders.ts` (2 hunks)
* `src/redteam/plugins/aegis.ts` (1 hunks)
* `src/redteam/plugins/index.ts` (2 hunks)
* `test/redteam/constants.test.ts` (1 hunks)
* `test/redteam/constants/strategies.test.ts` (1 hunks)
* `test/redteam/plugins/aegis.test.ts` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>📓 Path-based instructions (1)</summary>

<details>
<summary>`src/**`: - This is a CLI tool so errors need to be handled gracefully and logged with lots of information so the user can give us enough data to fix the issue or pass it to the de...</summary>

> `src/**`: - This is a CLI tool so errors need to be handled gracefully and logged with lots of information so the user can give us enough data to fix the issue or pass it to the developers.
> 

- `src/redteam/constants/strategies.ts`
- `src/redteam/graders.ts`
- `src/redteam/constants/plugins.ts`
- `src/redteam/plugins/index.ts`
- `src/redteam/constants/metadata.ts`
- `src/redteam/plugins/aegis.ts`

</details>

</details><details>
<summary>🧬 Code Graph Analysis (3)</summary>

<details>
<summary>src/redteam/graders.ts (1)</summary><blockquote>

<details>
<summary>src/redteam/plugins/aegis.ts (1)</summary>

* `AegisGrader` (83-113)

</details>

</blockquote></details>
<details>
<summary>test/redteam/constants.test.ts (1)</summary><blockquote>

<details>
<summary>src/redteam/constants/strategies.ts (1)</summary>

* `DATASET_PLUGINS` (26-36)

</details>

</blockquote></details>
<details>
<summary>src/redteam/plugins/index.ts (1)</summary><blockquote>

<details>
<summary>src/redteam/plugins/aegis.ts (1)</summary>

* `AegisPlugin` (51-81)

</details>

</blockquote></details>

</details><details>
<summary>🪛 LanguageTool</summary>

<details>
<summary>site/docs/red-team/plugins/aegis.md</summary>

[uncategorized] ~61-~61: Possible missing preposition found.
Context: ... - Nuanced handling of ambiguous ""Needs Caution"" cases - Consistent safety responses ac...

(AI_HYDRA_LEO_MISSING_OF)

</details>

</details>

</details>

<details>
<summary>🔇 Additional comments (5)</summary><blockquote>

<details>
<summary>test/redteam/constants.test.ts (1)</summary>

`124-139`: **LGTM – tests updated in sync with constant change**

The additional expectation for `'aegis'` and the length assertion keep the test consistent with the newly introduced plugin.

</details>
<details>
<summary>src/redteam/graders.ts (1)</summary>

`1-1`: **Circular-dependency risk**

`AegisGrader` is imported from `./plugins/aegis`, which in turn likely imports from this file (`GRADERS` or shared types).  If that happens we may hit a runtime circular-import.  Please verify `src/redteam/plugins/aegis.ts` does not import from `src/redteam/graders.ts`; if it does, refactor to invert the dependency.

</details>
<details>
<summary>site/static/config-schema.json (1)</summary>

`1068-1076`: **Duplicate enum values are easy to introduce**

`""aegis""` is added to the very long enum list.  A quick grep shows two insertions (string-enum and object-enum).  Ensure there aren’t additional hidden duplicates, as JSON-schema validators may treat duplicates as errors.

</details>
<details>
<summary>src/redteam/plugins/aegis.ts (1)</summary>

`23-37`: **Filtering may over-exclude valid samples**

The dataset’s `text_type` field sometimes uses `""assistant_message""` / `""system_message""` for multi-turn conversations.  
By hard-filtering on `text_type === 'user_message'`, we discard legitimate queries that still need grading and reduce variety.

Consider accepting all records with `text_type` in `{user_message, assistant_message}` and marking the role in metadata.

</details>
<details>
<summary>src/redteam/constants/metadata.ts (1)</summary>

`257-261`: **Key uses short id – will not match the namespaced id in plugin file**

`riskCategorySeverityMap` (and similar maps below) reference `'aegis'`. If the plugin keeps the namespaced id, look-ups will fail.

Align the key with whatever value `AegisPlugin.id` finally uses.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3124188120,2904357210,coderabbitai[bot],COMMENTED,2025-06-06T09:23:25Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>mistralrs-core/Cargo.toml (1)</summary><blockquote>

`21-99`: **Bulk migrate core dependencies to workspace.**
The extensive conversion of dependencies to `workspace = true` centralizes version management, reduces divergence, and simplifies maintenance.  
 Consider alphabetizing entries within this section for easier navigation and future additions.

</blockquote></details>
<details>
<summary>Cargo.toml (1)</summary><blockquote>

`95-167`: **Comprehensive addition of workspace dependencies.**
The new block centralizes a broad set of crates under workspace management, which enhances uniformity across all member crates.  
 Monitor overall workspace size and prune unused dependencies periodically to avoid bloat.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between cfd1e89ec03350d51dc4e2d9498a8ed1d426fa84 and d9a49d22bd5b6897ba20aa3d5abae071bed5fff1.

</details>

<details>
<summary>📒 Files selected for processing (10)</summary>

* `Cargo.toml` (1 hunks)
* `mistralrs-bench/Cargo.toml` (1 hunks)
* `mistralrs-core/Cargo.toml` (2 hunks)
* `mistralrs-paged-attn/Cargo.toml` (1 hunks)
* `mistralrs-pyo3/Cargo.toml` (2 hunks)
* `mistralrs-quant/Cargo.toml` (2 hunks)
* `mistralrs-server-core/Cargo.toml` (1 hunks)
* `mistralrs-server/Cargo.toml` (1 hunks)
* `mistralrs-web-chat/Cargo.toml` (1 hunks)
* `mistralrs/Cargo.toml` (2 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (9)</summary>

* GitHub Check: Docs
* GitHub Check: Clippy
* GitHub Check: Check (ubuntu-latest, stable)
* GitHub Check: Check (windows-latest, stable)
* GitHub Check: Test Suite (macOS-latest, stable)
* GitHub Check: Check (macOS-latest, stable)
* GitHub Check: Test Suite (windows-latest, stable)
* GitHub Check: Test Suite (ubuntu-latest, stable)
* GitHub Check: comment

</details>

<details>
<summary>🔇 Additional comments (19)</summary><blockquote>

<details>
<summary>mistralrs-pyo3/Cargo.toml (2)</summary>

`20-20`: **Align `mistralrs-core` dependency with workspace setup**  
Replacing the explicit version/path with `workspace = true` while retaining the `pyo3_macros` feature is correct and keeps feature flags intact.

---

`39-39`: **Migrate `pyo3-build-config` to workspace build-dependency**  
Switching to `workspace = true` here centralizes build-dependency management. Looks good.

</details>
<details>
<summary>mistralrs-server-core/Cargo.toml (3)</summary>

`24-26`: **Convert `mistralrs-core` to workspace dependency with API features**  
The inline table preserves the `utoipa` feature while inheriting the version from the workspace. Approved.

---

`31-31`: **Upgrade `tower-http` to a workspace member**  
Maintains the `cors` feature and aligns with workspace dependency management. No concerns.

---

`35-35`: **Migrate `utoipa-swagger-ui` under workspace**  
Retains the `axum` feature flag correctly and centralizes the dependency. Approved.

</details>
<details>
<summary>mistralrs-bench/Cargo.toml (2)</summary>

`21-21`: **Switch `mistralrs-core` to workspace-managed version**  
Aligns the benchmark crate’s core dependency with the workspace. Looks correct.

---

`24-24`: **Use workspace version for `cli-table`**  
Centralizes the CLI table dependency in the workspace. Approved.

</details>
<details>
<summary>mistralrs-paged-attn/Cargo.toml (2)</summary>

`19-20`: **Adopt workspace inheritance for `thiserror` and `once_cell`**  
Switching these to `workspace = true` centralizes version control. No issues detected.

---

`23-23`: **Convert `bindgen_cuda` build-dependency to workspace**  
Retains the `optional = true` flag while inheriting the version. Looks good.

</details>
<details>
<summary>mistralrs/Cargo.toml (2)</summary>

`15-15`: **Migrate `mistralrs-core` dependency to workspace**  
The root crate now references the core crate through the workspace. Approved.

---

`27-27`: **Centralize `rand` dependency in workspace**  
Randomization crate now managed globally via the workspace. No concerns.

</details>
<details>
<summary>mistralrs-quant/Cargo.toml (4)</summary>

`20-21`: **Consistent workspace dependency for `lazy_static` and `paste`.**
Switching these crates to `workspace = true` aligns with the rest of the project’s dependency strategy and prevents version drift.

---

`24-24`: **Unified `byteorder` under workspace.**
This change ensures `byteorder` versioning is centrally managed, simplifying upgrades.

---

`28-30`: **Centralized workspace deps for `thiserror`, `yoke`, and `memmap2`.**
All three are now resolved from the workspace, improving consistency and avoiding duplication.

---

`48-48`: **Standardized build-dependency `bindgen_cuda`.**
Aligning `bindgen_cuda` as a workspace build-dependency maintains a single source of truth for its version.

</details>
<details>
<summary>mistralrs-server/Cargo.toml (2)</summary>

`19-20`: **Switch `ctrlc` and `directories` to workspace-managed deps.**
These crates now inherit versions from the workspace, streamlining dependency updates.

---

`23-24`: **Align internal crate refs to workspace.**
Switching `mistralrs-core` and `mistralrs-server-core` to workspace dependencies centralizes version control and reduces coupling to fixed paths.

</details>
<details>
<summary>mistralrs-core/Cargo.toml (1)</summary>

`130-130`: **Unified `bindgen_cuda` build-dependency.**
Consistent with other crates, making `bindgen_cuda` a workspace-managed optional build-dependency ensures a single version reference.

</details>
<details>
<summary>mistralrs-web-chat/Cargo.toml (1)</summary>

`8-36`: **Workspace-managed dependencies for web-chat crate.**
All runtime and framework dependencies have been switched to `workspace = true`, ensuring consistent versioning across the entire workspace.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3121659401,2900778780,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-05T15:19:50Z,"## Pull Request Overview

This PR fixes the search functionality in the organization dropdown by updating the value logic to accommodate display names.  
- Updates the value attribute on CommandItem to use getDisplayName(org) with a fallback to org.id.



"
3122030212,2913101970,alehander92,APPROVED,2025-06-10T11:14:49Z,
3070949788,2848358087,coderabbitai[bot],COMMENTED,2025-05-17T17:29:02Z,"**Actionable comments posted: 5**

<details>
<summary>🔭 Outside diff range comments (1)</summary><blockquote>

<details>
<summary>mistralrs-quant/src/blockwise_fp8/ops.rs (1)</summary><blockquote>

`1-4`: _⚠️ Potential issue_

**Missing `CustomOp3` import breaks compilation**

`Fp8BlockwiseGemm` implements `CustomOp3`, but the trait is not brought into scope.  
`cargo check` currently fails with  

```
error[E0433]: failed to resolve: use of undeclared type `CustomOp3`
```  

Add the import next to the other `candle_core` items:

```diff
-use candle_core::{CpuStorage, CustomOp2, DType, Result, Tensor, WithDType};
+use candle_core::{CpuStorage, CustomOp2, CustomOp3, DType, Result, Tensor, WithDType};
```

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (4)</summary><blockquote>

<details>
<summary>mistralrs-quant/build.rs (1)</summary><blockquote>

`79-97`: **Factor-out the repetitive flag-replacement logic**

The three almost-identical blocks that toggle `HAVE_*_KERNELS` are very verbose and easy to get out of sync.  A small helper such as

```rust
fn toggle_flag(path: &str, key: &str, value: &str) -> std::io::Result<()> {
    let mut ct = std::fs::read_to_string(path)?;
    ct = ct
        .replace(&format!(""pub(crate) const {key}: bool = true;""),
                 &format!(""pub(crate) const {key}: bool = {value};""))
        .replace(&format!(""pub(crate) const {key}: bool = false;""),
                 &format!(""pub(crate) const {key}: bool = {value};""));
    std::fs::write(path, ct)
}
```

would eliminate duplication and guarantee all flags are handled consistently.

</blockquote></details>
<details>
<summary>mistralrs-quant/kernels/blockwise_fp8/blockwise_fp8_gemm.cu (2)</summary><blockquote>

`28-54`: **Kernel is functionally correct but may become a performance bottleneck**

Each thread performs a full `in_dim` dot-product in global memory.  For
large `in_dim` this yields poor memory-bandwidth utilisation and no reuse of
`weight`/`input` tiles.

Consider:

* Loading tiles of `weight`/`input` into shared memory and accumulating with
  warp-level primitives (e.g. WMMA) – you already require CC ≥ 8.0.
* Using `__half2` / `__nv_bfloat162` vector types to double throughput when
  `in_dim` is even.
* Exploiting tensor-cores with the dedicated FP8 GEMM API (`mma.sync`).

These changes are optional for correctness but could provide an order of
magnitude speed-up.

---

`71-78`: **Hard-coded launch config may under-utilise the SM**

`blockDim(16,16)` is fine for small matrices, but for tall-and-skinny or wide
matrices many threads remain idle.  You can expose the block size as a compile-time
template parameter or choose it heuristically at launch based on `in_dim/out_dim`.

</blockquote></details>
<details>
<summary>mistralrs-quant/src/blockwise_fp8/ops.rs (1)</summary><blockquote>

`378-443`: **Nit: unify dtype guard with weight dtype check**

A quick guard

```rust
if w_s.dtype() != DType::F8E4M3 {
    candle_core::bail!(""Weight must be FP8 (F8E4M3)"");
}
```

before slicing avoids UB if an unexpected tensor slips through.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**
**Cache: Disabled due to data retention organization setting**
**Knowledge Base: Disabled due to data retention organization setting**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 43eff9641fce6187d73cc2a56ab74a70deea3f9c and 39861b8cb339cb1c7edb812d3925de785b0f1e06.

</details>

<details>
<summary>📒 Files selected for processing (5)</summary>

* `mistralrs-quant/build.rs` (2 hunks)
* `mistralrs-quant/kernels/blockwise_fp8/blockwise_fp8_gemm.cu` (1 hunks)
* `mistralrs-quant/kernels/blockwise_fp8/blockwise_fp8_gemm_dummy.cu` (1 hunks)
* `mistralrs-quant/src/blockwise_fp8/ffi.rs` (2 hunks)
* `mistralrs-quant/src/blockwise_fp8/ops.rs` (4 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 GitHub Check: Check (macOS-latest, stable)</summary>

<details>
<summary>mistralrs-quant/src/blockwise_fp8/ops.rs</summary>

[failure] 310-310: 
cannot find trait `CustomOp3` in this scope

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: Docs
* GitHub Check: Test Suite (macOS-latest, stable)
* GitHub Check: Test Suite (windows-latest, stable)
* GitHub Check: Test Suite (ubuntu-latest, stable)
* GitHub Check: Clippy

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>mistralrs-quant/build.rs (1)</summary>

`108-116`: **Double-check kernel list ordering to avoid ODR issues**

`blockwise_fp8_gemm.cu` is appended after `blockwise_fp8.cu` for CC ≥ 8.0, while the dummy variant is appended after the dummy dequant file for lower CC.  
If both “real” and “dummy” files were ever compiled into the same TU by mistake, you could hit one-definition-rule/link conflicts.  Consider grouping GEMM and dequant files into their own `if/else` blocks or placing them in distinct static libraries to make such mix-ups impossible.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3124757808,2904964445,alehander92,APPROVED,2025-06-06T13:40:08Z,
3129125271,2908906142,greptile-apps[bot],COMMENTED,2025-06-09T04:47:23Z,"
## PR Summary

Adds a new window resize mode for pinned panels, allowing users to choose between resizing only overlapping windows or all windows. Implementation spans across panel management, persistence, and settings UI.

- Window positioning in `PanelStatePinnedManager+Resize.swift` should use `visibleFrame` instead of `frame` for NSScreen objects to account for MenuBar and Dock
- New text fields in `GeneralTab.swift` settings view don't specify a foreground color, which could cause readability issues in light mode
- `PinnedResizeMode.swift` needs default case handling and documentation for enum cases
- Verify persistence implementation properly serializes custom enum with `Defaults.Serializable`
- Consider impact on accessibility when all windows are forcibly resized in `.all` mode

<sub>4 file(s) reviewed, 2 comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=onit_267)</sub>"
3092307182,2869325456,ellipsis-dev[bot],COMMENTED,2025-05-27T01:28:35Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed dbcb336137952f568d4e06b1f35f06c3755d0d28 in <ellipsistime>59 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `108` lines of code in `2` files
> - Skipped `0` files when reviewing.
> - Skipped posting `5` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern/client/workflows/client.py:112</code></summary>
> 
> - **Draft comment:** 
> Docstring updated in create_workflow: changed from 'Create a new workflow definition' to 'Create a new workflow'. Verify that the simplified wording remains clear to users.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>skyvern/client/workflows/client.py:186</code></summary>
> 
> - **Draft comment:** 
> Docstring updated in update_workflow: now states 'Update a workflow' instead of '...definition'. Ensure consistency with API behavior.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>skyvern/forge/sdk/routes/agent_protocol.py:353</code></summary>
> 
> - **Draft comment:** 
> Summary in get_run endpoint changed to 'Get a run by id'. This concise wording may obscure that both task and workflow runs are covered; confirm that additional docs clarify this.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>skyvern/forge/sdk/routes/agent_protocol.py:393</code></summary>
> 
> - **Draft comment:** 
> Summary in cancel_run endpoint updated to 'Cancel a run by id'. Ensure this remains clear that it covers both task and workflow runs.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>skyvern/forge/sdk/routes/agent_protocol.py:466</code></summary>
> 
> - **Draft comment:** 
> Descriptions for create_workflow_legacy and update_workflow_legacy are simplified (removed 'definition'). Confirm that the new wording ('Create a new workflow' / 'Update a workflow') accurately reflects API behavior and doesn’t omit needed details.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_JjAp5Bntl50kQKrJ`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3092307182,2869326358,ellipsis-dev[bot],COMMENTED,2025-05-27T01:29:35Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to dbcb336137952f568d4e06b1f35f06c3755d0d28 in <ellipsistime>1 minute and 59 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `108` lines of code in `2` files
> - Skipped `0` files when reviewing.
> - Skipped posting `5` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern/client/workflows/client.py:111</code></summary>
> 
> - **Draft comment:** 
> Docstring simplified: 'Create a new workflow definition' is now 'Create a new workflow', which improves clarity.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is purely informative, as it only praises the simplification of a docstring without providing any actionable feedback or suggestions. It does not align with the rules for useful comments.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>skyvern/forge/sdk/routes/agent_protocol.py:270</code></summary>
> 
> - **Draft comment:** 
> Updated run_workflow endpoint tags and sdk group: switched from 'Agent' to 'Workflows' to better categorize the endpoint.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is purely informative, as it only describes a change that was made without providing any suggestion, question, or request for confirmation. It does not align with the rules for useful comments.
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>skyvern/forge/sdk/routes/agent_protocol.py:348</code></summary>
> 
> - **Draft comment:** 
> GET /runs/{run_id} endpoint now uses tags [""Agent"", ""Workflows""] and a concise summary 'Get a run by id' for improved documentation clarity.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is purely informative, providing details about changes made to the documentation tags and summary. It does not suggest any code changes or ask for confirmation on specific code behavior.
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>skyvern/forge/sdk/routes/agent_protocol.py:392</code></summary>
> 
> - **Draft comment:** 
> Cancellation endpoint updated: summary changed to 'Cancel a run by id' and tags now include ['Agent', 'Workflows'], ensuring consistency across endpoints.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is purely informative, describing changes made to the endpoint's summary and tags. It doesn't provide any actionable feedback or suggestions for improvement.
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>skyvern/forge/sdk/routes/agent_protocol.py:466</code></summary>
> 
> - **Draft comment:** 
> Legacy workflow endpoints (create/update) now have simplified descriptions (removing 'definition') for consistency with current docs.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is purely informative, describing a change made to the documentation for consistency. It does not provide any actionable feedback or suggestions for improvement.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_RDX3iATTtgZsfaqe`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3119295358,2915278777,cmpadden,APPROVED,2025-06-10T23:52:45Z,
3116482876,2895263933,greptile-apps[bot],COMMENTED,2025-06-04T05:27:59Z,"
## PR Summary

This PR introduces a new GitHub Code connector implementation for indexing and searching code repositories, with Tree-sitter integration for AST-based code parsing and multiple embedding model support.

- The Tree-sitter integration in `build_treesitter_bundle.py` needs error handling for grammar compilation failures and validation of output paths
- The embedding pipeline in `embedding.py` has missing imports (`os`), lacks error propagation, and needs token limit validation for API calls
- The test coverage in `test_connector.py` is incomplete, missing critical test cases for error handling, rate limits, and authentication
- The connector configuration in `config.py` should consider adding validation for token scopes and rate limit settings
- The Docker build process needs optimization as adding torch/numpy significantly increases image size - consider using smaller alternatives or separate build stages

<sub>💡 (2/5) Greptile learns from your feedback when you react with 👍/👎!</sub>

<sub>16 file(s) reviewed, 21 comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=onyx_4823)</sub>"
3080543697,2858092249,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-21T15:01:25Z,"## Pull Request Overview

This PR removes an unused download script and updates the download fallback logic along with the README instructions.  
- Updated tests to simulate S3 and HuggingFace URL fallbacks using a monkeypatched urlopen.  
- Modified fallback URL logic in the model loading module to include both HuggingFace and a Google Cloud Storage fallback.  
- Revised README to clarify manual download instructions with fallback links.

### Reviewed Changes

Copilot reviewed 3 out of 3 changed files in this pull request and generated no comments.

| File                           | Description                                                                                  |
| ------------------------------ | -------------------------------------------------------------------------------------------- |
| tests/test_download_fallbacks.py | New test to verify that the S3 fallback URL is used when the primary HuggingFace URL fails.   |
| src/tabpfn/model/loading.py      | Updated fallback URL generation and error handling in download logic to support dual sources.  |
| README.md                      | Updated manual download instructions to reference the fallback URL for both models.           |


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**src/tabpfn/model/loading.py:39**
* [nitpick] The variable 'FALLBACK_S3_BASE_URL' references a Google Cloud Storage URL, which might be misleading. Consider renaming it to reflect the actual storage provider (e.g., 'FALLBACK_CLOUD_STORAGE_URL').
```
FALLBACK_S3_BASE_URL = ""https://storage.googleapis.com/tabpfn-v2-model-files/05152025""
```
</details>

"
3089039212,2866723356,github-advanced-security[bot],COMMENTED,2025-05-25T04:50:07Z,
3089039212,2866724463,sourcery-ai[bot],COMMENTED,2025-05-25T04:59:08Z,"Hey @mldangelo - I've reviewed your changes - here's some feedback:

- Consider extracting `sanitizeMarkdown` into a shared utility module to keep the Docusaurus config focused and make it reusable elsewhere.
- You’re sanitizing markdown both when serving and writing files—unify those calls to avoid redundant processing and ensure the `content` variable is correctly scoped.
- After simplifying the CopyPageButton CSS, double-check that keyboard focus and other accessibility indicators still render correctly.

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3089039212,2866724511,github-advanced-security[bot],COMMENTED,2025-05-25T04:59:27Z,
3089039212,2866862015,github-advanced-security[bot],COMMENTED,2025-05-25T14:36:09Z,
3089039212,2866955208,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-25T22:11:48Z,"## Pull Request Overview

This PR adds a markdown sanitization utility (with tests) and refactors the “Copy page” button to a minimalist icon-only variant, plus related config updates.

- Introduce `sanitizeMarkdown` util, wire it into Docusaurus routes and build, and add comprehensive tests  
- Update `CopyPageButton` to an icon-only button, reposition it absolutely, and adjust its styles  
- Exclude test files in `site/tsconfig.json` for cleaner builds

### Reviewed Changes

Copilot reviewed 9 out of 9 changed files in this pull request and generated 3 comments.

<details>
<summary>Show a summary per file</summary>

| File                               | Description                                                |
|------------------------------------|------------------------------------------------------------|
| test/site/markdown.test.ts         | New tests for `sanitizeMarkdown`, covering frontmatter, HTML, images, whitespace |
| site/src/utils/markdown.ts         | Implement `sanitizeMarkdown` with regex-based removals     |
| site/src/theme/DocItem/index.js    | Wraps `CopyPageButton` in a relative container             |
| site/src/components/CopyPageButton.tsx | Remove text label, keep accessible aria-label only         |
| site/src/components/CopyPageButton.module.css | New absolute positioning and updated button styles         |
| site/docusaurus.config.ts          | Import and apply `sanitizeMarkdown` in API and build steps |
| site/tsconfig.json                 | Exclude test files to avoid compiling them in production   |
| .vscode/settings.json              | Add “llms” to workspace settings                           |
</details>




"
3089039212,2867098891,typpo,APPROVED,2025-05-26T02:44:37Z,seems fine
3092347933,2869367665,ellipsis-dev[bot],COMMENTED,2025-05-27T02:05:04Z,"> [!CAUTION]
> **Changes requested  :x:**
> <details>
> <summary>Reviewed 6bc5969dbc5d7583b21a00ecdee38ac293415e80 in <ellipsistime>1 minute and 50 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `113` lines of code in `2` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern/cli/llm_setup.py:96</code></summary>
> 
> - **Draft comment:** 
> New Anthropic model options (CLAUDE3.5_HAIKU, CLAUDE4_OPUS, CLAUDE4_SONNET) added to the list are consistent with backend registration. Ensure naming remains aligned with config entries.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>skyvern/forge/sdk/api/llm/config_registry.py:330</code></summary>
> 
> - **Draft comment:** 
> Typographical observation: The config key 'BEDROCK_ANTHROPIC_CLAUDE3.5_SONNET_V1' includes 'SONNET', whereas the PR title refers to Haiku models. Please confirm if this is an intentional naming or a typo.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_ED1ru3LHK4yvWpvX`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3092347933,2869368562,ellipsis-dev[bot],COMMENTED,2025-05-27T02:05:27Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 6bc5969dbc5d7583b21a00ecdee38ac293415e80 in <ellipsistime>2 minutes and 12 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `113` lines of code in `2` files
> - Skipped `0` files when reviewing.
> - Skipped posting `4` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern/forge/sdk/api/llm/config_registry.py:273</code></summary>
> 
> - **Draft comment:** 
> Duplicate registration of 'BEDROCK_ANTHROPIC_CLAUDE3.5_SONNET' appears to be present (see similar block at line 282). Remove one to avoid a DuplicateLLMConfigError.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>skyvern/forge/sdk/api/llm/config_registry.py:357</code></summary>
> 
> - **Draft comment:** 
> Inconsistent use of max_completion_tokens: Non-Bedrock Anthropic CLAUDE4 models include max_completion_tokens, but the BEDROCK versions ('ANTHROPIC_CLAUDE4_OPUS' and 'ANTHROPIC_CLAUDE4_SONNET') omit it. Confirm if this is intentional.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 20% vs. threshold = 50% The comment points out a real inconsistency in how similar models are configured. However, I don't have enough context to know if this difference is intentional due to platform differences between direct Anthropic API and Bedrock. The comment asks for confirmation rather than making a clear recommendation for change. The comment violates the rule about not asking for confirmation (""Confirm if this is intentional""). If there's a real issue, we should state it directly and recommend a fix. While the inconsistency is real, the comment's phrasing makes it less actionable and more speculative. Without clear evidence that the Bedrock versions should have the same max_completion_tokens, we can't be certain this is a problem. Delete the comment because it asks for confirmation rather than making a clear recommendation, and we don't have strong evidence that the inconsistency is actually a problem.
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>skyvern/cli/llm_setup.py:96</code></summary>
> 
> - **Draft comment:** 
> New Anthropic model keys ('ANTHROPIC_CLAUDE3.5_HAIKU', 'ANTHROPIC_CLAUDE4_OPUS', 'ANTHROPIC_CLAUDE4_SONNET') added to options. Ensure corresponding config registrations remain in sync with these keys.
> - **Reason this comment was not posted:**
> Confidence changes required: `50%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>skyvern/forge/sdk/api/llm/config_registry.py:377</code></summary>
> 
> - **Draft comment:** 
> There appears to be a potential inconsistency: the URN for the third LLM config uses 'bedrock/us.anthropic.claude-3-7-sonnet-20250219-v1:0', whereas the other configs start with 'bedrock/anthropic'. Please confirm if the 'us.' prefix is intentional or a typo.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_rVJh5ENM8y6hZlnu`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3071147441,2848550222,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-18T00:52:40Z,"## Pull Request Overview

This PR adds assertions to validate logging output in tests by capturing log messages with capsys.
- Updated test_basics to use capsys for capturing logs and asserting expected log messages.
- Updated test_arguments to capture logs and verify the formatted logging output.



"
3071147441,2848553878,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-18T01:00:55Z,"## Pull Request Overview

The purpose of this PR is to validate logging output by adding log capture assertions in the unit tests.  
- Introduces a helper function, assert_logged, to check log outputs.  
- Updates test_basics and test_arguments to use capsys for capturing and asserting log output.



"
3071147441,2848564537,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-18T01:07:49Z,"## Pull Request Overview

This pull request introduces logging output validation in the unit tests by adding log capture assertions.  
- A helper function (assert_logged) is added to encapsulate the log assertion logic.  
- The test functions (test_basics and test_arguments) have been updated to use capsys and the new assertion helper.



"
3071147441,2848573442,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-18T01:24:17Z,"## Pull Request Overview

This PR adds log capture assertions to validate logging output by introducing a helper function.  
- Added a new helper function assert_logged that verifies log messages appear in exactly one of stdout or stderr.  
- Updated test_basics and test_arguments to use assert_logged for log validation.



"
3071147441,2848668824,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-18T03:18:43Z,"## Pull Request Overview

Adds a reusable helper for capturing and asserting log messages in existing tests.

- Introduce `assert_logged` to centralize log output validation.
- Update `test_basics` and `test_arguments` to use the new helper and include `capsys`.


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**python/tests/unit/common/test_logging.py:34**
* [nitpick] For improved readability and consistency, switch to an f-string: `dart.common.info(f""Log with param '{1}' and '{val}'"")`.
```
dart.common.info(""Log with param '{}' and '{}'"".format(1, val))
```
</details>

"
3134945953,2915150534,coderabbitai[bot],COMMENTED,2025-06-10T22:07:44Z,"**Actionable comments posted: 5**

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>frontends/sdl/res/shaders/scale.fsh (1)</summary><blockquote>

`1-14`: **`output_resolution` parameter is unused**

`output_resolution` is never referenced, which may trigger warnings and is confusing to readers.  
Either use it (e.g. to normalise `position`) or remove it from the signature.

</blockquote></details>
<details>
<summary>frontends/sdl/src/shader.rs (1)</summary><blockquote>

`54-54`: **Resource lifetime: program is never detached from the context**

When the caller is finished, they must `gl::DeleteProgram(program)` or the driver will leak GPU resources across hot-reloads.  
Consider returning a lightweight RAII wrapper implementing `Drop`.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 5af52fa3be5d5481341d9cf5a688db97372f8aed and 681bb2910bc913d7f2a1055c08e364ef0e81572c.

</details>

<details>
<summary>📒 Files selected for processing (7)</summary>

* `CHANGELOG.md` (1 hunks)
* `frontends/sdl/Cargo.toml` (1 hunks)
* `frontends/sdl/README.md` (1 hunks)
* `frontends/sdl/res/shaders/scale.fsh` (1 hunks)
* `frontends/sdl/src/main.rs` (4 hunks)
* `frontends/sdl/src/sdl.rs` (6 hunks)
* `frontends/sdl/src/shader.rs` (1 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (12)</summary>

* GitHub Check: Build Libretro Android (1.82.0)
* GitHub Check: Build WASM (1.83.0, 18)
* GitHub Check: Build (1.85.0)
* GitHub Check: Build Simple (1.85.0)
* GitHub Check: Build Mac
* GitHub Check: Build (1.83.0)
* GitHub Check: Build Windows
* GitHub Check: Build Simple (1.83.0)
* GitHub Check: Build Simple (1.84.0)
* GitHub Check: Build Simple (latest)
* GitHub Check: Build (latest)
* GitHub Check: Build Simple (1.82.0)

</details>

<details>
<summary>🔇 Additional comments (9)</summary><blockquote>

<details>
<summary>frontends/sdl/Cargo.toml (1)</summary>

`24-24`: **LGTM!**

The `gl` crate is appropriately added to support the new OpenGL shader functionality.

</details>
<details>
<summary>CHANGELOG.md (1)</summary>

`13-13`: **LGTM!**

The changelog entry properly documents the new shader loading feature.

</details>
<details>
<summary>frontends/sdl/README.md (1)</summary>

`111-117`: **LGTM!**

Clear and concise documentation for the new shader loading feature with a helpful example.

</details>
<details>
<summary>frontends/sdl/src/sdl.rs (1)</summary>

`54-58`: **OpenGL context setup looks good!**

The OpenGL Core profile 3.0 context is properly configured and initialized. The context and shader program fields are appropriately added to the struct.



Also applies to: 71-72, 94-95

</details>
<details>
<summary>frontends/sdl/src/main.rs (4)</summary>

`4-4`: **LGTM!**

Proper module declaration for the shader functionality.

---

`323-329`: **Well-implemented shader loading method!**

The method properly checks for SDL initialization and provides a clear error message when SDL is not started.

---

`1029-1030`: **LGTM!**

The command line argument is well-defined with a clear description and appropriate default value.

---

`1116-1120`: **Good error handling for shader loading!**

The implementation correctly checks for a non-empty path and gracefully handles loading failures by printing an error message without stopping execution.

</details>
<details>
<summary>frontends/sdl/src/shader.rs (1)</summary>

`34-38`: **Program links only a fragment shader – may fail on core profiles**

Core-profile contexts generally require at least a vertex shader to link successfully.  
Consider pairing the fragment shader with a trivial pass-through vertex shader, or document that a compatibility profile/context is required.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3134945953,2915178615,coderabbitai[bot],COMMENTED,2025-06-10T22:28:16Z,"**Actionable comments posted: 3**

<details>
<summary>♻️ Duplicate comments (2)</summary><blockquote>

<details>
<summary>frontends/sdl/src/shader.rs (2)</summary><blockquote>

`16-18`: _⚠️ Potential issue_

**Check fragment-shader creation for `0` as well**

Same failure mode applies to the fragment shader handle returned by `gl::CreateShader(kind)`. Guard it just like the vertex shader.

---

`26-28`: _⚠️ Potential issue_

**Repeat of the len-1 underflow / unnecessary `set_len` allocation bug**

This is exactly the issue flagged in the earlier review: allocating with `with_capacity` and then doing `set_len(len-1)` underflows when `len == 0` and panics. Use a zero-initialised vector sized to `len` and trim the trailing NUL afterwards.

```diff
-let mut buf = Vec::with_capacity(len as usize);
-buf.set_len((len as usize) - 1);
+let mut buf = vec![0u8; len as usize];
```




Also applies to: 47-48

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>frontends/sdl/src/shader.rs (2)</summary><blockquote>

`12-18`: **Avoid `CString::new(...).unwrap()` panics on embedded NULs**

If the shader source contains an accidental `\0`, `CString::new` will panic. Propagate the error instead:

```diff
-let c_str = CString::new(vertex_source).unwrap();
+let c_str = CString::new(vertex_source).map_err(|e| e.to_string())?;
```

Apply the same change to the fragment source.

---

`11-12`: **Consider embedding the static vertex shader with `include_str!`**

Reading `res/shaders/base.vsh` at runtime makes the executable fragile with respect to working directory. Embedding the source at compile time removes that dependency and simplifies deployment.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 681bb2910bc913d7f2a1055c08e364ef0e81572c and eedfcabb3e68679839c884925b37ce08a52fb7ef.

</details>

<details>
<summary>📒 Files selected for processing (3)</summary>

* `frontends/sdl/res/shaders/base.vsh` (1 hunks)
* `frontends/sdl/res/shaders/bilinear.fsh` (1 hunks)
* `frontends/sdl/src/shader.rs` (1 hunks)

</details>

<details>
<summary>✅ Files skipped from review due to trivial changes (2)</summary>

* frontends/sdl/res/shaders/bilinear.fsh
* frontends/sdl/res/shaders/base.vsh

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (38)</summary>

* GitHub Check: Build Libretro Android (latest)
* GitHub Check: Build Libretro Android (1.85.0)
* GitHub Check: Build Libretro Android (1.82.0)
* GitHub Check: Build Libretro (latest)
* GitHub Check: Build Libretro Android (1.84.0)
* GitHub Check: Build Libretro (1.85.0)
* GitHub Check: Build Libretro Android (1.83.0)
* GitHub Check: Build SDL (latest)
* GitHub Check: Build Libretro (1.84.0)
* GitHub Check: Build SDL (1.83.0)
* GitHub Check: Build Libretro (1.82.0)
* GitHub Check: Build Libretro (1.83.0)
* GitHub Check: Build Documentation (rust:1.84.0)
* GitHub Check: Build SDL (1.82.0)
* GitHub Check: Build SDL (1.84.0)
* GitHub Check: Build SDL (1.85.0)
* GitHub Check: Build WASM (1.84.0, 18)
* GitHub Check: Build Documentation (rust:1.85.0)
* GitHub Check: Build Documentation (rustlang/rust:nightly)
* GitHub Check: Build Documentation (rust:latest)
* GitHub Check: Build Documentation (rust:1.82.0)
* GitHub Check: Build WASM (latest, 18)
* GitHub Check: Build Documentation (rust:1.83.0)
* GitHub Check: Build WASM (1.85.0, 18)
* GitHub Check: Build (1.85.0)
* GitHub Check: Build WASM (1.83.0, 18)
* GitHub Check: Build WASM (1.82.0, 18)
* GitHub Check: Build (latest)
* GitHub Check: Build Simple (1.85.0)
* GitHub Check: Build (1.82.0)
* GitHub Check: Build (1.83.0)
* GitHub Check: Build Simple (latest)
* GitHub Check: Build (1.84.0)
* GitHub Check: Build Simple (1.84.0)
* GitHub Check: Build Simple (1.83.0)
* GitHub Check: Build Simple (1.82.0)
* GitHub Check: Build Windows
* GitHub Check: Build Mac

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3134945953,2915197097,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-10T22:40:54Z,"## Pull Request Overview

Adds support for loading custom fragment shaders in the SDL frontend by creating an OpenGL context, compiling built-in and user-provided shaders, and exposing a `--shader-path` CLI option.

- Introduce a new `shader` module to read and compile GLSL shaders.
- Extend `SdlSystem` to initialize an OpenGL context and store a shader program.
- Update the emulator’s CLI, README, Cargo.toml, and CHANGELOG to enable and document `--shader-path`.

### Reviewed Changes

Copilot reviewed 9 out of 9 changed files in this pull request and generated 1 comment.

<details>
<summary>Show a summary per file</summary>

| File                                | Description                                                       |
| ----------------------------------- | ----------------------------------------------------------------- |
| frontends/sdl/src/shader.rs         | New functions to load and compile vertex/fragment shaders         |
| frontends/sdl/src/sdl.rs            | Initialize GL context, add `shader_program` field and loader API  |
| frontends/sdl/src/main.rs           | Expose `load_shader` on `Emulator` and wire up CLI flag           |
| frontends/sdl/README.md             | Document shader-path usage (example command)                      |
| frontends/sdl/Cargo.toml            | Add `gl` dependency for OpenGL bindings                           |
| CHANGELOG.md                        | Note new SDL frontend shader loading feature                      |
| frontends/sdl/res/shaders/*         | Add base, smooth, and bilinear GLSL shader source files          |
</details>



<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**frontends/sdl/README.md:115**
* The example refers to `res/shaders/scale.fsh`, but that file doesn’t exist. Update the path to one of the provided shaders (e.g. `smooth.fsh` or `bilinear.fsh`).
```
cargo run -- --rom-path path/to/game.gb --shader-path res/shaders/scale.fsh
```
**frontends/sdl/src/main.rs:323**
* [nitpick] Consider renaming this method to `load_fragment_shader` to match the naming in `SdlSystem` and the `shader` module for consistency.
```
pub fn load_shader(&mut self, path: &str) -> Result<(), String> {
```
</details>

"
3091520348,2869065983,sourcery-ai[bot],COMMENTED,2025-05-26T19:21:25Z,"Hey @mldangelo - I've reviewed your changes - here's some feedback:

- The pluginId for Multi-turn Tool Discovery uses a colon; consider using hyphens (e.g. 'tool-discovery-multi-turn') to match the existing naming convention
- Add a trailing slash to the link for the Multi-turn Tool Discovery plugin ('/docs/red-team/plugins/tool-discovery-multi-turn/') for consistency with other entries
- Normalize the order of applicationTypes keys (rag, agent, chat) across all new plugins to improve readability

<details>
<summary>Here's what I looked at during the review</summary>

- 🟡 **General issues**: 1 issue found
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3100224074,2878145390,coderabbitai[bot],COMMENTED,2025-05-29T12:43:07Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>frontend/src/components/layout/project-selector.tsx (1)</summary><blockquote>

`53-72`: **Excellent refactoring that simplifies data flow and improves performance.**

The direct mapping over the `projects` array is a significant improvement that:

✅ **Benefits:**
- Eliminates redundant state management and lookups
- Reduces memory usage by not duplicating project data  
- Follows React best practices by using the source of truth directly
- Reduces potential for inconsistencies between derived and source state
- More efficient selection logic by directly passing the `project` object

✅ **Implementation correctness:**
- Proper use of `project.id` as React key
- Correct comparison logic for active project highlighting
- Appropriate data binding for CommandItem value and display



However, consider adding defensive programming for edge cases:

```diff
 <CommandGroup>
-  {projects.map((project) => (
+  {projects?.map((project) => (
     <CommandItem
-      key={project.id}
-      value={project.id}
+      key={project?.id}
+      value={project?.id}
       onSelect={() => {
         setActiveProject(project);
         setOpen(false);
       }}
     >
-      {project.name}
+      {project?.name}
       <Check
         className={cn(
           ""ml-auto"",
-          activeProject?.id === project.id
+          activeProject?.id === project?.id
             ? ""opacity-100""
             : ""opacity-0"",
         )}
       />
     </CommandItem>
-  ))}
+  )) || null}
 </CommandGroup>
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 4c6902d64c5e1cdc917bcb879ac077dd599f0ef6 and 997de39f5bc8ecc1c2643e0374176084f6d6522a.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `frontend/src/components/layout/project-selector.tsx` (2 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (3)</summary>

* GitHub Check: Compose Tests
* GitHub Check: Format & Lint
* GitHub Check: Format, Lint, and Test

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>frontend/src/components/layout/project-selector.tsx (1)</summary>

`20-20`: **LGTM: Import simplification aligns with refactoring goals.**

Removing the `useEffect` import is correct since the component no longer needs to maintain derived state. The `useState` import is appropriately retained for managing the popover open state.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3100224074,2879115532,dev-aipolabs,APPROVED,2025-05-29T17:45:18Z,lgtm
3078349165,2855715459,bradhilton,APPROVED,2025-05-20T22:17:24Z,
3119037956,2898029673,sourcery-ai[bot],COMMENTED,2025-06-04T20:32:55Z,"Hey @lollipopkit - I've reviewed your changes and found some issues that need to be addressed.

**Blocking issues**:
- Splitting raw JSON by newline may break parsing ([link](https://github.com/lollipopkit/flutter_server_box/pull/773/files#diff-43222897271164874cf647a6410f9736963803b784bf0987cb615c5ae3b35747R14))

**General comments**:

- DiskSmart.parse splits on newlines and tries to decode each line as JSON—if smartctl outputs pretty‐printed JSON this will break; consider parsing full JSON blocks or using a streaming decoder instead.
- Verify that the new l10n.diskHealth key is actually added to your ARB files, otherwise the Disk Health card title will show a missing translation.
- Double-check that ServerDetailCards.smart is included in your default _cardsOrder or configuration so the new Disk Health card actually appears in the detail view.

<details>
<summary>Here's what I looked at during the review</summary>

- 🔴 **General issues**: 1 blocking issue, 2 other issues
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3119037956,2898331953,sourcery-ai[bot],COMMENTED,2025-06-04T23:23:02Z,"Hey @lollipopkit - I've reviewed your changes - here's some feedback:

- The DiskSmart.parse method’s split on '\n\n' for JSON boundaries can be brittle—consider using a more robust approach (e.g. regex to detect full JSON objects or a streaming JSON decoder) so logs with extra blank lines or embedded newlines don’t break parsing.
- In the Disk Health UI (_buildDiskSmart), the PASS/FAIL text is hardcoded in English; swap those for localized l10n entries to keep the UI fully internationalized.
- Currently DiskSmart.parse swallows all errors and still adds entries even when required fields (like device name) are missing—consider filtering out invalid entries or surfacing the count of skipped parses so you don’t end up with empty or partial DiskSmart objects.

<details>
<summary>Here's what I looked at during the review</summary>

- 🟡 **General issues**: 4 issues found
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3128484287,2909387794,EdCaunt,COMMENTED,2025-06-09T08:51:03Z,
3071994262,2849069245,capjamesg,APPROVED,2025-05-18T19:17:56Z,
3134905358,2915110865,hinthornw,APPROVED,2025-06-10T21:44:13Z,
3120837170,2900844615,shano,COMMENTED,2025-06-05T15:40:10Z,
3120837170,2900849471,shano,COMMENTED,2025-06-05T15:41:48Z,
3120837170,2900856064,shano,COMMENTED,2025-06-05T15:44:08Z,
3116900770,2895720830,gemini-code-assist[bot],COMMENTED,2025-06-04T08:05:28Z,"Hello @MervinPraison, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

## Summary of Changes
Hello! Gemini here, providing a summary of this pull request to help everyone get up to speed.

This PR introduces support for integrating tools exposed via the Model Context Protocol (MCP) over Server-Sent Events (SSE) into the `praisonai-ts` agent framework. It adds the necessary classes to connect to an MCP SSE server, discover available tools, and execute them. Crucially, it also includes a concrete example demonstrating how to set up an agent that utilizes these remote MCP tools, along with documentation on how to run this example.

### Highlights
* **MCP SSE Tool Integration**: Adds core functionality to connect to and interact with remote tools served over MCP SSE.
* **New Example**: Includes a runnable TypeScript example (`examples/tools/mcp-sse.ts`) demonstrating how to use the new MCP SSE tool integration with an agent.
* **Dependency Update**: Adds the `@modelcontextprotocol/sdk` package as a project dependency.
* **Documentation**: Updates the tool examples README to include instructions on running the new MCP SSE example.

### Changelog
<details>
<summary>Click here to see the changelog</summary>

* **src/praisonai-ts/examples/README-tool-examples.md**
  * Added a new section 'MCP SSE Tool Integration' explaining how to run the example.
  * Included bash commands to start the required Python SSE server and run the TypeScript example.
* **src/praisonai-ts/examples/tools/mcp-sse.ts**
  * Added a new file containing the MCP SSE tool example.
  * Demonstrates connecting to an MCP SSE server, initializing tools, creating tool functions, and running an agent that uses these tools.
* **src/praisonai-ts/package.json**
  * Added `@modelcontextprotocol/sdk` version `^1.12.1` to the `dependencies`.
* **src/praisonai-ts/src/tools/index.ts**
  * Exported the new `mcpSse` module to make the MCP tool classes available.
* **src/praisonai-ts/src/tools/mcpSse.ts**
  * Added a new file implementing `MCPTool` and `MCP` classes.
  * `MCPTool` wraps a remote MCP tool, providing an `execute` method and `toOpenAITool` conversion.
  * `MCP` class handles connecting to the SSE server, discovering tools, and managing `MCPTool` instances.
  * Uses `@modelcontextprotocol/sdk` for client communication.

</details>

<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.
</details>


<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>


[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configure Gemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).

---

> Tools connect afar,
> Through streams of data flow,
> Agent does its work.

"
3116900770,2895723912,gemini-code-assist[bot],CHANGES_REQUESTED,2025-06-04T08:06:35Z,"## Code Review
This pull request introduces an example for MCP SSE tooling, which is a valuable addition. The changes include exporting the MCP SSE tool, adding the necessary SDK dependency, creating the example script, and updating the README with instructions.

However, a significant concern is that the PR description itself notes the example script (`npx ts-node examples/tools/mcp-sse.ts`) fails with an `ENETUNREACH` error. This needs to be addressed for the example to be useful. Additionally, there are a few areas in the new code that could be improved for clarity, type safety, and robustness, as detailed in the comments.

### Summary of Findings
* **Example Script Failure (ENETUNREACH)**: The PR description states the example script `examples/tools/mcp-sse.ts` fails with an `ENETUNREACH` error. This is a critical issue that needs to be resolved or clearly documented with troubleshooting steps in the README.
* **Type Safety and Design**: Several instances of `any` are used (e.g., accessing private `inputSchema` via `(tool as any)`, mapping tools with `(t: any)`). Improving type specificity, potentially by adjusting class member visibility or adding getters in `MCPTool`, would enhance code quality.
* **Error Handling in Example**: The example script `examples/tools/mcp-sse.ts` could benefit from `try...catch` blocks for network operations like `mcp.initialize()` to provide better user feedback on failure.
* **Code Clarity and Consistency**: Minor issues like a typo in an interface name (`MCPPToolInfo`) and an unused constructor parameter (`debug` in `MCP`) were found. Addressing these would improve code clarity.
* **README Instructions**: The path to the Python server in the README is relative and assumes a specific monorepo structure, which might not be clear to all users.
* **Documentation (JSDoc)**: Consider adding JSDoc comments to new public classes and methods (e.g., `MCPTool`, `MCP`, and their methods) to improve maintainability and developer experience. (Severity: low, not commented inline due to review settings)

### Merge Readiness
This pull request makes good progress in adding an MCP SSE tooling example. However, due to the critical issue of the example script failing with an `ENETUNREACH` error, and several medium-severity suggestions regarding type safety, error handling, and clarity, I recommend that these changes be addressed before merging. Resolving the example's functionality is paramount. I am not authorized to approve pull requests, so please ensure further review and approval from maintainers after addressing the feedback."
3116900770,2895731054,coderabbitai[bot],COMMENTED,2025-06-04T08:09:06Z,"**Actionable comments posted: 7**

<details>
<summary>🧹 Nitpick comments (4)</summary><blockquote>

<details>
<summary>src/praisonai-ts/src/tools/mcpSse.ts (2)</summary><blockquote>

`5-9`: **Consider stronger typing for the interface.**

The `inputSchema` property uses `any` type which reduces type safety. Consider using a more specific type like `JSONSchema7` or creating a proper schema interface.



```diff
+import { JSONSchema7 } from 'json-schema';

export interface MCPPToolInfo {
  name: string;
  description?: string;
-  inputSchema?: any;
+  inputSchema?: JSONSchema7;
}
```

---

`49-49`: **Consider making debug parameter more useful.**

The debug parameter is stored but never used. Either implement debug logging or remove this parameter.



```diff
-constructor(private url: string, private debug = false) {}
+constructor(private url: string, private debug = false) {
+  if (debug) {
+    console.log(`MCP client initialized for URL: ${url}`);
+  }
+}
```

Or add debug logging throughout the class methods to make this parameter useful.

</blockquote></details>
<details>
<summary>src/praisonai-ts/examples/tools/mcp-sse.ts (2)</summary><blockquote>

`2-2`: **Remove unused import.**

The `MCPTool` import is not used anywhere in this file.


```diff
-import { MCP, MCPTool } from '../../src/tools/mcpSse';
+import { MCP } from '../../src/tools/mcpSse';
```

---

`29-35`: **Add error handling around agent execution.**

The execution logic is good, but consider adding error handling for better user experience.


```diff
-  const result = await agent.start('Say hello to John and tell the weather in London.');
-  console.log('\nFinal Result:', result);
+  try {
+    const result = await agent.start('Say hello to John and tell the weather in London.');
+    console.log('\nFinal Result:', result);
+  } catch (error) {
+    console.error('Agent execution failed:', error);
+  }
```

The module execution pattern follows Node.js conventions correctly.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between aaffee30a6063031a1b9329ea3817da02a53beb8 and 8df8569c8f24460f5eea359cf70eebc15631e2c0.

</details>

<details>
<summary>📒 Files selected for processing (5)</summary>

* `src/praisonai-ts/examples/README-tool-examples.md` (1 hunks)
* `src/praisonai-ts/examples/tools/mcp-sse.ts` (1 hunks)
* `src/praisonai-ts/package.json` (1 hunks)
* `src/praisonai-ts/src/tools/index.ts` (1 hunks)
* `src/praisonai-ts/src/tools/mcpSse.ts` (1 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (3)</summary>

* GitHub Check: test-core (3.11)
* GitHub Check: quick-test
* GitHub Check: quick-test

</details>

<details>
<summary>🔇 Additional comments (4)</summary><blockquote>

<details>
<summary>src/praisonai-ts/package.json (1)</summary>

`66-66`: <details>
<summary>✅ Verification successful</summary>

**Verify the MCP SDK version and security status.**

Ensure that the specified version of `@modelcontextprotocol/sdk` (^1.12.1) exists and has no known security vulnerabilities.

---

🏁 Script executed:

```shell
#!/bin/bash
# Description: Verify the @modelcontextprotocol/sdk package version and security status

# Check if version 1.12.1 exists on npm
npm view @modelcontextprotocol/sdk versions --json | jq '.[] | select(. | test(""1\\.12\\.""))'

# Check for security advisories
npm audit --audit-level moderate --package-lock-only 2>/dev/null || echo ""No package-lock.json found""

# Get latest version for comparison
npm view @modelcontextprotocol/sdk version
```

Length of output: 283

---



</details>

**@modelcontextprotocol/sdk v1.12.1 confirmed**

- Version 1.12.1 exists in the npm registry and is the latest published release.  
- No security advisories were reported via `npm audit` for this package.  

This dependency addition looks good to merge.

</details>
<details>
<summary>src/praisonai-ts/examples/README-tool-examples.md (1)</summary>

`195-207`: <details>
<summary>✅ Verification successful</summary>

**Verify the referenced Python server file path.**

The documentation references `../../praisonai-agents/tests/mcp-sse-direct-server.py` but this path should be verified to ensure it exists and is correct relative to the documentation location.

---

🏁 Script executed:

```shell
#!/bin/bash
# Description: Verify the Python MCP SSE server file exists at the referenced path

# Check if the referenced Python server file exists
find . -name ""mcp-sse-direct-server.py"" -type f

# Also check if there's a praisonai-agents directory structure
find . -type d -name ""praisonai-agents"" 2>/dev/null || echo ""praisonai-agents directory not found in current repository""

# Check for any MCP-related Python files
find . -name ""*mcp*"" -name ""*.py"" -type f
```

Length of output: 3483

---



</details>

**✔ Python MCP SSE server file path is correct**

- Confirmed that `src/praisonai-agents/tests/mcp-sse-direct-server.py` exists  
- The relative path `../../praisonai-agents/tests/mcp-sse-direct-server.py` in `src/praisonai-ts/examples/README-tool-examples.md` correctly resolves to that file

No updates required.

</details>
<details>
<summary>src/praisonai-ts/src/tools/index.ts (1)</summary>

`24-24`: **LGTM!**

The export addition properly integrates the new MCP SSE module into the tools index, maintaining consistency with the existing export pattern.

</details>
<details>
<summary>src/praisonai-ts/examples/tools/mcp-sse.ts (1)</summary>

`22-27`: **LGTM!**

The agent configuration is well-structured and appropriate for demonstrating MCP SSE tool usage.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3077343390,2854604568,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-20T15:06:48Z,"## Pull Request Overview

This PR removes support for global environment variables across the CLI, server, UI, and documentation, standardizing on a single local `.env` file per project.  
- Drops all global env routes/UI tabs and related data fetching  
- Updates CLI/server logic to load/write only the local `.env` in `process.cwd()`  
- Revises documentation and tests to remove any references to a global `.eliza/.env`

### Reviewed Changes

Copilot reviewed 16 out of 16 changed files in this pull request and generated 1 comment.

<details>
<summary>Show a summary per file</summary>

| File                                           | Description                                                     |
| ---------------------------------------------- | --------------------------------------------------------------- |
| plugin-discord/src/index.ts                    | Updated warning message to reference `.env` only                |
| docs/docs/cli/env.md                           | Removed all global env commands and explanations                |
| docs/blog/twitter-agent-guide.mdx               | Adjusted env file open instructions to project `.env`           |
| core/src/runtime.ts                             | Updated runtime warning to reference `.env` only                |
| client/src/lib/api.ts                           | Removed global env API client methods                          |
| client/src/components/env-settings.tsx          | Stripped out global env tab and related logic                   |
| cli/src/utils/user-environment.ts               | Changed `envFilePath` to use `process.cwd()`                    |
| cli/src/utils/get-config.ts                     | Updated `loadEnvironment` to read only project `.env`           |
| cli/src/utils/env-prompt.ts                     | Revised doc comments to reference project `.env`                |
| cli/src/server/api/env.ts                       | Removed global env endpoints                                   |
| cli/src/index.ts                                | Simplified startup comment to local `.env` only                 |
| cli/src/commands/test.ts                        | Updated test command to use project `.env` and removed `.eliza` |
| cli/src/commands/start.ts                       | Updated startup comment to local `.env` only                    |
| cli/src/commands/env.ts                         | Entirely removed global env subcommands                         |
| cli/__test_scripts__/test_env.bats               | Adjusted tests/comments to only expect local env behavior       |
| packages/cli/README.md                          | Removed global env subcommand references                        |
</details>



<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**packages/client/src/components/env-settings.tsx:8**
* [nitpick] With only a 'local' tab remaining, the `EnvType` enum and related conditional logic can be simplified or removed to reduce unnecessary code and improve readability.
```
enum EnvType {
```
**packages/cli/src/commands/test.ts:73**
* [nitpick] The `elizaDir` is no longer used for environment files but is still calculated and logged. Consider removing or updating these references to avoid confusion.
```
const elizaDir = path.join(homeDir, '.eliza');
```
</details>

"
3077343390,2854670090,ChristopherTrimboli,APPROVED,2025-05-20T15:25:31Z,lgtm
3077343390,2854670645,coderabbitai[bot],COMMENTED,2025-05-20T15:25:43Z,"**Actionable comments posted: 1**

<details>
<summary>🔭 Outside diff range comments (9)</summary><blockquote>

<details>
<summary>packages/docs/docs/cli/env.md (6)</summary><blockquote>

`67-71`: _⚠️ Potential issue_

**Filter options need to be updated to match the current functionality**

Line 69 still references the `--global` option which has been removed from the CLI. This is inconsistent with the changes made elsewhere.


```diff
 ```bash
 elizaos env list --system  # Show only system information
-elizaos env list --global  # Show only global environment variables
 elizaos env list --local   # Show only local environment variables
 ```
```

---

`73-86`: _⚠️ Potential issue_

**Remove section about editing global variables**

This entire section on editing global variables should be removed as it's no longer supported, but the section heading and empty code block remain.


```diff
-### Editing Global Variables
-
-Edit the global environment variables interactively:
-
-```bash
-```
-
-This provides an interactive interface to:
-
-- View existing global variables
-- Add new variables
-- Edit existing variables
-- Delete variables
```

---

`97-109`: _⚠️ Potential issue_

**Remove section about setting custom environment path**

This entire section about setting a custom global environment path should be removed as it's no longer supported, but the section heading and empty code block remain.


```diff
-### Setting Custom Environment Path
-
-Set a custom location for the global environment file:
-
-```bash
-```
-
-If the specified path is a directory, the command will use `/path/to/custom/location/.env`.
-
-The command supports tilde expansion, so you can use paths like `~/eliza-config/.env`. Non-existent directories will be created if you confirm.
-
-This setting affects where global environment variables are stored and loaded from in all ElizaOS commands.
```

---

`166-166`: _⚠️ Potential issue_

**Update security best practice to reflect local-only environment**

Security best practice #3 still references global variables which no longer exist in the system.


```diff
-3. **Set up global variables** for commonly used API keys
+3. **Properly manage sensitive variables** in your local environment
```

---

`204-208`: _⚠️ Potential issue_

**Remove example for setting custom environment path**

This example command for setting a custom global environment path should be removed as it's no longer supported.


```diff
-### Setting Custom Environment Path
-
-```bash
-# Set a custom path for global environment variables
-```
```

---

`216-217`: _⚠️ Potential issue_

**Remove reference to editing global variables in Interactive Editing example**

This line still references editing global variables which is no longer supported.


```diff
 # Edit only global variables
```

</blockquote></details>
<details>
<summary>packages/client/src/components/env-settings.tsx (2)</summary><blockquote>

`73-111`: _⚠️ Potential issue_

**Local edits never reach the backend – changes vanish on page refresh**

`addEnv`, `saveEdit`, and `handleRemove` only mutate React state and the “Save Changes” button is permanently disabled. As a result, any added/edited/deleted key is lost once the component unmounts or the page refreshes.

```diff
-const addEnv = () => {
+const addEnv = async () => {
   if (!name || !value) return;
-  const updateFn = setLocalEnvs;
-  const prevData = localEnvs;
-  updateFn({ ...prevData, [name]: value });
+  // 1. Persist to server
+  await apiClient.upsertLocalEnv(name, value);
+  // 2. Refetch so state stays canonical
+  await fetchLocalEnvs();
   ...
 }
```

Apply a similar pattern in `saveEdit` and `handleRemove`, and wire the *Save Changes* button to an `async` handler that batches updates (or simply remove the button if every mutation is persisted immediately).

Failing to persist will confuse users and can cause data loss.



Also applies to: 278-285

---

`218-224`: _🛠️ Refactor suggestion_

**Index-based keys cause wrong row edits after any deletion**

`openIndex`/`editingIndex` rely on the array index returned by `Object.entries`. When a row is removed, the following rows shift and the cached index can point to the wrong key, leading to accidental edits/deletes.

Recommend tracking the variable **name** rather than the numeric index:

```diff
-const [openIndex, setOpenIndex] = useState<number | null>(null);
-const [editingIndex, setEditingIndex] = useState<number | null>(null);
+const [openKey, setOpenKey] = useState<string | null>(null);
+const [editingKey, setEditingKey] = useState<string | null>(null);
...
-onClick={() => setOpenIndex(openIndex === index ? null : index)}
+onClick={() => setOpenKey(openKey === key ? null : key)}
...
```

This removes the class of bugs that appear after any reorder.



Also applies to: 226-238, 244-251

</blockquote></details>
<details>
<summary>packages/cli/src/commands/env.ts (1)</summary><blockquote>

`159-180`: _⚠️ Potential issue_

**Null path leads to crash after creating a new `.env`**

If no local `.env` exists and the user agrees to create one, `envPath` remains `null`; subsequent calls to `parseEnvFile(envPath)` and `writeEnvFile` will throw “path must be a string”.

```diff
-const envPath = getLocalEnvPath();
+let envPath = getLocalEnvPath();
 ...
-await fs.writeFile('.env', '');
+await fs.writeFile('.env', '');
+envPath = path.join(process.cwd(), '.env'); // ensure non-null
```

Also update the type annotation (`let envPath: string`) to avoid `null` afterwards.




Also applies to: 182-183

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (4)</summary><blockquote>

<details>
<summary>packages/cli/src/utils/env-prompt.ts (1)</summary><blockquote>

`190-196`: **Doc comment mismatch: update “Ensure .eliza directory exists”.**

The code creates/ensures the directory of the local `.env` file, but the comment still mentions `.eliza`. Consider updating to “Ensure environment file directory exists” or similar to avoid confusion.

</blockquote></details>
<details>
<summary>packages/client/src/components/env-settings.tsx (1)</summary><blockquote>

`137-146`: **`defaultValue` is redundant once the `value` prop is controlled**

Because `Tabs` receives an explicit `value={activeTab}`, the extra `defaultValue=""local""` prop is ignored. Dropping it avoids confusion.

</blockquote></details>
<details>
<summary>packages/cli/src/commands/env.ts (2)</summary><blockquote>

`13-19`: **Function name no longer reflects reality**

`getGlobalEnvPath` now always returns the *project-local* `.env` file, so the term “Global” is misleading. Rename to `getProjectEnvPath` (or remove entirely and inline) to prevent future misuse.

---

`628-671`: **CLI option signature mentions `global` but flag was removed**

The action handler still expects `options.global` (line 638) even though the `--global` flag was deleted. This dead parameter can be removed to declutter:

```diff
-.action(async (options: { global?: boolean; local?: boolean; system?: boolean }) => {
+.action(async (options: { local?: boolean; system?: boolean }) => {
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 1570270fbb8cd7bfaba38f286f60211d6c568aff and c10f0de484e7252ac8f7f84ecf95c0389f9ad9fb.

</details>

<details>
<summary>📒 Files selected for processing (16)</summary>

* `packages/cli/README.md` (2 hunks)
* `packages/cli/__test_scripts__/test_env.bats` (4 hunks)
* `packages/cli/src/commands/env.ts` (6 hunks)
* `packages/cli/src/commands/start.ts` (1 hunks)
* `packages/cli/src/commands/test.ts` (2 hunks)
* `packages/cli/src/index.ts` (1 hunks)
* `packages/cli/src/server/api/env.ts` (1 hunks)
* `packages/cli/src/utils/env-prompt.ts` (3 hunks)
* `packages/cli/src/utils/get-config.ts` (2 hunks)
* `packages/cli/src/utils/user-environment.ts` (1 hunks)
* `packages/client/src/components/env-settings.tsx` (6 hunks)
* `packages/client/src/lib/api.ts` (0 hunks)
* `packages/core/src/runtime.ts` (1 hunks)
* `packages/docs/blog/twitter-agent-guide.mdx` (1 hunks)
* `packages/docs/docs/cli/env.md` (1 hunks)
* `packages/plugin-discord/src/index.ts` (1 hunks)

</details>

<details>
<summary>💤 Files with no reviewable changes (1)</summary>

* packages/client/src/lib/api.ts

</details>

<details>
<summary>🔇 Additional comments (23)</summary><blockquote>

<details>
<summary>packages/plugin-discord/src/index.ts (1)</summary>

`28-29`: **Approve message update to reference local .env file.**

The warning now correctly directs users to the project’s `.env` file instead of the removed global file. Consistent with the PR objective.

</details>
<details>
<summary>packages/cli/src/commands/start.ts (1)</summary>

`444-445`: **Approve comment clarifying local .env usage.**

The inline comment accurately reflects that `loadEnvironment()` now reads only the project `.env` file. No action needed.

</details>
<details>
<summary>packages/core/src/runtime.ts (1)</summary>

`373-378`: **Approve console warning update for .env file.**

The change updates the plugin initialization warning to correctly reference the local `.env`. This aligns with the removal of global env support.

</details>
<details>
<summary>packages/cli/src/index.ts (1)</summary>

`32-33`: **Approve main entry comment about loading project .env.**

The doc comment matches the new behavior of loading environment variables only from the project `.env` file. Looks good.

</details>
<details>
<summary>packages/cli/src/commands/test.ts (3)</summary>

`74-75`: **Path change aligns with removing global env support.**

The environment file path now correctly points to the local project's `.env` file instead of the global `.eliza/.env` file.

---

`94-95`: **Updated comment correctly reflects new env loading approach.**

Comment accurately describes that environment variables are now loaded from the project's local `.env` file.

---

`83-88`: **Database directory creation remains intact.**

The code properly retains the database directory creation logic while removing the global environment directory creation.

</details>
<details>
<summary>packages/docs/blog/twitter-agent-guide.mdx (2)</summary>

`61-63`: **Documentation correctly updated to reference local .env files.**

Path examples now properly direct users to their project's `.env` file instead of a global configuration file.

---

`66-68`: **Editor command examples properly updated.**

Command examples for different editors now correctly reference the project-local `.env` file paths.

</details>
<details>
<summary>packages/cli/src/utils/user-environment.ts (2)</summary>

`254-254`: **Core path update aligns with global env removal.**

This change to `envFilePath` is critical - it shifts the entire system to use the local `.env` file in the current working directory instead of a global configuration file.

---

`245-260`: <details>
<summary>✅ Verification successful</summary>

**Verify impact on caching behavior.**

The `getPathInfo` method is used to get cached path information. Since `envFilePath` now depends on `process.cwd()`, ensure this doesn't cause issues if the working directory changes during runtime.

---

🏁 Script executed:

```shell
#!/bin/bash
# Check if there are any references to global env paths still in the codebase
rg -i ""\.eliza\/\.env"" --type ts
```

Length of output: 122

---

🏁 Script executed:

```shell
#!/bin/bash
# 1. Check for any lingering references to `.eliza/.env` in TS files
rg -i '\.eliza/\.env' --type ts

# 2. Show the getPathInfo implementation for context
rg -n ""getPathInfo"" -C3 packages/cli/src/utils/user-environment.ts

# 3. Look for any internal caching of PathInfo in this file
rg -n ""pathInfo"" --ignore-case packages/cli/src/utils/user-environment.ts
```

Length of output: 1356

---



</details>

**No internal caching—`envFilePath` always reflects current `process.cwd()`**

I checked `user-environment.ts` and found that `getPathInfo` is computed on each call (no stored cache), so `envFilePath` will always point to the `.env` in the active working directory. No further action is needed unless you add manual caching later.

</details>
<details>
<summary>packages/cli/__test_scripts__/test_env.bats (3)</summary>

`5-5`: **Test description correctly updated.**

The test description properly removes references to global environment files, reflecting the new architecture.

---

`37-39`: **Test expectations appropriately updated.**

The test now only expects ""System Information"" and ""Local Environment Variables"" sections, correctly removing the ""Global Environment Variables"" check.

---

`76-81`: **Reset test properly updated for local-only env.**

The test now creates a dummy local `.env` file and checks for ""Local environment variables"" text, properly testing the new behavior.

</details>
<details>
<summary>packages/cli/README.md (2)</summary>

`85-85`: **Simplified options reflect removal of global env support**

The options for the `list` subcommand now only include `--local`, aligning with the PR's objective to remove global environment variable management.

---

`259-260`: **Options updated to focus on local environments only**

The options for the `list` subcommand have been properly updated to include only `--system` and `--local`, removing any reference to global environment variables.

</details>
<details>
<summary>packages/cli/src/server/api/env.ts (2)</summary>

`3-3`: **Import statement updated after removing global env functionality**

The import statement has been simplified to only include necessary functions after removing global environment variable support.

---

`33-97`: **API router correctly simplified to remove global environment routes**

The router now only contains endpoints for managing local environment variables (`/local`), with the global environment endpoints completely removed. This is consistent with the PR objective.

</details>
<details>
<summary>packages/docs/docs/cli/env.md (2)</summary>

`23-23`: **Subcommand options updated to remove global environment options**

The `list` subcommand options now correctly show only `--system` and `--local`, reflecting the removal of global environment variable management.

---

`31-32`: **Environment levels section simplified to focus only on local variables**

The documentation now correctly mentions only local variables stored in the `.env` file in the project directory, completing the removal of global environment variable references.

</details>
<details>
<summary>packages/cli/src/utils/get-config.ts (3)</summary>

`57-57`: **Environment file path updated to use project-local .env**

The environment file path now correctly points to the local `.env` file in the current working directory, removing the global environment file path.

---

`293-297`: **Updated function documentation to reflect local-only environment**

The documentation for the `loadEnvironment` function now accurately describes that it only loads from the project's `.env` file, aligning with the removal of global environment support.

---

`298-304`: **Simplified environment loading logic**

The `loadEnvironment` function has been correctly simplified to only load from the local `.env` file in the project directory, removing all logic related to global environment files.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3134993065,2915190980,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-10T22:38:29Z,"## Pull Request Overview

This PR fixes the incorrect audio channel getter by updating the method to return the correct channel 1 status and documents the fix in the changelog.
- Updated the audio_ch1_enabled getter to call ch1_out_enabled.
- Updated the changelog to reflect the fixed audio channel status retrieval.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated no comments.

| File         | Description                                            |
| ------------ | ------------------------------------------------------ |
| src/gb.rs    | Fixed audio_ch1_enabled to correctly return channel 1  |
| CHANGELOG.md | Documented the fix in the changelog                    |



"
3135470274,2923366336,devgony,APPROVED,2025-06-13T04:14:03Z,
3098859005,2876945616,nektro,APPROVED,2025-05-29T03:34:15Z,
3071076995,2848795489,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-18T07:46:07Z,"## Pull Request Overview

This pull request updates the StoreCard component's background styling by replacing the hardcoded ""bg-white"" with the more flexible ""bg-background"" class to improve theming consistency.  
- Updated background class for light mode  
- Potential adjustment in dark mode styling was applied


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**autogpt_platform/frontend/src/components/agptui/StoreCard.tsx:35**
* It appears that the 'dark:bg-transparent' class has been removed along with 'bg-white'. Verify if this change was intentional, as it may affect the component's appearance in dark mode.
```
className=""flex h-[27rem] w-full max-w-md cursor-pointer flex-col items-start rounded-3xl bg-background transition-all duration-300 hover:shadow-lg dark:hover:shadow-gray-700""
```
</details>

"
3071076995,2931018017,Swiftyos,APPROVED,2025-06-16T08:00:14Z,LGTM
3141515538,2922605170,coderabbitai[bot],COMMENTED,2025-06-12T20:45:20Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>ui/src/lib/types.ts (1)</summary><blockquote>

`9-11`: **Consider renaming `rssi@1m` to avoid quoted property names**  
Quoted keys (`""rssi@1m""`) require bracket notation throughout the code. For consistency and easier maintenance, consider using a dot-accessible name like `rssiAt1m`.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 2182778845152472ee3fbfa6c1fb0fcbc1f1c0cd and 4aea3d812e69ce5afcb1782e7b99d29e3b5738e0.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `ui/src/lib/types.ts` (1 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (13)</summary>

* GitHub Check: build (m5stickc-plus)
* GitHub Check: build (m5atom)
* GitHub Check: build (macchina-a0)
* GitHub Check: build (esp32s3-verbose)
* GitHub Check: build (m5stickc)
* GitHub Check: build (esp32c3-cdc)
* GitHub Check: build (esp32-verbose)
* GitHub Check: build (esp32s3-cdc)
* GitHub Check: build (esp32c3)
* GitHub Check: build (esp32c3-verbose)
* GitHub Check: build (esp32)
* GitHub Check: build (esp32s3)
* GitHub Check: Flawfinder

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3130617808,2910435613,coderabbitai[bot],COMMENTED,2025-06-09T15:26:04Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>app/desktop/studio_server/provider_api.py (1)</summary><blockquote>

`967-976`: **Review the complex conditional logic for fine-tuned models.**

The logic for setting `structured_output_mode` on fine-tuned models is quite complex with nested conditions. While functionally correct, consider simplifying for better readability.


Consider extracting this logic into a helper function:

```diff
+def get_fine_tune_structured_output_mode(fine_tune) -> StructuredOutputMode:
+    """"""Get structured output mode for fine-tuned model, with fallback to default.""""""
+    fine_tune_mode = getattr(fine_tune, ""structured_output_mode"", None)
+    if fine_tune_mode and isinstance(fine_tune_mode, StructuredOutputMode):
+        return fine_tune_mode
+    return StructuredOutputMode.json_instructions
+
 structured_output_mode=(
-    fine_tune_mode
-    if (
-        fine_tune_mode := getattr(
-            fine_tune, ""structured_output_mode"", None
-        )
-    )
-    and isinstance(fine_tune_mode, StructuredOutputMode)
-    else StructuredOutputMode.json_instructions
+    get_fine_tune_structured_output_mode(fine_tune)
 ),
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 67a1e865c3ff5fb97572eb6c750eb251d98a8f42 and 3c51ce745c6660cf328fd0dfdca9e84d3c2020bf.

</details>

<details>
<summary>📒 Files selected for processing (7)</summary>

* `app/desktop/studio_server/provider_api.py` (8 hunks)
* `app/desktop/studio_server/test_provider_api.py` (4 hunks)
* `app/web_ui/src/lib/api_schema.d.ts` (1 hunks)
* `app/web_ui/src/lib/types.ts` (1 hunks)
* `app/web_ui/src/lib/ui/run_options.svelte` (3 hunks)
* `app/web_ui/src/routes/(app)/evals/[project_id]/[task_id]/[eval_id]/compare_run_methods/+page.svelte` (5 hunks)
* `app/web_ui/src/routes/(app)/run/+page.svelte` (5 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>app/desktop/studio_server/provider_api.py (1)</summary><blockquote>

<details>
<summary>app/web_ui/src/lib/types.ts (1)</summary>

* `StructuredOutputMode` (40-40)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (4)</summary>

* GitHub Check: Build Desktop Apps (macos-13)
* GitHub Check: Build Desktop Apps (windows-latest)
* GitHub Check: Build Desktop Apps (macos-latest)
* GitHub Check: Build Desktop Apps (ubuntu-22.04)

</details>

<details>
<summary>🔇 Additional comments (20)</summary><blockquote>

<details>
<summary>app/web_ui/src/lib/types.ts (1)</summary>

`40-40`: **Approve new StructuredOutputMode type alias**

The alias correctly maps to `components[""schemas""][""StructuredOutputMode""]`, ensuring consistent typing for structured output modes throughout the frontend.

</details>
<details>
<summary>app/web_ui/src/lib/api_schema.d.ts (1)</summary>

`2038-2039`: **StructuredOutputMode added to ModelDetails**  
The new `structured_output_mode` field correctly mirrors the backend API change and is required (non-nullable) given the server’s default value.

</details>
<details>
<summary>app/desktop/studio_server/test_provider_api.py (1)</summary>

`401-401`: **LGTM! Test updates correctly reflect the new API field.**

The addition of `""structured_output_mode"": ""default""` to test expectations is consistent across all relevant test cases and properly accommodates the new field in the API response schema.



Also applies to: 417-417, 435-435, 503-503

</details>
<details>
<summary>app/web_ui/src/lib/ui/run_options.svelte (4)</summary>

`3-4`: **LGTM! Proper type imports for the new feature.**

The imports for `OptionGroup` and `StructuredOutputMode` are correctly added to support the structured output mode functionality.

---

`9-10`: **LGTM! Well-designed props with sensible defaults.**

The new exported props provide good defaults that maintain backward compatibility (`structured_output_mode: ""default""`) and prevent UI clutter when the feature isn't available (`has_structured_output: false`).

---

`62-108`: **LGTM! Comprehensive and well-documented structured output options.**

The `structured_output_options` definition provides excellent coverage of different structured output modes with clear, descriptive labels and helpful descriptions that guide users in making informed choices. The range from automatic (""Default"") to manual control options (""Custom Instructions"") accommodates various use cases effectively.

---

`129-138`: **LGTM! Smart conditional rendering for better UX.**

The conditional rendering based on `has_structured_output` ensures the structured output mode selector only appears when the selected model supports this feature, preventing UI clutter and confusion. The integration with the existing `FormElement` component maintains consistency with the rest of the interface.

</details>
<details>
<summary>app/desktop/studio_server/provider_api.py (4)</summary>

`17-17`: **LGTM! Proper import of StructuredOutputMode.**

The import statement correctly adds the `StructuredOutputMode` enum to support the new structured output mode functionality.

---

`89-91`: **LGTM! Well-designed default for structured output mode.**

The field is properly added to the `ModelDetails` class with a sensible default value of `json_instructions`, ensuring backward compatibility for existing code.

---

`162-162`: **LGTM! Consistent structured output mode propagation.**

The `structured_output_mode` is correctly retrieved from the provider configuration for built-in models, maintaining consistency with other provider properties.

---

`862-862`: **LGTM! Consistent default values across model types.**

The `structured_output_mode` is consistently set for all model types:
- Ollama models use provider configuration
- Untested models default to `json_instructions`
- Custom and OpenAI compatible models use the same default

This ensures consistent behavior across different model sources.



Also applies to: 876-876, 932-932, 1081-1081

</details>
<details>
<summary>app/web_ui/src/routes/(app)/evals/[project_id]/[task_id]/[eval_id]/compare_run_methods/+page.svelte (4)</summary>

`14-14`: **LGTM! Proper imports for structured output mode support.**

The imports correctly add the necessary type and store functions to support structured output mode functionality in the evaluation comparison page.



Also applies to: 26-27

---

`356-363`: **LGTM! Elegant reactive assignment pattern.**

The reactive assignment of `structured_output_mode` based on the selected model is well-implemented:
- Uses the `available_model_details` helper function properly
- Provides a sensible fallback to `""default""` when model details aren't found
- Follows Svelte's reactive programming pattern correctly

---

`395-395`: **LGTM! Proper API integration.**

The `structured_output_mode` is correctly included in the API request body when creating a new task run configuration.

---

`783-784`: **LGTM! Clean component integration.**

The `RunOptions` component is properly updated to bind the `structured_output_mode` and receive the `has_structured_output` prop, maintaining clean separation of concerns.

</details>
<details>
<summary>app/web_ui/src/routes/(app)/run/+page.svelte (5)</summary>

`7-8`: **LGTM! Consistent imports across UI components.**

The imports match the pattern used in the evaluation comparison page, ensuring consistency across the application for structured output mode support.



Also applies to: 16-16

---

`35-35`: **LGTM! Proper variable declaration.**

The `structured_output_mode` variable is correctly declared with the appropriate TypeScript type.

---

`51-53`: **LGTM! Consistent reactive assignment pattern.**

The reactive assignment logic matches the implementation in the evaluation comparison page, using the same helper function and fallback value. This consistency is excellent for maintainability.

---

`85-85`: **LGTM! Proper API request integration.**

The `structured_output_mode` is correctly included in the run configuration properties sent to the task run API, ensuring the backend receives the user's selection.

---

`154-159`: **LGTM! Consistent component binding.**

The `RunOptions` component integration matches the pattern used in the evaluation comparison page, with proper binding of both `structured_output_mode` and `has_structured_output` props.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3130617808,2910710959,coderabbitai[bot],COMMENTED,2025-06-09T17:12:29Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>app/web_ui/src/lib/ui/fancy_select.svelte (1)</summary><blockquote>

`180-182`: **Consider responsive minimum height for better mobile UX.**

The fixed `min-h-[300px]` could create UX issues on smaller screens where 300px might occupy a significant portion of the viewport. Consider using responsive minimum heights or viewport-relative units.



```diff
-      class=""dropdown-content relative bg-base-100 rounded-box z-[1] w-full p-2 pt-0 shadow absolute max-h-[50vh] min-h-[300px] flex flex-col relative border {listVisible
+      class=""dropdown-content relative bg-base-100 rounded-box z-[1] w-full p-2 pt-0 shadow absolute max-h-[50vh] min-h-[200px] sm:min-h-[300px] flex flex-col relative border {listVisible
```

Alternatively, consider using viewport units for a more responsive approach:

```diff
-      class=""dropdown-content relative bg-base-100 rounded-box z-[1] w-full p-2 pt-0 shadow absolute max-h-[50vh] min-h-[300px] flex flex-col relative border {listVisible
+      class=""dropdown-content relative bg-base-100 rounded-box z-[1] w-full p-2 pt-0 shadow absolute max-h-[50vh] min-h-[25vh] flex flex-col relative border {listVisible
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 0175cdbe21adb5940b8d7ed60fde67ecc383e1bd and d2dd8e5d70119b715d4edbec4fd6e9e3c49b45df.

</details>

<details>
<summary>📒 Files selected for processing (10)</summary>

* `app/web_ui/src/lib/ui/fancy_select.svelte` (1 hunks)
* `app/web_ui/src/lib/ui/run_options.svelte` (3 hunks)
* `app/web_ui/src/routes/(app)/run/+page.svelte` (5 hunks)
* `libs/core/kiln_ai/adapters/model_adapters/base_adapter.py` (2 hunks)
* `libs/core/kiln_ai/adapters/model_adapters/litellm_adapter.py` (3 hunks)
* `libs/core/kiln_ai/adapters/model_adapters/test_base_adapter.py` (3 hunks)
* `libs/core/kiln_ai/adapters/model_adapters/test_litellm_adapter.py` (3 hunks)
* `libs/core/kiln_ai/adapters/model_adapters/test_saving_adapter_results.py` (2 hunks)
* `libs/core/kiln_ai/adapters/repair/test_repair_task.py` (1 hunks)
* `libs/core/kiln_ai/adapters/test_prompt_adaptors.py` (1 hunks)

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (2)</summary>

* app/web_ui/src/lib/ui/run_options.svelte
* app/web_ui/src/routes/(app)/run/+page.svelte

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (2)</summary>

<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/litellm_adapter.py (1)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/datamodel/task.py (1)</summary>

* `run_config` (128-135)

</details>

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/base_adapter.py (1)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/datamodel/task.py (1)</summary>

* `run_config` (128-135)

</details>

</blockquote></details>

</details><details>
<summary>🪛 GitHub Actions: Build and Test</summary>

<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/test_litellm_adapter.py</summary>

[error] 133-133: Test failure in test_response_format_options_function_calling: ValueError due to missing OpenRouter API key. Get your API key from https://openrouter.ai/settings/keys

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: Build Desktop Apps (ubuntu-22.04)
* GitHub Check: Build Desktop Apps (macos-13)
* GitHub Check: Build Desktop Apps (ubuntu-22.04-arm)
* GitHub Check: Build Desktop Apps (macos-latest)
* GitHub Check: Build Desktop Apps (windows-latest)

</details>

<details>
<summary>🔇 Additional comments (16)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/adapters/repair/test_repair_task.py (1)</summary>

`249-252`: **LGTM: Test updated to expect new run configuration properties.**

The test correctly expects the new properties (`structured_output_mode`, `temperature`, `top_p`) that are now included in adapter output metadata. The default values align with the expected behavior.

</details>
<details>
<summary>libs/core/kiln_ai/adapters/test_prompt_adaptors.py (1)</summary>

`152-155`: **LGTM: Consistent test update for new properties.**

The test assertions are correctly updated to expect the new run configuration properties, maintaining consistency with other test files in the codebase.

</details>
<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/test_litellm_adapter.py (4)</summary>

`108-109`: **LGTM: Improved testing approach for structured output mode.**

Setting `structured_output_mode` directly on the configuration properties is a better testing approach than mocking the model provider attribute. This aligns with the architectural change to source this value from runtime configuration.

---

`127-128`: **LGTM: Consistent configuration-based testing.**

The test correctly sets the structured output mode on the run configuration properties, maintaining consistency with the new architecture.

---

`147-148`: **LGTM: Proper configuration setup for JSON instructions mode.**

The test appropriately configures the structured output mode through the run configuration properties.

---

`159-161`: **LGTM: Multi-line configuration setup handled correctly.**

The structured output mode configuration is properly set for the JSON schema test case.

</details>
<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/base_adapter.py (2)</summary>

`191-196`: **LGTM: Improved architecture for structured output mode configuration.**

The change from using `model_provider().structured_output_mode` to `self.run_config.structured_output_mode` properly shifts this setting from static model configuration to runtime configuration. This enables the user-selectable structured output mode dropdown feature mentioned in the PR objectives.

The conditional logic correctly handles the different structured output modes that require JSON formatting instructions.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Pylint (3.3.7)</summary>

[refactor] 193-195: Consider merging these comparisons with 'in' by using 'structured_output_mode in (StructuredOutputMode.json_instructions, StructuredOutputMode.json_instruction_and_object)'. Use a set instead if elements are hashable.

(R1714)

</details>

</details>

---

`275-277`: **LGTM: Enhanced output metadata with run configuration properties.**

Adding `structured_output_mode`, `temperature`, and `top_p` to the output properties provides better traceability and aligns with the test expectations. These properties will help track how each run was configured, which is valuable for debugging and reproducibility.

</details>
<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/litellm_adapter.py (1)</summary>

`186-216`: **LGTM! Excellent refactoring to use run_config as source of truth.**

This change improves consistency by sourcing `structured_output_mode` from the run configuration rather than the model provider. Moving the provider access inside the `default` case is also a nice performance optimization.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Pylint (3.3.7)</summary>

[refactor] 207-214: Unnecessary ""else"" after ""return"", remove the ""else"" and de-indent the code inside it

(R1705)

</details>

</details>

</details>
<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/test_saving_adapter_results.py (3)</summary>

`105-107`: **Good test coverage for new properties.**

These assertions ensure that the new run config properties are correctly saved with their default values in the output metadata.

---

`234-236`: **Consistent test coverage maintained.**

Good to see the same property assertions added consistently across related tests.

---

`239-270`: **Excellent comprehensive test for custom values.**

This test provides crucial coverage by verifying that custom run configuration values are properly preserved in the output metadata, not just the defaults. The test is well-structured and covers all relevant properties.

</details>
<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/test_base_adapter.py (4)</summary>

`9-9`: **Good import addition for comprehensive testing.**

Adding `RunConfigProperties` enables the meta-testing approach used in the new tests.

---

`171-171`: **Test updated to match new architecture.**

Good update to set `structured_output_mode` directly on the run config instead of mocking the provider, aligning with the architectural change.

---

`270-300`: **Excellent defensive test for property completeness.**

This test uses introspection to ensure `_properties_for_task_output` includes all fields from `RunConfigProperties`. The explicit mapping and descriptive error message make this a robust guard against missing properties when the data model evolves.

---

`303-351`: **Brilliant meta-test demonstrating defensive testing.**

This test validates that the previous test will actually catch missing properties by temporarily injecting a fake field. The try/finally pattern for state restoration is excellent. This kind of meta-testing provides confidence that the test suite itself is robust.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3130617808,2911320045,coderabbitai[bot],COMMENTED,2025-06-09T20:42:51Z,"**Actionable comments posted: 2**

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/datamodel/test_basemodel.py (1)</summary><blockquote>

`505-505`: **Consider using the enum constant instead of string literal**

The addition of `structured_output_mode=""json_schema""` correctly updates the test fixture. Consider using `StructuredOutputMode.json_schema` instead of the string literal for better type safety and maintainability.

```diff
-            structured_output_mode=""json_schema"",
+            structured_output_mode=StructuredOutputMode.json_schema,
```

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/test_structured_output.py (1)</summary><blockquote>

`54-54`: **Consider using the enum constant instead of string literal**

The addition of `structured_output_mode=""json_schema""` correctly updates the MockAdapter configuration. Consider using `StructuredOutputMode.json_schema` instead of the string literal for better type safety and maintainability.

```diff
-                structured_output_mode=""json_schema"",
+                structured_output_mode=StructuredOutputMode.json_schema,
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 81dbb5d09be219b2b1a8f2cf84adddf30b5368f9 and f971c8b92e8dbca2853fe9cfb469fbd514ca1d2e.

</details>

<details>
<summary>📒 Files selected for processing (26)</summary>

* `app/desktop/studio_server/data_gen_api.py` (4 hunks)
* `app/desktop/studio_server/repair_api.py` (2 hunks)
* `app/desktop/studio_server/test_eval_api.py` (9 hunks)
* `app/desktop/studio_server/test_repair_api.py` (1 hunks)
* `app/web_ui/src/lib/api_schema.d.ts` (2 hunks)
* `app/web_ui/src/routes/(app)/evals/[project_id]/[task_id]/[eval_id]/compare_run_methods/+page.svelte` (5 hunks)
* `libs/core/kiln_ai/adapters/eval/g_eval.py` (2 hunks)
* `libs/core/kiln_ai/adapters/eval/test_base_eval.py` (1 hunks)
* `libs/core/kiln_ai/adapters/eval/test_eval_runner.py` (3 hunks)
* `libs/core/kiln_ai/adapters/eval/test_g_eval.py` (1 hunks)
* `libs/core/kiln_ai/adapters/ml_model_list.py` (16 hunks)
* `libs/core/kiln_ai/adapters/model_adapters/test_base_adapter.py` (5 hunks)
* `libs/core/kiln_ai/adapters/model_adapters/test_litellm_adapter.py` (4 hunks)
* `libs/core/kiln_ai/adapters/model_adapters/test_saving_adapter_results.py` (3 hunks)
* `libs/core/kiln_ai/adapters/model_adapters/test_structured_output.py` (1 hunks)
* `libs/core/kiln_ai/adapters/repair/test_repair_task.py` (4 hunks)
* `libs/core/kiln_ai/adapters/test_adapter_registry.py` (10 hunks)
* `libs/core/kiln_ai/adapters/test_ml_model_list.py` (1 hunks)
* `libs/core/kiln_ai/adapters/test_prompt_adaptors.py` (3 hunks)
* `libs/core/kiln_ai/adapters/test_prompt_builders.py` (1 hunks)
* `libs/core/kiln_ai/adapters/test_provider_tools.py` (6 hunks)
* `libs/core/kiln_ai/datamodel/datamodel_enums.py` (1 hunks)
* `libs/core/kiln_ai/datamodel/task.py` (1 hunks)
* `libs/core/kiln_ai/datamodel/test_basemodel.py` (1 hunks)
* `libs/core/kiln_ai/datamodel/test_task.py` (5 hunks)
* `libs/server/kiln_server/test_run_api.py` (9 hunks)

</details>

<details>
<summary>✅ Files skipped from review due to trivial changes (9)</summary>

* libs/core/kiln_ai/adapters/test_prompt_builders.py
* libs/core/kiln_ai/datamodel/datamodel_enums.py
* libs/core/kiln_ai/adapters/eval/test_eval_runner.py
* libs/core/kiln_ai/adapters/eval/test_g_eval.py
* libs/core/kiln_ai/adapters/eval/test_base_eval.py
* libs/core/kiln_ai/adapters/test_adapter_registry.py
* libs/core/kiln_ai/adapters/test_provider_tools.py
* libs/server/kiln_server/test_run_api.py
* app/desktop/studio_server/test_eval_api.py

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (6)</summary>

* libs/core/kiln_ai/adapters/model_adapters/test_litellm_adapter.py
* libs/core/kiln_ai/adapters/repair/test_repair_task.py
* libs/core/kiln_ai/adapters/test_prompt_adaptors.py
* app/web_ui/src/lib/api_schema.d.ts
* app/web_ui/src/routes/(app)/evals/[project_id]/[task_id]/[eval_id]/compare_run_methods/+page.svelte
* libs/core/kiln_ai/adapters/ml_model_list.py

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>libs/core/kiln_ai/adapters/test_ml_model_list.py (2)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/adapters/ml_model_list.py (3)</summary>

* `ModelName` (35-124)
* `default_structured_output_mode_for_model_provider` (2327-2352)
* `get_model_by_name` (2320-2324)

</details>
<details>
<summary>libs/core/kiln_ai/datamodel/datamodel_enums.py (2)</summary>

* `ModelProviderName` (77-96)
* `StructuredOutputMode` (23-43)

</details>

</blockquote></details>

</details><details>
<summary>🪛 Ruff (0.11.9)</summary>

<details>
<summary>app/desktop/studio_server/repair_api.py</summary>

11-11: `kiln_ai.datamodel.json_schema.validate_schema` imported but unused

Remove unused import: `kiln_ai.datamodel.json_schema.validate_schema`

(F401)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: Build Desktop Apps (windows-latest)
* GitHub Check: Build Desktop Apps (macos-latest)
* GitHub Check: Build Desktop Apps (ubuntu-22.04)
* GitHub Check: Build Desktop Apps (ubuntu-22.04-arm)
* GitHub Check: Build Desktop Apps (macos-13)

</details>

<details>
<summary>🔇 Additional comments (21)</summary><blockquote>

<details>
<summary>app/desktop/studio_server/test_repair_api.py (1)</summary>

`203-203`: **LGTM: Improved semantic correctness**

The change from HTTP 400 to 422 is appropriate for validation errors. HTTP 422 (Unprocessable Entity) is more semantically correct than HTTP 400 (Bad Request) when the request is syntactically valid but fails validation.

</details>
<details>
<summary>libs/core/kiln_ai/adapters/eval/g_eval.py (4)</summary>

`8-10`: **LGTM: Necessary import for new functionality**

The import of `default_structured_output_mode_for_model_provider` is correctly added to support the new structured output mode determination logic.

---

`15-15`: **LGTM: Necessary import for enum usage**

The addition of `StructuredOutputMode` to the import statement is correct and required for the enum values used in the disallowed modes list.

---

`120-131`: **LGTM: Well-designed structured output mode determination**

The logic for determining the structured output mode is well-implemented:

- Uses a centralized helper function for consistency
- Provides a sensible default (`json_schema`)
- Explicitly prevents incompatible modes for G-eval's JSON requirements
- Clear comments explain the business logic

This approach ensures G-eval works correctly while maintaining flexibility for different model-provider combinations.

---

`139-139`: **LGTM: Correct integration of structured output mode**

The structured output mode is correctly passed to `RunConfigProperties`, completing the integration of this feature into the G-eval workflow. This ensures the adapter uses the appropriate output mode for the model-provider combination.

</details>
<details>
<summary>app/desktop/studio_server/data_gen_api.py (4)</summary>

`10-12`: **LGTM: Clean import of centralized structured output mode function.**

The import follows the established pattern and brings in the function needed for determining default structured output modes.

---

`134-137`: **Consistent implementation across endpoints.**

The pattern matches the other endpoints, ensuring uniform handling of structured output modes.

---

`165-169`: **Consistent implementation in save_sample endpoint.**

The structured output mode determination follows the same pattern as the other endpoints, maintaining consistency.

---

`104-107`: <details>
<summary>✅ Verification successful</summary>

**Approve the centralized structured output mode determination.**

The use of `default_structured_output_mode_for_model_provider` ensures consistent behavior across endpoints. The inline comment clearly explains the rationale for not exposing this setting in the UI.



---

🏁 Script executed:

```shell
#!/bin/bash
# Description: Verify the default_structured_output_mode_for_model_provider function exists and is properly implemented
# Expect: Function should be defined in ml_model_list module

# Search for the function definition
ast-grep --pattern 'def default_structured_output_mode_for_model_provider($_, $_): $$$'
```

Length of output: 89

---

I wasn’t able to locate the function definition with AST-grep. Let’s try a text search across the repo:




This should confirm whether the function exists (and where).

---

🏁 Script executed:

```shell
#!/bin/bash
# Search for the function definition or references across the repository
rg ""default_structured_output_mode_for_model_provider"" -n
```

Length of output: 2933

---



</details>

**Verified default_structured_output_mode_for_model_provider exists and is used consistently**  
- Definition found at `libs/core/kiln_ai/adapters/ml_model_list.py:2327`  
- References in `data_gen_api.py`, `repair_api.py`, and `g_eval.py` confirm centralized behavior  
- Inline comment in `data_gen_api.py` clearly explains why this setting isn’t exposed in the UI  

Approving centralized structured output mode determination.

</details>
<details>
<summary>libs/core/kiln_ai/datamodel/test_task.py (5)</summary>

`18-18`: **Test updated to include required structured_output_mode.**

The test correctly includes the now-required `structured_output_mode` parameter.

---

`33-39`: **Validation test properly updated for the new required field.**

The test correctly expects 5 validation errors instead of 4 and specifically checks for the `structured_output_mode` validation error.

---

`50-50`: **Test fixture consistently updated.**

The custom prompt test includes the required `structured_output_mode` parameter.

---

`67-67`: **Fixture properly includes structured_output_mode.**

The `sample_run_config_props` fixture includes the required field, ensuring all dependent tests work correctly.

---

`175-175`: **Test defaults function updated correctly.**

The test includes the required `structured_output_mode` parameter while still testing the default values for `top_p` and `temperature`.

</details>
<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/test_saving_adapter_results.py (4)</summary>

`49-49`: **Fixture correctly updated with required field.**

The adapter fixture includes the now-required `structured_output_mode` parameter.

---

`106-108`: **Comprehensive property verification added.**

The test now verifies that `structured_output_mode`, `temperature`, and `top_p` are correctly saved in the output source properties.

---

`235-237`: **Autosave test updated with property verification.**

The autosave test consistently checks for the structured output mode and other run configuration properties.

---

`240-272`: **Excellent test coverage for custom values.**

This new test comprehensively verifies that custom values for `temperature`, `top_p`, and `structured_output_mode` are correctly preserved in the saved run output properties. The test uses different values from defaults to ensure proper handling.

</details>
<details>
<summary>libs/core/kiln_ai/adapters/test_ml_model_list.py (1)</summary>

`1-159`: **Comprehensive test coverage!**

The test suite thoroughly covers all scenarios for `default_structured_output_mode_for_model_provider`, including edge cases, error handling, and parametrized tests for multiple model-provider combinations.

</details>
<details>
<summary>app/desktop/studio_server/repair_api.py (1)</summary>

`50-100`: **Well-structured configuration extraction with proper error handling!**

The implementation correctly extracts model configuration from the original run, with appropriate type checking, error handling, and fallback mechanisms for the structured output mode.

</details>
<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/test_base_adapter.py (1)</summary>

`272-354`: **Excellent property validation tests!**

These tests ensure that all `RunConfigProperties` fields are properly included in the task output. The second test cleverly validates that the first test will catch any new properties added to `RunConfigProperties` in the future.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3130617808,2911632955,coderabbitai[bot],COMMENTED,2025-06-09T23:49:48Z,"**Actionable comments posted: 1**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between f971c8b92e8dbca2853fe9cfb469fbd514ca1d2e and 943e009bcc82f0c0e1eecc1a515eda8b87c5524d.

</details>

<details>
<summary>📒 Files selected for processing (7)</summary>

* `app/web_ui/src/routes/(app)/evals/[project_id]/[task_id]/[eval_id]/compare_run_methods/+page.svelte` (6 hunks)
* `libs/core/kiln_ai/adapters/ml_model_list.py` (17 hunks)
* `libs/core/kiln_ai/adapters/model_adapters/litellm_adapter.py` (4 hunks)
* `libs/core/kiln_ai/adapters/provider_tools.py` (4 hunks)
* `libs/core/kiln_ai/adapters/test_provider_tools.py` (7 hunks)
* `libs/core/kiln_ai/datamodel/datamodel_enums.py` (2 hunks)
* `libs/core/kiln_ai/datamodel/task.py` (3 hunks)

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (4)</summary>

* libs/core/kiln_ai/datamodel/datamodel_enums.py
* libs/core/kiln_ai/adapters/test_provider_tools.py
* libs/core/kiln_ai/adapters/model_adapters/litellm_adapter.py
* app/web_ui/src/routes/(app)/evals/[project_id]/[task_id]/[eval_id]/compare_run_methods/+page.svelte

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (2)</summary>

<details>
<summary>libs/core/kiln_ai/adapters/provider_tools.py (1)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/datamodel/datamodel_enums.py (1)</summary>

* `StructuredOutputMode` (23-45)

</details>

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/datamodel/task.py (1)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/datamodel/datamodel_enums.py (1)</summary>

* `StructuredOutputMode` (23-45)

</details>

</blockquote></details>

</details><details>
<summary>🪛 GitHub Actions: Build and Test</summary>

<details>
<summary>libs/core/kiln_ai/adapters/provider_tools.py</summary>

[error] 70-70: ValueError raised because required configuration key (API key) for OpenRouter provider is missing.

---

[warning] 171-171: Unexpected model/provider pair detected. Treated as custom model but check your model settings. Provider: ModelProviderName.openrouter/test-model

</details>

</details>
<details>
<summary>🪛 Pylint (3.3.7)</summary>

<details>
<summary>libs/core/kiln_ai/datamodel/task.py</summary>

[error] 138-138: Method 'upgrade_old_entried' should have ""self"" as first argument

(E0213)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: Build Desktop Apps (macos-13)
* GitHub Check: Build Desktop Apps (ubuntu-22.04)
* GitHub Check: Build Desktop Apps (windows-latest)
* GitHub Check: Build Desktop Apps (ubuntu-22.04-arm)
* GitHub Check: Build Desktop Apps (macos-latest)

</details>

<details>
<summary>🔇 Additional comments (6)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/datamodel/task.py (1)</summary>

`70-72`: **LGTM: Enforces explicit structured output mode configuration.**

Removing the default value ensures that `structured_output_mode` must be explicitly specified, which improves clarity and prevents implicit behavior. This aligns with the broader refactoring to make structured output modes explicit across the codebase.

</details>
<details>
<summary>libs/core/kiln_ai/adapters/ml_model_list.py (2)</summary>

`961-961`: **LGTM: Consistent standardization of structured output modes.**

The updates to use `StructuredOutputMode.json_schema` for Ollama providers creates consistency across the model configurations. This standardization will improve reliability and predictability when working with structured outputs across different models.



Also applies to: 1082-1082, 1114-1114, 1322-1322, 1336-1336, 1350-1350, 1373-1373, 1394-1394, 1415-1415, 1434-1434, 1453-1453, 1482-1482, 1545-1545, 1563-1563, 1584-1584, 1612-1612

---

`2327-2352`: **Well-designed utility function with robust error handling.**

The function provides centralized logic for determining structured output modes with proper fallback behavior. The implementation correctly:

- Handles model name conversion with try-catch for unknown models
- Searches through providers to find matching configurations  
- Respects disallowed modes to enable filtering
- Returns sensible defaults when models/providers aren't found

This centralized approach will help maintain consistency across the codebase and reduce duplication.

</details>
<details>
<summary>libs/core/kiln_ai/adapters/provider_tools.py (3)</summary>

`1-1`: **LGTM! Proper logging setup.**

The addition of logging import and logger instance follows standard Python practices and enables the new warning functionality.



Also applies to: 26-26

---

`188-189`: **LGTM! Well-documented default for custom models.**

The explicit setting of `structured_output_mode` to `json_instructions` for custom models is appropriate, as noted in the comment - it's the most compatible option that works across all providers. This aligns with the PR objectives to standardize structured output mode handling.

The comment clearly explains the reasoning, making the code maintainable.

---

`170-173`: <details>
<summary>✅ Verification successful</summary>

**Verify the warning logic scope and frequency.**

The warning is triggered for any provider that's not `kiln_custom_registry`, which means all non-built-in models will generate this warning. While this provides good observability for unexpected model/provider pairs, consider if this warning frequency is appropriate for production use.

The pipeline failures show this warning is being triggered as expected, but ensure this doesn't create noise in logs for legitimate use cases.


Let me check how frequently this warning path is reached in the codebase:

---

🏁 Script executed:

```shell
#!/bin/bash
# Description: Search for calls to kiln_model_provider_from to understand usage patterns
# Expected: Find usage patterns to assess if warnings will be too frequent

echo ""=== Searching for kiln_model_provider_from usage ===""
rg -A 3 -B 3 ""kiln_model_provider_from""

echo ""=== Searching for custom registry usage ===""
rg -A 2 -B 2 ""kiln_custom_registry""

echo ""=== Searching for test cases that might trigger warnings ===""
rg -A 5 ""test.*model.*provider"" --type py
```

Length of output: 47012

---



</details>

**Warning only fires on truly unsupported providers – no change needed**

The `else`‐branch in `kiln_model_provider_from` only triggers when `provider_name` doesn’t match any built-in case or the `kiln_custom_registry` branch. All legitimate providers (built-in enums and custom‐registry IDs) are handled explicitly, so normal pipelines won’t generate this warning. Tests already exercise both valid and invalid paths, confirming that the noise is limited to genuine misconfigurations. No changes required.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 GitHub Actions: Build and Test</summary>

[warning] 171-171: Unexpected model/provider pair detected. Treated as custom model but check your model settings. Provider: ModelProviderName.openrouter/test-model

</details>

</details>

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3130617808,2911804525,coderabbitai[bot],COMMENTED,2025-06-10T02:31:24Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/datamodel/task.py (1)</summary><blockquote>

`136-136`: **Fix typo in the comment.**

There's a small typo in the comment.


```diff
-    # Previously we didn't store structured_output_mode in the run_config_properties. Updgrade old models when loading from file.
+    # Previously we didn't store structured_output_mode in the run_config_properties. Upgrade old models when loading from file.
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 882184ed74b2f18a745a5f0d8a3a17fa32c5f017 and d1216816a99f2a3df29f36805889132678142e55.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `libs/core/kiln_ai/datamodel/task.py` (3 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>libs/core/kiln_ai/datamodel/task.py (1)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/datamodel/datamodel_enums.py (1)</summary>

* `StructuredOutputMode` (23-45)

</details>

</blockquote></details>

</details><details>
<summary>🪛 Pylint (3.3.7)</summary>

<details>
<summary>libs/core/kiln_ai/datamodel/task.py</summary>

[error] 138-138: Method 'upgrade_old_entries' should have ""self"" as first argument

(E0213)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: Build Desktop Apps (ubuntu-22.04-arm)
* GitHub Check: Build Desktop Apps (windows-latest)
* GitHub Check: Build Desktop Apps (macos-13)
* GitHub Check: Build Desktop Apps (macos-latest)
* GitHub Check: Build Desktop Apps (ubuntu-22.04)

</details>

<details>
<summary>🔇 Additional comments (3)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/datamodel/task.py (3)</summary>

`3-3`: **LGTM: Import addition supports the new model validator.**

The ValidationInfo import is correctly added to support the new backward compatibility validator method.

---

`70-72`: **LGTM: Field simplification aligns with coordinated refactoring.**

The removal of the default value for `structured_output_mode` enforces explicit configuration, improving clarity and preventing implicit behavior. This change is consistent with the broader refactoring described in the PR objectives.

---

`137-153`: **LGTM: Backward compatibility logic is well-implemented.**

The model validator correctly handles the migration of old persisted models that lack the `structured_output_mode` field. The logic appropriately:

1. Only processes data when loading from file (avoiding unnecessary processing during normal validation)
2. Safely handles non-dict data types  
3. Defaults to `StructuredOutputMode.unknown` for missing fields, allowing adapters to determine the best mode at runtime

The static analysis warning about the `cls` parameter is a false positive - `cls` is the correct first parameter for a class method validator with `mode=""before""`.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Pylint (3.3.7)</summary>

[error] 138-138: Method 'upgrade_old_entries' should have ""self"" as first argument

(E0213)

</details>

</details>

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3140287326,2921155967,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-12T13:28:28Z,"## Pull Request Overview

This PR adds SQL fixtures and parser enhancements to support the ASOF JOIN syntax with MATCH_CONDITION for Snowflake. Key changes include:
- Adding several SQL fixture examples demonstrating the ASOF JOIN syntax.
- Updating keyword lists to include ASOF and MATCH_CONDITION.
- Enhancing the Snowflake parser by adding new grammar rules for ASOF join clauses and match conditions.

### Reviewed Changes

Copilot reviewed 5 out of 5 changed files in this pull request and generated no comments.

| File | Description |
| ---- | ----------- |
| crates/lib-dialects/test/fixtures/dialects/snowflake/select_asof_join.sql | New SQL fixture examples for ASOF JOIN syntax |
| crates/lib-dialects/src/snowflake_keywords.rs | Added ASOF and MATCH_CONDITION keywords to the Snowflake dialect |
| crates/lib-dialects/src/snowflake.rs | Extended parser grammar to support ASOF join clauses and nested match conditions |
| crates/lib-core/src/dialects/syntax.rs | Added a new enum variant for MatchConditionClause |


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**crates/lib-dialects/src/snowflake.rs:123**
* The nested structure for the ASOF join clause, particularly around the implementation of MatchConditionSegment, is complex. Consider adding inline comments to explain the grammar flow and intended usage for future maintainability.
```
Sequence::new(vec_of_erased![
```
**crates/lib-dialects/src/snowflake.rs:1671**
* [nitpick] Adding a comment to clarify the purpose and expected syntax for MATCH_CONDITION within the parser grammar would improve understandability for future maintenance.
```
Ref::keyword(""MATCH_CONDITION""),
```
</details>

"
3084710736,2869087122,mkomorski,APPROVED,2025-05-26T19:44:08Z,
3075218114,2852168883,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-19T23:21:54Z,"## Pull Request Overview

This PR fixes a bug in PipelineProcessor where the filter flag (filtersApplied) was incorrectly set.  
- Introduces a dedicated boolean variable (filtersApplied) to correctly capture filter application logic  
- Updates test cases in PipelineProcessorTest to assert the proper behavior of the filter flag

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated no comments.

| File | Description |
| ---- | ----------- |
| src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java | Adds test verifying that filter operations correctly set the filter flag and clear output files |
| src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java | Modifies the flag assignment logic to use the filtersApplied variable instead of the hasErrors flag |



"
3082279573,2860027430,RiskyMH,COMMENTED,2025-05-22T07:01:21Z,
3081554474,2865107841,pakrym-oai,APPROVED,2025-05-23T17:00:10Z,
3119785304,2898810013,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-05T04:23:20Z,"## Pull Request Overview

This PR introduces an upper limit for parsed indexes in the schema cache to prevent potential overflows and to distinguish between invalid paths and index overflow errors.
- Added a constant (maxParserIndex) and a new error (errIndexTooLarge) for index overflow handling in the cache.
- Enhanced index validation in the parsePath function.
- Updated tests in ctx_test.go to assert the new error messages.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated 2 comments.

| File                         | Description                                                        |
| ---------------------------- | ------------------------------------------------------------------ |
| internal/schema/cache.go     | Introduced index upper limit with new error checks in parsePath.   |
| ctx_test.go                 | Updated test cases to confirm distinct error messages for limits.  |



"
3119785304,2898810847,coderabbitai[bot],COMMENTED,2025-06-05T04:24:12Z,"**Actionable comments posted: 1**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 40d14a9c717a3db1222ba480b9a26cddd6cd231b and 3fee7e2bc6543f360c02b48a84a32babe623c0c4.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `ctx_test.go` (1 hunks)
* `internal/schema/cache.go` (2 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>ctx_test.go (2)</summary><blockquote>

<details>
<summary>utils/assertions.go (1)</summary>

* `AssertEqual` (19-68)

</details>
<details>
<summary>helpers.go (1)</summary>

* `MIMEApplicationForm` (841-841)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (20)</summary>

* GitHub Check: Build (1.23.x, macos-latest)
* GitHub Check: Build (1.23.x, windows-latest)
* GitHub Check: Build (1.22.x, windows-latest)
* GitHub Check: Build (1.22.x, ubuntu-latest)
* GitHub Check: Build (1.21.x, macos-latest)
* GitHub Check: Build (1.21.x, ubuntu-latest)
* GitHub Check: Build (1.21.x, windows-latest)
* GitHub Check: Build (1.20.x, macos-latest)
* GitHub Check: Build (1.19.x, macos-latest)
* GitHub Check: Build (1.18.x, macos-latest)
* GitHub Check: Build (1.20.x, ubuntu-latest)
* GitHub Check: Build (1.20.x, windows-latest)
* GitHub Check: Build (1.19.x, windows-latest)
* GitHub Check: Compare
* GitHub Check: Build (1.18.x, ubuntu-latest)
* GitHub Check: Build (1.17.x, ubuntu-latest)
* GitHub Check: lint
* GitHub Check: Build (1.18.x, windows-latest)
* GitHub Check: Build (1.17.x, macos-latest)
* GitHub Check: Build (1.17.x, windows-latest)

</details>

<details>
<summary>🔇 Additional comments (4)</summary><blockquote>

<details>
<summary>internal/schema/cache.go (2)</summary>

`15-15`: **LGTM: Reasonable upper limit for parser indices.**

The constant value of 1000 provides a good balance between functionality and security, preventing potential DoS attacks from extremely large indices while allowing reasonable use cases.

---

`17-20`: **Good error differentiation approach.**

The separate error variables properly distinguish between general invalid path errors and specific index overflow errors, improving debugging capabilities and error handling granularity as intended by the PR objectives.

</details>
<details>
<summary>ctx_test.go (2)</summary>

`679-679`: **LGTM: Updated error message for negative index validation**

The test correctly validates the new error message ""failed to decode: schema: invalid path"" for negative indices, which aligns with the PR's goal to distinguish between different types of validation errors.

---

`681-690`: **LGTM: Comprehensive test coverage for upper index bounds**

Excellent addition of test coverage for the new upper index limit of 1000. The test properly:
- Sets up a form field with index 1001 that exceeds the limit
- Validates the specific error message ""failed to decode: schema: index exceeds parser limit""
- Follows established testing patterns in the codebase

This ensures the new parser index limits are properly validated and will help prevent regressions.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3119785304,2900300308,coderabbitai[bot],COMMENTED,2025-06-05T13:16:57Z,"**Actionable comments posted: 1**

<details>
<summary>♻️ Duplicate comments (2)</summary><blockquote>

<details>
<summary>ctx_test.go (2)</summary><blockquote>

`657-681`: **Good test structure with proper cleanup, but consider improving error validation.**

The test modifications look good overall:
- Proper use of `defer` to restore parser configuration
- Removal of `t.Parallel()` is appropriate due to global state modifications
- Testing negative index validation correctly

However, consider the past review feedback about using error comparison methods instead of string comparisons for more robust error validation.

---

`683-706`: **Excellent addition of boundary test case.**

This new test function properly validates the upper limit boundary condition (index 1001 exceeding the 1000 limit). The test structure is consistent with the existing test and follows good testing practices.

Same suggestion as above regarding error validation: consider using error comparison methods instead of exact string matching for more robust error checking.

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>middleware/proxy/proxy_test.go (1)</summary><blockquote>

`428-428`: **Consider consistent timeout usage across similar tests.**

Some tests now include explicit 2000ms timeouts while similar tests don't. Consider adding timeouts to all tests that make network calls for consistency and to prevent indefinite hangs in CI environments.




Also applies to: 448-448, 467-467, 487-487

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 6863f62d1b7dd8917f52591e71baeb835b17101f and ffc5aeef2b05181dc61b40fdfb2a1ee4e1acd4c9.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `ctx_test.go` (2 hunks)
* `middleware/proxy/proxy_test.go` (18 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (12)</summary>

* GitHub Check: Build (1.21.x, windows-latest)
* GitHub Check: Build (1.18.x, windows-latest)
* GitHub Check: Build (1.21.x, ubuntu-latest)
* GitHub Check: Build (1.22.x, windows-latest)
* GitHub Check: Build (1.23.x, ubuntu-latest)
* GitHub Check: Build (1.22.x, ubuntu-latest)
* GitHub Check: Build (1.18.x, ubuntu-latest)
* GitHub Check: Build (1.19.x, windows-latest)
* GitHub Check: Build (1.19.x, ubuntu-latest)
* GitHub Check: Build (1.17.x, macos-latest)
* GitHub Check: Compare
* GitHub Check: lint

</details>

<details>
<summary>🔇 Additional comments (5)</summary><blockquote>

<details>
<summary>middleware/proxy/proxy_test.go (5)</summary>

`27-41`: **Good refactoring for flexibility.**

The parameterization of network type and address makes this function more flexible and reusable. The logic is correct.

---

`43-51`: **Well-designed convenience functions.**

These wrapper functions improve code readability and follow Go testing best practices with proper `t.Helper()` usage.

---

`53-73`: **Redirect server implementation is correct.**

The redirect logic properly handles the ""/"" to ""/final"" redirect pattern with the correct HTTP status code. The closure pattern for capturing the `addr` variable works correctly since it's captured by reference.

---

`122-122`: **Excellent refactoring to improve test reliability.**

Replacing external URLs with local test servers eliminates external dependencies and makes tests more reliable and faster. The consistent use of `createProxyTestServerIPv4` improves maintainability.




Also applies to: 181-181, 217-217, 270-270, 296-296, 323-323, 347-347, 371-371, 398-398, 419-421, 441-441, 460-460, 480-480, 500-500, 522-522, 540-540, 562-562, 580-580, 657-657, 726-726

---

`434-434`: **Redirect test assertions correctly updated.**

The expected response bodies and status codes properly match the behavior of the new local redirect server implementation.




Also applies to: 452-453, 471-471

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3119785304,2900651956,ReneWerner87,COMMENTED,2025-06-05T14:45:22Z,
3119785304,2912171755,ReneWerner87,APPROVED,2025-06-10T06:45:28Z,
3073457731,2850379600,ellipsis-dev[bot],COMMENTED,2025-05-19T11:12:28Z,"> [!CAUTION]
> **Changes requested  :x:**
> <details>
> <summary>Reviewed everything up to a63b63683cec2ee45bc1b38f461dda39704fb4b6 in <ellipsistime>2 minutes and 20 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `260` lines of code in `5` files
> - Skipped `0` files when reviewing.
> - Skipped posting `6` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>agents-api/agents_api/clients/temporal.py:141</code></summary>
> 
> - **Draft comment:** 
> Consider using a more direct attribute check (e.g. hasattr(telemetry, 'workflows_counter')) instead of 'if telemetry and getattr(...)' for clarity.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 10% vs. threshold = 50% The current code is actually more robust than the suggested change. It handles both cases where telemetry is None and where workflows_counter is None. Using hasattr() would make the code more brittle. The current pattern is a common Python idiom for safe attribute access with fallbacks. Maybe there's a clearer way to write this that maintains safety but is more readable? The current code does pack multiple checks into one line. While the code could potentially be written more verbosely for clarity, the current pattern is a well-established Python idiom that experienced developers will recognize. Breaking it into multiple checks would add unnecessary verbosity. The comment should be deleted because it suggests a change that would make the code less robust while not significantly improving readability.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>agents-api/agents_api/metrics/counters.py:15</code></summary>
> 
> - **Draft comment:** 
> Remove duplicate import of ParamSpec and TypeVar to clean up the module.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>agents-api/agents_api/metrics/counters.py:72</code></summary>
> 
> - **Draft comment:** 
> The telemetry queries counter update logic is duplicated in both async and sync wrappers. Consider extracting a helper function to reduce duplication.
> - **Reason this comment was not posted:**
> Comment was on unchanged code.
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>agents-api/agents_api/telemetry.py:140</code></summary>
> 
> - **Draft comment:** 
> The assignment of the current trace id followed immediately by 'del start' is unnecessary; consider using '_' to indicate the value is intentionally unused.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 20% vs. threshold = 50% The code is doing something unusual - assigning to 'start' and immediately deleting it, with a comment explaining it's for type checking. While using '_' would be cleaner, there's an explicit comment explaining why this pattern is used. The current approach, while unconventional, is intentional and documented. The comment suggests a valid Python idiom, but maybe there's a specific reason the author chose this pattern over using '_' - perhaps for better type checking or debugging. While the suggestion is technically correct, the current pattern is intentionally used and documented. The benefit of changing it is minimal. This comment, while technically correct, suggests changing code that has an intentional pattern that's already documented. The change would be stylistic with minimal benefit.
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>agents-api/agents_api/web.py:54</code></summary>
> 
> - **Draft comment:** 
> Telemetry is initialized via init_telemetry(app) early in the app startup; ensure that this initialization occurs before route and middleware registration to capture all metrics as expected.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment is purely informative, reminding the author to ensure telemetry initialization occurs at a specific point in the app startup. It doesn't suggest a specific code change or ask for a test to be written. It violates the rule against making purely informative comments.
> 
> 
> </details>
> 
> <details>
> <summary>6. <code>agents-api/pyproject.toml:42</code></summary>
> 
> - **Draft comment:** 
> New telemetry dependencies have been added. Consider pinning exact versions or tighter ranges to avoid potential compatibility issues in the future.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 10% vs. threshold = 50% The comment suggests deviating from the project's clear dependency management strategy. If loose version constraints were problematic, they would likely not be used consistently throughout the file. The project likely has a deliberate reason for using >= constraints, such as allowing compatible updates or following some internal policy. Maybe the OpenTelemetry packages are special and need stricter version pinning due to potential breaking changes or compatibility issues between components? Even if OpenTelemetry packages benefit from strict versioning, changing the versioning strategy for just these packages would create inconsistency. The project team likely has experience managing these dependencies already. The comment suggests a practice that goes against the project's established dependency management pattern and should be deleted.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_nW9TodqvEELq1yMB`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3086912526,2865022177,ellipsis-dev[bot],COMMENTED,2025-05-23T16:32:01Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 3740520323095ad3fbd897f90242bd750a1b3327 in <ellipsistime>1 minute and 47 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `112` lines of code in `6` files
> - Skipped `0` files when reviewing.
> - Skipped posting `6` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>.env.example:69</code></summary>
> 
> - **Draft comment:** 
> Changed DATABASE_STRING default to in-memory SQLite. Reminder: in-memory DB won’t persist data—advise users to run 'skyvern init' for persistent storage.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is purely informative, reminding users about the behavior of in-memory SQLite. It doesn't provide a suggestion or ask for confirmation about the code change. It violates the rule against making purely informative comments.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>README.md:88</code></summary>
> 
> - **Draft comment:** 
> Quickstart instructions now reflect in-memory SQLite usage. Consider adding a brief note that this setup is for experimentation only.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 10% vs. threshold = 50% The comment's suggestion would add ""(not for production use)"" but this is already implied by the existing text which mentions it's ""for quick experimentation"" and explains how to get persistent storage. The current wording is clear and sufficient. Adding the suggested text would be redundant and potentially more intimidating to new users without adding meaningful information. Could explicitly stating ""not for production"" prevent someone from misusing the in-memory database in production? Would that extra warning be valuable? The current wording already makes it clear this is for experimentation, and explicitly points users to the persistent storage option. Adding ""not for production"" is unnecessarily negative and redundant given the existing clear context. The comment should be deleted as it suggests adding redundant information that's already effectively communicated in the existing text.
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>alembic.ini:64</code></summary>
> 
> - **Draft comment:** 
> Switching sqlalchemy.url to in-memory SQLite is great for quickstart, but note that migrations on an in-memory DB are ephemeral. Ensure this is clearly documented.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment is purely informative, reminding the author about the nature of in-memory DB migrations. It doesn't provide a specific code suggestion or ask for a specific test to be written. It also doesn't point out a potential issue or ask for confirmation of an intention.
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>skyvern/cli/llm_setup.py:43</code></summary>
> 
> - **Draft comment:** 
> Updated default DATABASE_STRING to in-memory SQLite. Confirm that users understand this is for quick experimentation.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment is asking for confirmation that users understand a change, which violates the rule against asking the PR author to confirm intentions or ensure understanding. It doesn't provide a specific code suggestion or ask for a test to be written.
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>skyvern/config.py:33</code></summary>
> 
> - **Draft comment:** 
> DATABASE_STRING is now set to in-memory SQLite. Make sure this default is highlighted in the docs as suitable only for testing.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment suggests highlighting a change in the documentation, which is not allowed by the rules. It doesn't provide a specific code suggestion or ask for a test to be written. It also doesn't confirm if the change is intentional, which would be allowed.
> 
> 
> </details>
> 
> <details>
> <summary>6. <code>skyvern/library/skyvern.py:55</code></summary>
> 
> - **Draft comment:** 
> Removing the check for .env existence avoids forcing users to run 'skyvern init'. Consider logging a message when .env isn’t found so users know defaults are applied.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 10% vs. threshold = 50% The comment has two parts: 1) An observation that removing the check avoids forcing users to run skyvern init (which is good), and 2) A suggestion to add logging. The first part isn't actionable. The second part about logging could be useful but seems unnecessary since the code works fine without .env - it's truly optional now. The suggestion to add logging could help users understand system behavior. However, since .env is now truly optional, logging its absence could create noise for users who intentionally don't use it. The code change makes .env completely optional, so logging its absence would likely just create unnecessary noise. The code works perfectly fine without .env now. Delete the comment. The code change is an improvement that makes .env optional, and adding logging about its absence would just create noise.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_P8RjCZwyVlYZ3jK0`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3086912526,2865184947,wintonzheng,COMMENTED,2025-05-23T17:26:48Z,
3165047796,2947753250,devgony,APPROVED,2025-06-21T12:30:43Z,
3128810853,2908687657,saikrishnarallabandi,COMMENTED,2025-06-09T00:25:40Z,good
3078330940,2855705116,sourcery-ai[bot],COMMENTED,2025-05-20T22:09:04Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3071510323,2848787560,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-18T07:31:13Z,"## Pull Request Overview

This PR adds new Gmail blocks and corresponding documentation to enhance email thread handling.  
- Extends Gmail Read output with a new threadId field.  
- Introduces Gmail Get Thread and Gmail Reply blocks with attachment support.  
- Updates documentation for both quickstarts and block references.

### Reviewed Changes

Copilot reviewed 4 out of 4 changed files in this pull request and generated 2 comments.

| File | Description |
| ---- | ----------- |
| docs/content/platform/quickstarts/gmail-detect-reply.md | Documentation for handling email threads in quickstart flows |
| docs/content/platform/blocks/google/gmail.md | Updated block documentation to include threadId, Gmail Get Thread, and Gmail Reply |
| docs/content/platform/blocks/blocks.md | Added references to new Gmail Get Thread and Gmail Reply blocks |
| autogpt_platform/backend/backend/blocks/google/gmail.py | Updated Gmail block code with new threadId functionality; added new GmailGetThreadBlock and GmailReplyBlock |



"
3071510323,2892024920,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-03T11:59:27Z,"## Pull Request Overview

Adds two new Gmail integration blocks to support thread operations and updates existing blocks to include thread metadata.

- Extend the Gmail read block to include `threadId` and support metadata-only scopes.
- Introduce **Gmail Get Thread** to fetch full conversation threads.
- Introduce **Gmail Reply** to send replies within an existing thread, handling attachments and reply-all logic.

### Reviewed Changes

Copilot reviewed 3 out of 3 changed files in this pull request and generated no comments.

| File                                              | Description                                                   |
| ------------------------------------------------- | ------------------------------------------------------------- |
| docs/content/platform/blocks/google/gmail.md      | Updated Gmail Read docs with `threadId`, added Get Thread and Reply sections |
| docs/content/platform/blocks/blocks.md            | Added new entries for Gmail Get Thread and Gmail Reply        |
| autogpt_platform/backend/backend/blocks/google/gmail.py | Modified `Email` model, enhanced `_read_emails` for scopes, and implemented `GmailGetThreadBlock` & `GmailReplyBlock` |



"
3071510323,2897235837,ntindle,COMMENTED,2025-06-04T15:36:31Z,
3098984483,2877409776,nektro,COMMENTED,2025-05-29T07:47:54Z,will merge conflict with another branch and needs a small enhancement but fix is generally correct
3137660182,2918272064,sabrikaragonen,APPROVED,2025-06-11T18:22:40Z,
3124190078,2904352888,greptile-apps[bot],COMMENTED,2025-06-06T09:22:25Z,"
## PR Summary

This PR implements expandable package search results with nested matching entries display in a table format.

- Added `catalog/app/containers/Search/fakeMatchingEntries.ts` to provide mock data structure and test data for matching entries
- Modified `Hit.tsx` to render matching entries using Material-UI tables within package search results
- Updated `Search.tsx` to integrate fake matching entries data with search hit results
- Enhanced `Views/Table.tsx` with expandable row functionality and nested table display for matching entries
- Consider replacing `noopFixme` placeholders with actual search/sort implementations before final merge

<sub>4 file(s) reviewed, 1 comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=quilt_4411)</sub>"
3137527678,2918027698,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-11T17:01:02Z,"## Pull Request Overview

This PR updates the CONTRIBUTING guide by removing outdated references and adding a new DeepWiki link for additional help.

- Removed obsolete contributors guide and changeset references  
- Added “Ask DeepWiki” link under discussions


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**.github/CONTRIBUTING.md:6**
* [nitpick] Consider adding a trailing period for consistency with the previous list item, which ends with a period.
```
For answers to more questions, [Ask DeepWiki](https://deepwiki.com/rainbow-me/rainbowkit)
```
</details>

"
3088793819,2866524536,coderabbitai[bot],COMMENTED,2025-05-24T22:07:38Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/components/contract-components/contract-publish-form/external-links-input.tsx (1)</summary><blockquote>

`70-79`: **Enhanced button accessibility with redundant screen reader text**

The migration from `IconButton` to `Button` with `variant=""ghost""` and `size=""icon""` is correct. However, there's redundant accessibility text:

```diff
 <Button
   variant=""ghost""
   size=""icon""
   aria-label=""Remove row""
   onClick={() => remove(index)}
   className=""self-end""
 >
   <TrashIcon className=""size-5"" />
-  <span className=""sr-only"">Remove row</span>
 </Button>
```

The `aria-label` already provides the accessible name, making the `sr-only` span redundant.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 5139857db90f9db3b1b739dfea892b600422a084 and 9623ca1279809f5860bf734cbae44c903d31445c.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `apps/dashboard/src/components/contract-components/contract-publish-form/external-links-fieldset.tsx` (3 hunks)
* `apps/dashboard/src/components/contract-components/contract-publish-form/external-links-input.tsx` (3 hunks)

</details>

<details>
<summary>👮 Files not reviewed due to content moderation or server errors (2)</summary>

* apps/dashboard/src/components/contract-components/contract-publish-form/external-links-fieldset.tsx
* apps/dashboard/src/components/contract-components/contract-publish-form/external-links-input.tsx

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: E2E Tests (pnpm, esbuild)
* GitHub Check: E2E Tests (pnpm, webpack)
* GitHub Check: Size
* GitHub Check: Unit Tests
* GitHub Check: E2E Tests (pnpm, vite)
* GitHub Check: Build Packages
* GitHub Check: Lint Packages
* GitHub Check: Analyze (javascript)

</details>

<details>
<summary>🔇 Additional comments (30)</summary><blockquote>

<details>
<summary>apps/dashboard/src/components/contract-components/contract-publish-form/external-links-fieldset.tsx (11)</summary>

`1-1`: **Import path looks correct for shadcn/ui migration.**

The import change from ""tw-components"" to ""@/components/ui/button"" aligns with the shadcn/ui component structure and the PR's migration objectives.

---

`32-35`: **Good semantic HTML usage with proper Tailwind styling.**

The migration from Chakra UI components to semantic HTML elements (`<h3>` and `<p>`) with appropriate Tailwind classes maintains the visual hierarchy while improving semantic markup. The text styling classes are appropriate for the content hierarchy.

---

`45-46`: **Button variant and styling updated correctly for shadcn/ui.**

The props have been properly updated:
- Removed Chakra-specific props (`colorScheme`, `borderRadius`)
- Added shadcn/ui variant prop (`variant=""outline""`)
- Applied Tailwind classes for gap spacing (`className=""gap-2""`)

This maintains the visual appearance while using the new component library.

---

`54-54`: **Icon positioning correctly updated for shadcn/ui Button component.**

The `PlusIcon` has been moved from the `leftIcon` prop (Chakra UI pattern) to a child element with proper sizing classes (`className=""size-5""`), which is the correct pattern for shadcn/ui Button components.

---

`1-1`: **LGTM: Clean import migration to shadcn/ui**

The import change from `""tw-components""` to `""@/components/ui/button""` aligns with the PR objective of migrating to shadcn/ui components.

---

`32-35`: **Excellent semantic HTML improvements**

The migration from Chakra UI components to semantic HTML elements (`<h3>` and `<p>`) with Tailwind classes improves accessibility and follows web standards. The styling maintains visual consistency while providing better semantic structure.

---

`45-46`: **Well-executed Button component migration**

The prop changes correctly adapt from Chakra UI to shadcn/ui:
- `colorScheme=""primary""` and `borderRadius=""md""` → `variant=""outline""`
- `leftIcon` prop → child element with proper sizing
- Added `className=""gap-2""` for consistent spacing

The icon is properly sized with `className=""size-5""` and maintains accessibility.



Also applies to: 54-54

---

`1-1`: **LGTM: Clean import migration to shadcn/ui.**

The import change from `""tw-components""` to `""@/components/ui/button""` correctly aligns with the shadcn/ui migration pattern.

---

`32-35`: **LGTM: Proper semantic HTML with appropriate styling.**

The replacement of Chakra UI components with semantic HTML elements (`<h3>` and `<p>`) styled with Tailwind CSS is well-implemented. The heading hierarchy and text styling are appropriate for the content structure.

---

`45-46`: **LGTM: Correct button prop migration.**

The props have been properly updated for the shadcn/ui Button component:
- `variant=""outline""` replaces the previous Chakra styling
- `className=""gap-2""` provides appropriate spacing for the icon and text

---

`54-54`: **LGTM: Icon properly moved to child element.**

The PlusIcon is correctly moved from the `leftIcon` prop to a child element with proper sizing (`size-5` class), which is the expected pattern for shadcn/ui Button components.

</details>
<details>
<summary>apps/dashboard/src/components/contract-components/contract-publish-form/external-links-input.tsx (19)</summary>

`1-4`: **Import statements correctly updated for shadcn/ui migration.**

All imports have been properly changed to use shadcn/ui components:
- Button, Input, Label, and Separator from the appropriate ui paths
- This aligns with the PR's migration objectives

---

`20-25`: **Layout structure and form labeling improved.**

The migration to native div elements with Tailwind classes maintains the layout while:
- Using semantic HTML structure
- Proper accessibility with `htmlFor` attributes linking labels to inputs
- Good responsive design with `md:flex-row` breakpoint

---

`27-27`: **Input accessibility properly implemented.**

The `id` attribute correctly matches the `htmlFor` attribute in the corresponding Label component, ensuring proper accessibility for screen readers.

---

`31-41`: **Error message rendering correctly preserved.**

The error handling logic has been maintained while updating the UI:
- Same form validation logic using `getFieldState`
- Error messages now use semantic `<p>` elements with proper styling
- Styling uses `text-destructive-text` which should be consistent with the design system

---

`43-46`: **Consistent form field structure maintained.**

The second form field (URL) follows the same pattern as the first field with proper labeling and accessibility attributes.

---

`48-48`: **Input ID properly linked to label.**

The URL input field correctly implements the same accessibility pattern with matching `id` and `htmlFor` attributes.

---

`60-68`: **Error handling consistency maintained.**

The URL field error handling follows the same pattern as the name field, ensuring consistent user experience and proper error display.

---

`70-79`: **Button component properly migrated with accessibility improvements.**

The remove button has been correctly updated:
- Uses shadcn/ui Button with appropriate variant (""ghost"") and size (""icon"")
- Icon properly positioned as child element
- Enhanced accessibility with both `aria-label` and `sr-only` span for screen readers
- Proper self-alignment with `self-end` class

---

`81-81`: **Separator component correctly replaced.**

The Chakra UI `Divider` has been properly replaced with the shadcn/ui `Separator` component, maintaining the visual separation between form sections.

---

`1-4`: **Clean migration to shadcn/ui imports**

All imports have been correctly updated to use shadcn/ui components from the `@/components/ui/` namespace, maintaining consistency with the overall migration strategy.

---

`20-42`: **Excellent accessibility and semantic improvements for name field**

The refactor includes several positive changes:
- Semantic HTML structure with proper `<div>` layout
- Accessibility enhancement with `htmlFor` and `id` attributes linking labels to inputs
- Consistent error message styling with `text-destructive-text text-sm`
- Maintained form validation logic while improving structure

---

`43-69`: **Consistent implementation for URL field**

The URL field follows the same excellent pattern as the name field with proper accessibility attributes and error handling. The validation logic for URL format checking is preserved correctly.

---

`81-82`: **LGTM: Separator component migration**

The replacement of `Divider` with `Separator` component aligns with the shadcn/ui migration and maintains the visual separation between form entries.

---

`1-4`: **LGTM: Complete import migration to shadcn/ui.**

The imports have been properly updated to use shadcn/ui components:
- Button, Input, Label, and Separator components from the correct paths
- Consistent with the migration pattern across the codebase

---

`23-25`: **Excellent accessibility improvements.**

The addition of proper `htmlFor` attributes on labels linked to corresponding `id` attributes on inputs significantly improves accessibility. The `capitalize` class provides consistent styling for the labels.




Also applies to: 44-46

---

`27-27`: **LGTM: Proper input ID association.**

The `id` attributes on inputs (`externalLinks.${index}.name` and `externalLinks.${index}.url`) correctly link to their respective labels, maintaining form accessibility standards.




Also applies to: 48-48

---

`31-41`: **LGTM: Error handling logic preserved.**

The error message display logic has been successfully migrated from Chakra UI's `FormErrorMessage` to semantic `<p>` elements with appropriate styling (`text-destructive-text text-sm`). The form validation and error retrieval logic remains intact.




Also applies to: 60-68

---

`70-79`: **LGTM: Button migration with accessibility enhancement.**

The button has been properly updated for shadcn/ui:
- `variant=""ghost""` and `size=""icon""` for appropriate styling
- `className=""self-end""` for proper layout positioning
- Added `<span className=""sr-only"">` for enhanced screen reader support

---

`81-81`: **LGTM: Separator component migration.**

The replacement of Chakra UI's `Divider` with shadcn/ui's `Separator` component maintains the visual separation between form sections.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3088793819,2873967545,joaquim-verges,APPROVED,2025-05-28T07:45:27Z,
3114858095,2893688513,dev-aipolabs,APPROVED,2025-06-03T18:42:37Z,lgtm
3122379364,2901889742,greptile-apps[bot],COMMENTED,2025-06-05T19:24:11Z,"


<sub>1 file reviewed, 1 comment</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=promptfoo_4353)</sub>"
3122379364,2901892288,greptile-apps[bot],COMMENTED,2025-06-05T19:24:35Z,"


<sub>1 file reviewed, no comments</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=promptfoo_4353)</sub>"
3122379364,2901900172,sourcery-ai[bot],COMMENTED,2025-06-05T19:25:40Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3124970716,2912780363,DjamilaBaroudi,DISMISSED,2025-06-10T09:52:33Z,
3124970716,2913424191,DjamilaBaroudi,APPROVED,2025-06-10T12:46:22Z,
3116896533,2895720197,coderabbitai[bot],COMMENTED,2025-06-04T08:05:16Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>docs/setup/index.md (1)</summary><blockquote>

`15-15`: **Correct scoped package installation.** The npm install command now correctly references the `@leonardsellem` scope. Consider adding a Yarn alternative for completeness (e.g., `yarn global add @leonardsellem/n8n-mcp-server`).

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between b04464e9f549d3657552ec53b84a264b3726b2d4 and 5cd56455445f004827fbcd23eb1ba5485c4742e3.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `docs/setup/index.md` (1 hunks)

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3137452003,2917943515,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-11T16:31:58Z,"## Pull Request Overview

Adds a new “Reset Segment” feature in the Pinot Controller UI, including the API endpoint, client utility, and frontend integration.

- Define `resetSegment` API call and wrap it in `resetSegmentOp`  
- Add “Reset Segment” button with confirmation dialog and UI logic  
- Handle success and error feedback in `SegmentDetails` page

### Reviewed Changes

Copilot reviewed 3 out of 3 changed files in this pull request and generated 2 comments.

| File                                                                 | Description                                           |
| -------------------------------------------------------------------- | ----------------------------------------------------- |
| pinot-controller/src/main/resources/app/requests/index.ts            | Added `resetSegment` API endpoint                     |
| pinot-controller/src/main/resources/app/utils/PinotMethodUtils.ts    | Imported and wrapped `resetSegmentOp` in utils        |
| pinot-controller/src/main/resources/app/pages/SegmentDetails.tsx     | Added button, dialog handlers, and `handleResetOp`     |


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**pinot-controller/src/main/resources/app/pages/SegmentDetails.tsx:402**
* Add tests for the reset segment button and its confirmation dialog to ensure the UI triggers the API call and handles both success and error flows correctly.
```
<CustomButton
```
**pinot-controller/src/main/resources/app/pages/SegmentDetails.tsx:406**
* [nitpick] Consider clarifying the tooltip to better explain the reset operation's effect; for example, 'Reset the segment by disabling and then re-enabling it in the cluster'.
```
tooltipTitle=""Reset the segment by disabling and enabling it""
```
</details>

"
3137452003,2924122320,jayeshchoudhary,COMMENTED,2025-06-13T09:49:23Z,please add UI SS/video
3137452003,2930954766,jayeshchoudhary,APPROVED,2025-06-16T07:38:40Z,"lgtm, maybe add more details on what this operation does in the dialog message. "
3137452003,2932653032,xiangfu0,APPROVED,2025-06-16T15:44:39Z,
3142999940,2924377999,MischaPanch,APPROVED,2025-06-13T11:08:54Z,"Thx codex, looks good. I also interrogated copilot on GitHub about this to better understand why that's a fix

From Copilot:

Example where the old code fails and the new code works:

Suppose you want to match the literal string foo*bar (with an actual asterisk, not as a wildcard):

```python
# Content to search in:
content = ""foo*bar\nfoobar\nfooabar\nfooXbar""

# Pattern that should match only the line 'foo*bar'
pattern = r""foo\*bar""

# Call search_text with is_glob=True to treat pattern as a glob
search_text(pattern, content=content, is_glob=True)
```

Old behavior:

The old code would treat * as a wildcard, so `foo*bar` would match any line that starts with foo and ends with bar, including fooabar and fooXbar.
It would not match only the literal `foo*bar`.
New behavior (with the patch):

The new code interprets * as a literal asterisk, so only the line `foo*bar` will match.
Summary:
With this patch, `search_text(r""foo*bar"", content=..., is_glob=True)` correctly matches only the literal foo*bar, while the previous version would have matched fooabar and fooXbar as well."
3133705387,2913709065,coderabbitai[bot],COMMENTED,2025-06-10T13:57:14Z,"**Actionable comments posted: 2**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: ASSERTIVE**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 4a0a7615dd2ea4e3f0011003d56d872d3e86ca20 and b179ddeee4089001358024f4611fb3950fd2ae9a.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `site/docs/configuration/expected-outputs/model-graded/factuality.md` (1 hunks)
* `site/docs/guides/factuality-eval.md` (1 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (20)</summary>

* GitHub Check: webui tests
* GitHub Check: Build Docs
* GitHub Check: Redteam
* GitHub Check: Test on Node 24.x and ubuntu-latest
* GitHub Check: Test on Node 24.x and macOS-latest
* GitHub Check: Style Check
* GitHub Check: Test on Node 20.x and macOS-latest
* GitHub Check: Share Test
* GitHub Check: Redteam Custom Enterprise Server
* GitHub Check: Test on Node 18.x and ubuntu-latest
* GitHub Check: Test on Node 22.x and macOS-latest
* GitHub Check: Test on Node 20.x and ubuntu-latest
* GitHub Check: Test on Node 18.x and macOS-latest
* GitHub Check: Test on Node 20.x and windows-latest
* GitHub Check: Test on Node 18.x and windows-latest
* GitHub Check: Build on Node 20.x
* GitHub Check: Build on Node 22.x
* GitHub Check: Build on Node 24.x
* GitHub Check: Build on Node 18.x
* GitHub Check: Analyze (javascript-typescript)

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3084106426,2862074530,gemini-code-assist[bot],COMMENTED,2025-05-22T17:37:32Z,"Hello @greinacker, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

## Summary of Changes
Hello team, gemini-code-assist here to provide a summary of this pull request. This PR, authored by @greinacker, introduces a new light mode theme for the application. The goal is to provide an alternative to the default dark mode, specifically aiming for higher contrast in the light theme. The implementation involves adding a new setting for theme selection, applying CSS classes to the document body to control styling, and using CSS filters and specific overrides to achieve the desired look and feel for various components. Internationalization for the new theme options has also been included, and notification styling has been updated to adapt to the selected theme.

### Highlights
* **New Theme Setting**: Adds a new 'Theme' option (Dark/Light) to the General Settings page, allowing users to switch between the default dark mode and the new light mode.
* **Light Mode Styling Implementation**: Introduces CSS classes (`light-mode`, `dark-mode`) applied to the document body to control global styling. Utilizes CSS filters (`invert`, `hue-rotate`) on the root element and images, along with specific color overrides for various neutral and gray text classes, to create the light theme appearance.
* **Themed Notifications**: Updates the notification utility functions to dynamically determine the current theme based on the body class and apply the appropriate styling for toast notifications.
* **Internationalization**: Adds translations for the new 'Theme' setting and the 'Dark'/'Light' options in both English and Chinese locales.

### Changelog
<details>
<summary>Click here to see the changelog</summary>

* **src/common/locales/en.json**
  * Added translations for 'theme' and 'themeOptions' (dark/light).
* **src/common/locales/zh.json**
  * Added Chinese translations for 'theme' and 'themeOptions' (dark/light).
* **src/common/types.ts**
  * Added optional `darkMode` boolean property to the `SettingsData` interface to store the user's theme preference.
* **src/main/store/store.ts**
  * Set the default value for the new `darkMode` setting to `true` (defaulting to dark mode).
* **src/renderer/src/App.tsx**
  * Created a new `ThemeManager` component that uses a `useEffect` hook to add/remove `light-mode` or `dark-mode` classes to the `document.body` whenever the `settings.darkMode` value changes.
  * Rendered the `ThemeManager` component within the `SettingsProvider` to ensure theme classes are applied based on user settings.
* **src/renderer/src/components/ContextFiles/ContextFiles.css**
  * Added a new CSS class `.context-dimmed` using `@apply text-neutral-500;`.
  * Added a rule `body.light-mode .context-dimmed` to set `opacity: 0.6;` specifically for dimmed context file text in light mode.
* **src/renderer/src/components/ContextFiles/ContextFiles.tsx**
  * Changed the class applied to dimmed context file spans from a direct Tailwind class (`text-neutral-500`) to the new `.context-dimmed` class.
* **src/renderer/src/components/common/Select.css**
  * Added a new CSS file specifically for Select component styling.
  * Added a rule `body.light-mode .select-dropdown` to apply an `invert(1) hue-rotate(180deg)` filter to the dropdown menu when in light mode, likely to correct colors inverted by the body filter.
* **src/renderer/src/components/common/Select.tsx**
  * Imported the new `Select.css` file.
  * Added the `select-dropdown` class to the dropdown `<ul>` element to apply the new light mode styling.
* **src/renderer/src/components/settings/GeneralSettings.tsx**
  * Defined `themeOptions` array for the theme selection dropdown, using internationalized labels.
  * Added a `handleThemeChange` function to update the `darkMode` setting based on the selected dropdown value.
  * Added a new `Select` component for theme selection within the 'GUI' section of the General Settings, linking it to the `darkMode` setting and the `handleThemeChange` function.
* **src/renderer/src/main.css**
  * Separated base body styles from theme-specific styles.
  * Defined styles for `body.dark-mode` (reflecting the previous default).
  * Defined styles for `body.light-mode`, setting background/text colors and applying `filter: invert(1) hue-rotate(180deg)` to `#root` and `#root img`.
  * Added specific color overrides for various `text-neutral-*` and `text-gray-*` classes within `body.light-mode` to fine-tune text colors after the filter is applied.
* **src/renderer/src/utils/notifications.ts**
  * Renamed `NOTIFICATION_OPTIONS` to `baseOptions` and removed the hardcoded `theme: 'dark'` property.
  * Created a `getOptions` function that dynamically determines the appropriate toast theme ('light' or 'dark') based on the presence of the `light-mode` class on the `document.body`.
  * Updated the notification helper functions (`showSuccessNotification`, etc.) to use the `getOptions` function to retrieve theme-aware options before showing a toast.

</details>


<details>

<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

</details>

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>


[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configure Gemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).

---

> Colors shift and change,
> From dark night to bright day,
> A new theme is born.

"
3084106426,2862079823,gemini-code-assist[bot],CHANGES_REQUESTED,2025-05-22T17:39:43Z,"## Code Review
This pull request introduces a light mode theme, which is a valuable addition for user accessibility and preference. The changes to settings, context, and components to support the theme toggle are well-integrated.

### Summary of Findings
* **Critical Text Contrast Issue in Light Mode**: CSS overrides in `src/renderer/src/main.css` (lines 61-91) for light mode are forcing light text colors on a light background, which severely reduces contrast and readability. This likely negates the intended effect of the global inversion filter for text.
* **Maintainability of Global Invert Filter**: The use of `filter: invert(1) hue-rotate(180deg);` on the main application root and specific components like the select dropdown is a simple approach for theming but may lead to maintainability challenges and visual artifacts as the application evolves.
* **Use of `!important`**: The CSS overrides for text colors in light mode make extensive use of `!important`. While potentially a consequence of the global filter strategy, it's generally a practice to avoid as it can make future styling more difficult. I did not add a review comment for this due to the review settings.

### Merge Readiness
The pull request introduces a much-anticipated light mode theme. While the overall structure and logic for theme switching are good, there's a **critical issue** with text contrast in `src/renderer/src/main.css` that needs to be addressed before merging. This issue could make text unreadable in light mode for many users.

Additionally, there are some medium-severity concerns regarding the long-term maintainability of the chosen CSS filtering strategy. These are not necessarily blockers if the simplicity goal is paramount for now, but they are worth considering.

I recommend that the critical text contrast issue be resolved. After that, further review and testing would be beneficial. As an AI, I am not authorized to approve pull requests; please ensure other reviewers approve these changes before merging."
3084106426,2869144456,wladimiiir,COMMENTED,2025-05-26T20:49:48Z,
3084106426,2869144675,wladimiiir,COMMENTED,2025-05-26T20:50:05Z,
3084106426,2869145504,wladimiiir,COMMENTED,2025-05-26T20:51:11Z,
3084106426,2871797354,wladimiiir,APPROVED,2025-05-27T16:35:16Z,"Awesome job, thanks."
3120399262,2899493850,DjamilaBaroudi,APPROVED,2025-06-05T09:12:22Z,
3137142219,2919297958,hackwaly,COMMENTED,2025-06-12T02:31:18Z,
3083744845,2861657936,github-actions[bot],COMMENTED,2025-05-22T15:19:07Z,"Your PR title doesn't match the required format. The title should be in this format: 

```
chore: update Text docs
fix: text not rendering
feat: add new feature to Text
breaking: remove Text#resolution 
```"
3076013183,2853045995,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-20T07:39:38Z,"## Pull Request Overview

This PR adds additional unit tests and refactors logging and formatting in several utility and enterprise features to improve test coverage and code clarity.  
- Added new tests for PdfUtils, GeneralUtils, LicenseKeyChecker, and other utility methods.  
- Refactored log message formatting and CSVSource usage for consistency.  
- Merged duplicate test files and reordered imports for better maintainability.

### Reviewed Changes

Copilot reviewed 8 out of 8 changed files in this pull request and generated no comments.

<details>
<summary>Show a summary per file</summary>

| File | Description |
| ---- | ----------- |
| src/test/java/stirling/software/SPDF/utils/PdfUtilsTest.java | Added tests for image overlay, page count, and page size validation. |
| src/test/java/stirling/software/SPDF/utils/PDFToFileTest.java | Adjusted import order and formatting in zip stream handling. |
| src/test/java/stirling/software/SPDF/utils/GeneralUtilsAdditionalTest.java | Expanded test coverage for size conversion, byte formatting, and URL/UUID helpers. |
| src/test/java/stirling/software/SPDF/utils/CustomHtmlSanitizerTest.java | Updated expected tag outputs with improved formatting. |
| src/test/java/stirling/software/SPDF/service/SpyPDFDocumentFactory.java | Reformatted enum values with consistent indentation. |
| src/test/java/stirling/software/SPDF/service/CustomPDFDocumentFactoryTest.java | Simplified CSVSource usage and adjusted formatting in tests. |
| src/test/java/stirling/software/SPDF/EE/LicenseKeyCheckerTest.java | Added tests to verify license key logic for premium features. |
| src/main/java/stirling/software/SPDF/EE/KeygenLicenseVerifier.java | Improved logging message formatting and code layout during HTTP calls. |
</details>



<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**src/test/java/stirling/software/SPDF/utils/PdfUtilsTest.java:122**
* assertEquals is used without an explicit static import. Please add 'import static org.junit.jupiter.api.Assertions.assertEquals;' to ensure compilation.
```
assertEquals(1, resultDoc.getNumberOfPages());
```
</details>

"
3076013183,2853629107,reecebrowne,APPROVED,2025-05-20T10:27:22Z,
3078939326,2856322484,coderabbitai[bot],COMMENTED,2025-05-21T05:20:15Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (4)</summary><blockquote>

<details>
<summary>packages/cli/src/commands/create.ts (1)</summary><blockquote>

`209-220`: **Consider using dotenv instead of manual parsing.**

While the implementation works, it uses manual parsing of the `.env` file which could be more robust.


```diff
// Try to find the nearest .env file for database configuration
const envPath = findNearestEnvFile();
let postgresUrl: string | null = null;

-if (envPath && existsSync(envPath)) {
-  const env = readFileSync(envPath, 'utf8');
-  const envVars = env.split('\n').filter((line) => line.trim() !== '');
-  const postgresUrlLine = envVars.find((line) => line.startsWith('POSTGRES_URL='));
-  if (postgresUrlLine) {
-    postgresUrl = postgresUrlLine.split('=')[1].trim();
-  }
+if (envPath) {
+  require('dotenv').config({ path: envPath });
+  postgresUrl = process.env.POSTGRES_URL || null;
}
```

</blockquote></details>
<details>
<summary>packages/cli/src/commands/env.ts (3)</summary><blockquote>

`85-85`: **Remove unused variable.**

The `localEnvPath` variable is defined but never used in this function. It's redefined as `localEnvFilePath` on line 98.

```diff
-  const localEnvPath = getLocalEnvPath();

```

---

`17-20`: **Consider making getGlobalEnvPath synchronous.**

The function is marked as async but doesn't contain any async operations. It could be simplified to a synchronous function to match `getLocalEnvPath` and improve code consistency.

```diff
-export async function getGlobalEnvPath(): Promise<string> {
+export function getGlobalEnvPath(): string {
  const envPath = findNearestEnvFile();
  return envPath ?? path.join(process.cwd(), '.env');
}
```

---

`13-16`: **Enhance JSDoc with fallback behavior.**

The documentation could be more explicit about the fallback behavior when no env file is found.

```diff
 /**
  * Get the path to the project's .env file.
  *
- * @returns The path to the .env file
+ * @returns The path to the nearest .env file, or falls back to `.env` in the current directory if none is found
  */
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between fbafd8c4557b20c449840aef8b7e6140d051cb2d and ca71b4a3336c3145b9f9280c8490db30091a93ae.

</details>

<details>
<summary>📒 Files selected for processing (9)</summary>

* `packages/cli/src/commands/create.ts` (2 hunks)
* `packages/cli/src/commands/env.ts` (4 hunks)
* `packages/cli/src/commands/start.ts` (1 hunks)
* `packages/cli/src/commands/test.ts` (2 hunks)
* `packages/cli/src/server/api/env.ts` (2 hunks)
* `packages/cli/src/utils/env-utils.ts` (1 hunks)
* `packages/cli/src/utils/get-config.ts` (3 hunks)
* `packages/cli/src/utils/index.ts` (1 hunks)
* `packages/cli/src/utils/user-environment.ts` (2 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (6)</summary>

<details>
<summary>packages/cli/src/server/api/env.ts (1)</summary><blockquote>

<details>
<summary>packages/cli/src/utils/env-utils.ts (1)</summary>

* `findNearestEnvFile` (32-34)

</details>

</blockquote></details>
<details>
<summary>packages/cli/src/commands/test.ts (1)</summary><blockquote>

<details>
<summary>packages/cli/src/utils/env-utils.ts (1)</summary>

* `findNearestEnvFile` (32-34)

</details>

</blockquote></details>
<details>
<summary>packages/cli/src/utils/user-environment.ts (1)</summary><blockquote>

<details>
<summary>packages/cli/src/utils/env-utils.ts (1)</summary>

* `findNearestEnvFile` (32-34)

</details>

</blockquote></details>
<details>
<summary>packages/cli/src/commands/create.ts (1)</summary><blockquote>

<details>
<summary>packages/cli/src/utils/env-utils.ts (1)</summary>

* `findNearestEnvFile` (32-34)

</details>

</blockquote></details>
<details>
<summary>packages/cli/src/utils/get-config.ts (1)</summary><blockquote>

<details>
<summary>packages/cli/src/utils/env-utils.ts (1)</summary>

* `findNearestEnvFile` (32-34)

</details>

</blockquote></details>
<details>
<summary>packages/cli/src/commands/env.ts (1)</summary><blockquote>

<details>
<summary>packages/cli/src/utils/env-utils.ts (1)</summary>

* `findNearestEnvFile` (32-34)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (1)</summary>

* GitHub Check: test

</details>

<details>
<summary>🔇 Additional comments (20)</summary><blockquote>

<details>
<summary>packages/cli/src/utils/index.ts (1)</summary>

`23-23`: **Clean addition of environment utilities export.**

This export allows the env-utils module to be accessible throughout the codebase, supporting centralized environment file handling.

</details>
<details>
<summary>packages/cli/src/server/api/env.ts (2)</summary>

`4-4`: **Import the centralized env file utility properly.**

The import aligns with the new pattern for standardized environment file lookup.

---

`15-15`: **Simplified env file detection with central utility.**

Replaced local implementation with the standardized utility function, reducing code duplication.

</details>
<details>
<summary>packages/cli/src/commands/start.ts (1)</summary>

`14-14`: **Correctly imported environment utility function.**

Adding findNearestEnvFile to the import list ensures the centralized function is available for use in this file.

</details>
<details>
<summary>packages/cli/src/commands/test.ts (2)</summary>

`4-4`: **Updated imports to include centralized env utility.**

Adding findNearestEnvFile to the imports supports the standardization effort.

---

`75-75`: **Enhanced env file resolution with fallback mechanism.**

Smart implementation that first tries to find the nearest .env file and falls back to the project-local .env if none is found, ensuring backward compatibility while improving file discovery.

</details>
<details>
<summary>packages/cli/src/utils/user-environment.ts (2)</summary>

`9-9`: **Good addition of the new utility import.**

The import of `findNearestEnvFile` aligns with the PR's goal of standardizing environment file lookup.

---

`255-255`: **Good implementation with proper fallback.**

The implementation correctly uses the nullish coalescing operator to fallback to the default path when no `.env` file is found in the directory hierarchy.

</details>
<details>
<summary>packages/cli/src/commands/create.ts (1)</summary>

`10-10`: **Good import addition.**

The import makes the new utility function available in this command file.

</details>
<details>
<summary>packages/cli/src/utils/env-utils.ts (2)</summary>

`1-24`: **Well-implemented utility function.**

The `findNearestFile` function is clean, efficient, and has proper error handling for reaching the filesystem root.

---

`26-34`: **Good specialized wrapper.**

The `findNearestEnvFile` function provides a clean, specialized interface for finding `.env` files specifically.

</details>
<details>
<summary>packages/cli/src/utils/get-config.ts (3)</summary>

`5-5`: **Good import addition.**

The import makes the new utility function available in this configuration module.

---

`58-58`: **Consistent implementation with proper fallback.**

Using the same pattern as in user-environment.ts helps maintain consistency across the codebase.

---

`300-304`: **Simplified environment loading.**

The code now directly uses the utility function without redundant checks, making it cleaner.

</details>
<details>
<summary>packages/cli/src/commands/env.ts (6)</summary>

`1-1`: **Correct import added for the new utility.**

The import statement now includes `findNearestEnvFile` from the utils module, which is used throughout the file to standardize environment file lookup.

---

`17-20`: **Good implementation of the standardized env file lookup.**

The function now uses the new `findNearestEnvFile` utility with a proper fallback to ensure a path is always returned, even when no `.env` file is found.

---

`26-28`: **Simple wrapper for findNearestEnvFile.**

This function provides a well-named abstraction over the utility function and maintains consistent return type handling.

---

`98-99`: **Consistent env file path handling.**

The code now uses the new utility function to get the environment file path with a proper fallback for display purposes.

---

`101-101`: **Improved null checking.**

The condition now properly handles both cases: when no env file is found and when the file doesn't exist.

---

`407-407`: **Consistent use of getLocalEnvPath in resetEnv function.**

The resetEnv function now uses the standardized approach to find the env file with an appropriate fallback.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3128707687,2908640754,coderabbitai[bot],COMMENTED,2025-06-08T21:26:15Z,"**Actionable comments posted: 1**

<details>
<summary>🔭 Outside diff range comments (1)</summary><blockquote>

<details>
<summary>mistralrs-server-core/src/openai.rs (1)</summary><blockquote>

`463-464`: _🛠️ Refactor suggestion_

**Ensure alias for ChatCompletionRequest.max_tokens is tested and documented**

You’ve added `#[serde(alias = ""max_completion_tokens"")]` to `ChatCompletionRequest.max_tokens`—please add unit tests to verify deserialization from both `max_tokens` and `max_completion_tokens`. Also, update the generated OpenAPI schema (via `utoipa`) or your docs to surface this alias for API consumers.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 253285237eae66547a7fc830c9ce69fa48d48e24 and c58e8010feb8a8eacb60c89afae19f7dc09f6155.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `mistralrs-server-core/src/openai.rs` (1 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: Test Suite (ubuntu-latest, stable)
* GitHub Check: Clippy
* GitHub Check: Docs
* GitHub Check: Test Suite (macOS-latest, stable)
* GitHub Check: Test Suite (windows-latest, stable)
* GitHub Check: Check (windows-latest, stable)
* GitHub Check: Check (macOS-latest, stable)
* GitHub Check: Check (ubuntu-latest, stable)

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3113796272,2892199434,alehander92,APPROVED,2025-06-03T12:48:36Z,TODO: test actual db-backend server
3070525129,2848232855,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-17T10:25:23Z,"## Pull Request Overview

Adds support for `zim://` scheme deep links so users can open specific pages in an already-downloaded ZIM archive.

- Introduce `bookById` DAO method with accompanying positive-case unit test  
- Handle `zim://<archive-id>/<page-path>` URIs in `KiwixMainActivity`  
- Register `zim` scheme in Android manifest and document deep linking in README

### Reviewed Changes

Copilot reviewed 5 out of 5 changed files in this pull request and generated 2 comments.

<details>
<summary>Show a summary per file</summary>

| File                                                        | Description                                         |
| ----------------------------------------------------------- | --------------------------------------------------- |
| core/src/main/java/org/kiwix/kiwixmobile/core/dao/NewBookDao.kt      | Added `bookById(String)` to look up a book by ID     |
| core/src/test/java/org/kiwix/kiwixmobile/core/dao/NewBookDaoTest.kt  | Added unit test for successful `bookById` lookup     |
| app/src/main/java/org/kiwix/kiwixmobile/main/KiwixMainActivity.kt    | Implemented deep-link handling for `zim` scheme      |
| app/src/main/AndroidManifest.xml                              | Added intent filter for `zim://` URIs                |
| README.md                                                   | Documented `zim` deep link usage                     |
</details>



<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**core/src/test/java/org/kiwix/kiwixmobile/core/dao/NewBookDaoTest.kt:258**
* Consider adding a test case for when no book matches the given ID (null result) to ensure `bookById` behaves as expected in failure scenarios.
```
fun `bookById queries file by id`() {
```
</details>

"
3070525129,2870156541,MohitMaliFtechiz,CHANGES_REQUESTED,2025-05-27T09:45:46Z,"@onyx243 Thanks for your PR. Please see review changes.

Also, could you fix the review changes suggested by Copilot? For example, perform database operations on the IO thread and avoid using the Handler inside the `lifecycleScope`; use the `delay()` instead. It will have the same effect but with cleaner code and lifecycle awareness.

Additionally, we should write the test case for this scenario in `DeepLinksTest`."
3132060751,2911892238,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-10T03:59:22Z,"## Pull Request Overview

This PR improves the release note generation process by updating the auto-tag workflow to capture bullet lines from the CHANGELOG diff, link merged PRs, and section the release body.  
- Updates the GitHub workflow to generate release notes based on CHANGELOG.md and PR data.  
- Adds a changeset file documenting the improvement.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated 1 comment.

| File                                     | Description                                                                  |
| ---------------------------------------- | ---------------------------------------------------------------------------- |
| .github/workflows/auto-tag.yml           | Enhances the release notes process by filtering changelog diffs and linking PRs. |
| .changeset/tender-schools-report.md      | Adds a changeset entry for tracking the release notes improvement.            |



"
3132060751,2911897222,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-10T04:04:21Z,"## Pull Request Overview

Improves the automated tagging workflow to produce structured release notes by extracting changelog bullet entries, linking merged PRs, and formatting the release body into sections.

- Capture only added bullet lines from `CHANGELOG.md` diffs
- Gather and link merged PR titles and numbers
- Structure the release description into ""What's Changed"", ""Merged Pull Requests"", and ""Links"" sections

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated no comments.

| File                                    | Description                                                      |
|-----------------------------------------|------------------------------------------------------------------|
| .github/workflows/auto-tag.yml          | Generate previous tag, parse changelog entries, collect PRs, and format release body into sections |
| .changeset/tender-schools-report.md     | Add patch changeset with release note summary                    |


<details>
<summary>Comments suppressed due to low confidence (3)</summary>

**.github/workflows/auto-tag.yml:58**
* The grep pattern '^+-' only matches lines starting with '+-'. If your changelog uses other bullet markers (e.g., '*'), consider a more flexible regex like `grep '^+[\-\*]'` or explicitly match whitespace after the plus for clarity.
```
DIFF=$(git diff ""$PREVIOUS_TAG""..HEAD -- CHANGELOG.md | grep '^+-' | sed 's/^+//')
```
**.github/workflows/auto-tag.yml:67**
* Using `<<-EOF` strips leading tabs but not spaces. Since this block is indented with spaces, the markers won't align as expected. Either switch to `<<EOF` or indent with tabs to ensure proper delimiting.
```
cat <<-EOF >> ""$GITHUB_OUTPUT""
```
**.github/workflows/auto-tag.yml:68**
* [nitpick] This line inherits indentation from the heredoc, resulting in leading spaces before the dash. To avoid extra whitespace in the release notes, align the bullet at the line's start or trim indentation.
```
- [#${pr}](https://github.com/${REPO}/pull/${pr}) ${TITLE}
```
</details>

"
3160605230,2943341708,sourcery-ai[bot],COMMENTED,2025-06-19T14:49:09Z,"Hey @patrick91 - I've reviewed your changes and they look great!

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3160605230,2943340459,greptile-apps[bot],COMMENTED,2025-06-19T14:54:26Z,"
## PR Summary
Updates DummyPool import in codemod runner to handle LibCST >=1.8 breaking changes, where DummyPool was renamed to DummyExecutor.

- Added backwards compatibility handling in `strawberry/cli/commands/upgrade/_run_codemod.py` for LibCST versions before and after 1.8
- Implemented try-except pattern to handle `DummyPool` vs `DummyExecutor` import changes
- Added appropriate coverage pragmas for version-specific code paths

<sub>1 file reviewed, no comments</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=strawberry_3921)</sub>"
3084780161,2862833910,sourcery-ai[bot],COMMENTED,2025-05-22T23:42:28Z,"Hey @mldangelo - I've reviewed your changes - here's some feedback:

- Fix the CI failures by adding the missing @smithy/node-http-handler dependency (or removing its import) and updating the test scripts so that `npm run f`, `npm run l`, and `npm test` all pass against the correct branch.
- Since XAIImageProvider largely reuses the OpenAI image logic, consider extracting the shared request/formatting code into a common utility to avoid duplication and ease future maintenance.

<details>
<summary>Here's what I looked at during the review</summary>

- 🟡 **General issues**: 1 issue found
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3085082878,2863141281,Jarred-Sumner,COMMENTED,2025-05-23T04:40:55Z,
3085082878,2863140910,nektro,CHANGES_REQUESTED,2025-05-23T04:41:06Z,
3085082878,2863141718,nektro,APPROVED,2025-05-23T04:41:20Z,
3132528555,2912381591,gemini-code-assist[bot],COMMENTED,2025-06-10T07:51:02Z,"## Summary of Changes

Hello @alorbach, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request addresses a bug in the hash table implementation where the `realloc` function is used to expand the table. The fix ensures that the new memory allocated beyond the original size is properly initialized to zero, preventing potential issues with uninitialized memory.

### Highlights

* **Hashtable Expansion Fix**: Corrected a potential memory initialization bug in the `hashtable_expand` function.
* **Memory Initialization**: Ensured that the newly allocated memory range when expanding the hash table is correctly zeroed out using `memset`.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configureGemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3132528555,2912385193,gemini-code-assist[bot],COMMENTED,2025-06-10T07:52:21Z,"## Code Review

This pull request addresses a critical bug in the `hashtable_expand` function, specifically in the memory initialization (`memset`) logic after a `realloc` operation. The change correctly identifies the target memory address and the number of bytes to be zeroed for the newly allocated portion of the hash table. This prevents potential memory corruption and undefined behavior that could arise from using uninitialized pointers. The fix is accurate and significantly improves the robustness of the hashtable implementation.

As no specific style guide was provided, the review defaults to general C best practices focusing on correctness, clarity, and maintainability."
3119878536,2898905533,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-05T05:20:10Z,"## Pull Request Overview

This PR fixes a small typo in a comment within the DeviceShifuHTTP handler to improve clarity.  
- Corrects the typo in the comment describing the response write operation.  
- No functional changes to the HTTP handler logic.



"
3155910859,2939143580,SamyPesse,COMMENTED,2025-06-18T13:06:03Z,"I'm not sure if we should go this way, I understand the approach, but it creates more complexity and less clarity (impacting DX). It's quite sad that we have to do stuff like this :/ "
3141912459,2923586607,Paulalex85,APPROVED,2025-06-13T06:43:50Z,
3126001479,2906279718,ellipsis-dev[bot],COMMENTED,2025-06-06T22:29:14Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 37e59658523b0346996d42c157789700da7204fa in <ellipsistime>57 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `202` lines of code in `9` files
> - Skipped `1` files when reviewing.
> - Skipped posting `9` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/onlook-dev/settings/code-review) and [rules](https://app.ellipsis.dev/onlook-dev/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>apps/web/client/messages/en.ts:1</code></summary>
> 
> - **Draft comment:** 
> Good conversion to a TS module with 'as const' and exporting the Messages type. Consider ensuring a trailing newline if your style guide requires one.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>apps/web/client/messages/es.ts:1</code></summary>
> 
> - **Draft comment:** 
> Nice conversion from JSON to TS: importing the English Messages type enforces consistency across translations.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>apps/web/client/messages/ja.ts:1</code></summary>
> 
> - **Draft comment:** 
> The TS conversion is consistent; importing the English Messages type ensures translation keys remain aligned.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>apps/web/client/messages/ko.ts:1</code></summary>
> 
> - **Draft comment:** 
> Conversion to a TS module with imported types from the English file is well done, ensuring key consistency.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>apps/web/client/messages/zh.ts:1</code></summary>
> 
> - **Draft comment:** 
> TS conversion is correctly applied; the dynamic messages module uses the English type for consistency.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>6. <code>apps/web/client/src/app/projects/_components/top-bar.tsx:28</code></summary>
> 
> - **Draft comment:** 
> Replacing the literal translation key with a typed key (t(keys.projects.actions.newProject)) improves type safety and maintainability.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>7. <code>apps/web/client/src/i18n/global.ts:4</code></summary>
> 
> - **Draft comment:** 
> Module augmentation for next-intl's AppConfig is neatly done with typed Locale and Messages; this will help ensure consistency across the app.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>8. <code>apps/web/client/src/i18n/keys.ts:7</code></summary>
> 
> - **Draft comment:** 
> The recursive buildPaths helper is effective for generating typed keys. Consider adding an explicit return type instead of using 'any' to sharpen type safety.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>9. <code>apps/web/client/src/i18n/request.ts:9</code></summary>
> 
> - **Draft comment:** 
> Dynamic import of messages using the locale (without the '.json' extension) now aligns with TS modules. Ensure the locale value from cookies is validated against allowed languages to prevent unexpected imports.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_Eb2DsnMEgKugsxZ0`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=onlook-dev%2Fonlook&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/onlook-dev/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/onlook-dev/code-review/rules).</sup>"
3112124360,2890458985,FunamaYukina,APPROVED,2025-06-03T03:17:21Z,"LGTM! Thank you!
I’ve confirmed that the unused item warnings are gone in my environment.✅"
3118287824,2897271743,coderabbitai[bot],COMMENTED,2025-06-04T15:46:47Z,"**Actionable comments posted: 1**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 39673eb8fa747235134e10367cdef90e2edafdd8 and 09aec73647f66fc04fe6b5b934a7b17153e882fa.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `mistralrs-core/src/models/llama.rs` (3 hunks)
* `mistralrs-core/src/utils/mod.rs` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>mistralrs-core/src/models/llama.rs (1)</summary><blockquote>

<details>
<summary>mistralrs-core/src/utils/mod.rs (2)</summary>

* `set_cuda_context` (18-23)
* `set_cuda_context` (26-26)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: Docs
* GitHub Check: Check (windows-latest, stable)
* GitHub Check: Test Suite (windows-latest, stable)
* GitHub Check: Test Suite (ubuntu-latest, stable)
* GitHub Check: Test Suite (macOS-latest, stable)

</details>

<details>
<summary>🔇 Additional comments (6)</summary><blockquote>

<details>
<summary>mistralrs-core/src/utils/mod.rs (2)</summary>

`12-16`: **LGTM: Clear documentation explaining the necessity.**

The documentation clearly explains why explicit CUDA context switching is required for multi-device scenarios.

---

`25-26`: **LGTM: Appropriate no-op implementation for non-CUDA builds.**

The conditional compilation pattern correctly provides a no-op version when CUDA is not available.

</details>
<details>
<summary>mistralrs-core/src/models/llama.rs (4)</summary>

`29-29`: **LGTM: Appropriate import of the new utility function.**

The import correctly brings in the `set_cuda_context` function for use in the forward pass.

---

`524-527`: **Excellent documentation and correct context switching logic.**

The comments clearly explain why CUDA context switching is necessary, and the implementation correctly sets the context after tensor mapping to ensure operations execute on the correct device.

---

`540-542`: **LGTM: Proper context restoration for final computations.**

The context is correctly switched back to the model's primary device before the final normalization and output head computations.

---

`527-527`: <details>
<summary>❌ Incorrect review comment</summary>

**Verify error handling alignment with utility function changes.**

If the `set_cuda_context` function is modified to return a `Result` (as suggested in the utils review), these call sites will need to be updated to handle potential errors appropriately.






Also applies to: 542-542

---

🏁 Script executed:

```shell
#!/bin/bash
# Check if there are other usages of set_cuda_context that might need updating
rg -A 3 -B 1 ""set_cuda_context"" --type rust
```

Length of output: 1842

---



</details>

**No updates needed for `set_cuda_context` calls**

The current definition of `set_cuda_context` in `mistralrs-core/src/utils/mod.rs` returns `()` and internally unwraps any errors, so call sites like those in `models/llama.rs` do not need to handle a `Result`. No changes to error handling are required here.  

> Likely an incorrect or invalid review comment.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3118287824,2897408814,coderabbitai[bot],COMMENTED,2025-06-04T16:34:14Z,"**Actionable comments posted: 1**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 09aec73647f66fc04fe6b5b934a7b17153e882fa and 09f8f4dc53ee779a92bb35498ea8a37b8d699955.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `mistralrs-core/src/pipeline/inputs_processor.rs` (2 hunks)
* `mistralrs-core/src/utils/mod.rs` (1 hunks)

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (1)</summary>

* mistralrs-core/src/utils/mod.rs

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: Clippy
* GitHub Check: Docs
* GitHub Check: Check (macOS-latest, stable)
* GitHub Check: Test Suite (ubuntu-latest, stable)
* GitHub Check: Test Suite (windows-latest, stable)
* GitHub Check: Check (ubuntu-latest, stable)
* GitHub Check: Check (windows-latest, stable)
* GitHub Check: Test Suite (macOS-latest, stable)

</details>

<details>
<summary>🔇 Additional comments (3)</summary><blockquote>

<details>
<summary>mistralrs-core/src/pipeline/inputs_processor.rs (3)</summary>

`258-259`: **LGTM: Explicit type annotations improve code clarity.**

The explicit `HashMap<DeviceLocation, Tensor>` type annotations enhance code readability and make the intent clearer.

---

`429-430`: **LGTM: Consistent type annotations.**

The explicit type annotations match the pattern established in `make_prompt_chunk` and improve code consistency.

---

`434-435`: **Consistent with `make_prompt_chunk` changes.**

The hash map population is disabled here as well, maintaining consistency with the `make_prompt_chunk` function. The same verification concerns about downstream compatibility apply as mentioned in the previous comment.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3078440458,2855806085,sourcery-ai[bot],COMMENTED,2025-05-20T23:27:15Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3117591035,2896625605,tp,APPROVED,2025-06-04T12:56:20Z,
3117591035,2896743890,nielsenko,COMMENTED,2025-06-04T13:28:47Z,I don't this does what you think it does with regards to cleaning out trailing 0s and .
3070364592,2848001452,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-17T05:14:34Z,"## Pull Request Overview

This pull request fixes the YAML utility function to correctly check file extensions and adds accompanying unit tests.  
- Updated is_yaml() in yaml_utils.py to use os.path.splitext for more robust extension detection.  
- Added two unit tests to verify positive and negative cases for YAML file extensions.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated no comments.

| File                                  | Description                                                           |
| ------------------------------------- | --------------------------------------------------------------------- |
| tests/unit/utils/test_yaml_utils.py   | Added tests to validate YAML extension detection behavior.            |
| src/zenml/utils/yaml_utils.py           | Updated the is_yaml function to use os.path.splitext for extension checks. |



"
3070364592,2848127008,schustmi,APPROVED,2025-05-17T07:18:29Z,
3125337362,2913099928,alehander92,APPROVED,2025-06-10T11:14:07Z,
3118916720,2898388413,seratch,APPROVED,2025-06-04T23:56:09Z,LGTM
3118916720,2901385013,dkundel-openai,COMMENTED,2025-06-05T17:42:01Z,
3118916720,2901394885,dkundel-openai,COMMENTED,2025-06-05T17:43:36Z,
3118916720,2901399139,dkundel-openai,COMMENTED,2025-06-05T17:44:12Z,
3118916720,2901454606,bakks,APPROVED,2025-06-05T17:54:15Z,
3155060428,2937379143,coderabbitai[bot],COMMENTED,2025-06-18T00:18:48Z,"**Actionable comments posted: 2**

<details>
<summary>🧹 Nitpick comments (3)</summary><blockquote>

<details>
<summary>src/redteam/providers/goat.ts (3)</summary><blockquote>

`54-58`: **Avoid eager provider instantiation**  

`PromptfooChatCompletionProvider` is created for every `GoatProvider` instance even when the remote server later reports that the feature is unsupported or disabled in tests.  This is a non-trivial object (model initialization, HTTP agent, etc.) and will be pointlessly allocated for most runs.

Consider lazy-creating it the first time `tryUnblocking` is invoked (and cached afterwards) or sharing a singleton across all `GoatProvider` instances.

---

`267-280`: **Duplicate feature-check on every turn**  

`tryUnblocking` performs `checkServerSupportsUnblocking()` for each turn. In a long conversation this is an avoidable round-trip and adds latency.

Cache the boolean result once per `GoatProvider` (or process) and reuse it:

```diff
-const supportsUnblocking = await this.checkServerSupportsUnblocking();
+if (this._supportsUnblocking === undefined) {
+  this._supportsUnblocking = await this.checkServerSupportsUnblocking();
+}
+const supportsUnblocking = this._supportsUnblocking;
```

---

`439-453`: **Memoise server-feature support lookup**  

`checkServerSupportsUnblocking` hits the server each call. The result is static for a process; cache it to cut network traffic and speed up retries.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 3d156fa79e9697fdf65f628924e185559851a9dd and 8e5a719d1e175cc80a1d3c0cd152f69808885054.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `src/redteam/providers/goat.ts` (6 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>📓 Path-based instructions (1)</summary>

<details>
<summary>`src/**`: - This is a CLI tool so errors need to be handled gracefully and logged with lots of information so the user can give us enough data to fix the issue or pass it to the de...</summary>

> `src/**`: - This is a CLI tool so errors need to be handled gracefully and logged with lots of information so the user can give us enough data to fix the issue or pass it to the developers.
> 

- `src/redteam/providers/goat.ts`

</details>

</details><details>
<summary>🪛 GitHub Check: Build on Node 22.x</summary>

<details>
<summary>src/redteam/providers/goat.ts</summary>

[failure] 317-317: 
Type 'string | undefined' is not assignable to type 'string'.

---

[failure] 316-316: 
Type 'string | undefined' is not assignable to type 'string'.

---

[failure] 269-269: 
Argument of type 'string | undefined' is not assignable to parameter of type 'string'.

---

[failure] 353-353: 
Argument of type 'string | undefined' is not assignable to parameter of type 'string'.

</details>

</details>
<details>
<summary>🪛 GitHub Check: Build on Node 20.x</summary>

<details>
<summary>src/redteam/providers/goat.ts</summary>

[failure] 317-317: 
Type 'string | undefined' is not assignable to type 'string'.

---

[failure] 316-316: 
Type 'string | undefined' is not assignable to type 'string'.

---

[failure] 269-269: 
Argument of type 'string | undefined' is not assignable to parameter of type 'string'.

---

[failure] 353-353: 
Argument of type 'string | undefined' is not assignable to parameter of type 'string'.

</details>

</details>
<details>
<summary>🪛 GitHub Check: Build on Node 18.x</summary>

<details>
<summary>src/redteam/providers/goat.ts</summary>

[failure] 317-317: 
Type 'string | undefined' is not assignable to type 'string'.

---

[failure] 316-316: 
Type 'string | undefined' is not assignable to type 'string'.

---

[failure] 269-269: 
Argument of type 'string | undefined' is not assignable to parameter of type 'string'.

---

[failure] 353-353: 
Argument of type 'string | undefined' is not assignable to parameter of type 'string'.

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (16)</summary>

* GitHub Check: webui tests
* GitHub Check: Build Docs
* GitHub Check: Test on Node 20.x and ubuntu-latest
* GitHub Check: Test on Node 18.x and windows-latest
* GitHub Check: Test on Node 22.x and macOS-latest
* GitHub Check: Test on Node 24.x and macOS-latest
* GitHub Check: Test on Node 22.x and ubuntu-latest
* GitHub Check: Test on Node 24.x and ubuntu-latest
* GitHub Check: Test on Node 20.x and macOS-latest
* GitHub Check: Test on Node 18.x and macOS-latest
* GitHub Check: Test on Node 20.x and windows-latest
* GitHub Check: Test on Node 18.x and ubuntu-latest
* GitHub Check: Build on Node 24.x
* GitHub Check: Style Check
* GitHub Check: Analyze (javascript-typescript)
* GitHub Check: Analyze (go)

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3155060428,2947324308,will-holley,COMMENTED,2025-06-20T21:44:30Z,
3155060428,2947325472,will-holley,COMMENTED,2025-06-20T21:45:44Z,
3155060428,2947338636,will-holley,COMMENTED,2025-06-20T21:54:42Z,
3155060428,2952111150,MrFlounder,COMMENTED,2025-06-24T04:08:42Z,
3155060428,2952114471,MrFlounder,COMMENTED,2025-06-24T04:11:39Z,
3155060428,2955241193,sklein12,COMMENTED,2025-06-24T20:30:36Z,
3155060428,2955241735,sklein12,COMMENTED,2025-06-24T20:30:51Z,
3155060428,2955242727,sklein12,COMMENTED,2025-06-24T20:31:14Z,
3155060428,2955243396,sklein12,COMMENTED,2025-06-24T20:31:33Z,
3155060428,2955569427,MrFlounder,COMMENTED,2025-06-24T22:25:11Z,
3155060428,2955570584,MrFlounder,COMMENTED,2025-06-24T22:25:37Z,
3155060428,2963561978,mldangelo,APPROVED,2025-06-26T20:37:02Z,"Disable this when remote generation is disabled, otherwise good to go! Thank you! 

nit, consider renaming to ""augmentAttack"" or something similar (remoteAugment, etc)."
3101355536,2879475672,coderabbitai[bot],COMMENTED,2025-05-29T20:04:26Z,"**Actionable comments posted: 1**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/components/pay/PayAnalytics/PayEmbedFTUX.tsx (1)</summary><blockquote>

`104-109`: **Consider making the API example more complete.**

The API code snippet could benefit from showing the complete response handling to provide users with a more comprehensive example.


Consider adding response handling to make the example more practical:

```diff
 const apiCode = (clientId: string) => `
 curl -X POST https://pay.thirdweb.com/v1/buy/quote \
   -H ""Content-Type: application/json"" \
   -H ""x-client-id: ${clientId}"" \
   -d '{""originChainId"":1,""originTokenAddress"":""0x..."",""destinationChainId"":10,""destinationTokenAddress"":""0x..."",""amount"":""0.01""}'
+
+# Response example:
+# {
+#   ""quote"": {
+#     ""fromAmount"": ""0.01"",
+#     ""toAmount"": ""0.009"",
+#     ""estimatedGas"": ""21000""
+#   }
+# }
 `;
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between cb994dcb8f4f3f6d0767b72a601fc9740ee9f71a and 356dee5d82d625c51201937f1ba7e42cddd4a7ff.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `apps/dashboard/src/components/pay/PayAnalytics/PayAnalytics.tsx` (2 hunks)
* `apps/dashboard/src/components/pay/PayAnalytics/PayEmbedFTUX.tsx` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>apps/dashboard/src/components/pay/PayAnalytics/PayAnalytics.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/components/pay/PayAnalytics/PayEmbedFTUX.tsx (1)</summary>

* `PayEmbedFTUX` (9-76)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: Unit Tests
* GitHub Check: Size
* GitHub Check: Lint Packages
* GitHub Check: E2E Tests (pnpm, esbuild)
* GitHub Check: Build Packages
* GitHub Check: E2E Tests (pnpm, webpack)
* GitHub Check: E2E Tests (pnpm, vite)
* GitHub Check: Analyze (javascript)

</details>

<details>
<summary>🔇 Additional comments (4)</summary><blockquote>

<details>
<summary>apps/dashboard/src/components/pay/PayAnalytics/PayEmbedFTUX.tsx (2)</summary>

`1-8`: **LGTM! Clean imports and proper client directive.**

The imports are well-organized and the ""use client"" directive is correctly placed for this interactive React component.

---

`9-76`: **Well-structured FTUX component with good UX patterns.**

The component follows React best practices with clear state management and conditional rendering. The tabbed interface provides a good user experience for different integration methods.

</details>
<details>
<summary>apps/dashboard/src/components/pay/PayAnalytics/PayAnalytics.tsx (2)</summary>

`6-6`: **LGTM! Clean import addition.**

The import for PayEmbedFTUX is properly added and follows the existing import pattern.

---

`58-62`: **Excellent empty state implementation with sound logic.**

The conditional rendering logic is well-implemented:
- Checks for meaningful data in both volume (`amountUsdCents > 0`) and wallet usage (`count > 0`)
- Provides a helpful FTUX experience when no analytics data exists
- Early return pattern keeps the component clean and readable

This improves the user experience by guiding new users through integration when they don't have data to analyze yet.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3101355536,2879842674,coderabbitai[bot],COMMENTED,2025-05-29T23:48:07Z,"> [!CAUTION]
> Inline review comments failed to post. This is likely due to GitHub's limits when posting large numbers of comments.  If you are seeing this consistently it is likely a permissions issue. Please check ""Moderation"" -> ""Code review limits"" under your organization settings.

**Actionable comments posted: 6**

<details>
<summary>🔭 Outside diff range comments (1)</summary><blockquote>

<details>
<summary>packages/thirdweb/src/engine/server-wallet.ts (1)</summary><blockquote>

`282-291`: _🛠️ Refactor suggestion_

**`sendBatchTransaction` waits for a single hash**

`waitForTransactionHash` is invoked with only the first transaction id, leaving the rest of the batch unmanaged.  Either:

1. Loop over all ids and `Promise.all`, or  
2. Make it explicit in the JSDoc that only the first transaction in the batch is awaited.

Failing to do so may mislead integrators who think the entire batch is mined.

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (11)</summary><blockquote>

<details>
<summary>apps/dashboard/src/@/api/analytics.ts (1)</summary><blockquote>

`370-370`: **Consider making all error returns consistent.**

For complete consistency across the file, consider updating the `getEcosystemWalletUsage` function to also return an empty array `[]` instead of `null` on error, matching the pattern used by other analytics functions.



```diff
-    return null;
+    return [];
```

</blockquote></details>
<details>
<summary>packages/thirdweb/src/extensions/erc20/drop20.test.ts (1)</summary><blockquote>

`145-145`: **Fix variable name typo.**

The variable name `erc20ContractAddres` is missing the final 'd'.



```diff
-      const erc20ContractAddres = await deployERC20Contract({
+      const erc20ContractAddress = await deployERC20Contract({
```

Note: You'll also need to update the references to this variable on lines 155 and 183.

</blockquote></details>
<details>
<summary>packages/thirdweb/src/extensions/erc1155/read/getOwnedNFTs.test.ts (1)</summary><blockquote>

`7-24`: **Good test coverage but consider robustness improvements.**

The test cases provide good coverage by testing both with and without indexer. However, consider making the tests more robust:



1. **Dynamic assertions**: The hardcoded expectations (3 NFTs, quantity 411n) might be brittle if test data changes
2. **Error cases**: Consider adding tests for invalid addresses or contracts
3. **Edge cases**: Test scenarios with zero-balance NFTs or empty results

Example improvement:
```diff
  it(""with indexer"", async () => {
    const nfts = await getOwnedNFTs({
      contract: DROP1155_CONTRACT,
      address: ""0x00d4da27dedce60f859471d8f595fdb4ae861557"",
    });
-   expect(nfts.length).toBe(3);
+   expect(nfts.length).toBeGreaterThan(0);
    expect(nfts.find((nft) => nft.id === 4n)?.quantityOwned).toBe(411n);
+   // Verify all NFTs have valid quantityOwned values
+   nfts.forEach(nft => {
+     expect(nft.quantityOwned).toBeGreaterThan(0n);
+   });
  });
```

</blockquote></details>
<details>
<summary>apps/dashboard/src/core-ui/batch-upload/lazy-mint-form/select-option.tsx (1)</summary><blockquote>

`30-84`: **Consider adding accessibility attributes for radio-like behavior.**

The component implementation successfully maintains all functionality while migrating to custom components. However, consider enhancing accessibility for the radio button-like behavior.




Add ARIA attributes to improve accessibility:

```diff
       <Card
         className={cn(
           ""flex flex-col gap-2 rounded-md p-5 md:w-[350px]"",
           disabled
             ? ""pointer-events-none cursor-not-allowed bg-muted""
             : ""cursor-pointer"",
           isActive && ""border-primary"",
           className,
         )}
         onClick={onClick}
+        role=""radio""
+        aria-checked={isActive}
+        aria-disabled={disabled}
+        tabIndex={disabled ? -1 : 0}
         {...divProps}
       >
```

Also consider adding keyboard navigation support:

```diff
+        onKeyDown={(e) => {
+          if (e.key === 'Enter' || e.key === ' ') {
+            e.preventDefault();
+            onClick(e as any);
+          }
+        }}
```

</blockquote></details>
<details>
<summary>packages/thirdweb/src/engine/list-server-wallets.ts (1)</summary><blockquote>

`1-46`: **LGTM with minor suggestion! Well-implemented server wallet listing function.**

The implementation follows the same good practices as the create function. However, consider whether an empty server wallet list should throw an error or return an empty array.




Consider this alternative approach for handling empty results:

```diff
- if (!data) {
-   throw new Error(""No server wallets found"");
- }
- 
- return data;
+ return data || [];
```

This would treat an empty list as a valid response rather than an error condition.

</blockquote></details>
<details>
<summary>packages/thirdweb/src/engine/wait-for-tx-hash.ts (1)</summary><blockquote>

`36-71`: **Consider optimizing the polling mechanism and adding exponential backoff.**

The current implementation polls every second regardless of how long the transaction has been running. For long-running transactions, this could be inefficient and put unnecessary load on the service.



```diff
-        // wait for the transaction to be confirmed
-        await new Promise((resolve) => setTimeout(resolve, 1000));
+        // Exponential backoff: start with 1s, max 10s
+        const elapsed = Date.now() - startTime;
+        const delay = Math.min(1000 * Math.pow(1.5, Math.floor(elapsed / 30000)), 10000);
+        await new Promise((resolve) => setTimeout(resolve, delay));
```

</blockquote></details>
<details>
<summary>packages/thirdweb/src/engine/search-transactions.ts (3)</summary><blockquote>

`18-23`: **Correct JSDoc parameter documentation.**

The JSDoc comment references `args.transactionIds` parameter which doesn't exist in the actual function signature. The function uses `args.filters` instead.



```diff
 /**
  * Search for transactions by their ids.
  * @param args - The arguments for the search.
  * @param args.client - The thirdweb client to use.
- * @param args.transactionIds - The ids of the transactions to search for.
+ * @param args.filters - The filters to apply when searching for transactions.
+ * @param args.pageSize - The number of results per page (default: 100).
+ * @param args.page - The page number to retrieve (default: 1).
  * @engine
```

---

`105-105`: **Consider zero-based pagination for consistency.**

The default page value is set to 1, but most APIs use zero-based pagination. This could cause confusion for developers expecting standard pagination behavior.



```diff
-  const { client, filters, pageSize = 100, page = 1 } = args;
+  const { client, filters, pageSize = 100, page = 0 } = args;
```

If you choose to keep 1-based pagination, please document this clearly in the JSDoc comments to avoid confusion.

---

`117-129`: **Enhance error messages with more context.**

The current error messages could be more helpful by providing guidance on what went wrong and how to fix it.



```diff
   if (searchResult.error) {
     throw new Error(
-      `Error searching for transaction with filters ${stringify(filters)}: ${stringify(
+      `Failed to search transactions. Please check your filters and try again. Filters: ${stringify(filters)}, Error: ${stringify(
         searchResult.error,
       )}`,
     );
   }

   const data = searchResult.data?.result;

   if (!data) {
     throw new Error(`No transactions found with filters ${stringify(filters)}`);
   }
```

</blockquote></details>
<details>
<summary>packages/engine/src/client/types.gen.ts (1)</summary><blockquote>

`120-157`: **`CreateAccount*` typings – consider validating `label` length**

`label` is currently just `string`; engine’s endpoint limits it to 64 chars.  If we surface that in the type (e.g. branded type or a JSDoc note) we can catch issues earlier in the SDK.

</blockquote></details>
<details>
<summary>packages/thirdweb/src/engine/server-wallet.ts (1)</summary><blockquote>

`184-199`: **Minor: avoid double `.toString()` on values already strings**

`value: t.value?.toString()` is safe, but when `t.value` is already a string we pay an unnecessary allocation.  Micro-optimisation:

```diff
-value: t.value?.toString(),
+value:
+  typeof t.value === ""bigint"" || typeof t.value === ""number""
+    ? t.value.toString()
+    : t.value,
```

</blockquote></details>

</blockquote></details>

<details>
<summary>🛑 Comments failed to post (6)</summary><blockquote>

<details>
<summary>packages/thirdweb/src/engine/wait-for-tx-hash.ts (3)</summary><blockquote>

60-65: _🛠️ Refactor suggestion_

**Add type validation before casting to `Hex`.**

The code casts `executionResult.transactionHash` to `Hex` without validating that it's actually a valid hex string, which could cause runtime issues.



```diff
         return {
-          transactionHash: executionResult.transactionHash as Hex,
+          transactionHash: executionResult.transactionHash as Hex, // TODO: Add hex validation
           client: args.client,
           chain: executionResult.chain,
         };
```

Consider adding proper hex validation:

```typescript
if (!executionResult.transactionHash || !/^0x[a-fA-F0-9]+$/.test(executionResult.transactionHash)) {
  throw new Error(`Invalid transaction hash format: ${executionResult.transactionHash}`);
}
```

<details>
<summary>🤖 Prompt for AI Agents</summary>

```
In packages/thirdweb/src/engine/wait-for-tx-hash.ts around lines 60 to 65, the
code casts executionResult.transactionHash to Hex without validating its format,
which risks runtime errors. Add a validation step before the cast to check that
executionResult.transactionHash exists and matches the hex string pattern
/^0x[a-fA-F0-9]+$/. If the validation fails, throw an error indicating the
invalid transaction hash format. This ensures only valid hex strings are cast to
Hex.
```

</details>

---

26-30: _🛠️ Refactor suggestion_

**Add input validation for better error handling.**

The function doesn't validate the `transactionId` parameter, which could lead to unclear error messages if an invalid ID is provided.



```diff
 export async function waitForTransactionHash(args: {
   client: ThirdwebClient;
   transactionId: string;
   timeoutInSeconds?: number;
 }): Promise<WaitForReceiptOptions> {
+  if (!args.transactionId?.trim()) {
+    throw new Error(""Transaction ID is required and cannot be empty"");
+  }
+  
   const startTime = Date.now();
```


<!-- suggestion_start -->

<details>
<summary>📝 Committable suggestion</summary>

> ‼️ **IMPORTANT**
> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.

```suggestion
export async function waitForTransactionHash(args: {
  client: ThirdwebClient;
  transactionId: string;
  timeoutInSeconds?: number;
}): Promise<WaitForReceiptOptions> {
  if (!args.transactionId?.trim()) {
    throw new Error(""Transaction ID is required and cannot be empty"");
  }

  const startTime = Date.now();
  // …rest of function…
}
```

</details>

<!-- suggestion_end -->

<details>
<summary>🤖 Prompt for AI Agents</summary>

```
In packages/thirdweb/src/engine/wait-for-tx-hash.ts around lines 26 to 30, add
input validation for the transactionId parameter at the start of the
waitForTransactionHash function. Check if transactionId is a non-empty string
and throw a clear, descriptive error if it is invalid. This will improve error
handling by preventing unclear errors later in the function.
```

</details>

---

1-1: _⚠️ Potential issue_

**Incorrect import source for `stringify` function.**

The `stringify` function is being imported from ""viem"", but based on the relevant code snippets, it should be imported from the utils module.



```diff
-import { stringify } from ""viem"";
+import { stringify } from ""../utils/json.js"";
```


<!-- suggestion_start -->

<details>
<summary>📝 Committable suggestion</summary>

> ‼️ **IMPORTANT**
> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.

```suggestion
import { stringify } from ""../utils/json.js"";
```

</details>

<!-- suggestion_end -->

<details>
<summary>🤖 Prompt for AI Agents</summary>

```
In packages/thirdweb/src/engine/wait-for-tx-hash.ts at line 1, the stringify
function is incorrectly imported from ""viem"". Change the import source to the
utils module by updating the import statement to import stringify from the
correct utils path.
```

</details>

</blockquote></details>
<details>
<summary>packages/thirdweb/src/engine/server-wallet.ts (3)</summary><blockquote>

240-246: _🛠️ Refactor suggestion_

**`enqueueTransaction` returns only the first id – API mismatch?**

Engine can return one id **per** transaction even in a single-item array.  
Exposing only the first id prevents callers from mapping N → N in future refactors (e.g. multi-send with `simulate: true`).  Consider returning the full string[] and keeping the current helper as a convenience wrapper.

<details>
<summary>🤖 Prompt for AI Agents</summary>

```
In packages/thirdweb/src/engine/server-wallet.ts around lines 240 to 246, the
current code returns only the first transaction ID from enqueueTx, which returns
an array of IDs for each transaction. To fix this, modify the function to return
the full array of transaction IDs (string[]) instead of just the first one,
allowing callers to map multiple transactions to their IDs. You can keep the
existing single ID return as a separate helper function if needed for
convenience.
```

</details>

---

247-270: _🛠️ Refactor suggestion_

**`enqueueBatchTransaction` should surface all ids**

Same rationale as above; callers enqueuing `[tx1, tx2]` probably expect two IDs so they can poll statuses independently.  Returning only the first ID discards information.

```diff
-const transactionId = transactionIds[0];
-return { transactionId };
+return { transactionIds };
```
(And update docs accordingly.)



> Committable suggestion skipped: line range outside the PR's diff.

<details>
<summary>🤖 Prompt for AI Agents</summary>

```
In packages/thirdweb/src/engine/server-wallet.ts around lines 247 to 270, the
enqueueBatchTransaction function currently returns only the first transaction ID
after enqueuing multiple transactions, which loses information for callers
expecting all IDs. Modify the function to return all transaction IDs from
enqueueTx instead of just the first one, allowing callers to track each
transaction independently. Also update the function's return type and any
related documentation to reflect that it returns an array of transaction IDs.
```

</details>

---

167-183: _⚠️ Potential issue_

**Guard against missing `chainId` before using it**

`firstTransaction.chainId` can technically be `undefined` (e.g. if a simulated tx is malformed).  
Attempting to call `getExecutionOptions(chainId)` with `undefined` will later throw a cryptic error.

```diff
-const chainId = firstTransaction.chainId;
+const chainId = firstTransaction.chainId;
+if (chainId === undefined) {
+  throw new Error(""chainId is undefined on the first transaction in batch"");
+}
```



<!-- suggestion_start -->

<details>
<summary>📝 Committable suggestion</summary>

> ‼️ **IMPORTANT**
> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.

```suggestion
  const enqueueTx = async (transaction: SendTransactionOption[]) => {
    if (transaction.length === 0) {
      throw new Error(""No transactions to enqueue"");
    }
    const firstTransaction = transaction[0];
    if (!firstTransaction) {
      throw new Error(""No transactions to enqueue"");
    }
    const chainId = firstTransaction.chainId;
+   if (chainId === undefined) {
+     throw new Error(""chainId is undefined on the first transaction in batch"");
+   }
    // Validate all transactions are on the same chain
    for (let i = 1; i < transaction.length; i++) {
      if (transaction[i]?.chainId !== chainId) {
        throw new Error(
          `All transactions in batch must be on the same chain. Expected ${chainId}, got ${transaction[i]?.chainId} at index ${i}`,
        );
      }
    }
```

</details>

<!-- suggestion_end -->

<details>
<summary>🤖 Prompt for AI Agents</summary>

```
In packages/thirdweb/src/engine/server-wallet.ts around lines 167 to 183, the
code uses firstTransaction.chainId without checking if it is undefined, which
can cause cryptic errors later. Add a guard to explicitly check if
firstTransaction.chainId is undefined and throw a clear error before proceeding.
This ensures that chainId is always defined before calling getExecutionOptions
or other functions that require it.
```

</details>

</blockquote></details>

</blockquote></details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3101355536,2879882351,joaquim-verges,APPROVED,2025-05-30T00:16:01Z,
3134422820,2914591572,coderabbitai[bot],COMMENTED,2025-06-10T17:58:02Z,"**Actionable comments posted: 1**

<details>
<summary>🧹 Nitpick comments (3)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/adapters/chat/chat_formatter.py (1)</summary><blockquote>

`53-74`: **Duplicated logic between `FinalOnlyFormatter` and `R1Formatter`**  

`R1Formatter` is byte-for-byte identical to `FinalOnlyFormatter`, differing only in class name. This invites maintenance drift. Consider parameterising the behaviour or aliasing the class:

```diff
-class R1Formatter(ChatFormatter):
-    ...
+# Alias – behaviour identical to FinalOnlyFormatter
+class R1Formatter(FinalOnlyFormatter):
+    """"""Formatter kept for backwards compatibility with R1 strategy.""""""
```

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/chat/test_chat_formatter.py (2)</summary><blockquote>

`1-2`: **Remove unused `pytest` import**  

`pytest` is never referenced; this trips Ruff’s F401 rule.

```diff
-import pytest
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Ruff (0.11.9)</summary>

1-1: `pytest` imported but unused

Remove unused import: `pytest`

(F401)

</details>

</details>

---

`50-57`: **Add assertion that `next_turn` raises when `previous_output` missing**  

The contract of the formatter classes specifies that omitting `previous_output` in certain states raises a `ValueError`. A negative test will guard against silent regressions.

```diff
@@
     first = formatter.next_turn()
     assert [m.__dict__ for m in first] == expected[:3]
 
+    # Missing previous_output should raise
+    with pytest.raises(ValueError):
+        formatter.next_turn()
+
     second = formatter.next_turn(""thinking output"")
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between bd8f0269dd0690991dfabd24b3c57a180e537b5d and afd84667557f8fabd5b8a355eb6bad6439a7eec4.

</details>

<details>
<summary>📒 Files selected for processing (4)</summary>

* `libs/core/kiln_ai/adapters/__init__.py` (2 hunks)
* `libs/core/kiln_ai/adapters/chat/__init__.py` (1 hunks)
* `libs/core/kiln_ai/adapters/chat/chat_formatter.py` (1 hunks)
* `libs/core/kiln_ai/adapters/chat/test_chat_formatter.py` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (2)</summary>

<details>
<summary>libs/core/kiln_ai/adapters/chat/__init__.py (1)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/adapters/chat/chat_formatter.py (4)</summary>

* `ChatFormatter` (25-50)
* `ChatMessage` (20-22)
* `ChatStrategy` (11-16)
* `get_chat_formatter` (143-159)

</details>

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/chat/test_chat_formatter.py (2)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/adapters/chat/chat_formatter.py (7)</summary>

* `ChatStrategy` (11-16)
* `get_chat_formatter` (143-159)
* `next_turn` (46-50)
* `next_turn` (54-73)
* `next_turn` (86-117)
* `next_turn` (121-140)
* `message_dicts` (42-43)

</details>
<details>
<summary>libs/core/kiln_ai/adapters/fine_tune/dataset_formatter.py (2)</summary>

* `ModelTrainingData` (39-57)
* `generate_chat_message_response` (144-182)

</details>

</blockquote></details>

</details><details>
<summary>🪛 Ruff (0.11.9)</summary>

<details>
<summary>libs/core/kiln_ai/adapters/chat/test_chat_formatter.py</summary>

1-1: `pytest` imported but unused

Remove unused import: `pytest`

(F401)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (6)</summary>

* GitHub Check: Build Desktop Apps (ubuntu-22.04)
* GitHub Check: Build Desktop Apps (ubuntu-22.04-arm)
* GitHub Check: Build Desktop Apps (windows-latest)
* GitHub Check: Build, Typecheck, and Test Python (3.13)
* GitHub Check: Build, Typecheck, and Test Python (3.10)
* GitHub Check: Build Desktop Apps (macos-13)

</details>

<details>
<summary>🔇 Additional comments (3)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/adapters/__init__.py (1)</summary>

`19-33`: **Public API surface correctly updated**  

Including the `chat` sub-package both in the eager import list and in `__all__` makes the new formatter utilities discoverable to external consumers—nice catch keeping the order alphabetical.

</details>
<details>
<summary>libs/core/kiln_ai/adapters/chat/__init__.py (1)</summary>

`1-9`: **Straight-through re-export keeps import paths clean**  

The thin wrapper cleanly exposes only the intended symbols, avoiding a heavy import cost. Nothing to change.

</details>
<details>
<summary>libs/core/kiln_ai/adapters/chat/chat_formatter.py (1)</summary>

`42-44`: _🛠️ Refactor suggestion_

**`message_dicts` leaks internal mutable data**  

`message_dicts` returns a list built from the internal list but the dictionaries themselves still alias the mutable `ChatMessage` instances’ attributes (they are not copies of primitive values). If later code mutates a `ChatMessage` instance, previously returned dicts will reflect that change, which can be surprising.

```diff
-    def message_dicts(self) -> List[dict[str, str | None]]:
-        return [{""role"": m.role, ""content"": m.content} for m in self._messages]
+    def message_dicts(self) -> List[dict[str, str | None]]:
+        # Return fully detached copies
+        return [{""role"": m.role, ""content"": m.content if m.content is None else str(m.content)} for m in self._messages]
```




> Likely an incorrect or invalid review comment.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3134422820,2919046670,coderabbitai[bot],COMMENTED,2025-06-12T00:44:44Z,"**Actionable comments posted: 4**

<details>
<summary>🔭 Outside diff range comments (1)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/datamodel/task.py (1)</summary><blockquote>

`146-153`: _🛠️ Refactor suggestion_

**Guard against `run_config_properties` being `None`**

`data[""run_config_properties""]` is indexed without first ensuring it’s a dict.  
If an old JSON dump contained `""run_config_properties"": null`, the assignment would raise `TypeError`.

```diff
-        if structured_output_mode is None and ""run_config_properties"" in data:
+        if (
+            structured_output_mode is None
+            and isinstance(data.get(""run_config_properties""), dict)
+        ):
```

A tiny check prevents hard-to-trace validation crashes on legacy artefacts.

</blockquote></details>

</blockquote></details>

<details>
<summary>♻️ Duplicate comments (1)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/adapters/chat/chat_formatter.py (1)</summary><blockquote>

`103-106`: **Validation should reject empty `thinking_instructions` (repeat)**

Previous review noted that checking only `None` allows empty strings; the issue is still present.

```diff
-        if self.thinking_instructions is None:
+        if not self.thinking_instructions:
```

Empty instructions yield confusing prompts and should be disallowed.

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (4)</summary><blockquote>

<details>
<summary>app/desktop/studio_server/test_provider_api.py (1)</summary><blockquote>

`309-312`: **Tighten the assertion by matching the expected message**

The test now accepts any `Exception`, which could mask unrelated failures.  
Specify the expected text to ensure you’re exercising the “unknown error” branch:

```diff
-    with pytest.raises(Exception):
+    with pytest.raises(Exception, match=""Some unexpected error""):
```

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/fine_tune/test_dataset_formatter.py (1)</summary><blockquote>

`10-11`: **Remove stale TODO tag**

The comment `# TODO remove` is now obsolete – the new import location is permanent. Drop the tag to keep the test file clean.

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/base_adapter.py (1)</summary><blockquote>

`204-237`: **Simplify the strategy-selection block to silence pylint R1705**

The current `if / elif / else` ladder is perfectly valid, but pylint flags the `elif` as redundant after the early `return`.  
Since each branch already ends with a `return`, you can flatten the structure for slightly cleaner flow:

```diff
-        if cot_prompt and reasoning_capable:
-            ...
-            return get_chat_formatter(...)
-        elif cot_prompt:
-            ...
-            return get_chat_formatter(...)
-        else:
-            return get_chat_formatter(...)
+        if cot_prompt and reasoning_capable:
+            return get_chat_formatter(...)
+
+        if cot_prompt:
+            return get_chat_formatter(...)
+
+        return get_chat_formatter(...)
```

Not critical, but it removes the linter warning and improves readability.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Pylint (3.3.7)</summary>

[refactor] 213-237: Unnecessary ""elif"" after ""return"", remove the leading ""el"" from ""elif""

(R1705)

</details>

</details>

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/litellm_adapter.py (1)</summary><blockquote>

`10-16`: **Drop unused chat-formatter imports**

`COT_FINAL_ANSWER_PROMPT`, `ChatStrategy`, `format_user_message`, and `get_chat_formatter` are not referenced in this file after the recent refactor. They trigger Ruff F401 warnings and slightly slow import time.

```diff
-from kiln_ai.adapters.chat.chat_formatter import (
-    COT_FINAL_ANSWER_PROMPT,
-    ChatStrategy,
-    format_user_message,
-    get_chat_formatter,
-)
+# (no imports needed from chat_formatter in this file)
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Ruff (0.11.9)</summary>

12-12: `kiln_ai.adapters.chat.chat_formatter.COT_FINAL_ANSWER_PROMPT` imported but unused

Remove unused import

(F401)

---

13-13: `kiln_ai.adapters.chat.chat_formatter.ChatStrategy` imported but unused

Remove unused import

(F401)

---

14-14: `kiln_ai.adapters.chat.chat_formatter.format_user_message` imported but unused

Remove unused import

(F401)

---

15-15: `kiln_ai.adapters.chat.chat_formatter.get_chat_formatter` imported but unused

Remove unused import

(F401)

</details>

</details>

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between afd84667557f8fabd5b8a355eb6bad6439a7eec4 and a3f2186179173c98282d0aeb2ef7ecacbf757ec8.

</details>

<details>
<summary>📒 Files selected for processing (14)</summary>

* `app/desktop/studio_server/test_provider_api.py` (1 hunks)
* `libs/core/kiln_ai/adapters/chat/chat_formatter.py` (1 hunks)
* `libs/core/kiln_ai/adapters/chat/test_chat_formatter.py` (1 hunks)
* `libs/core/kiln_ai/adapters/data_gen/test_data_gen_task.py` (4 hunks)
* `libs/core/kiln_ai/adapters/fine_tune/dataset_formatter.py` (1 hunks)
* `libs/core/kiln_ai/adapters/fine_tune/test_dataset_formatter.py` (1 hunks)
* `libs/core/kiln_ai/adapters/model_adapters/base_adapter.py` (2 hunks)
* `libs/core/kiln_ai/adapters/model_adapters/litellm_adapter.py` (3 hunks)
* `libs/core/kiln_ai/adapters/model_adapters/test_base_adapter.py` (0 hunks)
* `libs/core/kiln_ai/adapters/model_adapters/test_structured_output.py` (4 hunks)
* `libs/core/kiln_ai/adapters/prompt_builders.py` (0 hunks)
* `libs/core/kiln_ai/adapters/test_prompt_builders.py` (0 hunks)
* `libs/core/kiln_ai/datamodel/task.py` (1 hunks)
* `libs/core/kiln_ai/datamodel/test_task.py` (1 hunks)

</details>

<details>
<summary>💤 Files with no reviewable changes (3)</summary>

* libs/core/kiln_ai/adapters/prompt_builders.py
* libs/core/kiln_ai/adapters/model_adapters/test_base_adapter.py
* libs/core/kiln_ai/adapters/test_prompt_builders.py

</details>

<details>
<summary>✅ Files skipped from review due to trivial changes (1)</summary>

* libs/core/kiln_ai/adapters/fine_tune/dataset_formatter.py

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (1)</summary>

* libs/core/kiln_ai/adapters/chat/test_chat_formatter.py

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (4)</summary>

<details>
<summary>app/desktop/studio_server/test_provider_api.py (1)</summary><blockquote>

<details>
<summary>app/desktop/studio_server/provider_api.py (1)</summary>

* `connect_bedrock` (788-833)

</details>

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/test_structured_output.py (3)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/datamodel/task.py (2)</summary>

* `RunConfig` (85-94)
* `RunConfigProperties` (48-82)

</details>
<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/test_base_adapter.py (1)</summary>

* `adapter` (35-44)

</details>
<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/test_saving_adapter_results.py (1)</summary>

* `adapter` (42-51)

</details>

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/datamodel/test_task.py (1)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/datamodel/task.py (1)</summary>

* `TaskRunConfig` (97-155)

</details>

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/chat/chat_formatter.py (1)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/utils/exhaustive_error.py (1)</summary>

* `raise_exhaustive_enum_error` (5-6)

</details>

</blockquote></details>

</details><details>
<summary>🪛 Pylint (3.3.7)</summary>

<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/base_adapter.py</summary>

[refactor] 213-237: Unnecessary ""elif"" after ""return"", remove the leading ""el"" from ""elif""

(R1705)

</details>

</details>
<details>
<summary>🪛 Ruff (0.11.9)</summary>

<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/litellm_adapter.py</summary>

12-12: `kiln_ai.adapters.chat.chat_formatter.COT_FINAL_ANSWER_PROMPT` imported but unused

Remove unused import

(F401)

---

13-13: `kiln_ai.adapters.chat.chat_formatter.ChatStrategy` imported but unused

Remove unused import

(F401)

---

14-14: `kiln_ai.adapters.chat.chat_formatter.format_user_message` imported but unused

Remove unused import

(F401)

---

15-15: `kiln_ai.adapters.chat.chat_formatter.get_chat_formatter` imported but unused

Remove unused import

(F401)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: Build Desktop Apps (ubuntu-22.04)
* GitHub Check: Build Desktop Apps (ubuntu-22.04-arm)
* GitHub Check: Build Desktop Apps (macos-latest)
* GitHub Check: Build Desktop Apps (macos-13)
* GitHub Check: Build Desktop Apps (windows-latest)

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/datamodel/test_task.py (1)</summary>

`271-325`: **Great backward-compatibility test**

The new test thoroughly exercises the upgrade path, including the branch where the field is missing – nice coverage!

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3134422820,2925534571,coderabbitai[bot],COMMENTED,2025-06-13T17:01:24Z,"**Actionable comments posted: 3**

<details>
<summary>🔭 Outside diff range comments (4)</summary><blockquote>

<details>
<summary>app/web_ui/src/routes/(app)/fine_tune/[project_id]/[task_id]/create_finetune/+page.svelte (3)</summary><blockquote>

`373-382`: _🛠️ Refactor suggestion_

**Old enum literals remain – update label map to new `ChatStrategy` members.**

Keys such as `final_only` / `final_and_intermediate` no longer exist.  
This breaks both the `Record`’s type safety and runtime look-ups.

```diff
-const data_strategies_labels: Record<ChatStrategy, string> = {
-  final_only: ""Disabled - (Recommended)"",
-  two_message_cot: ""Thinking - Learn both thinking and final response"",
-  final_and_intermediate:
-    ""Thinking - Learn both thinking and final response"",
-  final_and_intermediate_r1_compatible: is_download
-    ? ""Thinking (R1 compatible) - Learn both thinking and final response""
-    : ""Thinking - Learn both thinking and final response"",
-}
+const data_strategies_labels: Record<ChatStrategy, string> = {
+  [ChatStrategy.single_turn]:
+    ""Disabled – train only on the final response (recommended)"",
+  [ChatStrategy.two_message_cot]:
+    ""Thinking – learn reasoning and final response"",
+  [ChatStrategy.single_turn_r1_thinking]:
+    ""Thinking (R1 compatible) – reasoning & final response"",
+}
```

---

`397-407`: _⚠️ Potential issue_

**`compatible_data_strategies` still builds with string literals.**

Mixing strings & enums causes the select list to display but POST the wrong
payload (`""final_only""` instead of `""single_turn""`).  
Refactor to build purely with `ChatStrategy` values:

```diff
-? [
-    ""final_only"",
-    ""final_and_intermediate"",
-    ""final_and_intermediate_r1_compatible"",
-  ]
+? [ChatStrategy.single_turn, ChatStrategy.two_message_cot, ChatStrategy.single_turn_r1_thinking]
```

Also replace the early-return list (`[""final_only"", ""final_and_intermediate""]`)
with enum members.

---

`361-414`: _🛠️ Refactor suggestion_

**Down-stream fallout – select options & comparisons assume strings.**

After fixing the enum issues above:

* `data_strategy_select_options` remains correctly typed, but make sure the array is built from `ChatStrategy` values (previous refactor covers this).
* Equality checks like `data_strategy === ""final_and_intermediate""` must compare against enum values (`ChatStrategy.two_message_cot`).

Search & update all such string comparisons in this file (and templates).

</blockquote></details>
<details>
<summary>app/desktop/studio_server/finetune_api.py (1)</summary><blockquote>

`135-145`: _🛠️ Refactor suggestion_

**Validator silently relies on string ↔︎ Enum equality quirks**

`validate_data_strategy()` passes `self.provider` (a `str`) into `infer_data_strategies_for_model`, which later relies on comparisons like  
`provider_name == ModelProviderName.fireworks_ai`.

While this currently works because `ModelProviderName` inherits from `str`, it couples correctness to that implementation detail and may break if the enum ever changes (e.g., becomes an `IntEnum`).

Consider normalising up-front:

```diff
from kiln_ai.adapters.ml_model_list import ModelProviderName  # already imported

# inside validator
try:
    provider_enum = ModelProviderName(self.provider)
except ValueError:
    raise ValueError(f""Unknown provider '{self.provider}'"") from None

if self.data_strategy not in infer_data_strategies_for_model(
    built_in_models, self.base_model_id, provider_enum
):
    ...
```

This keeps type expectations explicit and future-proof.

</blockquote></details>

</blockquote></details>

<details>
<summary>♻️ Duplicate comments (3)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/adapters/chat/chat_formatter.py (3)</summary><blockquote>

`137-140`: **Same empty-string check needed here**

Mirror the stricter validation used above to keep behaviour consistent across COT formatters.

```diff
-        if self.thinking_instructions is None:
+        if not self.thinking_instructions:
```

---

`231-233`: _⚠️ Potential issue_

**`isinstance(input, Dict)` raises `TypeError` on < Py3.12**

`typing.Dict` is a *subscripted generic* and cannot be used with `isinstance` before Python 3.12.  
Use the builtin `dict` type instead.

```diff
-    if isinstance(input, Dict):
+    if isinstance(input, dict):
         return json.dumps(input, ensure_ascii=False)
```

---

`91-95`: _🛠️ Refactor suggestion_

**Validate empty `thinking_instructions`, not just `None`**

An empty string is functionally equivalent to *no* instructions and will silently slip through.  
Reject falsy values so callers get fast feedback.

```diff
-        if self.thinking_instructions is None:
+        if not self.thinking_instructions:
             raise ValueError(
                 ""thinking_instructions are required when strategy is final_and_intermediate""
             )
```

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (19)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/adapters/fine_tune/test_base_finetune.py (2)</summary><blockquote>

`165-180`: **Parametrize over all `ChatStrategy` values to avoid blind-spots**

Right now the scenario is hard-coded to `ChatStrategy.single_turn`.  
If a new strategy value is added (or one of the existing ones evolves), this test will silently stop giving us coverage for it.

```diff
-    adapter, datamodel = await MockFinetune.create_and_start(
-        ...
-        data_strategy=ChatStrategy.single_turn,
-        ...
-    )
+    # Parametrize on *every* ChatStrategy value so that any future enum
+    # additions automatically receive coverage.
+    @pytest.mark.parametrize(""strategy"", list(ChatStrategy))
+    async def _inner(strategy):
+        adapter, datamodel = await MockFinetune.create_and_start(
+            ...
+            data_strategy=strategy,
+            ...
+        )
+        assert datamodel.data_strategy == strategy
```

This keeps the test short while closing the coverage gap.

---

`195-206`: **Mirror the previous comment for the “all-params” branch**

The “with all params” branch is still pinned to two explicit enum members. Re-using the same parameterisation helper avoids duplicated code and future drift.

No diff shown – it is identical in spirit to the change above.

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/fine_tune/test_fireworks_tinetune.py (1)</summary><blockquote>

`233-238`: **Remove leftover `# TODO` and extend coverage**

The `# TODO` marker slipped through the review and will trip linting.  
While you are here, consider adding `ChatStrategy.two_message_cot` and `ChatStrategy.single_turn_r1_thinking` to the parametrisation so that every supported strategy is exercised.

```diff
-    [
-        # TODO
-        (ChatStrategy.two_message_cot_legacy, ""thinking instructions""),
-        (ChatStrategy.single_turn, None),
-    ],
+    list(ChatStrategy),
```

(or an explicit list covering all four enum values if you prefer readability).

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/fine_tune/test_openai_finetune.py (1)</summary><blockquote>

`558-561`: **Same `# TODO`/coverage concern as in the Fireworks tests**

Please drop the stray `# TODO` and broaden the parametrisation to the full enum set so that OpenAI fine-tune flows are validated for every strategy variant.

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/fine_tune/test_vertex_finetune.py (1)</summary><blockquote>

`255-258`: **Keep the Vertex tests in sync with the complete strategy matrix**

Only two enum values are exercised here.  Including `two_message_cot` and `single_turn_r1_thinking` will future-proof the suite and surface integration issues early.

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/provider_tools.py (1)</summary><blockquote>

`279-285`: **`parser_from_data_strategy` hard-codes a single mapping – consider centralising.**

Only `ChatStrategy.single_turn_r1_thinking` is recognised.  
If another “thinking” strategy ever appears the parser will silently return `None`, breaking down-stream logic.  
A small registry or `match` expression keeps this future-proof:

```diff
-def parser_from_data_strategy(data_strategy: ChatStrategy) -> ModelParserID | None:
-    if data_strategy == ChatStrategy.single_turn_r1_thinking:
-        return ModelParserID.r1_thinking
-    return None
+_DATA_STRATEGY_TO_PARSER: dict[ChatStrategy, ModelParserID] = {
+    ChatStrategy.single_turn_r1_thinking: ModelParserID.r1_thinking,
+}
+
+def parser_from_data_strategy(data_strategy: ChatStrategy) -> ModelParserID | None:
+    return _DATA_STRATEGY_TO_PARSER.get(data_strategy)
```

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/datamodel/datamodel_enums.py (1)</summary><blockquote>

`73-77`: **Prefer an immutable container for `THINKING_DATA_STRATEGIES`.**

A tuple prevents accidental mutation at runtime:

```diff
-THINKING_DATA_STRATEGIES: list[ChatStrategy] = [
+THINKING_DATA_STRATEGIES: tuple[ChatStrategy, ...] = (
     ChatStrategy.two_message_cot_legacy,
     ChatStrategy.single_turn_r1_thinking,
     ChatStrategy.two_message_cot,
-]
+)
```

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/base_adapter.py (1)</summary><blockquote>

`202-235`: **Simplify control flow & address TODO.**

After a `return`, the following `elif/else` are unnecessary and trigger pylint R1705.  
At the same time the TODO highlights the missing support for `ChatStrategy.two_message_cot`.  
Both can be solved together:

```diff
-        if cot_prompt and reasoning_capable:
-            return get_chat_formatter(
-                strategy=ChatStrategy.single_turn_r1_thinking,
-                system_message=system_message,
-                user_input=input,
-                thinking_instructions=cot_prompt,
-            )
-        elif cot_prompt:
-            # 2: Unstructured output with COT
-            # Two calls to separate the thinking from the final response
-            # TODO non legacy mode
-            return get_chat_formatter(
-                strategy=ChatStrategy.two_message_cot_legacy,
-                system_message=system_message,
-                user_input=input,
-                thinking_instructions=cot_prompt,
-            )
-        else:
-            return get_chat_formatter(
-                strategy=ChatStrategy.single_turn,
-                system_message=system_message,
-                user_input=input,
-            )
+        if cot_prompt and reasoning_capable:
+            return get_chat_formatter(
+                strategy=ChatStrategy.single_turn_r1_thinking,
+                system_message=system_message,
+                user_input=input,
+                thinking_instructions=cot_prompt,
+            )
+
+        if cot_prompt:
+            # Two-message COT. Prefer the new format if supported.
+            return get_chat_formatter(
+                strategy=ChatStrategy.two_message_cot,
+                system_message=system_message,
+                user_input=input,
+                thinking_instructions=cot_prompt,
+            )
+
+        # Fallback: single turn
+        return get_chat_formatter(
+            strategy=ChatStrategy.single_turn,
+            system_message=system_message,
+            user_input=input,
+        )
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Pylint (3.3.7)</summary>

[refactor] 211-235: Unnecessary ""elif"" after ""return"", remove the leading ""el"" from ""elif""

(R1705)

</details>

</details>

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/datamodel/test_models.py (1)</summary><blockquote>

`684-691`: **Add assertion for `two_message_cot` for completeness.**

You check value parity for three members but skip the newly-added `two_message_cot`.

```diff
     assert ChatStrategy.single_turn == ""final_only""
     assert ChatStrategy.two_message_cot_legacy == ""final_and_intermediate""
     assert (
         ChatStrategy.single_turn_r1_thinking == ""final_and_intermediate_r1_compatible""
     )
+    assert ChatStrategy.two_message_cot == ""two_message_cot""
```

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/datamodel/finetune.py (1)</summary><blockquote>

`17-20`: **Typo in constant name – “STRATIGIES” should be “STRATEGIES”.**

A miss-spelling in the constant will propagate through the file and to any importers.  
Although the symbol is internally consistent, it will cause friction for anyone grepping the codebase and is easy to overlook in future refactors.

```diff
-DATA_STRATIGIES_REQUIRED_THINKING_INSTRUCTIONS = [
+DATA_STRATEGIES_REQUIRED_THINKING_INSTRUCTIONS = [
```

</blockquote></details>
<details>
<summary>app/web_ui/src/lib/api_schema.d.ts (3)</summary><blockquote>

`1240-1241`: **Out-of-date description for `data_strategy` field**

The JSDoc above still describes only two values (`final_only`, `final_and_intermediate`), but the field now accepts four.  
Update the schema description in the OpenAPI source so the generated file reflects the full enum.

---

`1891-1892`: **Docstring drift: finetune `data_strategy` description is incomplete**

Same issue as above – the description lists only two options.  
Consider regenerating after amending the OpenAPI spec:

```diff
- * @description The strategy to use for training the model. 'final_only' will only train on the final response. 'final_and_intermediate' will train on the final response and intermediate outputs (chain of thought or reasoning).
+ * @description Chat formatting strategy. Supported values:
+ *   - single_turn / final_only
+ *   - final_and_intermediate
+ *   - two_message_cot
+ *   - final_and_intermediate_r1_compatible
```

---

`1947-1948`: **Optional: add description for `data_strategies_supported`**

All other fields in this schema include helpful JSDoc.  Adding a short description here aids autogenerated docs and IDE hints.

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/chat/chat_formatter.py (1)</summary><blockquote>

`6-6`: **Remove unused `Enum` import**

The `Enum` symbol is not referenced in this module.  Drop the import to silence Ruff F401 and keep the header tidy.

```diff
-from enum import Enum
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Ruff (0.11.9)</summary>

6-6: `enum.Enum` imported but unused

Remove unused import: `enum.Enum`

(F401)

</details>

</details>

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/litellm_adapter.py (1)</summary><blockquote>

`22-22`: **Drop unused `ChatStrategy` import**

Nothing in this module references `ChatStrategy`; the import only triggers Ruff F401.

```diff
-from kiln_ai.datamodel.datamodel_enums import ChatStrategy
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Ruff (0.11.9)</summary>

22-22: `kiln_ai.datamodel.datamodel_enums.ChatStrategy` imported but unused

Remove unused import: `kiln_ai.datamodel.datamodel_enums.ChatStrategy`

(F401)

</details>

</details>

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/chat/test_chat_formatter.py (1)</summary><blockquote>

`21-24`: **Use `asdict` instead of accessing `__dict__` directly**

`dataclasses.asdict()` is the canonical, future-proof way to convert a dataclass to a plain dict.  
It avoids surprises if the class later gains `__slots__` or custom `__getattribute__` logic.

```diff
-    assert [m.__dict__ for m in first.messages] == expected[:2]
+    from dataclasses import asdict
+    assert [asdict(m) for m in first.messages] == expected[:2]
```

</blockquote></details>
<details>
<summary>app/desktop/studio_server/test_finetune_api.py (1)</summary><blockquote>

`1421-1450`: **Order-dependent list comparison can make the test flaky**

`infer_data_strategies_for_model()` currently returns a *list*, but the internal ordering is not contractually guaranteed (e.g., if `DEFAULT_DATA_STRATEGIES` order or future branching logic changes).  
Using `==` for list equality will fail if the order changes even though the semantic set of strategies is still correct.

```diff
-assert (
-    infer_data_strategies_for_model(mock_available_models, model_id, provider)
-    == expected_data_strategies
-)
+assert set(
+    infer_data_strategies_for_model(mock_available_models, model_id, provider)
+) == set(expected_data_strategies)
```

This keeps the test robust while still catching real regressions (missing or superfluous strategies).

</blockquote></details>
<details>
<summary>app/desktop/studio_server/finetune_api.py (2)</summary><blockquote>

`58-63`: **Duplicate source-of-truth for “default strategies”**

`FinetuneProviderModel` hard-codes its default `data_strategies_supported`, but the same list already lives in the module-level constant `DEFAULT_DATA_STRATEGIES` (≈ line 580).

Keeping two lists in sync is error-prone.  Re-use the constant instead:

```diff
-data_strategies_supported: list[ChatStrategy] = Field(
-    default_factory=lambda: [
-        ChatStrategy.single_turn,
-        ChatStrategy.two_message_cot,
-    ]
-)
+data_strategies_supported: list[ChatStrategy] = Field(
+    default_factory=lambda: DEFAULT_DATA_STRATEGIES.copy()
+)
```

(The `.copy()` avoids sharing the same mutable list between instances.)

---

`400-424`: **Let FastAPI validate `data_strategy` for you**

`download_dataset_jsonl()` accepts `data_strategy: str` and then performs manual
membership checks / conversion.  FastAPI can handle this automatically if you
type-annotate the parameter as `ChatStrategy`:

```diff
-async def download_dataset_jsonl(
+async def download_dataset_jsonl(
     project_id: str,
     task_id: str,
     dataset_id: str,
     split_name: str,
     format_type: str,
-    data_strategy: str,
+    data_strategy: ChatStrategy,
     ...
 ):
```

FastAPI will:
1. return 422 for unknown values,
2. hand you an already-parsed `ChatStrategy`.

That eliminates 15 lines (411-424) of custom validation and keeps behaviour consistent with the rest of the API.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Pylint (3.3.7)</summary>

[refactor] 400-400: Too many arguments (9/5)

(R0913)

---

[refactor] 400-400: Too many positional arguments (9/5)

(R0917)

---

[refactor] 400-400: Too many local variables (18/15)

(R0914)

</details>

</details>

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between a3f2186179173c98282d0aeb2ef7ecacbf757ec8 and 5f8fd47d2f278c6ec75e32264590f7ef7095a796.

</details>

<details>
<summary>📒 Files selected for processing (23)</summary>

* `app/desktop/studio_server/finetune_api.py` (7 hunks)
* `app/desktop/studio_server/test_finetune_api.py` (13 hunks)
* `app/web_ui/src/lib/api_schema.d.ts` (5 hunks)
* `app/web_ui/src/lib/types.ts` (1 hunks)
* `app/web_ui/src/routes/(app)/fine_tune/[project_id]/[task_id]/create_finetune/+page.svelte` (6 hunks)
* `libs/core/kiln_ai/adapters/chat/chat_formatter.py` (1 hunks)
* `libs/core/kiln_ai/adapters/chat/test_chat_formatter.py` (1 hunks)
* `libs/core/kiln_ai/adapters/fine_tune/base_finetune.py` (2 hunks)
* `libs/core/kiln_ai/adapters/fine_tune/dataset_formatter.py` (5 hunks)
* `libs/core/kiln_ai/adapters/fine_tune/test_base_finetune.py` (10 hunks)
* `libs/core/kiln_ai/adapters/fine_tune/test_dataset_formatter.py` (17 hunks)
* `libs/core/kiln_ai/adapters/fine_tune/test_fireworks_tinetune.py` (2 hunks)
* `libs/core/kiln_ai/adapters/fine_tune/test_openai_finetune.py` (5 hunks)
* `libs/core/kiln_ai/adapters/fine_tune/test_vertex_finetune.py` (3 hunks)
* `libs/core/kiln_ai/adapters/model_adapters/base_adapter.py` (3 hunks)
* `libs/core/kiln_ai/adapters/model_adapters/litellm_adapter.py` (3 hunks)
* `libs/core/kiln_ai/adapters/provider_tools.py` (3 hunks)
* `libs/core/kiln_ai/adapters/test_prompt_builders.py` (2 hunks)
* `libs/core/kiln_ai/adapters/test_provider_tools.py` (6 hunks)
* `libs/core/kiln_ai/datamodel/__init__.py` (0 hunks)
* `libs/core/kiln_ai/datamodel/datamodel_enums.py` (1 hunks)
* `libs/core/kiln_ai/datamodel/finetune.py` (3 hunks)
* `libs/core/kiln_ai/datamodel/test_models.py` (3 hunks)

</details>

<details>
<summary>💤 Files with no reviewable changes (1)</summary>

* libs/core/kiln_ai/datamodel/__init__.py

</details>

<details>
<summary>✅ Files skipped from review due to trivial changes (2)</summary>

* app/web_ui/src/lib/types.ts
* libs/core/kiln_ai/adapters/fine_tune/base_finetune.py

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (3)</summary>

* libs/core/kiln_ai/adapters/fine_tune/test_dataset_formatter.py
* libs/core/kiln_ai/adapters/test_prompt_builders.py
* libs/core/kiln_ai/adapters/fine_tune/dataset_formatter.py

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (7)</summary>

<details>
<summary>libs/core/kiln_ai/adapters/fine_tune/test_base_finetune.py (2)</summary><blockquote>

<details>
<summary>app/web_ui/src/lib/types.ts (1)</summary>

* `ChatStrategy` (24-24)

</details>
<details>
<summary>libs/core/kiln_ai/datamodel/datamodel_enums.py (1)</summary>

* `ChatStrategy` (60-70)

</details>

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/fine_tune/test_vertex_finetune.py (1)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/datamodel/datamodel_enums.py (1)</summary>

* `ChatStrategy` (60-70)

</details>

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/fine_tune/test_openai_finetune.py (2)</summary><blockquote>

<details>
<summary>app/web_ui/src/lib/types.ts (1)</summary>

* `ChatStrategy` (24-24)

</details>
<details>
<summary>libs/core/kiln_ai/datamodel/datamodel_enums.py (1)</summary>

* `ChatStrategy` (60-70)

</details>

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/datamodel/datamodel_enums.py (1)</summary><blockquote>

<details>
<summary>app/web_ui/src/lib/types.ts (1)</summary>

* `ChatStrategy` (24-24)

</details>

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/datamodel/test_models.py (2)</summary><blockquote>

<details>
<summary>app/web_ui/src/lib/types.ts (1)</summary>

* `ChatStrategy` (24-24)

</details>
<details>
<summary>libs/core/kiln_ai/datamodel/datamodel_enums.py (1)</summary>

* `ChatStrategy` (60-70)

</details>

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/base_adapter.py (3)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/adapters/chat/chat_formatter.py (2)</summary>

* `ChatFormatter` (31-59)
* `get_chat_formatter` (199-219)

</details>
<details>
<summary>libs/core/kiln_ai/datamodel/datamodel_enums.py (1)</summary>

* `ChatStrategy` (60-70)

</details>
<details>
<summary>libs/core/kiln_ai/adapters/prompt_builders.py (9)</summary>

* `chain_of_thought_prompt` (54-60)
* `chain_of_thought_prompt` (220-231)
* `chain_of_thought_prompt` (237-238)
* `chain_of_thought_prompt` (244-245)
* `chain_of_thought_prompt` (251-252)
* `chain_of_thought_prompt` (283-284)
* `chain_of_thought_prompt` (334-335)
* `chain_of_thought_prompt` (371-372)
* `build_prompt` (29-43)

</details>

</blockquote></details>
<details>
<summary>app/desktop/studio_server/finetune_api.py (2)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/datamodel/datamodel_enums.py (1)</summary>

* `ChatStrategy` (60-70)

</details>
<details>
<summary>libs/core/kiln_ai/adapters/ml_model_list.py (2)</summary>

* `KilnModelProvider` (144-182)
* `ModelParserID` (127-133)

</details>

</blockquote></details>

</details><details>
<summary>🪛 Pylint (3.3.7)</summary>

<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/base_adapter.py</summary>

[refactor] 211-235: Unnecessary ""elif"" after ""return"", remove the leading ""el"" from ""elif""

(R1705)

</details>

</details>
<details>
<summary>🪛 Ruff (0.11.9)</summary>

<details>
<summary>libs/core/kiln_ai/adapters/chat/chat_formatter.py</summary>

6-6: `enum.Enum` imported but unused

Remove unused import: `enum.Enum`

(F401)

</details>
<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/litellm_adapter.py</summary>

22-22: `kiln_ai.datamodel.datamodel_enums.ChatStrategy` imported but unused

Remove unused import: `kiln_ai.datamodel.datamodel_enums.ChatStrategy`

(F401)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: Build Desktop Apps (ubuntu-22.04-arm)
* GitHub Check: Build Desktop Apps (windows-latest)
* GitHub Check: Build Desktop Apps (macos-13)
* GitHub Check: Build Desktop Apps (ubuntu-22.04)
* GitHub Check: Build Desktop Apps (macos-latest)

</details>

<details>
<summary>🔇 Additional comments (7)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/adapters/provider_tools.py (2)</summary>

`20-22`: **Import switch looks good.**

Moving to `ChatStrategy` cleanly removes the obsolete enum without side-effects in this module.

---

`300-301`: **`reasoning_capable` guard too narrow?**

`reasoning_capable` is set only for `single_turn_r1_thinking`; if you later promote `two_message_cot` to use the R1 format this flag will not be updated automatically.  Consider sharing the same lookup table as above.

</details>
<details>
<summary>libs/core/kiln_ai/datamodel/datamodel_enums.py (1)</summary>

`60-70`: **Enum value comments drift from actual string values.**

Doc-comments still reference “final_only / final_and_intermediate” wording but `two_message_cot`’s value no longer follows that pattern.  Make sure external APIs & stored data rely on the *value*, not the descriptive constant, before changing.

No change required if this was intentional.

</details>
<details>
<summary>libs/core/kiln_ai/adapters/test_provider_tools.py (1)</summary>

`75-76`: **Enum swap looks consistent across fixtures & assertions.**

All test fixtures now use `ChatStrategy` – matches the production change.  



Also applies to: 87-88, 99-100, 584-585, 919-920

</details>
<details>
<summary>app/web_ui/src/lib/api_schema.d.ts (2)</summary>

`2382-2386`: **LGTM – backward-compat enum values included**

Including `""default""` and `""unknown""` in `StructuredOutputMode` maintains compatibility with legacy records while still encouraging explicit modes. No action required.

---

`1150-1156`: <details>
<summary>✅ Verification successful</summary>

**Possible enum name mismatch (`final_only` vs `single_turn`) – please verify**

The new `ChatStrategy` enum still exposes `""final_only""`, whereas other parts of the PR (AI summary and Python adapter code) reference the strategy as `""single_turn""`.  
A frontend/backend naming discrepancy here will break runtime coercion and UI dropdowns.


Run a quick grep on the repo to confirm which identifier is consumed by the runtime code:

---

🏁 Script executed:

```shell
#!/bin/bash
rg -i '""single_turn""|""final_only""' -n libs/ app/ | head -n 20
```

Length of output: 1515

---



</details>

**No mismatch: Python `single_turn` maps to `""final_only""`**  
I’ve confirmed that in `libs/core/kiln_ai/datamodel/datamodel_enums.py` the enum member is named `single_turn` but its value is explicitly set to `""final_only""`. All frontend code (Svelte pages, formatters, API schema) consumes the string `""final_only""`, so there is no naming discrepancy at runtime.

</details>
<details>
<summary>app/desktop/studio_server/finetune_api.py (1)</summary>

`580-610`: **`data_strategies_from_finetune_id()` ignores “optional R1 thinking” models**

The helper currently special-cases only:

```python
if ""qwen3"" in id:  # optional thinking
    return [single_turn, single_turn_r1_thinking]
elif any(""r1"" or ""qwq""):
    return [single_turn_r1_thinking]
```

Models whose provider parser is `optional_r1_thinking` (see
`ModelParserID.optional_r1_thinking`) are not mapped, so `infer_data_strategies_for_model`
falls back to the default `[single_turn, two_message_cot]`.

If that omission is unintentional, extend mapping logic:

```diff
 if provider.parser == ModelParserID.r1_thinking:
     return [ChatStrategy.single_turn_r1_thinking]
+if provider.parser == ModelParserID.optional_r1_thinking:
+    return [
+        ChatStrategy.single_turn,
+        ChatStrategy.single_turn_r1_thinking,
+    ]
```

and adjust tests accordingly.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3134422820,2926238136,coderabbitai[bot],COMMENTED,2025-06-13T20:02:24Z,"**Actionable comments posted: 2**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 5f8fd47d2f278c6ec75e32264590f7ef7095a796 and 81fc7e01d5d90064294ce2e2f4b62b847aa6ddc8.

</details>

<details>
<summary>📒 Files selected for processing (3)</summary>

* `app/web_ui/src/routes/(app)/fine_tune/[project_id]/[task_id]/create_finetune/+page.svelte` (8 hunks)
* `libs/core/kiln_ai/adapters/fine_tune/dataset_formatter.py` (10 hunks)
* `libs/core/kiln_ai/adapters/fine_tune/test_dataset_formatter.py` (22 hunks)

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (1)</summary>

* app/web_ui/src/routes/(app)/fine_tune/[project_id]/[task_id]/create_finetune/+page.svelte

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 Ruff (0.11.9)</summary>

<details>
<summary>libs/core/kiln_ai/adapters/fine_tune/test_dataset_formatter.py</summary>

855-855: `typing.Literal` imported but unused

Remove unused import: `typing.Literal`

(F401)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: Build Desktop Apps (ubuntu-22.04-arm)
* GitHub Check: Build Desktop Apps (windows-latest)
* GitHub Check: Build Desktop Apps (macos-13)
* GitHub Check: Build Desktop Apps (ubuntu-22.04)
* GitHub Check: Build Desktop Apps (macos-latest)

</details>

<details>
<summary>🔇 Additional comments (7)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/adapters/fine_tune/test_dataset_formatter.py (3)</summary>

`855-855`: **Unused import can be safely ignored**

The `Literal` import is used indirectly through `get_type_hints` for runtime type inspection. This is a false positive from the static analyzer.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Ruff (0.11.9)</summary>

855-855: `typing.Literal` imported but unused

Remove unused import: `typing.Literal`

(F401)

</details>

</details>

---

`103-140`: **Well-structured test fixtures**

The new fixtures properly use the `ChatMessage` format and provide good coverage for different chat scenarios including single-turn and multi-turn COT conversations.

---

`853-871`: **Excellent test coverage for role mapping**

This test ensures that `VERTEX_GEMINI_ROLE_MAP` covers all possible `ChatMessage.role` values and has no extra mappings. Great use of runtime type inspection.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Ruff (0.11.9)</summary>

855-855: `typing.Literal` imported but unused

Remove unused import: `typing.Literal`

(F401)

</details>

</details>

</details>
<details>
<summary>libs/core/kiln_ai/adapters/fine_tune/dataset_formatter.py (4)</summary>

`51-103`: **Clean implementation using chat formatter pattern**

The refactored `build_training_chat` function properly uses the new chat formatter abstraction with exhaustive pattern matching on `ChatStrategy`. Good error handling and clear error messages.

---

`127-187`: **Well-structured format generators with proper error handling**

The format generator functions are consistently updated to use `list[ChatMessage]`. Good error handling for JSON parsing and role validation.

---

`261-296`: **Proper implementation of Vertex Gemini format**

The `VERTEX_GEMINI_ROLE_MAP` and `generate_vertex_gemini` function correctly handle the Vertex AI Gemini format requirements with system instruction separation and role mapping.

---

`327-388`: **Consistent updates to use new chat formatter abstractions**

The `dump_to_file` method is properly updated to use `ChatStrategy` and the new `build_training_chat` function. The implementation maintains backward compatibility while adopting the new abstractions.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3134422820,2926533384,tawnymanticore,COMMENTED,2025-06-13T21:45:26Z,
3134422820,2926754762,coderabbitai[bot],COMMENTED,2025-06-13T23:21:20Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (4)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/adapters/test_adapter_registry.py (1)</summary><blockquote>

`34-39`: **Prefer the `ChatStrategy` enum over a raw string for stronger coupling to production code**

Hard-coding `""final_only""` weakens type-safety and risks drift if the enum member is renamed.  
Using the enum keeps the test aligned with the refactor that introduced `ChatStrategy`.

```diff
+from kiln_ai.adapters.chat.formatter import ChatStrategy
...
-        mock.return_value.data_strategy = ""final_only""
+        mock.return_value.data_strategy = ChatStrategy.final_only
```

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/base_adapter.py (3)</summary><blockquote>

`202-208`: **Missing doc-string & explicit return typing**

`build_chat_formatter` is now a key part of adapter behaviour, but it lacks a doc-string and an explicit return type hint.  Adding both will make the contract clear for subclass authors and for static-type tools.

---

`210-215`: **Parameter name shadows builtin `input`**

Using the name `input` for the parameter shadows Python’s builtin `input()` function. While not harmful here, it can be confusing in stack traces and IDE auto-completions. Consider renaming to `user_input` for clarity.  

```diff
-    def build_chat_formatter(self, input: Dict | str) -> ChatFormatter:
+    def build_chat_formatter(self, user_input: Dict | str) -> ChatFormatter:
 ...
-                user_input=input,
+                user_input=user_input,
```

---

`227-246`: **Remove unnecessary `else` after early `return`**

Static analysis is correct: after the `return` inside the `reasoning_capable` branch, the subsequent `else` is redundant. Removing it shortens indentation and improves readability.  

```diff
-        else:
-            # Unstructured output with COT
-            # Two calls to separate the thinking from the final response
-            return get_chat_formatter(
-                strategy=ChatStrategy.two_message_cot,
-                system_message=system_message,
-                user_input=input,
-                thinking_instructions=cot_prompt,
-            )
+        # Unstructured output with COT
+        # Two calls to separate the thinking from the final response
+        return get_chat_formatter(
+            strategy=ChatStrategy.two_message_cot,
+            system_message=system_message,
+            user_input=input,
+            thinking_instructions=cot_prompt,
+        )
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Pylint (3.3.7)</summary>

[refactor] 229-246: Unnecessary ""else"" after ""return"", remove the ""else"" and de-indent the code inside it

(R1705)

</details>

</details>

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 81fc7e01d5d90064294ce2e2f4b62b847aa6ddc8 and da8bf7872aab3dc30f6c37d1c2b5aef37345bc45.

</details>

<details>
<summary>📒 Files selected for processing (5)</summary>

* `app/web_ui/src/lib/utils/formatters.ts` (1 hunks)
* `libs/core/kiln_ai/adapters/ml_model_list.py` (3 hunks)
* `libs/core/kiln_ai/adapters/model_adapters/base_adapter.py` (3 hunks)
* `libs/core/kiln_ai/adapters/provider_tools.py` (3 hunks)
* `libs/core/kiln_ai/adapters/test_adapter_registry.py` (1 hunks)

</details>

<details>
<summary>✅ Files skipped from review due to trivial changes (1)</summary>

* libs/core/kiln_ai/adapters/ml_model_list.py

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (1)</summary>

* libs/core/kiln_ai/adapters/provider_tools.py

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/base_adapter.py (3)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/adapters/chat/chat_formatter.py (2)</summary>

* `ChatFormatter` (31-59)
* `get_chat_formatter` (199-219)

</details>
<details>
<summary>libs/core/kiln_ai/datamodel/datamodel_enums.py (1)</summary>

* `ChatStrategy` (60-70)

</details>
<details>
<summary>libs/core/kiln_ai/adapters/prompt_builders.py (9)</summary>

* `chain_of_thought_prompt` (54-60)
* `chain_of_thought_prompt` (220-231)
* `chain_of_thought_prompt` (237-238)
* `chain_of_thought_prompt` (244-245)
* `chain_of_thought_prompt` (251-252)
* `chain_of_thought_prompt` (283-284)
* `chain_of_thought_prompt` (334-335)
* `chain_of_thought_prompt` (371-372)
* `build_prompt` (29-43)

</details>

</blockquote></details>

</details><details>
<summary>🪛 Pylint (3.3.7)</summary>

<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/base_adapter.py</summary>

[refactor] 229-246: Unnecessary ""else"" after ""return"", remove the ""else"" and de-indent the code inside it

(R1705)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: Build Desktop Apps (macos-13)
* GitHub Check: Build Desktop Apps (ubuntu-22.04-arm)
* GitHub Check: Build Desktop Apps (ubuntu-22.04)
* GitHub Check: Build Desktop Apps (windows-latest)
* GitHub Check: Build Desktop Apps (macos-latest)

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>app/web_ui/src/lib/utils/formatters.ts (1)</summary>

`57-69`: <details>
<summary>❌ Incorrect review comment</summary>

**UI mapping is now out-of-sync with `ChatStrategy` values – add the new enum names (or centralise the map).**

The backend has migrated from  
`FinetuneDataStrategy` → `ChatStrategy` with enum members such as  
`single_turn`, `two_message_cot_legacy`, `two_message_cot`, `single_turn_r1_thinking`.  
The UI helper still keys off the *old* strings (`final_only`, `final_and_intermediate`, …).  
If a component passes the new enum values, the `switch` will hit the `default` branch and surface raw ids to the user, breaking UX consistency.

Minimal quick-fix:

```diff
     case ""final_only"":
+    case ""single_turn"":
       return ""Standard""
     case ""final_and_intermediate"":
+    case ""two_message_cot_legacy"":
       return ""Reasoning (legacy two-message format)""
     case ""two_message_cot"":
       return ""Reasoning (separate thinking message)""
     case ""final_and_intermediate_r1_compatible"":
+    case ""single_turn_r1_thinking"":
       return ""Reasoning (R1 format thinking)""
```

Recommended long-term cleanup – centralise the mapping so both BE & FE share a single source of truth (e.g. an exported `Record<ChatStrategy,string>`).  
That will prevent silent drift the next time enum values evolve.

---

Here’s a quick search to locate the `ChatStrategy` enum (and its values) in the frontend code:

---

🏁 Script executed:

```shell
#!/bin/bash
# Search under app/web_ui for ChatStrategy definitions and its string members
rg -n ""export enum ChatStrategy"" app/web_ui/
rg -n ""export type ChatStrategy"" app/web_ui/
rg -n ""ChatStrategy"" app/web_ui/
rg -n ""single_turn"" app/web_ui/
rg -n ""two_message_cot_legacy"" app/web_ui/
rg -n ""single_turn_r1_thinking"" app/web_ui/
```

Length of output: 1891

---



</details>

**Data strategy name mapping is in sync with ChatStrategy**  

The generated `ChatStrategy` in `app/web_ui/src/lib/api_schema.d.ts` (line 1155) is currently a union of exactly these four strings:

- ""final_only""  
- ""final_and_intermediate""  
- ""two_message_cot""  
- ""final_and_intermediate_r1_compatible""  

And your `data_strategy_name` switch covers all of them (with a default fallback). No changes are needed now. When the backend’s OpenAPI spec adds new `ChatStrategy` values and you regenerate `api_schema.d.ts`, then you can extend this mapping—or better yet centralise it in one shared Record—to avoid drift in the future. 

> Likely an incorrect or invalid review comment.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3134422820,2928190608,coderabbitai[bot],COMMENTED,2025-06-14T11:09:08Z,"**Actionable comments posted: 3**

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/test_base_adapter.py (2)</summary><blockquote>

`320-355`: **Assertion by class *name* is fragile**

`assert formatter.__class__.__name__ == expected_formatter_class` will break on any simple
rename and provides no type safety.  Prefer `isinstance` against the actual class to make the
test resilient to refactors.

```diff
-from (
-    ""SingleTurnFormatter"",
-    ""TwoMessageCotFormatter"",
-    ""SingleTurnR1ThinkingFormatter"",
-) as expected_formatter_class
+from kiln_ai.adapters.chat.chat_formatter import (
+    SingleTurnFormatter,
+    TwoMessageCotFormatter,
+    SingleTurnR1ThinkingFormatter,
+)
+
+# … later …
-assert formatter.__class__.__name__ == expected_formatter_class
+assert isinstance(formatter, expected_formatter_class)
```
You can parametrize with the real classes rather than their string names.

---

`383-391`: **Direct attribute checks assume a uniform formatter API**

`system_message`, `user_input`, and optionally `thinking_instructions`
are asserted for *every* formatter.  This will silently fail if a future
formatter variant lacks one of these attributes but should still be valid.
Consider using `getattr` with a default or narrowing the assertions to the
formatter types where those attributes are formally part of the contract.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 150dc0dcdfb3c9fbe76d20643374819900feb7ca and 3aa9bef19da22be7416d7c55e8725b8754dd9bce.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `libs/core/kiln_ai/adapters/model_adapters/litellm_adapter.py` (3 hunks)
* `libs/core/kiln_ai/adapters/model_adapters/test_base_adapter.py` (2 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 Ruff (0.11.9)</summary>

<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/litellm_adapter.py</summary>

22-22: `kiln_ai.datamodel.datamodel_enums.ChatStrategy` imported but unused

Remove unused import: `kiln_ai.datamodel.datamodel_enums.ChatStrategy`

(F401)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: Build Desktop Apps (macos-13)
* GitHub Check: Build Desktop Apps (ubuntu-22.04)
* GitHub Check: Build Desktop Apps (macos-latest)
* GitHub Check: Build Desktop Apps (ubuntu-22.04-arm)
* GitHub Check: Build Desktop Apps (windows-latest)

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3134422820,2928193835,scosman,COMMENTED,2025-06-14T11:26:39Z,
3134422820,2928209013,coderabbitai[bot],COMMENTED,2025-06-14T11:37:57Z,"**Actionable comments posted: 1**

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/adapters/chat/chat_formatter.py (1)</summary><blockquote>

`6-7`: **Drop unused import (`Enum`).**

`Enum` is never referenced in this module.  Keeping it around only triggers Ruff F401 and misleads readers into thinking an `Enum`-based state machine is used here.

```diff
-from enum import Enum
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Ruff (0.11.9)</summary>

6-6: `enum.Enum` imported but unused

Remove unused import: `enum.Enum`

(F401)

</details>

</details>

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/fine_tune/test_dataset_formatter.py (1)</summary><blockquote>

`860-863`: **Remove unused `Literal` import.**

`Literal` isn’t referenced after the import, triggering Ruff F401.  
The test only needs `get_type_hints`.

```diff
-    from typing import Literal, get_type_hints
+    from typing import get_type_hints
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Ruff (0.11.9)</summary>

860-860: `typing.Literal` imported but unused

Remove unused import: `typing.Literal`

(F401)

</details>

</details>

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 2a837f7054a8b7fa8e1b3de4d98403a6f1efec01 and e41c23dd173ecfff29637fe40484c3ecae90b1fc.

</details>

<details>
<summary>📒 Files selected for processing (3)</summary>

* `libs/core/kiln_ai/adapters/chat/chat_formatter.py` (1 hunks)
* `libs/core/kiln_ai/adapters/fine_tune/test_dataset_formatter.py` (22 hunks)
* `libs/core/kiln_ai/adapters/model_adapters/litellm_adapter.py` (2 hunks)

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (1)</summary>

* libs/core/kiln_ai/adapters/model_adapters/litellm_adapter.py

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>libs/core/kiln_ai/adapters/chat/chat_formatter.py (3)</summary><blockquote>

<details>
<summary>app/web_ui/src/lib/types.ts (1)</summary>

* `ChatStrategy` (24-24)

</details>
<details>
<summary>libs/core/kiln_ai/datamodel/datamodel_enums.py (1)</summary>

* `ChatStrategy` (60-70)

</details>
<details>
<summary>libs/core/kiln_ai/utils/exhaustive_error.py (1)</summary>

* `raise_exhaustive_enum_error` (5-6)

</details>

</blockquote></details>

</details><details>
<summary>🪛 Ruff (0.11.9)</summary>

<details>
<summary>libs/core/kiln_ai/adapters/fine_tune/test_dataset_formatter.py</summary>

860-860: `typing.Literal` imported but unused

Remove unused import: `typing.Literal`

(F401)

</details>
<details>
<summary>libs/core/kiln_ai/adapters/chat/chat_formatter.py</summary>

6-6: `enum.Enum` imported but unused

Remove unused import: `enum.Enum`

(F401)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: Build Desktop Apps (windows-latest)
* GitHub Check: Build Desktop Apps (macos-13)
* GitHub Check: Build Desktop Apps (ubuntu-22.04)
* GitHub Check: Build Desktop Apps (ubuntu-22.04-arm)
* GitHub Check: Build Desktop Apps (macos-latest)

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3164206303,2947116081,cubic-dev-ai[bot],COMMENTED,2025-06-20T19:30:07Z,"cubic reviewed 1 file and found no issues. Review PR in [cubic.dev](https://cubic.dev/pr/better-auth/better-auth/pull/3108).

<sub>React with 👍 or 👎 to teach cubic. Tag `@cubic-dev-ai` to give specific feedback.</sub>"
3145399987,2930586141,devgony,APPROVED,2025-06-16T04:17:52Z,
3119873951,2898902274,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-05T05:17:47Z,"## Pull Request Overview

This PR corrects the HTTP content-type for the `Execute` method on `ShifuInstruction` and ensures code quality via vet and tests  
- Change the content-type header from `""plain/text""` to `""text/plain""` in `Execute()`  
- Run `go vet` and `go test` to validate code


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**pkg/gateway/lwm2m/gatewaylwm2m.go:234**
* [nitpick] Consider adding a test or mocking the HTTP client to verify that the request uses the correct `Content-Type: text/plain` header.
```
resp, err := http.Post(si.Endpoint, ""text/plain"", nil)
```
</details>

"
3088938532,2866796977,MichaReiser,COMMENTED,2025-05-25T10:21:12Z,How can I get chatgpt to address my comments?
3088938532,2866900347,charliermarsh,COMMENTED,2025-05-25T17:09:30Z,
3088938532,2866900356,charliermarsh,COMMENTED,2025-05-25T17:09:33Z,
3111012343,2889342731,sourcery-ai[bot],COMMENTED,2025-06-02T17:26:48Z,"Hey @mldangelo - I've reviewed your changes - here's some feedback:

- Consider adding a CI check that validates all example configs include the schema header to prevent manual oversights.
- You could automate inserting or updating the schema header in example files (e.g. via a simple script) to keep them in sync as new examples are added.

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3122285142,2901731181,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-05T18:52:52Z,"## Pull Request Overview

A PR addressing organization dropdown search functionality and preventing duplicate organizations from collapsing when names match.
- Update the dropdown's value attribute to include both organization ID and display name.
- Adjust formatting for the loader and check icon display logic.


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**apps/app/src/components/organization-switcher.tsx:258**
* Consider removing the extra space when getDisplayName(org) returns an empty value, for example by conditionally concatenating the display name or by applying .trim() to the result.
```
value={`${org.id} ${getDisplayName(org) ?? """"}`}​
```
</details>

"
3121791946,2900927634,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-05T16:07:08Z,"## Pull Request Overview

This PR updates the development workflow by switching from the old pip‐based commands to a new uv-based workflow. Key changes include:
- Updating tox.ini to replace pip commands with uv commands.
- Moving dev dependency definitions from requirements-dev.txt to pyproject.toml.
- Modifying the contributing docs and CI workflow to reflect the new uv-based commands.

### Reviewed Changes

Copilot reviewed 7 out of 7 changed files in this pull request and generated no comments.

<details>
<summary>Show a summary per file</summary>

| File                              | Description                                                                                            |
| --------------------------------- | ------------------------------------------------------------------------------------------------------ |
| tox.ini                           | Uses uv for installing dependencies and running tests, replacing legacy pip commands.                  |
| requirements-dev.txt              | Removed as dev dependencies are now managed via pyproject.toml dependency groups.                      |
| pyproject.toml                    | Introduces a dev dependency group with tools like tox, pytest, and flake8.                             |
| doc/contributing.rst              | Updates instructions to use uv sync for locally-editable installs and test running command change.     |
| .github/workflows/test.yml        | Incorporates steps for installing uv and syncing dependencies using uv in the CI workflow.             |
</details>




"
3123401020,2903576909,da-beda,COMMENTED,2025-06-06T02:11:55Z,all good
3132031341,2923372985,devgony,APPROVED,2025-06-13T04:20:24Z,
3070333952,2850302654,ellipsis-dev[bot],COMMENTED,2025-05-19T10:43:12Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to bf21c43891cdcbc120a91ecb86b56af5c14046e2 in <ellipsistime>41 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `52` lines of code in `3` files
> - Skipped `0` files when reviewing.
> - Skipped posting `3` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>CHANGELOG.md:44</code></summary>
> 
> - **Draft comment:** 
> Changelog entry clearly describes the change. Make sure it aligns with release notes.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>agents-api/agents_api/common/utils/mmr.py:146</code></summary>
> 
> - **Draft comment:** 
> Deduplication logic is correct but consider adding a brief comment on why duplicates might occur and a more concise deduplication approach (e.g., using dict.fromkeys).
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>integrations-service/integrations/utils/integrations/browserbase.py:193</code></summary>
> 
> - **Draft comment:** 
> Good use of asyncio.to_thread to offload blocking call. Consider using structured logging instead of print in the exception block.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_iruTUs4Gc1kOyhrl`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3070333952,2850718043,ellipsis-dev[bot],COMMENTED,2025-05-19T13:10:18Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed 771140bf8daf65fc5971764aa00d9921689d2a49 in <ellipsistime>1 minute and 18 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `15` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `1` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>agents-api/tests/test_mmr.py:53</code></summary>
> 
> - **Draft comment:** 
> The expected order of documents is now reversed in the MMR deduplication test. Ensure this change aligns with the new deduplication logic and add an inline comment explaining why the order is swapped.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 10% vs. threshold = 50% The comment asks for two things: 1) Verification that the order change is correct, and 2) Adding an explanatory comment. The order change is part of the test assertions, which are deliberately written to expect specific results. If the order was changed, it was intentional. Asking for verification violates our rules. Adding explanatory comments is optional and should be up to the author. The order change could be significant for understanding the MMR algorithm's behavior. Maybe documenting the reason would help future maintainers. While documentation can be helpful, the test is already clear about what it's checking - the order of results with MMR. The test name and context make it self-documenting. Delete the comment. It asks for verification of intentional changes and suggests optional documentation, neither of which are necessary comments.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_UC5DguT7XuaZTrrY`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3152398809,2934479096,ellipsis-dev[bot],COMMENTED,2025-06-17T07:34:06Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 59087a6badb805550aadd15ee599b6384557080b in <ellipsistime>20 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `13` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `1` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/wechaty/settings/code-review) and [rules](https://app.ellipsis.dev/wechaty/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>src/pure-functions/guard-qr-code-value.ts:24</code></summary>
> 
> - **Draft comment:** 
> Typo fixed: The error message now correctly uses 'than' instead of 'then'.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_Rf8rWTqyEbvr2iwy`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=wechaty%2Fwechaty&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/wechaty/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/wechaty/code-review/rules).</sup>"
3070340483,2847997156,ellipsis-dev[bot],COMMENTED,2025-05-17T05:11:44Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 3754d68b1e1ad0bec2119630b89bf04b4495e560 in <ellipsistime>1 minute and 47 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `1340` lines of code in `6` files
> - Skipped `0` files when reviewing.
> - Skipped posting `9` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>documentation/docs.json:55</code></summary>
> 
> - **Draft comment:** 
> Ensure the updated navigation order with the new trip-planning pages (input, tools, workflow, running) matches the intended structure.
> - **Reason this comment was not posted:**
> Confidence changes required: `50%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>documentation/tutorials/trip-planning-input.mdx:7</code></summary>
> 
> - **Draft comment:** 
> The Input Schema section is clear and well-structured with an appropriate YAML snippet.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>documentation/tutorials/trip-planning-running.mdx:19</code></summary>
> 
> - **Draft comment:** 
> Clarify that placeholders (e.g., JULEP_API_KEY, AGENT_ID) must be replaced with actual values in real usage.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>documentation/tutorials/trip-planning-tools.mdx:12</code></summary>
> 
> - **Draft comment:** 
> The Tools Configuration section is straightforward; ensure that API key placeholders are updated before production.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>documentation/tutorials/trip-planning-workflow.mdx:60</code></summary>
> 
> - **Draft comment:** 
> Validate that the weather integration returns an output with a 'result' key, as assumed in the Combine Data step.
> - **Reason this comment was not posted:**
> Confidence changes required: `50%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>6. <code>documentation/tutorials/trip-planning-workflow.mdx:90</code></summary>
> 
> - **Draft comment:** 
> Ensure that the 'agent' variable is available in context for the f-string in the Generate Itineraries step to avoid runtime errors.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>7. <code>documentation/tutorials/trip-planning-workflow.mdx:156</code></summary>
> 
> - **Draft comment:** 
> The Complete Task YAML includes a 'wikipedia' integration that isn’t used in the workflow; consider removing it or documenting its purpose.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>8. <code>documentation/tutorials/trip-planning.mdx:17</code></summary>
> 
> - **Draft comment:** 
> The Overview page provides clear step-by-step links. Verify that the link order matches the intended tutorial flow.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>9. <code>documentation/tutorials/trip-planning-workflow.mdx:133</code></summary>
> 
> - **Draft comment:** 
> It appears the code fence starting at line 133 is labeled as ""```yaml YAML"". Consider removing the extra 'YAML' so that it reads simply ""```yaml"" to ensure consistent syntax highlighting.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 10% vs. threshold = 50% While technically correct, this is an extremely minor formatting issue. The code will render correctly either way since both specifiers mean the same thing. This kind of nitpicky formatting comment doesn't require action from the PR author and doesn't impact functionality or readability in any meaningful way. The comment is technically accurate and could help maintain consistency in documentation. Some documentation systems might handle double language specifiers differently. Even if there's a minor consistency benefit, this is too trivial to warrant a PR comment. The code fence works fine either way and this creates unnecessary noise in the review. Delete this comment as it's too minor and doesn't require any meaningful action from the PR author.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_3DyOdxXEljR90h6L`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3098866021,2876763998,Jarred-Sumner,COMMENTED,2025-05-29T00:49:46Z,
3152972344,2947767931,coderabbitai[bot],COMMENTED,2025-06-21T13:27:20Z,"**Actionable comments posted: 5**

<details>
<summary>🧹 Nitpick comments (3)</summary><blockquote>

<details>
<summary>packages/api/src/routers/accounts.ts (1)</summary><blockquote>

`89-89`: **Reminder: Address the TODO comment.**

The TODO indicates that setting a default calendar is needed when changing the default account.


Would you like me to help implement the default calendar logic or create an issue to track this task?

</blockquote></details>
<details>
<summary>packages/auth/src/utils/account-linking.ts (1)</summary><blockquote>

`58-58`: **Reminder: Address the TODO comment.**

The TODO indicates that setting a default calendar is needed when setting the default account.


Would you like me to help implement the default calendar logic or create an issue to track this task?

</blockquote></details>
<details>
<summary>packages/api/src/utils/accounts.ts (1)</summary><blockquote>

`21-38`: **Improve error messages for better debugging.**

The function has solid logic and error handling, but both error cases throw identical messages. Consider making them more specific to aid in debugging.


```diff
 if (!defaultAccountId) {
-  throw new Error(""No default account found"");
+  throw new Error(""User has no default account ID set"");
 }

 if (!defaultAccount) {
-  throw new Error(""No default account found"");
+  throw new Error(""Default account not found in database"");
 }
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between b905ee0a81ba7e42a2c1ccb452d8112ed7ce0c2f and cf82f4637d9d6bb86fc4184b6c0b4f7cd42d390a.

</details>

<details>
<summary>📒 Files selected for processing (8)</summary>

* `README.md` (0 hunks)
* `packages/api/src/routers/accounts.ts` (4 hunks)
* `packages/api/src/utils/accounts.ts` (1 hunks)
* `packages/auth/src/server.ts` (3 hunks)
* `packages/auth/src/utils/account-linking.ts` (1 hunks)
* `packages/db/src/schema/auth.ts` (3 hunks)
* `packages/db/src/schema/calendars.ts` (1 hunks)
* `packages/db/src/schema/index.ts` (1 hunks)

</details>

<details>
<summary>💤 Files with no reviewable changes (1)</summary>

* README.md

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (4)</summary>

<details>
<summary>packages/auth/src/server.ts (2)</summary><blockquote>

<details>
<summary>packages/auth/src/utils/account-linking.ts (1)</summary>

* `createProviderHandler` (11-66)

</details>
<details>
<summary>packages/db/src/schema/auth.ts (1)</summary>

* `account` (56-75)

</details>

</blockquote></details>
<details>
<summary>packages/api/src/routers/accounts.ts (2)</summary><blockquote>

<details>
<summary>packages/db/src/schema/auth.ts (2)</summary>

* `account` (56-75)
* `user` (12-25)

</details>
<details>
<summary>packages/api/src/utils/accounts.ts (1)</summary>

* `getDefaultAccount` (21-38)

</details>

</blockquote></details>
<details>
<summary>packages/auth/src/utils/account-linking.ts (2)</summary><blockquote>

<details>
<summary>packages/db/src/schema/auth.ts (2)</summary>

* `account` (56-75)
* `user` (12-25)

</details>
<details>
<summary>packages/db/src/index.ts (1)</summary>

* `db` (28-28)

</details>

</blockquote></details>
<details>
<summary>packages/db/src/schema/calendars.ts (1)</summary><blockquote>

<details>
<summary>packages/db/src/schema/auth.ts (1)</summary>

* `account` (56-75)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>🔇 Additional comments (14)</summary><blockquote>

<details>
<summary>packages/db/src/schema/index.ts (1)</summary>

`1-3`: **LGTM!**

The export statement correctly adds the calendars schema to the index, making it available for use throughout the application.

</details>
<details>
<summary>packages/api/src/routers/accounts.ts (2)</summary>

`9-9`: **LGTM!**

The import change correctly reflects the refactored account utility functions.

---

`46-60`: **LGTM!**

The procedure correctly uses the new `getDefaultAccount` function to retrieve the user's default account.

</details>
<details>
<summary>packages/auth/src/server.ts (3)</summary>

`6-10`: **LGTM!**

Good refactoring - extracting the account creation logic to a dedicated handler improves code organization and reusability.

---

`53-55`: **LGTM!**

Clean implementation using the extracted handler function.

---

`77-78`: **LGTM!**

Useful type exports that improve type safety across the codebase.

</details>
<details>
<summary>packages/auth/src/utils/account-linking.ts (1)</summary>

`11-66`: **Good extraction of account linking logic.**

The handler properly validates tokens, retrieves user info, and updates the account within a transaction.

</details>
<details>
<summary>packages/db/src/schema/auth.ts (2)</summary>

`1-10`: **LGTM!**

Appropriate imports for defining relations and foreign key constraints.

---

`27-84`: **Well-structured relation definitions.**

The relation mappings correctly define the relationships between users, sessions, accounts, and calendars, enabling efficient ORM queries.

</details>
<details>
<summary>packages/api/src/utils/accounts.ts (3)</summary>

`2-2`: **Good type safety improvement!**

The import changes from generic session types to specific `Account` and `User` types improve type safety and make the code more explicit about its dependencies.

---

`5-19`: **Excellent helper function design!**

The `withAccessToken` helper function effectively centralizes the access token fetching logic, following the DRY principle. The fallback logic with `accessToken ?? account.accessToken` ensures robustness.

---

`40-50`: **Excellent concurrent processing implementation!**

The use of `Promise.all` for concurrent access token fetching is a good performance optimization. The function is clean and makes good use of the `withAccessToken` helper.

</details>
<details>
<summary>packages/db/src/schema/calendars.ts (2)</summary>

`1-10`: **Clean and comprehensive imports!**

All necessary Drizzle ORM imports are properly included, and the reference to the auth schema is correctly imported.

---

`42-48`: **Well-structured relational mappings!**

The relations are properly defined with correct field mappings and follow Drizzle ORM best practices. The relationships between calendars, events, and accounts are logically sound.



Also applies to: 92-101

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3070343085,2865095944,Misplon,APPROVED,2025-05-23T16:56:56Z,
3119381219,2898344720,ellipsis-dev[bot],COMMENTED,2025-06-04T23:32:52Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 058fac1761cdb6ee63068b6e4fc3b91255b2f347 in <ellipsistime>1 minute and 0 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `71` lines of code in `4` files
> - Skipped `0` files when reviewing.
> - Skipped posting `4` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/onlook-dev/settings/code-review) and [rules](https://app.ellipsis.dev/onlook-dev/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>package.json:33</code></summary>
> 
> - **Draft comment:** 
> Removed obsolete release script commands. Ensure all docs/CI references are updated.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment is asking the PR author to ensure that all references to `docs/CI` are updated, which falls under the rule of not asking the author to ensure something is done. It doesn't provide a specific suggestion or point out a specific issue with the code.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>scripts/increment_tag.sh:1</code></summary>
> 
> - **Draft comment:** 
> Obsolete 'increment_tag.sh' removed. Verify version bumping is handled elsewhere.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>scripts/publish_tag.sh:1</code></summary>
> 
> - **Draft comment:** 
> Obsolete 'publish_tag.sh' removed. Confirm release automation is replaced by new tooling.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>scripts/remove_tag.sh:1</code></summary>
> 
> - **Draft comment:** 
> Obsolete 'remove_tag.sh' removed. Ensure tag removal is now integrated into the updated process.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_5VzQ93kZ0zuQ5CBW`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=onlook-dev%2Fonlook&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/onlook-dev/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/onlook-dev/code-review/rules).</sup>"
3095739354,2873357513,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-28T02:30:08Z,"## Pull Request Overview

This PR refines the cache middleware to better align with RFC compliance by adding support for an RFC-compliant Age header and improved handling of Cache-Control directives.  
- Updated cache manager internals (e.g., a new ttl field and revised get/release logic).  
- Added comprehensive tests for Age header behavior, no-store directive, and Cache-Control preservation.  
- Updated documentation to highlight the new caching behaviors.

### Reviewed Changes

Copilot reviewed 4 out of 4 changed files in this pull request and generated 2 comments.

| File                             | Description                                                           |
| -------------------------------- | --------------------------------------------------------------------- |
| middleware/cache/manager.go      | Introduces ttl field and revises logic to better handle storage cases. |
| middleware/cache/cache_test.go   | Adds tests covering Age header, no-store directive, and max-age parsing. |
| middleware/cache/cache.go        | Adjusts cache header setting logic to avoid overwriting and improve compliance. |
| docs/whats_new.md                | Documents the changes regarding the new Age header and cache improvements. |



"
3095739354,2873361145,coderabbitai[bot],COMMENTED,2025-05-28T02:32:58Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>middleware/cache/manager.go (1)</summary><blockquote>

`75-93`: **Improved error handling and clarity in the `get` method.**

The refactored implementation:
- Returns `nil` immediately on storage errors or missing data
- Properly releases items if unmarshaling fails
- Simplifies the in-memory storage path

Consider adding test coverage for the unmarshal error case (lines 81-82) to ensure this error handling path works correctly.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 GitHub Check: codecov/patch</summary>

[warning] 81-82: middleware/cache/manager.go#L81-L82
Added lines #L81 - L82 were not covered by tests

</details>

</details>

</blockquote></details>
<details>
<summary>middleware/cache/cache_test.go (1)</summary><blockquote>

`1002-1020`: **Improve test naming consistency and timing validation.**

The test correctly validates Age header behavior but has some areas for improvement:

1. **Naming Convention**: The function should be `Test_CacheAgeHeader` to match the convention used by other tests in this file.
2. **Long Sleep Duration**: The 4-second sleep makes the test suite slower. Consider reducing to 1-2 seconds.
3. **Imprecise Age Validation**: The test only checks that age is positive but doesn't validate it's approximately the expected duration.



```diff
-func TestCacheAgeHeader(t *testing.T) {
+func Test_CacheAgeHeader(t *testing.T) {
 	t.Parallel()
 	app := fiber.New()
 	app.Use(New(Config{Expiration: 10 * time.Second}))
 	app.Get(""/"", func(c fiber.Ctx) error { return c.SendString(""ok"") })

 	resp, err := app.Test(httptest.NewRequest(fiber.MethodGet, ""/"", nil))
 	require.NoError(t, err)
 	require.Equal(t, ""0"", resp.Header.Get(fiber.HeaderAge))

-	time.Sleep(4 * time.Second)
+	sleepDuration := 2 * time.Second
+	time.Sleep(sleepDuration)

 	resp, err = app.Test(httptest.NewRequest(fiber.MethodGet, ""/"", nil))
 	require.NoError(t, err)
 	require.Equal(t, cacheHit, resp.Header.Get(""X-Cache""))
 	age, err := strconv.Atoi(resp.Header.Get(fiber.HeaderAge))
 	require.NoError(t, err)
-	require.Positive(t, age)
+	require.GreaterOrEqual(t, age, int(sleepDuration.Seconds()))
+	require.LessOrEqual(t, age, int(sleepDuration.Seconds())+1) // Allow 1 second tolerance
 }
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 557095b0947d5c8666bd5b5c829020d51fcad3b6 and 6e34870367f12760ae6850874eca38cdee612f58.

</details>

<details>
<summary>📒 Files selected for processing (4)</summary>

* `docs/whats_new.md` (1 hunks)
* `middleware/cache/cache.go` (5 hunks)
* `middleware/cache/cache_test.go` (1 hunks)
* `middleware/cache/manager.go` (3 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>middleware/cache/cache.go (3)</summary><blockquote>

<details>
<summary>constants.go (2)</summary>

* `HeaderCacheControl` (170-170)
* `HeaderAge` (169-169)

</details>
<details>
<summary>app.go (1)</summary>

* `Storage` (45-65)

</details>
<details>
<summary>internal/storage/memory/memory.go (1)</summary>

* `Storage` (13-18)

</details>

</blockquote></details>

</details><details>
<summary>🪛 GitHub Check: codecov/patch</summary>

<details>
<summary>middleware/cache/manager.go</summary>

[warning] 81-82: middleware/cache/manager.go#L81-L82
Added lines #L81 - L82 were not covered by tests

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (2)</summary>

* GitHub Check: Compare
* GitHub Check: repeated

</details>

<details>
<summary>🔇 Additional comments (13)</summary><blockquote>

<details>
<summary>docs/whats_new.md (1)</summary>

`974-975`: **Documentation accurately reflects the new Age header feature.**

The documentation clearly explains the addition of the RFC-compliant Age header to cached responses, which aligns well with the PR's goal of improving cache middleware RFC compliance.

</details>
<details>
<summary>middleware/cache/manager.go (2)</summary>

`21-21`: **Good addition of the `ttl` field for Age header support.**

The `ttl` field enables accurate calculation of the Age header by storing the total time-to-live duration when the cache entry is created.

---

`59-62`: **Critical fix: Corrected the in-memory storage check.**

The condition has been properly fixed to `m.storage == nil` to prevent items from being incorrectly released back to the pool when using in-memory storage. This is important because in-memory storage keeps direct references to the items.

</details>
<details>
<summary>middleware/cache/cache.go (6)</summary>

`165-174`: **Excellent RFC-compliant cache header implementation.**

The implementation correctly:
1. Sets `Cache-Control` header only when enabled and not already present
2. Calculates the Age header as `ttl - (exp - ts)`, which accurately represents how long the response has been cached

The Age calculation is particularly well done, showing the elapsed time since the response was originally generated.

---

`177-181`: **Proper resource management for external storage.**

Good addition to release the item back to the pool after serving from external storage, which aligns with the corrected release logic in `manager.go`.

---

`197-201`: **Correctly respects the server's `no-store` directive.**

This implementation properly follows RFC 7234 Section 5.2.2.3 by not caching responses when the server includes `Cache-Control: no-store`.

---

`242-244`: **Good practice: Initialize Age header for fresh responses.**

Setting the Age header to ""0"" for new responses that don't already have it ensures RFC compliance from the start of the caching lifecycle.

---

`263-265`: **Smart cache expiration based on response headers.**

The code now respects the `max-age` directive from the response's Cache-Control header, allowing the server to control cache duration. The `ttl` is properly stored for Age header calculations.



Also applies to: 271-271

---

`303-314`: **Well-implemented `parseMaxAge` helper function.**

The function correctly:
- Handles comma-separated directives
- Is case-insensitive
- Properly extracts and validates the max-age value
- Returns a boolean to indicate success

This implementation follows the Cache-Control header format specified in RFC 7234.

</details>
<details>
<summary>middleware/cache/cache_test.go (4)</summary>

`1022-1038`: **LGTM! Excellent test for no-store directive compliance.**

This test correctly validates that responses with `Cache-Control: no-store` are not cached, which is essential for RFC compliance. The test properly verifies that both the initial and subsequent requests return `cacheUnreachable` status, ensuring the middleware respects the no-store directive.

---

`1040-1055`: **LGTM! Important test for Cache-Control header preservation.**

This test correctly validates that when `StoreResponseHeaders` is enabled, manually set `Cache-Control` headers are preserved and not overwritten by the middleware. This is crucial for maintaining application-level control over caching directives while still benefiting from the cache middleware functionality.

---

`1057-1074`: **LGTM! Proper validation of max-age directive behavior.**

This test correctly validates that the cache middleware respects the `max-age` directive from response headers, overriding the default expiration time. The test properly demonstrates that a cache entry with `max-age=1` expires after 1 second, even when the default expiration is 10 seconds. This is essential for RFC compliance.

---

`1076-1105`: **Excellent comprehensive unit test for parseMaxAge function.**

This table-driven test thoroughly validates the `parseMaxAge` helper function with excellent coverage:

- **Valid Cases**: Basic parsing, mixed directives, case insensitivity, zero values
- **Invalid Cases**: Missing values, malformed headers, non-numeric values
- **Edge Cases**: Proper handling of multiple directives and whitespace
- **Best Practices**: Uses `t.Run` for subtests and parallel execution

The test design ensures the parsing function correctly handles various real-world Cache-Control header formats while properly rejecting invalid input.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3095739354,2873371006,github-actions[bot],COMMENTED,2025-05-28T02:39:56Z,"<!-- github-benchmark-action-comment(start): Benchmark Alert -->
# :warning: **Performance Alert** :warning:

Possible performance regression was detected for benchmark.
Benchmark result of this commit is worse than the previous benchmark result exceeding threshold `1.50`.

| Benchmark suite | Current: 6e34870367f12760ae6850874eca38cdee612f58 | Previous: 557095b0947d5c8666bd5b5c829020d51fcad3b6 | Ratio |
|-|-|-|-|
| `Benchmark_GenericParseTypeBytes/benchmark_genericParseTypeBytes#03` | `24.97` ns/op	       0 B/op	       0 allocs/op | `12.78` ns/op	       0 B/op	       0 allocs/op | `1.95` |
| `Benchmark_GenericParseTypeBytes/benchmark_genericParseTypeBytes#03 - ns/op` | `24.97` ns/op | `12.78` ns/op | `1.95` |

This comment was automatically generated by [workflow](https://github.com/gofiber/fiber/actions?query=workflow%3ABenchmark) using [github-action-benchmark](https://github.com/marketplace/actions/continuous-benchmark).
<!-- github-benchmark-action-comment(end): Benchmark Alert -->"
3095739354,2873699660,ReneWerner87,COMMENTED,2025-05-28T06:02:05Z,
3095739354,2873700523,ReneWerner87,COMMENTED,2025-05-28T06:02:35Z,
3095739354,2873701105,ReneWerner87,APPROVED,2025-05-28T06:02:54Z,
3095739354,2874649326,ReneWerner87,APPROVED,2025-05-28T11:33:36Z,
3145100608,2926832151,seratch,APPROVED,2025-06-14T00:00:53Z,
3117835258,2896743540,novusnota,APPROVED,2025-06-04T13:27:57Z,
3081347944,2859088319,190n,COMMENTED,2025-05-21T20:53:11Z,
3081347944,2859096267,dylan-conway,COMMENTED,2025-05-21T20:56:46Z,
3081347944,2859478663,190n,APPROVED,2025-05-22T00:54:03Z,
3081347944,2859478909,alii,APPROVED,2025-05-22T00:54:18Z,
3145927714,2928064791,gemini-code-assist[bot],COMMENTED,2025-06-14T09:51:08Z,"## Summary of Changes

Hello @voku, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request updates the project's README file. The update was performed by running the automated documentation generation script after ensuring the build environment had the latest version of the generator. The resulting changes in the README reflect recent code modifications, including the addition of a new method and more precise type hinting in existing method signatures within the documentation.

### Highlights

* **README Regeneration**: The primary change is the regeneration of the `README.md` file. This was done by updating the build process to use the latest readme generator and then running the generation script.
* **Documentation Updates**: The regenerated README includes updated documentation, specifically refining parameter type hints for numerous methods (replacing generic `T` types with specific `string`, `array|object|string`, etc.) and adding documentation for a newly introduced method, `str_limit_in_byte`.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configureGemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3145927714,2928066496,gemini-code-assist[bot],COMMENTED,2025-06-14T09:52:13Z,"## Code Review

This pull request updates the README.md file, likely regenerated after a build process update. The changes primarily involve improving the specificity of type hints for function parameters and return values, which enhances the clarity of the API documentation. Overall, these are positive changes. I've identified a few areas where the generated documentation might not accurately reflect the underlying code's intent or could be made more consistent."
3145927714,2928071707,coderabbitai[bot],COMMENTED,2025-06-14T09:55:30Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>README.md (1)</summary><blockquote>

`3320-3332`: **Add new `str_limit_in_byte` method signature**  
Great addition for byte-based string truncation. Consider adding an example snippet to illustrate its behavior with multibyte characters.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 markdownlint-cli2 (0.17.2)</summary>

3325-3325: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

3326-3326: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

3327-3327: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

3328-3328: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

3331-3331: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

</details>

</details>

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between c4b377468db50ba8e10ec01ac683271a0ab10c8f and 74cdefd56875ef1493f748e06dae03b7393fd4a2.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `README.md` (38 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 markdownlint-cli2 (0.17.2)</summary>

<details>
<summary>README.md</summary>

559-559: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

622-622: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

667-667: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

736-736: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

770-770: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

790-790: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

1040-1040: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

1266-1266: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

1317-1317: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

1360-1360: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

1361-1361: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

1364-1364: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

1378-1378: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

1388-1388: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

1486-1486: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

1512-1512: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

1714-1714: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

2416-2416: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

2566-2566: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

2809-2809: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

2823-2823: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

2941-2941: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

3014-3014: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

3027-3027: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

3293-3293: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

3310-3310: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

3325-3325: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

3326-3326: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

3327-3327: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

3328-3328: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

3331-3331: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

3522-3522: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

3605-3605: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

3844-3844: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

4040-4040: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

4114-4114: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

4961-4961: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

5126-5126: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

5160-5160: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

5182-5182: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

5267-5267: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (1)</summary>

* GitHub Check: Codacy Static Code Analysis

</details>

<details>
<summary>🔇 Additional comments (4)</summary><blockquote>

<details>
<summary>README.md (4)</summary>

`1360-1361`: **Clarify `getUrlParamFromArray` parameter types**  
Switching from `string $param` to `array<array-key, mixed> $param` and likewise for `$data` improves type accuracy for nested data parsing. Ensure examples and unit tests align with this updated signature.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 markdownlint-cli2 (0.17.2)</summary>

1360-1360: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

---

1361-1361: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

</details>

</details>

---

`1368-1368`: **Use explicit array shape in `get_file_type` signature**  
Specifying `array{ext: null|string, mime: null|string, type: null|string}` for `$fallback` enhances documentation precision and aids static analysis.

---

`1378-1378`: **Document return type as explicit array shape**  
The return type `array{ext: null|string, mime: null|string, type: null|string}` clearly matches the parameter shape. Nice consistency.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 markdownlint-cli2 (0.17.2)</summary>

1378-1378: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

</details>

</details>

---

`1388-1388`: **Specify `$possible_chars` as `string` in `get_random_string`**  
Updating from generic `T` to `string` improves readability and type safety. Ensure callers pass a valid characters string.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 markdownlint-cli2 (0.17.2)</summary>

1388-1388: Unordered list style
Expected: plus; Actual: dash

(MD004, ul-style)

</details>

</details>

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3092307921,2940626773,zanesq,APPROVED,2025-06-18T20:53:46Z,
3074585419,2853154894,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-20T08:14:07Z,"## Pull Request Overview

This PR corrects a spelling mistake in log messages within hosted services.

- Fix typo ""occured"" → ""occurred"" in two hosted service classes.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated no comments.

| File                                                                                       | Description                                    |
| ------------------------------------------------------------------------------------------ | ---------------------------------------------- |
| src/common/Elsa.Mediator/HostedServices/BackgroundEventPublisherHostedService.cs            | Corrected spelling in `_logger.LogError` call  |
| src/common/Elsa.Mediator/HostedServices/BackgroundCommandSenderHostedService.cs             | Corrected spelling in `_logger.LogError` call  |


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**src/common/Elsa.Mediator/HostedServices/BackgroundEventPublisherHostedService.cs:75**
* Typo: 'occured' should be spelled 'occurred'.
```
_logger.LogError(e, ""An unhandled exception occured while processing the queue"");
```
**src/common/Elsa.Mediator/HostedServices/BackgroundCommandSenderHostedService.cs:69**
* Typo: 'occured' should be spelled 'occurred'.
```
_logger.LogError(e, ""An unhandled exception occured while processing the queue"");
```
</details>

"
3083696599,2868859360,majdyz,APPROVED,2025-05-26T16:26:13Z,Why are we doing this ?
3085125237,2863139508,ellipsis-dev[bot],COMMENTED,2025-05-23T04:39:23Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 0df8504f98de991e22d1f78863a2b904b374fcfe in <ellipsistime>42 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `35` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern/forge/agent.py:2113</code></summary>
> 
> - **Draft comment:** 
> The new block to fetch run schema data is clear. Consider renaming the variable (e.g. to `run_response_json`) for clarity, and ensure that using `task.task_id` as run_id is intended.
> - **Reason this comment was not posted:**
> Confidence changes required: `50%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>skyvern/forge/agent.py:2133</code></summary>
> 
> - **Draft comment:** 
> Consider adding error handling around the json.loads conversion of run_response JSON to guard against invalid JSON, even if it should normally be valid.
> - **Reason this comment was not posted:**
> Confidence changes required: `50%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_f7FIFmgn464lY0u1`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3127629424,2907854625,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-07T22:57:21Z,"## Pull Request Overview

This PR replaces the non-cryptographic RNG with `crypto/rand` for generating random strings, removes unused bitmasking constants, and adds a test ensuring output only uses allowed characters.

- Switch `unsafeRandString` to use `crypto/rand.Read` and a simple modulo mapping
- Remove old `math/rand` imports and unused mask constants
- Add a subtest to verify each character in the generated string is from `letterBytes`

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated 1 comment.

| File                  | Description                                                      |
|-----------------------|------------------------------------------------------------------|
| client/hooks.go       | Swapped out `math/rand` for `crypto/rand`, dropped mask logic, and simplified `unsafeRandString`. |
| client/hooks_test.go  | Added `valid characters` subtest to ensure only allowed chars are used. |


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**client/hooks.go:34**
* [nitpick] Panicking on a read error may be too aggressive for a library function—consider returning an error so callers can handle it gracefully.
```
if _, err := rand.Read(b); err != nil {
```
**client/hooks_test.go:46**
* The error branch of `rand.Read` (panic path) isn't covered by tests; consider injecting a failing reader or abstracting the reader to simulate and verify error handling.
```
t.Run(""valid characters"", func(t *testing.T) {
```
</details>

"
3127629424,2907855271,coderabbitai[bot],COMMENTED,2025-06-07T22:57:54Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>client/hooks.go (1)</summary><blockquote>

`34-40`: **Address modulo bias in random character selection.**

The current implementation introduces statistical bias because 256 (byte range) doesn't divide evenly by 62 (character set length). Some characters will be slightly more likely to appear than others.

Consider using rejection sampling for uniform distribution:

```diff
func unsafeRandString(n int) string {
	b := make([]byte, n)
-	if _, err := rand.Read(b); err != nil {
-		panic(fmt.Errorf(""failed to read random bytes: %w"", err))
-	}
-
-	for i := 0; i < n; i++ {
-		b[i] = letterBytes[int(b[i])%len(letterBytes)]
-	}
+	
+	for i := 0; i < n; i++ {
+		for {
+			var randomByte [1]byte
+			if _, err := rand.Read(randomByte[:]); err != nil {
+				panic(fmt.Errorf(""failed to read random bytes: %w"", err))
+			}
+			// Reject values that would cause bias
+			if randomByte[0] < 248 { // 248 = 62 * 4, largest multiple of 62 <= 255
+				b[i] = letterBytes[randomByte[0]%62]
+				break
+			}
+		}
+	}

	return utils.UnsafeString(b)
}
```

Alternatively, if perfect uniformity isn't critical for boundary generation, the current approach is acceptable and much simpler.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 GitHub Check: codecov/patch</summary>

[warning] 35-35: client/hooks.go#L35
Added line #L35 was not covered by tests

</details>

</details>

</blockquote></details>
<details>
<summary>client/hooks_test.go (1)</summary><blockquote>

`46-52`: **Good test addition for character set validation.**

The new subtest effectively verifies that all generated characters belong to the expected character set, which is important given the implementation change. The parallel execution is also appropriate.

Consider adding a test for the error handling path to improve coverage:

```go
t.Run(""crypto rand error handling"", func(t *testing.T) {
	// This would require mocking crypto/rand.Read to return an error
	// or testing in an environment where crypto/rand fails
	// The current panic behavior may be difficult to test directly
})
```

Note: The static analysis tool flagged that the panic path (line 35 in hooks.go) lacks test coverage.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between f00e35529c28ca7e3eedb3306665e3a51066ddce and 0467132ee600ad6fcb2d2a49045d94618b4e5a26.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `client/hooks.go` (2 hunks)
* `client/hooks_test.go` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 GitHub Check: codecov/patch</summary>

<details>
<summary>client/hooks.go</summary>

[warning] 35-35: client/hooks.go#L35
Added line #L35 was not covered by tests

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (3)</summary>

* GitHub Check: Compare
* GitHub Check: unit (1.24.x, windows-latest)
* GitHub Check: repeated

</details>

<details>
<summary>🔇 Additional comments (2)</summary><blockquote>

<details>
<summary>client/hooks.go (2)</summary>

`4-4`: **Excellent security improvement!**

Switching from `math/rand` to `crypto/rand` provides cryptographically secure randomness, which is much better for generating random boundaries and other security-sensitive values.

---

`28-28`: **Good cleanup of unused constants.**

Removing the bit manipulation constants simplifies the code since they're no longer needed with the new approach.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3127629424,2907870288,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-07T23:22:49Z,"## Pull Request Overview

This PR replaces insecure `math/rand` usage with `crypto/rand` for generating random strings, updates the helper to return errors, adjusts multipart-boundary logic to handle those errors, and enhances tests to verify character validity.

- Switched `unsafeRandString` implementation to use `crypto/rand` and updated its signature to return an error.
- Updated multipart boundary generation to handle potential errors from `unsafeRandString`.
- Adapted tests to expect an error return and added a new test to ensure only allowed characters are used.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated 1 comment.

| File                 | Description                                                                                   |
| -------------------- | --------------------------------------------------------------------------------------------- |
| client/hooks.go      | Replaced `math/rand` logic with `crypto/rand`, changed `unsafeRandString` to return an error, and added error handling in multipart boundary setup. |
| client/hooks_test.go | Modified tests to handle the new error return from `unsafeRandString` and added a character-set validation test. |


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**client/hooks.go:33**
* Update this doc comment to describe the function’s behavior, including its parameter (`n`), the returned random string, and the possible error condition.
```
// An error is returned if the random source fails.
```
**client/hooks.go:34**
* [nitpick] Since this function now uses a secure source and returns an error, consider renaming `unsafeRandString` to something like `secureRandString` or `randString` for clarity.
```
func unsafeRandString(n int) (string, error) {
```
</details>

"
3127629424,2907931219,sixcolors,APPROVED,2025-06-08T00:21:08Z,"The switch to `crypto/rand` isn't necessary for generating multipart boundaries, but it's fine. It avoids `gosec` warnings, adds negligible overhead. The function name is fine—""unsafe"" refers to the string conversion, not the randomness. Merge is reasonable unless performance is a concern.

Just needs full test coverage before merging.
"
3127629424,2908403615,ReneWerner87,APPROVED,2025-06-08T11:27:39Z,
3083630331,2861619575,Pwuts,COMMENTED,2025-05-22T15:07:43Z,This doesn't fix error cases. I have a better fix for this :)
3145585823,2927547798,gemini-code-assist[bot],COMMENTED,2025-06-14T06:50:45Z,"## Summary of Changes

Hello @voku, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request updates the project's changelog to document the changes introduced in the upcoming `6.0.14` release. It provides a summary of various bug fixes, PHP version compatibility improvements, and minor code cleanups.

### Highlights

* **Changelog Update**: Added a new entry for version `6.0.14` to the `CHANGELOG.md` file.
* **Compatibility & Fixes**: Documented changes related to PHP 8.4 compatibility, fixes for `UTF8::strcmp()` and `UTF8::substr_compare()`, and addressing PHP 8.2 deprecations.
* **Code Cleanup**: Included a note about removing an incorrect annotation from the `Bootup` class.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configureGemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3145585823,2927556584,gemini-code-assist[bot],COMMENTED,2025-06-14T06:52:03Z,"## Code Review

This pull request updates the `CHANGELOG.md` file to include changes for version 6.0.14. The new entries clearly document PHP compatibility updates, bug fixes for UTF8 methods, and a correction in the Bootup class. The overall formatting is good. A minor suggestion has been provided to enhance formatting consistency for optimal readability."
3145585823,2927559518,coderabbitai[bot],COMMENTED,2025-06-14T06:52:34Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>CHANGELOG.md (1)</summary><blockquote>

`3-3`: **Adjust heading level to maintain proper increment**  
Heading jumps from level 1 (`# Changelog`) to level 3 (`###`). Use a level 2 heading (`##`) to follow markdown heading increment rules.  
  
Apply this diff:
```diff
- ### 6.0.14 (2025-06-14)
+ ## 6.0.14 (2025-06-14)
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 markdownlint-cli2 (0.17.2)</summary>

3-3: Heading levels should only increment by one level at a time
Expected: h2; Actual: h3

(MD001, heading-increment)

</details>

</details>

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between c4b377468db50ba8e10ec01ac683271a0ab10c8f and f7e03f3d8ed8460113ba6e7f63ace9b54be1d436.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `CHANGELOG.md` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 LanguageTool</summary>

<details>
<summary>CHANGELOG.md</summary>

[uncategorized] ~6-~6: The correct spelling defined by the Internet Assigned Numbers Authority (IANA) is “UTF-8” or “utf-8”.
Context: ...ypes and resolved deprecations - fixed ""UTF8::strcmp()"" for negative values and olde...

(UTF_8_HYPHEN)

---

[uncategorized] ~7-~7: The correct spelling defined by the Internet Assigned Numbers Authority (IANA) is “UTF-8” or “utf-8”.
Context: ... values and older PHP versions - fixed ""UTF8::substr_compare()"" results across PHP v...

(UTF_8_HYPHEN)

</details>

</details>
<details>
<summary>🪛 markdownlint-cli2 (0.17.2)</summary>

<details>
<summary>CHANGELOG.md</summary>

3-3: Heading levels should only increment by one level at a time
Expected: h2; Actual: h3

(MD001, heading-increment)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (1)</summary>

* GitHub Check: Codacy Static Code Analysis

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>CHANGELOG.md (1)</summary>

`5-9`: **Document version 6.0.14 updates clearly**  
The new bullet points comprehensively describe compatibility improvements, bug fixes, and deprecation resolutions, aligning with the project's changelog style.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[uncategorized] ~6-~6: The correct spelling defined by the Internet Assigned Numbers Authority (IANA) is “UTF-8” or “utf-8”.
Context: ...ypes and resolved deprecations - fixed ""UTF8::strcmp()"" for negative values and olde...

(UTF_8_HYPHEN)

---

[uncategorized] ~7-~7: The correct spelling defined by the Internet Assigned Numbers Authority (IANA) is “UTF-8” or “utf-8”.
Context: ... values and older PHP versions - fixed ""UTF8::substr_compare()"" results across PHP v...

(UTF_8_HYPHEN)

</details>

</details>

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3098882419,2876871642,nektro,APPROVED,2025-05-29T02:28:02Z,
3121462246,2904750242,ChrisHuie,APPROVED,2025-06-06T12:17:43Z,
3084595474,2875549408,patmmccann,COMMENTED,2025-05-28T15:27:45Z,
3084595474,2876049422,patmmccann,COMMENTED,2025-05-28T18:28:29Z,
3070899170,2848338423,github-actions[bot],DISMISSED,2025-05-17T15:56:06Z,"The PR title does not conform to the '[\<Project\>] Title' format. Please update the PR title. 

 Typical [\<Project\>] values include: 

 * `[stdlib]` — indicates a change to the Mojo standard library code
 * `[docs]` — indicates a change to the documentation 

 It's okay to include multiple labels on a PR that affect multiple areas of work. 

 Thank you for contributing to Mojo!🔥 

 <small> You can also use a tool like www.regex101.com to see why your PR title fails to conform. Use ``` ^(Revert "")?(\[\S.*\]\s?)+\s+[a-zA-Z`].* ``` as the regex to test and ```Fix incorrect signpost names in EmbeddingsMetrics``` as the test string.</small>"
3135062402,2915266884,typpo,COMMENTED,2025-06-10T23:40:21Z,nice
3135062402,2915919733,coderabbitai[bot],COMMENTED,2025-06-11T07:11:11Z,"**Actionable comments posted: 2**

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>test/assertions/python.test.ts (1)</summary><blockquote>

`401-431`: **Solid coverage**

The test asserts both boolean mapping and nested `namedScores` conversion—nice work.

Minor nit: you can also assert that the legacy keys (`pass_`, `named_scores`) are *not* present to ensure the normalisation is complete, but that’s optional.

</blockquote></details>
<details>
<summary>examples/python-assert-external/assert.py (1)</summary><blockquote>

`19-43`: **Variable `result` is re-assigned—could confuse readers**

The example first defines `result` (simple dict) and immediately overwrites it with the richer one. Keeping only the final assignment will make the sample clearer:

```diff
-    result = {
-        ""pass"": ""bananas"" in output.lower(),
-        ""score"": 0.5,
-        ""reason"": ""Contains banana"",
-    }
-
-    # Or include nested assertions...
+    # Include nested assertions...
```

(or rename the first to `simple_result`).

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 5b3fcfb728c8a0c77acd28f6dbce69c80df3dcf7 and 973ee30d57db11b77c36ff135367d7c2ed53508f.

</details>

<details>
<summary>📒 Files selected for processing (4)</summary>

* `examples/python-assert-external/assert.py` (1 hunks)
* `site/docs/configuration/expected-outputs/python.md` (1 hunks)
* `src/assertions/python.ts` (2 hunks)
* `test/assertions/python.test.ts` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>📓 Path-based instructions (1)</summary>

<details>
<summary>`src/**`: - This is a CLI tool so errors need to be handled gracefully and logged with lots of information so the user can give us enough data to fix the issue or pass it to the de...</summary>

> `src/**`: - This is a CLI tool so errors need to be handled gracefully and logged with lots of information so the user can give us enough data to fix the issue or pass it to the developers.
> 

- `src/assertions/python.ts`

</details>

</details><details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>src/assertions/python.ts (1)</summary><blockquote>

<details>
<summary>src/types/index.ts (2)</summary>

* `isGradingResult` (390-405)
* `GradingResult` (354-388)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (4)</summary>

* GitHub Check: Redteam Custom Enterprise Server
* GitHub Check: Test on Node 24.x and macOS-latest
* GitHub Check: Test on Node 20.x and windows-latest
* GitHub Check: Test on Node 18.x and windows-latest

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>site/docs/configuration/expected-outputs/python.md (1)</summary>

`179-187`: **Great clarification—docs look good**

The tip cleanly explains the automatic mapping and will prevent confusion for Python users.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3071037378,2848390085,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-17T20:26:26Z,"## Pull Request Overview

This PR extends the Gmail integration by adding thread support, including new blocks for retrieving and replying to Gmail threads, and updates the relevant documentation.  
- Extended Gmail Read output to include threadId  
- Added Gmail Get Thread and Gmail Reply blocks with corresponding documentation updates  
- Fixed oauth scope for reply block and cleaned up imports

### Reviewed Changes

Copilot reviewed 3 out of 3 changed files in this pull request and generated 1 comment.

| File | Description |
| ---- | ----------- |
| docs/content/platform/blocks/google/gmail.md | Updated docs to include threadId in email output and added new sections for Gmail Get Thread and Gmail Reply blocks |
| docs/content/platform/blocks/blocks.md | Added entries for Gmail Get Thread and Gmail Reply blocks to the blocks list |
| autogpt_platform/backend/backend/blocks/google/gmail.py | Added threadId to Email schema and implemented GmailGetThreadBlock and GmailReplyBlock with attachment handling improvements |



"
3086669654,2869944559,Wauplin,COMMENTED,2025-05-27T07:32:46Z,"While the code is correct and does what we want, I don't find it more readable (it de-duplicates the `try/except/paths.unlink()` logic at the cost of one level of abstraction more)"
3070983547,2848449415,sourcery-ai[bot],COMMENTED,2025-05-17T23:11:33Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3070893488,2848336393,ellipsis-dev[bot],COMMENTED,2025-05-17T15:48:48Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to b30e48ae5b1122e43a7fd01db234f1eec2e88639 in <ellipsistime>40 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `168` lines of code in `2` files
> - Skipped `13` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>deploy/standalone-docker-compose.yaml:1</code></summary>
> 
> - **Draft comment:** 
> Cleaned up decorative headers (e.g. OPEN RESPONSES API, ENVIRONMENT VARS) to reduce clutter. Verify that essential documentation isn’t lost.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>documentation/guides/getting-started/create-and-execute-julep-task.mdx:66</code></summary>
> 
> - **Draft comment:** 
> Removed repetitive decorative comment sections (e.g. INPUT SCHEMA, TOOLS, MAIN WORKFLOW) from YAML code blocks for improved readability.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_FK1ddPrOMRFuMTB6`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3158165385,2940684837,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-18T21:07:44Z,"## Pull Request Overview

This PR adds a new CLI command to optimize autovacuum settings for PGQueuer tables and refactors the associated SQL builder functions.  
- Refactors autovac SQL builder into separate apply and rollback functions.  
- Integrates the new functions into the CLI command.  
- Adds tests and documentation for the new autovac command.

### Reviewed Changes

Copilot reviewed 5 out of 5 changed files in this pull request and generated 1 comment.

<details>
<summary>Show a summary per file</summary>

| File                         | Description                                                  |
| ---------------------------- | ------------------------------------------------------------ |
| test/test_cli_autovac.py     | Adds tests for the new ""autovac"" command and its rollback option. |
| pgqueuer/queries.py          | Introduces an async function to execute autovacuum optimization queries. |
| pgqueuer/qb.py               | Adds SQL builder functions for applying and rolling back autovacuum settings. |
| pgqueuer/cli.py              | Implements the CLI command ""autovac"" using the new SQL builders. |
| docs/cli.rst                 | Updates CLI documentation to include the new autovac command and available options. |
</details>



<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**pgqueuer/cli.py:535**
* To maintain consistency, consider reusing the DBSettings instance from 'qbe' (i.e., 'qbe.settings') instead of creating a new instance.
```
        async with yield_queries(ctx, qb.DBSettings()) as q:
```
</details>

"
3085487490,2869215232,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-26T22:45:38Z,"## Pull Request Overview

This pull request reorganizes the CONTRIBUTING.md file by moving its detailed guidance into a new developer documentation chapter and adds several new devdoc pages covering tests, patch releases, jldoctests, git workflow, formatting, documentation, and code changes.  
- Added new devdoc pages for tests, patch releases, jldoctests, git workflow, formatting, documentation, and code changes.  
- Updated the build configuration in doc/make.jl to include the new ""Contributor's Guide"" section.  
- Simplified the main CONTRIBUTING.md to reference the newly created developer documentation.

### Reviewed Changes

Copilot reviewed 9 out of 9 changed files in this pull request and generated no comments.

<details>
<summary>Show a summary per file</summary>

| File                                       | Description                                                            |
| ------------------------------------------ | ---------------------------------------------------------------------- |
| doc/src/devdocs/contributing/tests.md      | New guidelines on writing tests.                                       |
| doc/src/devdocs/contributing/patch-releases.md | New instructions on contributing to patch releases.                   |
| doc/src/devdocs/contributing/jldoctests.md | Detailed best practices for writing and maintaining jldoctests.         |
| doc/src/devdocs/contributing/git-workflow.md | Recommendations for using git effectively in pull requests.            |
| doc/src/devdocs/contributing/formatting.md | Code formatting guidelines for Julia and C contributions.              |
| doc/src/devdocs/contributing/documentation.md | Best practices for improving documentation and managing doctests.        |
| doc/src/devdocs/contributing/code-changes.md | Step-by-step guide on contributing code changes to core libraries.      |
| doc/make.jl                                | Updated to include the new ""Contributor's Guide"" and its file references. |
| CONTRIBUTING.md                            | Reorganized to point developers to the new detailed guidance pages.      |
</details>



<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**doc/make.jl:264**
* The file reference 'devdocs/contributing/jldoctest.md' appears to be inconsistent with the actual file name 'jldoctests.md'. Please update the reference to match the correct filename.
```
        ""devdocs/contributing/jldoctest.md"",
```
**CONTRIBUTING.md:66**
* The link for 'How to contribute additional tests' points to 'code-changes.md' but should likely reference 'tests.md' to align with the new devdoc structure.
```
- [How to contribute additional tests](https://github.com/JuliaLang/julia/blob/master/doc/src/devdocs/contributing/code-changes.md)
```
</details>

"
3085487490,2874917046,LilithHafner,COMMENTED,2025-05-28T13:08:27Z,"This is a good change. I like the new organization.

Is https://github.com/JuliaLang/julia/pull/58506/commits/d333d8c7926c2ccd0eeb9f9eb3846088bee7f180 just moving things & eliminating the TOC or should I also be reviewing changes within the chunks of docs that are moved?"
3085487490,2876645299,Keno,COMMENTED,2025-05-28T22:54:23Z,
3085487490,2876793484,Keno,COMMENTED,2025-05-29T01:18:02Z,
3110510715,2888787030,coderabbitai[bot],COMMENTED,2025-06-02T14:50:35Z,"**Actionable comments posted: 3**

<details>
<summary>🧹 Nitpick comments (3)</summary><blockquote>

<details>
<summary>mistralrs-core/src/pipeline/auto.rs (3)</summary><blockquote>

`41-66`: **Consider improving the API ergonomics**

The `new()` method has 7 parameters, which makes it less ergonomic to use. Consider grouping related parameters into structs or using a more granular builder pattern.

For example, you could create a config struct:

```rust
pub struct AutoLoaderConfig {
    pub normal_cfg: NormalSpecificConfig,
    pub vision_cfg: VisionSpecificConfig,
    pub chat_template: Option<String>,
    pub tokenizer_json: Option<String>,
    pub model_id: Option<String>,
    pub no_kv_cache: bool,
    pub jinja_explicit: Option<String>,
}

impl AutoLoaderBuilder {
    pub fn from_config(config: AutoLoaderConfig) -> Self {
        Self {
            normal_cfg: config.normal_cfg,
            vision_cfg: config.vision_cfg,
            // ... rest of the fields
        }
    }
}
```

---

`170-181`: **Improve error message for multiple architectures**

When multiple architectures are found, the error message could be more helpful by showing which architectures were detected.

```diff
 if cfg.architectures.len() != 1 {
-    anyhow::bail!(""Expected exactly one architecture in config"");
+    anyhow::bail!(""Expected exactly one architecture in config, found: {:?}"", cfg.architectures);
 }
```

---

`183-211`: **Consider more robust error handling in ensure_loader**

While the current implementation ensures the builders won't be None when accessed, using `expect()` could still panic in edge cases. Consider more defensive programming.

```diff
 let builder = self
     .normal_builder
     .lock()
     .unwrap()
     .take()
-    .expect(""builder taken"");
-let loader = builder.build(Some(tp)).expect(""build normal"");
+    .ok_or_else(|| anyhow::anyhow!(""Normal builder already consumed""))?;
+let loader = builder.build(Some(tp))?;
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 5fc5a1532cad8b598a1bec8533a08d3896a541d4 and 6f42cf5fbd90a562373b00e1ad56a0c8dd3b0bba.

</details>

<details>
<summary>📒 Files selected for processing (3)</summary>

* `mistralrs-core/src/lib.rs` (1 hunks)
* `mistralrs-core/src/pipeline/auto.rs` (1 hunks)
* `mistralrs-core/src/pipeline/mod.rs` (2 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (1)</summary>

* GitHub Check: Clippy

</details>

<details>
<summary>🔇 Additional comments (3)</summary><blockquote>

<details>
<summary>mistralrs-core/src/lib.rs (1)</summary>

`94-94`: **LGTM!**

The addition of `AutoLoader` and `AutoLoaderBuilder` to the public exports is consistent with the existing pattern and properly exposes the new auto-loading functionality.

</details>
<details>
<summary>mistralrs-core/src/pipeline/mod.rs (1)</summary>

`19-19`: **LGTM!**

The module declaration and public re-exports are properly integrated into the existing structure.



Also applies to: 64-64

</details>
<details>
<summary>mistralrs-core/src/pipeline/auto.rs (1)</summary>

`166-166`: <details>
<summary>❌ Incorrect review comment</summary>

**Verify the `api_get_file!` macro is properly imported**

The code uses `api_get_file!` macro which is not defined in this file. Please ensure this macro is properly imported or defined.

---

🏁 Script executed:

```shell
#!/bin/bash
# Description: Search for the api_get_file! macro definition
rg -A 5 ""macro_rules! api_get_file""
```

Length of output: 557

---



</details>

**The `api_get_file!` macro is already defined**  
The `api_get_file!` macro is declared in `mistralrs-core/src/pipeline/macros.rs`, so it’s available to the `pipeline` module and does not require any additional import.  


> Likely an incorrect or invalid review comment.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3110510715,2888855446,coderabbitai[bot],COMMENTED,2025-06-02T15:05:25Z,"**Actionable comments posted: 0**

<details>
<summary>♻️ Duplicate comments (3)</summary><blockquote>

<details>
<summary>mistralrs-core/src/pipeline/auto.rs (3)</summary><blockquote>

`70-82`: **Parameter shadowing in `with_xlora` method.**

The `no_kv_cache` parameter shadows the instance field, which can be confusing. This creates ambiguity in the API design.

---

`94-137`: **Improve error handling and efficiency in build method.**

The `build()` method uses `expect()` which will panic if `model_id` is None, and creates both normal and vision builders even though only one will be used.

---

`292-299`: **Potentially incorrect default behavior in get_kind().**

The `get_kind()` method returns `ModelKind::Normal` as a default when no loader is initialized. This might not be correct and could be misleading.

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>mistralrs-core/src/pipeline/auto.rs (1)</summary><blockquote>

`149-225`: **Helper methods are well-implemented with good error handling.**

The config reading, detection, and loader initialization logic is sound. The architecture validation and lazy initialization with thread safety are properly handled.

Minor suggestion: Consider using consistent error handling - line 219 could use `.expect(""build vision"")` for consistency with line 209.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 6f42cf5fbd90a562373b00e1ad56a0c8dd3b0bba and 301a84bf441aba93307cd6cf8f06fb098661431a.

</details>

<details>
<summary>📒 Files selected for processing (3)</summary>

* `mistralrs-core/src/lib.rs` (1 hunks)
* `mistralrs-core/src/pipeline/auto.rs` (1 hunks)
* `mistralrs-core/src/pipeline/mod.rs` (2 hunks)

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (2)</summary>

* mistralrs-core/src/lib.rs
* mistralrs-core/src/pipeline/mod.rs

</details>

<details>
<summary>🔇 Additional comments (6)</summary><blockquote>

<details>
<summary>mistralrs-core/src/pipeline/auto.rs (6)</summary>

`1-41`: **Well-structured imports and type definitions.**

The imports are comprehensive and the struct definitions follow good Rust practices with appropriate use of `Mutex` for thread safety in `AutoLoader` and a comprehensive builder pattern in `AutoLoaderBuilder`.

---

`43-68`: **Constructor method is well-implemented.**

The `new` method properly initializes all fields and the clippy suppression for too many arguments is justified for a builder constructor.

---

`84-92`: **Helper builder methods are correctly implemented.**

The `with_lora` and `hf_cache_path` methods properly follow the builder pattern with correct field assignment and method chaining.

---

`139-147`: **Helper types are well-designed.**

The `AutoConfig` struct and `Detected` enum are appropriately designed for their specific purposes in architecture detection.

---

`227-286`: **Load methods properly delegate after initialization.**

The `load_model_from_hf` and `load_model_from_path` methods correctly ensure the loader is initialized before delegating to the selected loader.

---

`288-290`: **get_id method is correctly implemented.**

Simple and correct implementation that returns the model ID.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3110510715,2889095506,coderabbitai[bot],COMMENTED,2025-06-02T16:09:20Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>mistralrs-core/src/model_loader.rs (1)</summary><blockquote>

`268-328`: **Consider reducing configuration duplication.**

The `AutoLoaderBuilder` construction duplicates several configuration values between normal and vision configs. While this works correctly, it could be refactored to reduce duplication.


Consider extracting common configuration fields to reduce duplication:

```diff
-            let builder = AutoLoaderBuilder::new(
-                NormalSpecificConfig {
-                    prompt_chunksize: args.prompt_chunksize,
-                    topology: Topology::from_option_path(topology.clone())?,
-                    organization: organization.unwrap_or_default(),
-                    write_uqff: write_uqff.clone(),
-                    from_uqff: from_uqff.clone().map(|x| {
-                        x.split(UQFF_MULTI_FILE_DELIMITER)
-                            .map(PathBuf::from_str)
-                            .map(|x| x.unwrap())
-                            .collect::<Vec<_>>()
-                    }),
-                    imatrix: imatrix.clone(),
-                    calibration_file: calibration_file.clone(),
-                    hf_cache_path: hf_cache_path.clone(),
-                },
-                VisionSpecificConfig {
-                    prompt_chunksize: args.prompt_chunksize,
-                    topology: Topology::from_option_path(topology)?,
-                    write_uqff,
-                    from_uqff: from_uqff.map(|x| {
-                        x.split(UQFF_MULTI_FILE_DELIMITER)
-                            .map(PathBuf::from_str)
-                            .map(|x| x.unwrap())
-                            .collect::<Vec<_>>()
-                    }),
-                    max_edge,
-                    calibration_file,
-                    imatrix,
-                    hf_cache_path: hf_cache_path.clone(),
-                },
+            let parsed_topology = Topology::from_option_path(topology)?;
+            let parsed_from_uqff = from_uqff.map(|x| {
+                x.split(UQFF_MULTI_FILE_DELIMITER)
+                    .map(PathBuf::from_str)
+                    .map(|x| x.unwrap())
+                    .collect::<Vec<_>>()
+            });
+            
+            let builder = AutoLoaderBuilder::new(
+                NormalSpecificConfig {
+                    prompt_chunksize: args.prompt_chunksize,
+                    topology: parsed_topology.clone(),
+                    organization: organization.unwrap_or_default(),
+                    write_uqff: write_uqff.clone(),
+                    from_uqff: parsed_from_uqff.clone(),
+                    imatrix: imatrix.clone(),
+                    calibration_file: calibration_file.clone(),
+                    hf_cache_path: hf_cache_path.clone(),
+                },
+                VisionSpecificConfig {
+                    prompt_chunksize: args.prompt_chunksize,
+                    topology: parsed_topology,
+                    write_uqff,
+                    from_uqff: parsed_from_uqff,
+                    max_edge,
+                    calibration_file,
+                    imatrix,
+                    hf_cache_path: hf_cache_path.clone(),
+                },
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 301a84bf441aba93307cd6cf8f06fb098661431a and 867cc365c0a12d3164f87adb2d0cf0f3f2b622b1.

</details>

<details>
<summary>📒 Files selected for processing (5)</summary>

* `mistralrs-core/src/model_loader.rs` (5 hunks)
* `mistralrs-core/src/model_selected.rs` (1 hunks)
* `mistralrs-core/src/pipeline/auto.rs` (1 hunks)
* `mistralrs-core/src/pipeline/loaders/mod.rs` (1 hunks)
* `mistralrs-core/src/pipeline/vision.rs` (1 hunks)

</details>

<details>
<summary>✅ Files skipped from review due to trivial changes (1)</summary>

* mistralrs-core/src/pipeline/loaders/mod.rs

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (1)</summary>

* mistralrs-core/src/pipeline/auto.rs

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: Docs
* GitHub Check: Check (macOS-latest, stable)
* GitHub Check: Test Suite (macOS-latest, stable)
* GitHub Check: Check (ubuntu-latest, stable)
* GitHub Check: Clippy
* GitHub Check: Test Suite (windows-latest, stable)
* GitHub Check: Test Suite (ubuntu-latest, stable)
* GitHub Check: Check (windows-latest, stable)

</details>

<details>
<summary>🔇 Additional comments (4)</summary><blockquote>

<details>
<summary>mistralrs-core/src/pipeline/vision.rs (1)</summary>

`281-284`: <details>
<summary>✅ Verification successful</summary>

**Verify the `maybe_promote_to_vision()` method implementation.**

The parameter promotion logic looks correct for supporting the auto loader functionality. This change ensures that when auto device mapping is used with a vision model, text parameters are properly converted to vision parameters.



Verify that the `maybe_promote_to_vision()` method properly handles all parameter conversion cases:

---

🏁 Script executed:

```shell
#!/bin/bash
# Description: Find and examine the implementation of maybe_promote_to_vision method

# Search for the method definition
ast-grep --pattern 'fn maybe_promote_to_vision($$$) {
  $$$
}'

# Also search with ripgrep for context
rg -A 10 ""fn maybe_promote_to_vision""
```

Length of output: 969

---

🏁 Script executed:

```shell
#!/bin/bash
# Extract complete implementation of maybe_promote_to_vision from the loader module
rg -n -A 20 -B 5 ""pub fn maybe_promote_to_vision"" mistralrs-core/src/pipeline/loaders/mod.rs
```

Length of output: 968

---

🏁 Script executed:

```shell
#!/bin/bash
# Extract the definition of AutoDeviceMapParams enum to verify all variants
rg -n -A 20 ""enum AutoDeviceMapParams"" mistralrs-core/src/pipeline/loaders/mod.rs
```

Length of output: 677

---



</details>

**Verified `maybe_promote_to_vision()` implementation**

The `maybe_promote_to_vision()` method in `mistralrs-core/src/pipeline/loaders/mod.rs` correctly handles both variants of `AutoDeviceMapParams`:

- For `Text { max_seq_len, max_batch_size }`, it returns a `Vision` variant with those values plus the default image shape and image count.
- For `Vision { … }`, it returns itself unchanged.

No further action is needed.

</details>
<details>
<summary>mistralrs-core/src/model_selected.rs (1)</summary>

`39-104`: **Well-designed `Run` variant for auto loader functionality.**

The new variant effectively combines parameters for both text and vision models, enabling the auto loader to handle either type based on model configuration. The documentation is clear and the default values are appropriate.

</details>
<details>
<summary>mistralrs-core/src/model_loader.rs (2)</summary>

`12-19`: **LGTM!**

The import changes correctly include the new `AutoLoaderBuilder` type needed for the auto loader functionality.

---

`167-190`: **Smart parameter detection logic for auto device mapping.**

The implementation intelligently determines whether to use vision or text parameters based on the presence of `max_num_images` or `max_image_length`. This enables the auto loader to work seamlessly with both model types.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3110510715,2890193487,coderabbitai[bot],COMMENTED,2025-06-02T23:32:13Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (3)</summary><blockquote>

<details>
<summary>README.md (3)</summary><blockquote>

`80-83`: **Add language specification to fenced code block for Llama 3 examples.**

The code block for Llama 3.1/3.2/3.3 is missing a language identifier, which affects syntax highlighting. Please update the opening fence to specify `bash`.

```diff
-    ```
+    ```bash
     ./mistralrs-server -i --isq 8 run -m meta-llama/Llama-3.2-3B-Instruct
     ```
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 markdownlint-cli2 (0.17.2)</summary>

80-80: Fenced code blocks should have a language specified
null

(MD040, fenced-code-language)

</details>

</details>

---

`86-89`: **Add language specification to fenced code block for Llama 3.2 vision examples.**

The code block for Llama 3.2 vision is missing a language identifier. Please update the opening fence to `bash` for proper highlighting.

```diff
-    ```
+    ```bash
     ./mistralrs-server -i --isq 8 run -m meta-llama/Llama-3.2-11B-Vision-Instruct
     ```
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 markdownlint-cli2 (0.17.2)</summary>

86-86: Fenced code blocks should have a language specified
null

(MD040, fenced-code-language)

</details>

</details>

---

`278-281`: **Add language specification to fenced code block in Getting models section.**

The local model loading example is missing a language tag. Update the fence to `bash` to enable syntax highlighting:

```diff
-      ```
+      ```bash
       ./mistralrs-server -i run -m path/to/model
      ```
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 markdownlint-cli2 (0.17.2)</summary>

278-278: Fenced code blocks should have a language specified
null

(MD040, fenced-code-language)

</details>

</details>

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 867cc365c0a12d3164f87adb2d0cf0f3f2b622b1 and 6baf9dbd35efe6bc9828d54149b9e1ffcf016f00.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `README.md` (8 hunks)
* `mistralrs-core/src/model_selected.rs` (2 hunks)

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (1)</summary>

* mistralrs-core/src/model_selected.rs

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 markdownlint-cli2 (0.17.2)</summary>

<details>
<summary>README.md</summary>

80-80: Fenced code blocks should have a language specified
null

(MD040, fenced-code-language)

---

86-86: Fenced code blocks should have a language specified
null

(MD040, fenced-code-language)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: Docs
* GitHub Check: Test Suite (ubuntu-latest, stable)
* GitHub Check: Test Suite (macOS-latest, stable)
* GitHub Check: Check (windows-latest, stable)
* GitHub Check: Test Suite (windows-latest, stable)

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3142362504,2923534073,coderabbitai[bot],COMMENTED,2025-06-13T06:16:09Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (3)</summary><blockquote>

<details>
<summary>test/util/tokenUsage.test.ts (3)</summary><blockquote>

`7-14`: **Redundant state-clearing in beforeEach / afterEach**

`beforeEach` already calls `resetAllUsage()`, while `afterEach` calls `cleanup()` which also clears the map.  Clearing twice isn’t harmful, but it is unnecessary noise and may hide future regressions if the semantics of either method change.  Keep a single, clearly-defined reset point.

```diff
-  beforeEach(() => {
-    tracker = TokenUsageTracker.getInstance();
-    tracker.resetAllUsage();
-  });
-
-  afterEach(() => {
-    tracker.cleanup();
-  });
+  beforeEach(() => {
+    tracker = TokenUsageTracker.getInstance();
+    tracker.resetAllUsage();   // single source of truth
+  });
```

---

`4-10`: **Singleton tracker may bleed state across parallel Jest workers**

`TokenUsageTracker` is a global singleton; other test suites executed in parallel workers could obtain the same instance and interfere with these expectations.  Consider:

1. Exposing a `resetInstance()` helper on the class solely for test environments, or  
2. Mocking the module in this test to guarantee isolation.

Please verify no other test files rely on `TokenUsageTracker` concurrently.

---

`110-115`: **Order-dependent assertion on provider IDs**

`expect(tracker.getProviderIds()).toEqual(['provider1', 'provider2']);` presumes insertion order.  While `Map` iteration order is stable, the test intent is to validate presence, not ordering.  Avoid brittle ordering checks:

```diff
-expect(tracker.getProviderIds()).toEqual(['provider1', 'provider2']);
+expect(new Set(tracker.getProviderIds())).toEqual(new Set(['provider1', 'provider2']));
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between af75f74ba965431ea41a2c015d7166b50ef41550 and 63f2830a7b98648f3a79aaf27a9173e7f4a42de2.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `src/util/tokenUsage.ts` (0 hunks)
* `test/util/tokenUsage.test.ts` (1 hunks)

</details>

<details>
<summary>💤 Files with no reviewable changes (1)</summary>

* src/util/tokenUsage.ts

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>test/util/tokenUsage.test.ts (2)</summary><blockquote>

<details>
<summary>src/util/tokenUsage.ts (1)</summary>

* `TokenUsageTracker` (7-176)

</details>
<details>
<summary>src/types/shared.ts (1)</summary>

* `TokenUsage` (48-48)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (21)</summary>

* GitHub Check: Redteam Custom Enterprise Server
* GitHub Check: Share Test
* GitHub Check: Test on Node 24.x and macOS-latest
* GitHub Check: Test on Node 20.x and windows-latest
* GitHub Check: Test on Node 20.x and ubuntu-latest
* GitHub Check: Test on Node 22.x and macOS-latest
* GitHub Check: Test on Node 24.x and ubuntu-latest
* GitHub Check: Test on Node 18.x and macOS-latest
* GitHub Check: Test on Node 20.x and macOS-latest
* GitHub Check: Test on Node 22.x and ubuntu-latest
* GitHub Check: Test on Node 18.x and windows-latest
* GitHub Check: Test on Node 18.x and ubuntu-latest
* GitHub Check: Redteam
* GitHub Check: webui tests
* GitHub Check: Build on Node 20.x
* GitHub Check: Build on Node 24.x
* GitHub Check: Build Docs
* GitHub Check: Build on Node 22.x
* GitHub Check: Style Check
* GitHub Check: Build on Node 18.x
* GitHub Check: Analyze (javascript-typescript)

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>test/util/tokenUsage.test.ts (1)</summary>

`47-108`: **Comprehensive merge-usage test looks solid**

The test exercises every field and correctly verifies cumulative sums.  Nice coverage!

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3143271139,2924497306,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-13T11:31:58Z,"## Pull Request Overview

This PR adds diagnostics support by extending language server initialization parameters, implementing both asynchronous and synchronous `request_diagnostics` methods, introducing a `DiagnosticsTool` in Serena, and updating tests and configuration to cover and disable this tool where appropriate.

- Add `DiagnosticsTool` to Serena and disable it in the IDE-assistant context  
- Implement `request_diagnostics` (async and sync) in `SyncLanguageServer` with caching  
- Update Pyright, Intelephense, and gopls initialization params and add tests for diagnostics

### Reviewed Changes

Copilot reviewed 8 out of 8 changed files in this pull request and generated 3 comments.

<details>
<summary>Show a summary per file</summary>

| File                                                               | Description                                                             |
| ------------------------------------------------------------------ | ----------------------------------------------------------------------- |
| test/serena/test_serena_agent.py                                   | Added `test_diagnostics_tool` and updated imports to include `DiagnosticsTool`. |
| test/multilspy/test_diagnostics.py                                 | Added tests for `request_diagnostics` across all supported languages.   |
| src/serena/resources/config/contexts/ide-assistant.yml             | Disabled the diagnostics tool in the IDE-assistant context.             |
| src/serena/agent.py                                                | Introduced `DiagnosticsTool` for retrieving file diagnostics.           |
| src/multilspy/language_servers/pyright_language_server/pyright_server.py   | Added client capability entries for diagnostics in Pyright init params. |
| src/multilspy/language_servers/intelephense/initialize_params.json  | Added workspace diagnostics capability for Intelephense.                |
| src/multilspy/language_servers/gopls/initialize_params.json         | Added workspace diagnostics capability for gopls.                       |
| src/multilspy/language_server.py                                   | Implemented async and sync `request_diagnostics` methods with caching.  |
</details>



<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**test/serena/test_serena_agent.py:249**
* Missing import for the json module. Please add `import json` at the top of the file so `json.loads` is available.
```
diags = json.loads(result)
```
</details>

"
3165407169,2947973777,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-21T20:40:56Z,"## Pull Request Overview

This PR improves the plugin’s duplicate detection by adding a new function to count installed modules and aborting load if duplicates are detected, while also adding user-facing error messages with translations.  
- Added count_modules() to detect duplicate module installations  
- Logged error and showed a message box when duplicates are found  
- Introduced translation entries for the duplicate detection error message in multiple locale files

### Reviewed Changes

Copilot reviewed 14 out of 14 changed files in this pull request and generated no comments.

| File                       | Description                                                           |
| -------------------------- | --------------------------------------------------------------------- |
| src/plugin-main.cpp        | Adds count_modules() and duplicate detection logic in module loader.  |
| data/locale/*.ini          | Adds new error message keys for duplicate detection across locales.   |


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**data/locale/zh-CN.ini:71**
* The error title and message for duplicate detection remain in English in the zh-CN locale. Please provide a proper Chinese translation to match the rest of the localized content; similar updates should be made in other non-English locale files if applicable.
```
NDIPlugin.ErrorAnotherDistroAVDetected.Title=""Another DistroAV Detected""
```
</details>

"
3077764769,2855070636,github-advanced-security[bot],COMMENTED,2025-05-20T17:39:46Z,
3077764769,2855074230,ellipsis-dev[bot],COMMENTED,2025-05-20T17:40:54Z,"> [!CAUTION]
> **Changes requested  :x:**
> <details>
> <summary>Reviewed everything up to 1ffff0fa1019b3db43f15c8472c36dfe5dfafee9 in <ellipsistime>2 minutes and 45 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `2498` lines of code in `8` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern/cli/init_command.py:203</code></summary>
> 
> - **Draft comment:** 
> Avoid using exit(1) in library code; consider raising an exception instead for better error handling.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 20% vs. threshold = 50% This is a CLI command, not a library function that would be imported elsewhere. The function is part of the init command flow and using exit() is actually appropriate here since it's a CLI tool. Raising an exception would just result in an ugly stack trace instead of the clean error message currently shown. The current implementation provides better UX with clear error messages. The comment makes a valid general point about library code best practices. Maybe this function could be reused elsewhere in the future where an exception would be better. While exceptions are generally better for library code, this is explicitly CLI code where exit() with a clean error message provides better UX. The function is not meant to be reused as a library. The comment should be deleted as the current implementation with exit(1) is appropriate for CLI code and provides better user experience.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>skyvern/cli/run_command.py:580</code></summary>
> 
> - **Draft comment:** 
> Using shell=True can be risky if inputs are unsanitized; ensure commands passed to run_command() are safe.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_NoXqIP7JrenTjtin`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3070177269,2848368066,pierremtb,APPROVED,2025-05-17T18:20:35Z,Ty!
3151661777,2933820317,wispbit-ai[bot],COMMENTED,2025-06-17T00:21:25Z,
3151661777,2933820328,wispbit-ai[bot],COMMENTED,2025-06-17T00:21:25Z,
3151661777,2933820335,wispbit-ai[bot],COMMENTED,2025-06-17T00:21:26Z,
3165162777,2947793417,obi1kenobi,COMMENTED,2025-06-21T15:22:25Z,
3119154707,2899653304,dpschen,COMMENTED,2025-06-05T09:54:13Z,
3119154707,2899662573,dpschen,COMMENTED,2025-06-05T09:56:51Z,
3119154707,2899668686,dpschen,COMMENTED,2025-06-05T09:58:39Z,
3119154707,2899672293,dpschen,COMMENTED,2025-06-05T09:59:55Z,
3119154707,2899681137,dpschen,COMMENTED,2025-06-05T10:03:05Z,
3119154707,2900383186,kolaente,COMMENTED,2025-06-05T13:38:57Z,
3119154707,2900473144,dpschen,COMMENTED,2025-06-05T13:59:54Z,
3071039778,2855581760,davoclavo,COMMENTED,2025-05-20T21:00:14Z,
3071039778,2855594968,davoclavo,COMMENTED,2025-05-20T21:06:12Z,
3076965582,2854123350,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-20T13:10:02Z,"## Pull Request Overview

This pull request addresses the issue of handling default context pages when none are open.  
- Introduces a conditional check to determine if a page exists in the context.  
- If no pages exist, a new page is created via await context.new_page().



"
3076965582,2854126786,unclecode,COMMENTED,2025-05-20T13:11:05Z,
3075996792,2853026504,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-20T07:33:54Z,"## Pull Request Overview

This PR updates the AGENTS guidelines to clarify Codex contribution instructions, removes the reference to test.sh in favor of using ./gradlew build, and adds additional developer documentation including the Developer Guide, AI note, and translation policy.  
- Updated AGENTS.md with clear contribution instructions and testing guidelines  
- Minor formatting and reordering changes in several test and service files for readability  
- Updated CsvSource annotations and logging call formatting for improved consistency

### Reviewed Changes

Copilot reviewed 6 out of 6 changed files in this pull request and generated no comments.

<details>
<summary>Show a summary per file</summary>

| File | Description |
| ---- | ----------- |
| src/test/java/stirling/software/SPDF/utils/PDFToFileTest.java | Reordered import statements and formatted try blocks for readability. |
| src/test/java/stirling/software/SPDF/utils/CustomHtmlSanitizerTest.java | Adjusted array formatting for HTML sanitization test cases. |
| src/test/java/stirling/software/SPDF/service/SpyPDFDocumentFactory.java | Reformatted enum declaration and adjusted import ordering. |
| src/test/java/stirling/software/SPDF/service/CustomPDFDocumentFactoryTest.java | Consolidated CsvSource annotations and improved test formatting. |
| src/main/java/stirling/software/SPDF/EE/KeygenLicenseVerifier.java | Applied multi-line formatting to HTTP request and logging calls for better clarity. |
| AGENTS.md | Introduced new contribution guidelines and testing instructions. |
</details>




"
3075996792,2853658494,reecebrowne,APPROVED,2025-05-20T10:38:17Z,
3075996792,2853672366,Ludy87,APPROVED,2025-05-20T10:43:16Z,
3134916970,2915366630,damemi,COMMENTED,2025-06-11T01:09:19Z,
3070954603,2848359762,ellipsis-dev[bot],COMMENTED,2025-05-17T17:34:59Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 10e24ef27be63e094fe2c0df4a7d0bf23bb05233 in <ellipsistime>1 minute and 26 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `264` lines of code in `6` files
> - Skipped `0` files when reviewing.
> - Skipped posting `7` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>agents-api/agents_api/activities/task_steps/prompt_step.py:87</code></summary>
> 
> - **Draft comment:** 
> Consider handling unsupported tool types explicitly (e.g., by raising a NotImplementedError) rather than silently returning the default formatted output. This will help catch unexpected cases and improve maintainability.
> - **Reason this comment was not posted:**
> Confidence changes required: `50%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>agents-api/agents_api/routers/files/create_file.py:18</code></summary>
> 
> - **Draft comment:** 
> Consider converting _iter_decoded into an asynchronous generator. If the async_s3.put_object expects an async iterator, using an async generator would avoid potential blocking issues.
> - **Reason this comment was not posted:**
> Confidence changes required: `50%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>agents-api/tests/test_file_streaming.py:10</code></summary>
> 
> - **Draft comment:** 
> The test references a 's3_client' parameter which is not defined within the file or imported as a fixture. Ensure that a proper s3_client fixture is provided to prevent runtime NameError.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 10% vs. threshold = 50% Ward is a Python test framework that supports fixtures. While s3_client isn't visibly imported, it's very likely defined as a fixture in a conftest.py or similar shared test file. This is a common pattern in Python testing. The syntax suggests this is intentional fixture usage rather than an error. I could be wrong about ward's fixture system - maybe it doesn't work like pytest. Maybe this really is an undefined variable that would cause errors. Ward's documentation confirms it supports pytest-style fixtures. The s3_client=s3_client syntax is intentional fixture usage, not an error. This comment should be deleted as it misunderstands how test fixtures work in ward/pytest style testing. The code is correct as written.
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>agents-api/agents_api/routers/files/list_files.py:22</code></summary>
> 
> - **Draft comment:** 
> Consider fetching file contents concurrently (e.g., by using asyncio.gather) instead of sequentially awaiting each file content retrieval. This can improve performance when listing many files.
> - **Reason this comment was not posted:**
> Confidence changes required: `50%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>agents-api/agents_api/routers/files/get_file.py:24</code></summary>
> 
> - **Draft comment:** 
> While streaming chunks and accumulating them in a bytearray helps avoid reading the entire file at once, the final base64-encoded string is built in memory. For very large files, consider streaming the encoded response directly to the client if possible.
> - **Reason this comment was not posted:**
> Confidence changes required: `50%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>6. <code>agents-api/tests/test_format_tool.py:11</code></summary>
> 
> - **Draft comment:** 
> Test function names are all '_' which could reduce clarity in test reports. Consider using unique and descriptive function names to better identify tests when they run.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>7. <code>agents-api/agents_api/activities/task_steps/prompt_step.py:9</code></summary>
> 
> - **Draft comment:** 
> Typo: ""dont"" should be ""don't"".
> - **Reason this comment was not posted:**
> Comment was on unchanged code.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_LcsQLvJgQXcjUS9S`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3070954603,2848361555,qodo-merge-for-open-source[bot],COMMENTED,2025-05-17T17:44:56Z,
3070954603,2848361676,qodo-merge-for-open-source[bot],COMMENTED,2025-05-17T17:45:28Z,
3151832862,2933956696,greptile-apps[bot],COMMENTED,2025-06-17T02:25:04Z,"
## PR Summary
Fixed a critical Python mutable default argument bug in `StateProxy` class initialization by replacing `path: List[str] = []` with `path: Optional[List[str]] | None = None` and proper default handling.

- Changed `python/assistant-stream/src/assistant_stream/state_proxy.py` to use `path or []` pattern to prevent shared mutable state between class instances
- Added proper Optional type annotations for improved type safety
- Note: Test failure appears unrelated to code changes and is due to missing `langchain_core` dependency in test environment

<sub>1 file reviewed, 3 comments</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=assistant-ui_2118)</sub>"
3151832862,2933957516,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-17T02:25:13Z,"## Pull Request Overview

Refactors `StateProxy.__init__` to remove a mutable default argument and updates typing imports.

- Added `Optional` to typing imports  
- Changed `path` default from `[]` to `None` and initialize to an empty list  
- Adjusted `__init__` signature formatting



"
3151832862,2933958713,cubic-dev-ai[bot],COMMENTED,2025-06-17T02:26:13Z,cubic reviewed 1 file and found no issues. Review PR in [cubic.dev](https://cubic.dev/pr/assistant-ui/assistant-ui/pull/2118).
3151832862,2933963428,coderabbitai[bot],COMMENTED,2025-06-17T02:30:42Z,"**Actionable comments posted: 1**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between e3ad91c733ca97b35171c6f875533266a33a6bbb and a92b771f8836a1ac6c89110cb19b8a14d3f6eb41.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `python/assistant-stream/src/assistant_stream/state_proxy.py` (2 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (2)</summary>

* GitHub Check: cubic · AI code reviewer
* GitHub Check: Analyze (javascript-typescript)

</details>

<details>
<summary>🔇 Additional comments (2)</summary><blockquote>

<details>
<summary>python/assistant-stream/src/assistant_stream/state_proxy.py (2)</summary>

`1-1`: **Import change looks good**

Adding `Optional` completes the type-hint dependencies required by the new constructor signature.

---

`22-26`: ```shell
#!/bin/bash
# Locate packaging/metadata files
find . -type f \( -name ""setup.py"" -o -name ""setup.cfg"" -o -name ""pyproject.toml"" -o -name ""poetry.lock"" \)

# Search for Python version declarations in project files
grep -R ""python_requires"" -n .
grep -R ""requires-python"" -n .
grep -R ""Programming Language :: Python :: 3"" -n .

# Inspect CI matrix for Python versions
grep -R ""actions/setup-python"" -n .github/workflows
```

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3134498870,2915173724,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-10T22:24:22Z,"## Pull Request Overview

This PR updates the lists of submodules to bring the real-time data (RTD) and ID systems in sync with current requirements.  
- Repositions and reorders several submodule entries in the userId list.  
- Adjusts the RTD providers list by adding new providers and reordering existing ones.



"
3134498870,2915361262,ChrisHuie,APPROVED,2025-06-11T01:03:28Z,
3134498870,2915387686,patmmccann,COMMENTED,2025-06-11T01:29:25Z,
3080537200,2858092408,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-21T15:01:28Z,"## Pull Request Overview

Adds experimental TPU support to device inference and updates related tests and dependencies.

- Enhances `infer_device_and_type` to detect TPU via `torch_xla` when available and handle explicit `""tpu""`/`""xla""` requests
- Adds tests for auto and explicit TPU inference cases
- Updates project extras in `pyproject.toml` and adjusts `typing.cast` invocations

### Reviewed Changes

Copilot reviewed 3 out of 3 changed files in this pull request and generated 1 comment.

| File                     | Description                                          |
| ------------------------ | ---------------------------------------------------- |
| src/tabpfn/utils.py      | Added `importlib.util`, expanded TPU detection logic, updated `typing.cast` calls |
| tests/test_utils.py      | New tests for `infer_device_and_type` behavior       |
| pyproject.toml           | Introduced `tpu` extra for `torch_xla` dependency    |


<details>
<summary>Comments suppressed due to low confidence (5)</summary>

**tests/test_utils.py:44**
* Add a complementary test where `torch.cuda.is_available()` returns `True` to verify that `infer_device_and_type('auto')` correctly selects a CUDA device.
```
def test_infer_device_auto_defaults_to_cpu_when_no_accelerator(monkeypatch):
```
**src/tabpfn/utils.py:72**
* `typing.cast` first argument should be the actual type object, not a string literal. Change to `typing.cast(typing.Any, model.executor_)` for correct type hinting.
```
executor = typing.cast(""typing.Any"", model.executor_)
```
**src/tabpfn/utils.py:80**
* The `typing.cast` target should be the actual type (e.g. `dict[str, torch.Tensor]`) rather than a string. Use `typing.cast(dict[str, torch.Tensor], output)` to preserve static analysis.
```
output_dict = typing.cast(""dict[str, torch.Tensor]"", output)
```
**src/tabpfn/utils.py:461**
* Replace the string literal in `typing.cast` with the actual numpy type: `typing.cast(np.ndarray, result)`, so the cast works correctly in type checking.
```
return typing.cast(""np.ndarray"", result)
```
**src/tabpfn/utils.py:755**
* Use the real `typing.Any` type in `typing.cast` instead of a string: `typing.cast(typing.Any, ctypes).windll` to adhere to typing API expectations.
```
windll = typing.cast(""typing.Any"", ctypes).windll
```
</details>

"
3087466454,2875593967,ChrisHuie,APPROVED,2025-05-28T15:41:17Z,
3131500263,2911402435,fredyshox,APPROVED,2025-06-09T21:23:22Z,
3157127873,2939528681,coderabbitai[bot],COMMENTED,2025-06-18T14:40:42Z,"**Actionable comments posted: 1**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>README.md (1)</summary><blockquote>

`138-141`: **Clarify where to set the environment variable in GitHub UI.**  
Point users to the exact Settings location to avoid confusion when enabling the workflow.

```diff
 ### Publishing Config
-Set a repository environment variable called `KILN_CONFIG_REPO` to `true` to enable the `publish_remote_config.yml` workflow. Forks that do not set this variable will skip publishing.
+Set a repository-level Actions variable named `KILN_CONFIG_REPO` to `true` in **Settings → Actions → Variables** to enable the `publish_remote_config.yml` workflow. Forks without this variable will skip publishing.
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between f43557109e49dce0ad18bf7bf0f73efdfa75f263 and 9bd4487f2ed3500cc1953a821c6a8fc290529036.

</details>

<details>
<summary>📒 Files selected for processing (3)</summary>

* `.github/workflows/build_docs.yml` (1 hunks)
* `.github/workflows/publish_remote_config.yml` (1 hunks)
* `README.md` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 actionlint (1.7.7)</summary>

<details>
<summary>.github/workflows/publish_remote_config.yml</summary>

10-10: context ""env"" is not allowed here. available contexts are ""github"", ""inputs"", ""needs"", ""vars"". see https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability for more details

(expression)

---

18-18: context ""env"" is not allowed here. available contexts are ""github"", ""inputs"", ""needs"", ""vars"". see https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability for more details

(expression)

</details>
<details>
<summary>.github/workflows/build_docs.yml</summary>

54-54: context ""env"" is not allowed here. available contexts are ""github"", ""inputs"", ""needs"", ""vars"". see https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability for more details

(expression)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (6)</summary>

* GitHub Check: Web UI Code Format, Lint, Typecheck, Test, and Build
* GitHub Check: Build Desktop Apps (macos-13)
* GitHub Check: Build Desktop Apps (windows-latest)
* GitHub Check: Build Desktop Apps (macos-latest)
* GitHub Check: Build Desktop Apps (ubuntu-22.04-arm)
* GitHub Check: Build Desktop Apps (ubuntu-22.04)

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>.github/workflows/build_docs.yml (1)</summary>

`54-54`: **Fix the `if` expression syntax for job-level conditions.**  
The `if` condition must be wrapped in `${{ }}` to correctly reference the `env` context and satisfy Actionlint. Without it, the workflow will fail to parse.

```diff
-if: env.KILN_CONFIG_REPO != 'true'
+if: ${{ env.KILN_CONFIG_REPO != 'true' }}
```



> Likely an incorrect or invalid review comment.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3131512724,2911392204,ellipsis-dev[bot],COMMENTED,2025-06-09T21:17:28Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 135cce399a98dab2717a851f15e3784ce1091fc2 in <ellipsistime>37 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `14` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `1` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/onlook-dev/settings/code-review) and [rules](https://app.ellipsis.dev/onlook-dev/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>apps/web/client/src/app/project/[id]/_components/right-panel/chat-tab/code-change-display/collapsible-code-block.tsx:141</code></summary>
> 
> - **Draft comment:** 
> Good change. Removing forceMount should improve performance by unmounting heavy CodeMirror instances when collapsed. Please verify that re-mounting the CodeBlock on expand does not introduce noticeable delays or unexpected state resets (if any state needs persistence).
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment is asking the PR author to verify the behavior of their change, which violates the rule against asking for confirmation or verification. It does not provide a specific suggestion or point out a specific issue with the code.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_lJose4luXMDQRqRu`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=onlook-dev%2Fonlook&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/onlook-dev/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/onlook-dev/code-review/rules).</sup>"
3164989143,2947732559,devgony,APPROVED,2025-06-21T10:42:55Z,
3092761901,2869863327,ellipsis-dev[bot],COMMENTED,2025-05-27T07:07:37Z,
3092761901,2869869086,sourcery-ai[bot],COMMENTED,2025-05-27T07:09:13Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟡 **General issues**: 1 issue found
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3127377495,2907678775,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-07T18:55:32Z,"## Pull Request Overview

This PR enables Docker BuildKit caching via GitHub Actions to improve build performance. Key changes include adding a new Buildx setup step, configuring cache parameters for the docker/build-push-action, and documenting the change in a new changeset file.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated no comments.

| File                                   | Description                                               |
| -------------------------------------- | --------------------------------------------------------- |
| .github/workflows/docker.yml           | Added a Buildx setup step and configured caching options. |
| .changeset/docker-build-cache.md       | Documented the BuildKit caching improvement.              |



"
3133069113,2912969163,coderabbitai[bot],COMMENTED,2025-06-10T10:44:20Z,"**Actionable comments posted: 2**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 58b719c43db8e0fe2e2279aebac75b44958a6093 and d5a4cf5506aa50d81124e506c41a872ca46a5b02.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `src/main.cpp` (2 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (12)</summary>

* GitHub Check: build (macchina-a0)
* GitHub Check: build (esp32s3-cdc)
* GitHub Check: build (esp32-verbose)
* GitHub Check: build (m5stickc)
* GitHub Check: build (esp32c3)
* GitHub Check: build (m5atom)
* GitHub Check: build (esp32)
* GitHub Check: build (esp32s3-verbose)
* GitHub Check: build (esp32c3-verbose)
* GitHub Check: build (m5stickc-plus)
* GitHub Check: build (esp32c3-cdc)
* GitHub Check: build (esp32s3)

</details>

<details>
<summary>🔇 Additional comments (2)</summary><blockquote>

<details>
<summary>src/main.cpp (2)</summary>

`123-124`: **Good implementation of configuration-driven feature toggling.**

The changes successfully implement the ability to disable telemetry and device reporting based on configuration settings, which aligns with the PR objectives. The approach using early returns is clean and maintains backward compatibility.




Also applies to: 380-381, 389-390

---

`123-124`: <details>
<summary>✅ Verification successful</summary>

**Verify the configuration variables are properly declared.**

The `publishTele` and `publishDevices` variables are used but their declarations are not visible in this file. Ensure these global variables are properly declared in the included header files.





Also applies to: 380-381, 389-390

---

🏁 Script executed:

```shell
#!/bin/bash
# Description: Verify publishTele and publishDevices variable declarations
# Expected: Find variable declarations in header files

echo ""Searching for publishTele variable declaration:""
rg -A 2 -B 2 ""publishTele"" --type h

echo -e ""\nSearching for publishDevices variable declaration:""
rg -A 2 -B 2 ""publishDevices"" --type h

echo -e ""\nSearching in all files for variable declarations:""
rg ""bool\s+(publishTele|publishDevices)"" 
```

Length of output: 650

---



</details>

**publishTele and publishDevices declarations are present**

Verified that both `publishTele` and `publishDevices` are declared in `src/main.h` on the line:  
```cpp
bool discovery, publishTele, publishDevices;
```  
No additional declarations or header changes are required.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3133069113,2913121229,coderabbitai[bot],COMMENTED,2025-06-10T11:22:12Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>.github/release-drafter.yml (1)</summary><blockquote>

`26-27`: **Verify prerelease strategy**  
The global `prerelease: true` setting will mark every drafted release as a prerelease with identifier `b`. Ensure this aligns with your intended workflow—if you need stable releases alongside prereleases, consider scoping this behavior via labels or branches instead.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between aa7d4ce801b9490b5ec5eeb611fa4e9d49d747b1 and fcfb4f9fe4668aeb68c98cb22b0abf61785167ff.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `.github/release-drafter.yml` (1 hunks)
* `src/main.cpp` (1 hunks)

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (1)</summary>

* src/main.cpp

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (12)</summary>

* GitHub Check: build (m5atom)
* GitHub Check: build (macchina-a0)
* GitHub Check: build (m5stickc)
* GitHub Check: build (esp32s3-verbose)
* GitHub Check: build (m5stickc-plus)
* GitHub Check: build (esp32-verbose)
* GitHub Check: build (esp32s3)
* GitHub Check: build (esp32c3)
* GitHub Check: build (esp32c3-verbose)
* GitHub Check: build (esp32c3-cdc)
* GitHub Check: build (esp32s3-cdc)
* GitHub Check: build (esp32)

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3147231131,2929037787,gemini-code-assist[bot],COMMENTED,2025-06-15T08:08:43Z,"## Summary of Changes

Hello @voku, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request aims to enhance the clarity and navigability of the `UTF8` helper class documentation. By adding and correcting `@INFO` tags, it provides explicit links between functions and their inverse operations, making it easier for developers to understand related methods at a glance.

### Highlights

* **Documentation Improvement**: Added and corrected `@INFO` tags within PHPDoc blocks for several methods in the `UTF8` helper class to explicitly state their corresponding 'opposite' function.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configureGemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3147231131,2929038001,coderabbitai[bot],COMMENTED,2025-06-15T08:09:27Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (4)</summary><blockquote>

<details>
<summary>src/voku/helper/UTF8.php (4)</summary><blockquote>

`819-820`: **Prefer PHPDocʼs `@see` over a custom “INFO:” marker**  
Using the standard `@see` tag makes the relation machine-readable for IDEs and static analysers and keeps the docblock style consistent across the file.

```diff
- * INFO: opposite to UTF8::hex_to_chr()
+ * @see UTF8::hex_to_chr() Opposite operation
```

---

`1223-1224`: **Keep documentation style consistent – switch to `@see`**  

```diff
- * INFO: opposite to UTF8::chr_to_decimal()
+ * @see UTF8::chr_to_decimal() Opposite operation
```

---

`2877-2878`: **Use `@see` for cross-references**  

```diff
- * INFO: opposite to UTF8::html_entity_decode()
+ * @see UTF8::html_entity_decode() Opposite operation
```

---

`9036-9038`: **Fix typo and adopt `@see` tag**

There is a typo in “EXAPLE” and the same `INFO:` remark should be converted to `@see`.

```diff
- * INFO: opposite to UTF8::binary_to_str()
- *
- * EXAPLE: <code>UTF8::str_to_binary('😃'); // '11110000100111111001100010000011'</code>
+ * @see UTF8::binary_to_str() Opposite operation
+ *
+ * EXAMPLE: <code>UTF8::str_to_binary('😃'); // '11110000100111111001100010000011'</code>
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between c4b377468db50ba8e10ec01ac683271a0ab10c8f and 1d38f747eaa8cb148dede666c61d15f2cfa352ef.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `src/voku/helper/UTF8.php` (4 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (9)</summary>

* GitHub Check: Codacy Static Code Analysis
* GitHub Check: tests (8.4, basic)
* GitHub Check: tests (8, basic)
* GitHub Check: tests (8.3, basic)
* GitHub Check: tests (7.4, basic)
* GitHub Check: tests (8.2, basic)
* GitHub Check: tests (7.3, basic)
* GitHub Check: tests (8.1, basic)
* GitHub Check: tests (7.2, basic)

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3147231131,2929038182,gemini-code-assist[bot],COMMENTED,2025-06-15T08:10:00Z,"## Code Review

This pull request focuses on improving PHPDoc comments for several UTF-8 helper functions by adding or correcting references to their 'opposite' or inverse functions. The changes made in `chr_to_hex`, `decimal_to_chr`, `html_encode`, and `str_to_binary` documentation are accurate and enhance code clarity by making the relationships between these functions more explicit. 

One suggestion has been provided to consider using the standard `@see` PHPDoc tag instead of the custom `INFO:` prefix for these cross-references. This would align the documentation more closely with common PHP documentation standards and improve compatibility with documentation generation tools."
3075978533,2853003395,codefactor-io[bot],COMMENTED,2025-05-20T07:27:15Z,
3135272704,2915453222,coderabbitai[bot],COMMENTED,2025-06-11T02:21:54Z,"**Actionable comments posted: 5**

<details>
<summary>🧹 Nitpick comments (7)</summary><blockquote>

<details>
<summary>examples/redteam-minimal/README.md (1)</summary><blockquote>

`1-13`: **Improve section structure for consistency**  
Consider adding a dedicated **## Quick Start** or **## Running the Example** heading to group initialization and execution steps, aligning the format with other example READMEs.

</blockquote></details>
<details>
<summary>examples/websockets/README.md (1)</summary><blockquote>

`11-25`: **Unify Quick Start structure**  
To maintain consistency, merge the `You can run this example with:` snippet into the **## Quick Start** section or rename **## Quick Start** to **## Running the Example**, matching other READMEs.

</blockquote></details>
<details>
<summary>examples/redteam-bestOfN-strategy/README.md (1)</summary><blockquote>

`1-13`: **Enhance section headings**  
Add a clear **## Quick Start** or **## Running the Example** heading to structure the init and run commands for better readability and alignment with other example docs.

</blockquote></details>
<details>
<summary>examples/node-package/README.md (1)</summary><blockquote>

`1-25`: **Optional: Add usage section title**  
Consider renaming the ""You can run this example with:"" snippet into a **## Initialization** section or grouping all commands under **## Running the Example** to match other examples.

</blockquote></details>
<details>
<summary>examples/node-package-typescript/README.md (1)</summary><blockquote>

`1-25`: **Align section headings**  
To improve consistency, consider renaming or consolidating the initial snippet into **## Initialization** and grouping the run steps under **## Running the Example**.

</blockquote></details>
<details>
<summary>examples/github-action/README.md (1)</summary><blockquote>

`13-13`: **Grammar enhancement: comma before “so”**  
Add a comma before “so” to separate the independent clauses for clarity.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[uncategorized] ~13-~13: Use a comma before ‘so’ if it connects two independent clauses (unless they are closely connected and short).
Context: ...orkflow. Set the `OPENAI_API_KEY` secret so the action can evaluate your prompts. 

(COMMA_COMPOUND_SENTENCE_2)

</details>

</details>

</blockquote></details>
<details>
<summary>examples/colab-notebook/README.md (1)</summary><blockquote>

`17-17`: **Punctuation consistency: add period**  
End the environment variable bullet with a period for uniform formatting.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 37e3a44b953153316f48b8b43e25550e32c6d600 and 3f37cf8ae13c85e80985333c9bfad2b0243b4785.

</details>

<details>
<summary>📒 Files selected for processing (7)</summary>

* `examples/colab-notebook/README.md` (1 hunks)
* `examples/github-action/README.md` (1 hunks)
* `examples/node-package-typescript/README.md` (1 hunks)
* `examples/node-package/README.md` (1 hunks)
* `examples/redteam-bestOfN-strategy/README.md` (1 hunks)
* `examples/redteam-minimal/README.md` (1 hunks)
* `examples/websockets/README.md` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 LanguageTool</summary>

<details>
<summary>examples/github-action/README.md</summary>

[uncategorized] ~13-~13: Use a comma before ‘so’ if it connects two independent clauses (unless they are closely connected and short).
Context: ...orkflow. Set the `OPENAI_API_KEY` secret so the action can evaluate your prompts. 

(COMMA_COMPOUND_SENTENCE_2)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (24)</summary>

* GitHub Check: Tusk Test Runner
* GitHub Check: Redteam
* GitHub Check: Test on Node 22.x and macOS-latest
* GitHub Check: Test on Node 22.x and ubuntu-latest
* GitHub Check: Test on Node 20.x and macOS-latest
* GitHub Check: Run Integration Tests
* GitHub Check: Redteam Custom Enterprise Server
* GitHub Check: Test on Node 24.x and ubuntu-latest
* GitHub Check: Test on Node 24.x and macOS-latest
* GitHub Check: webui tests
* GitHub Check: Share Test
* GitHub Check: Test on Node 20.x and windows-latest
* GitHub Check: Test on Node 18.x and macOS-latest
* GitHub Check: Test on Node 20.x and ubuntu-latest
* GitHub Check: Test on Node 18.x and ubuntu-latest
* GitHub Check: Test on Node 18.x and windows-latest
* GitHub Check: Build on Node 24.x
* GitHub Check: Build Docs
* GitHub Check: Build on Node 18.x
* GitHub Check: Build on Node 22.x
* GitHub Check: Build on Node 20.x
* GitHub Check: Style Check
* GitHub Check: Tusk Tester
* GitHub Check: Analyze (javascript-typescript)

</details>

<details>
<summary>🔇 Additional comments (2)</summary><blockquote>

<details>
<summary>examples/github-action/README.md (1)</summary>

`1-13`: **Approve documentation improvements**  
The README clearly explains how to initialize and configure the GitHub Action example.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[uncategorized] ~13-~13: Use a comma before ‘so’ if it connects two independent clauses (unless they are closely connected and short).
Context: ...orkflow. Set the `OPENAI_API_KEY` secret so the action can evaluate your prompts. 

(COMMA_COMPOUND_SENTENCE_2)

</details>

</details>

</details>
<details>
<summary>examples/colab-notebook/README.md (1)</summary>

`1-17`: **Approve new Colab notebook example docs**  
The README provides concise, step-by-step instructions for initializing and running the Google Colab example.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3135272704,2915535664,coderabbitai[bot],COMMENTED,2025-06-11T03:22:59Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (3)</summary><blockquote>

<details>
<summary>examples/node-package-typescript/README.md (3)</summary><blockquote>

`3-7`: **Clarify working directory before running commands**  
Add a step to `cd` into the generated `node-package-typescript` directory after initialization, so that `npm install` and subsequent commands run in the correct context.

---

`21-24`: **Specify language for the `.env` fenced code block**  
The environment-variable snippet should include a language identifier (e.g., `env` or `dotenv`) to satisfy Markdown linting (MD040).  
```diff
- ```
+ ```env
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 markdownlint-cli2 (0.17.2)</summary>

21-21: Fenced code blocks should have a language specified
null

(MD040, fenced-code-language)

</details>

</details>

---

`42-49`: **Convert the final instruction to a list item**  
For consistency with the bullet list under “Expected Results,” format the “View detailed results” line as a list item.  
```diff
- View detailed results with `promptfoo view`.
+ - View detailed results with `promptfoo view`.
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 3f37cf8ae13c85e80985333c9bfad2b0243b4785 and 81ee0967184cb2572cf70560eb33c0e19f85fe9f.

</details>

<details>
<summary>📒 Files selected for processing (7)</summary>

* `examples/colab-notebook/README.md` (1 hunks)
* `examples/github-action/README.md` (1 hunks)
* `examples/node-package-typescript/README.md` (1 hunks)
* `examples/node-package/README.md` (1 hunks)
* `examples/redteam-bestOfN-strategy/README.md` (1 hunks)
* `examples/redteam-minimal/README.md` (1 hunks)
* `examples/websockets/README.md` (1 hunks)

</details>

<details>
<summary>✅ Files skipped from review due to trivial changes (3)</summary>

* examples/redteam-minimal/README.md
* examples/colab-notebook/README.md
* examples/redteam-bestOfN-strategy/README.md

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (3)</summary>

* examples/websockets/README.md
* examples/node-package/README.md
* examples/github-action/README.md

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 markdownlint-cli2 (0.17.2)</summary>

<details>
<summary>examples/node-package-typescript/README.md</summary>

21-21: Fenced code blocks should have a language specified
null

(MD040, fenced-code-language)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (23)</summary>

* GitHub Check: Tusk Test Runner
* GitHub Check: Build Docs
* GitHub Check: Redteam
* GitHub Check: Redteam Custom Enterprise Server
* GitHub Check: Share Test
* GitHub Check: Test on Node 24.x and macOS-latest
* GitHub Check: Test on Node 24.x and ubuntu-latest
* GitHub Check: Test on Node 22.x and macOS-latest
* GitHub Check: webui tests
* GitHub Check: Test on Node 22.x and ubuntu-latest
* GitHub Check: Test on Node 20.x and macOS-latest
* GitHub Check: Test on Node 18.x and macOS-latest
* GitHub Check: Test on Node 20.x and windows-latest
* GitHub Check: Test on Node 20.x and ubuntu-latest
* GitHub Check: Test on Node 18.x and ubuntu-latest
* GitHub Check: Test on Node 18.x and windows-latest
* GitHub Check: Build on Node 22.x
* GitHub Check: Build on Node 20.x
* GitHub Check: Build on Node 24.x
* GitHub Check: Build on Node 18.x
* GitHub Check: Style Check
* GitHub Check: Tusk Tester
* GitHub Check: Analyze (javascript-typescript)

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>examples/node-package-typescript/README.md (1)</summary>

`1-50`: **Well-structured and comprehensive documentation**  
The README concisely covers all necessary sections—initialization, prerequisites, installation, execution, and expected results—providing clear guidance for users.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 markdownlint-cli2 (0.17.2)</summary>

21-21: Fenced code blocks should have a language specified
null

(MD040, fenced-code-language)

</details>

</details>

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3135272704,2915756023,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-11T06:03:31Z,"## Pull Request Overview

Adds README documentation for several example projects, detailing setup, prerequisites, usage, and expected results.

- Introduce WebSockets provider example  
- Add two red-team strategy examples (minimal & best-of-N)  
- Provide Node.js, TypeScript, GitHub Action, and Colab notebook READMEs

### Reviewed Changes

Copilot reviewed 7 out of 7 changed files in this pull request and generated no comments.

<details>
<summary>Show a summary per file</summary>

| File                                            | Description                                                  |
| ----------------------------------------------- | ------------------------------------------------------------ |
| examples/websockets/README.md                   | New WebSockets example README with setup and evaluation steps |
| examples/redteam-minimal/README.md              | New minimal red-team example README                          |
| examples/redteam-bestOfN-strategy/README.md     | New best-of-N red-team example README                        |
| examples/node-package/README.md                 | New Node.js script example README                            |
| examples/node-package-typescript/README.md      | New TypeScript script example README                         |
| examples/github-action/README.md                | New GitHub Action example README                             |
| examples/colab-notebook/README.md               | New Colab notebook example README                            |
</details>



<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**examples/websockets/README.md:1**
* [nitpick] Capitalize and standardize the term ‘WebSockets’ (with capital ‘S’). For example: `# websockets (WebSockets Provider Example)`.
```
# websockets (Websockets Provider Example)
```
**examples/node-package-typescript/README.md:49**
* This line should be formatted as a bullet (add a leading `- `) to match the other items under **Expected Results**.
```
View detailed results with `promptfoo view`.
```
</details>

"
3147822758,2933547191,yycptt,APPROVED,2025-06-16T21:19:03Z,
3131473560,2911718751,JPepperwood123,APPROVED,2025-06-10T01:14:46Z,
3078604256,2855971993,Jarred-Sumner,COMMENTED,2025-05-21T01:34:28Z,
3078604256,2855972636,claude[bot],COMMENTED,2025-05-21T01:34:51Z,
3078604256,2856097343,Jarred-Sumner,COMMENTED,2025-05-21T02:59:53Z,
3151050095,2933246541,greptile-apps[bot],COMMENTED,2025-06-16T19:23:17Z,"
## PR Summary
Fixed a filename typo by renaming `packages/twenty-shared/src/utils/validation/__tests__/isValideLocale.test.ts` to `isValidLocale.test.ts` to match the actual implementation name. Test failures appear to be environment-related rather than due to the rename.

- Fixed misspelling 'Valide' to 'Valid' in test filename to maintain consistent naming with implementation
- Test execution failures are likely due to Node modules state issues, not the renaming itself
- Consider adding unit test verification steps to PR template to catch environment setup issues earlier

<sub>1 file reviewed, no comments</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=twenty_12642)</sub>"
3151050095,2933588188,charlesBochet,CHANGES_REQUESTED,2025-06-16T21:37:44Z,"PR seems off, closing, let's re-open once ready!"
3131847694,2911712808,cubic-dev-ai[bot],COMMENTED,2025-06-10T01:08:46Z,"cubic found 2 issues across 2 files. Review them in [cubic.dev](https://cubic.dev/pr/cartography-cncf/cartography/pull/1622)

<sub>React with 👍 or 👎 to teach cubic. Tag `@cubic-dev-ai` to give specific feedback.</sub>"
3086826896,2882460799,jlquaccia,APPROVED,2025-05-30T20:38:05Z,LGTM
3098852388,2876917289,nektro,APPROVED,2025-05-29T03:09:56Z,
3163905355,2946836817,coderabbitai[bot],COMMENTED,2025-06-20T17:05:08Z,"**Actionable comments posted: 3**

<details>
<summary>🔭 Outside diff range comments (2)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/adapters/eval/registry.py (1)</summary><blockquote>

`4-4`: **Remove unused import.**

The `raise_exhaustive_enum_error` import is no longer used in this file after the change on line 15.



```diff
- from kiln_ai.utils.exhaustive_error import raise_exhaustive_enum_error
```

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/prompt_builders.py (1)</summary><blockquote>

`4-4`: **Remove unused import.**

The `raise_exhaustive_enum_error` import is no longer used after the change on line 427.



```diff
- from kiln_ai.utils.exhaustive_error import raise_exhaustive_enum_error
```

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (6)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/adapters/parsers/request_formatters.py (1)</summary><blockquote>

`5-5`: **Remove unused import.**

The import of `raise_exhaustive_enum_error` is no longer used after the refactoring and should be removed.


```diff
-from kiln_ai.utils.exhaustive_error import raise_exhaustive_enum_error
```

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/adapter_registry.py (1)</summary><blockquote>

`16-16`: **Remove unused import.**

The import of `raise_exhaustive_enum_error` is no longer used after the refactoring and should be removed.


```diff
-from kiln_ai.utils.exhaustive_error import raise_exhaustive_enum_error
```

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/datamodel/task_output.py (1)</summary><blockquote>

`14-14`: **Remove unused import.**

The import of `raise_exhaustive_enum_error` is no longer used after the refactoring and should be removed.


```diff
-from kiln_ai.utils.exhaustive_error import raise_exhaustive_enum_error
```

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/parsers/parser_registry.py (1)</summary><blockquote>

`6-6`: **Remove unused import.**

The import of `raise_exhaustive_enum_error` is no longer used after the refactoring and should be removed.


```diff
-from kiln_ai.utils.exhaustive_error import raise_exhaustive_enum_error
```

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/litellm_adapter.py (1)</summary><blockquote>

`22-22`: **Consider removing unused import after updating line 331.**

If line 331 is updated to use the new error handling pattern, this import will no longer be needed and should be removed.

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/eval/registry.py (1)</summary><blockquote>

`15-15`: **Error handling updated correctly, but consider consistency.**

The change from custom error handling to standard Python exceptions is good. However, other files in this PR use `ValueError` while this uses `AssertionError`. Consider using `ValueError` for consistency unless there's a specific reason for `AssertionError`.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between ebae7e995bab0e6a200537a35745b6db758cbc3f and cff6aace13a0c8c17191a61db2e3472de7b0c983.

</details>

<details>
<summary>📒 Files selected for processing (14)</summary>

* `app/desktop/studio_server/finetune_api.py` (4 hunks)
* `app/desktop/studio_server/provider_api.py` (3 hunks)
* `libs/core/kiln_ai/adapters/adapter_registry.py` (1 hunks)
* `libs/core/kiln_ai/adapters/chat/chat_formatter.py` (3 hunks)
* `libs/core/kiln_ai/adapters/eval/registry.py` (1 hunks)
* `libs/core/kiln_ai/adapters/model_adapters/base_adapter.py` (2 hunks)
* `libs/core/kiln_ai/adapters/model_adapters/litellm_adapter.py` (1 hunks)
* `libs/core/kiln_ai/adapters/parsers/parser_registry.py` (1 hunks)
* `libs/core/kiln_ai/adapters/parsers/request_formatters.py` (1 hunks)
* `libs/core/kiln_ai/adapters/prompt_builders.py` (1 hunks)
* `libs/core/kiln_ai/adapters/provider_tools.py` (0 hunks)
* `libs/core/kiln_ai/datamodel/basemodel.py` (1 hunks)
* `libs/core/kiln_ai/datamodel/task_output.py` (1 hunks)
* `libs/core/kiln_ai/utils/exhaustive_error.py` (1 hunks)

</details>

<details>
<summary>💤 Files with no reviewable changes (1)</summary>

* libs/core/kiln_ai/adapters/provider_tools.py

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (6)</summary>

* GitHub Check: Web UI Code Format, Lint, Typecheck, Test, and Build
* GitHub Check: Build Desktop Apps (ubuntu-22.04-arm)
* GitHub Check: Build Desktop Apps (macos-13)
* GitHub Check: Build Desktop Apps (macos-latest)
* GitHub Check: Build Desktop Apps (ubuntu-22.04)
* GitHub Check: Build Desktop Apps (windows-latest)

</details>

<details>
<summary>🔇 Additional comments (18)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/utils/exhaustive_error.py (1)</summary>

`4-6`: **LGTM! Comment improvement enhances clarity.**

The updated comment clearly explains the function's intended use in exhaustiveness checks, which is much clearer than the previous type-checking trick comment.

</details>
<details>
<summary>libs/core/kiln_ai/adapters/parsers/request_formatters.py (1)</summary>

`40-40`: **LGTM! Standardized error handling.**

The change from custom exhaustive enum error to standard `ValueError` with descriptive message improves consistency across the codebase.

</details>
<details>
<summary>libs/core/kiln_ai/adapters/adapter_registry.py (1)</summary>

`199-199`: **LGTM! Improved error handling with contextual message.**

The change to standard `ValueError` with a provider-specific error message (""Unknown provider"") is more informative than the generic ""Unhandled enum value"" and improves consistency.

</details>
<details>
<summary>libs/core/kiln_ai/datamodel/task_output.py (1)</summary>

`47-47`: **LGTM! Consistent error handling.**

The change to standard `ValueError` with descriptive message maintains consistency with the codebase refactoring.

</details>
<details>
<summary>libs/core/kiln_ai/adapters/parsers/parser_registry.py (1)</summary>

`21-21`: **LGTM! Standardized error handling.**

The change from custom exhaustive enum error to standard `ValueError` aligns with the codebase refactoring effort.

</details>
<details>
<summary>libs/core/kiln_ai/adapters/chat/chat_formatter.py (3)</summary>

`7-7`: **Good addition for type safety.**

Adding the `cast` import enables explicit type casting used on line 234, improving type safety.

---

`219-219`: **Consistent error handling improvement.**

The change from custom exhaustive enum error to standard `ValueError` with descriptive message is consistent with the PR objectives.

---

`234-234`: **Explicit type casting improves type safety.**

Using `cast(str, input)` makes the type conversion explicit and helps with type checking, which aligns with the PR's goal of improving type safety.

</details>
<details>
<summary>libs/core/kiln_ai/adapters/model_adapters/base_adapter.py (2)</summary>

`4-4`: **Good addition for type safety improvements.**

Adding the `cast` import supports the explicit type casting used in the `generate_run` method.

---

`262-271`: **Explicit type casting improves type safety.**

The explicit type annotations and use of `cast()` for both `input_str` and `output_str` make the type conversions clear and help with type checking. This change aligns well with the PR's objective of improving type safety.

</details>
<details>
<summary>libs/core/kiln_ai/adapters/prompt_builders.py (1)</summary>

`427-427`: **Consistent error handling improvement.**

The change from custom exhaustive enum error to standard `ValueError` is consistent with the pattern used in most other files in this PR.

</details>
<details>
<summary>app/desktop/studio_server/provider_api.py (3)</summary>

`29-31`: **Good refactoring for cleaner imports.**

The direct import of exception classes and aliasing of `requests.exceptions` improves code readability and follows best practices for import organization.

---

`51-51`: **Consistent usage of aliased import.**

The change to use `requests_exceptions.ConnectionError` is consistent with the import alias and maintains the same functionality.

---

`814-822`: **Improved exception handling with direct imports.**

The changes to use directly imported `AuthenticationError` and `BadRequestError` instead of namespace access improve code clarity while maintaining the same functionality.

</details>
<details>
<summary>app/desktop/studio_server/finetune_api.py (4)</summary>

`3-12`: **Necessary imports for type safety improvements.**

The addition of `cast` from typing and `BaseFinetuneAdapter` to the imports enables the explicit type casting used later in the file, improving type safety.

---

`216-218`: **Proper type casting for registry access.**

The explicit cast to `dict[str, type[BaseFinetuneAdapter]]` improves type safety and provides better IDE support while maintaining the same runtime behavior.

---

`291-293`: **Consistent type casting pattern.**

The same type casting pattern is applied consistently, improving type safety across all registry accesses.

---

`371-373`: **Complete type safety improvement.**

The final application of the type casting pattern ensures consistent type safety across all finetune registry accesses in the file.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3148073995,2930337972,obi1kenobi,COMMENTED,2025-06-15T21:19:03Z,
3148073995,2930338225,obi1kenobi,COMMENTED,2025-06-15T21:20:12Z,
3148073995,2930341744,obi1kenobi,COMMENTED,2025-06-15T21:36:54Z,
3148073995,2937416250,obi1kenobi,COMMENTED,2025-06-18T00:49:06Z,
3134749798,2914939311,langchain-infra,APPROVED,2025-06-10T20:20:22Z,
3134749798,2914945250,hinthornw,APPROVED,2025-06-10T20:23:07Z,
3087206035,2871855102,aasimkhan30,APPROVED,2025-05-27T16:56:12Z,
3087206035,2871856652,Benjin,COMMENTED,2025-05-27T16:56:49Z,
3087206035,2871858713,Benjin,APPROVED,2025-05-27T16:57:22Z,
3087206035,2871862134,caohai,APPROVED,2025-05-27T16:58:43Z,
3076960386,2854109719,ellipsis-dev[bot],COMMENTED,2025-05-20T13:06:08Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to ba318c39deca0bf274bf9b2622c9d817ca9b1bb7 in <ellipsistime>1 minute and 18 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `14` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `3` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>agents-api/agents_api/activities/task_steps/prompt_step.py:110</code></summary>
> 
> - **Draft comment:** 
> Ensure base_evaluate safely handles arbitrary code execution when evaluating settings.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 20% vs. threshold = 50% While security around code evaluation is important, this comment violates our rules by starting with ""Ensure that..."" and asking the author to verify something. It's also speculative - we don't have evidence that base_evaluate is unsafe. Without seeing the implementation of base_evaluate, we can't make strong claims about its safety. The security concern could be valid and important. Arbitrary code execution is a serious security risk. However, the comment is phrased as a verification request rather than pointing out a specific issue. We don't have evidence that base_evaluate is actually unsafe. The comment should be deleted because it asks for verification rather than pointing out a specific issue, and we don't have strong evidence that there's actually a security problem.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>agents-api/agents_api/activities/task_steps/prompt_step.py:110</code></summary>
> 
> - **Draft comment:** 
> Consider adding error handling for base_evaluate failures during settings evaluation.
> - **Reason this comment was not posted:**
> Confidence changes required: `50%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>agents-api/agents_api/activities/task_steps/prompt_step.py:110</code></summary>
> 
> - **Draft comment:** 
> Typographical suggestion: In the comment on line 110, consider capitalizing 'python' to 'Python' for consistency.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is purely informative and suggests a typographical change that doesn't impact the functionality or logic of the code. It doesn't align with the rules for useful comments, which should focus on code logic, potential issues, or improvements.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_I4zvZozKwEjAy0fa`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3129110273,2908895015,greptile-apps[bot],COMMENTED,2025-06-09T04:36:17Z,"
## PR Summary

Introduces automatic context loading functionality for tethered mode through a new configurable setting. This feature enhances the app's ability to automatically capture context when panels are launched in tethered mode.

- New `autoContextOnLaunchTethered` setting in `macos/Onit/UI/Settings/AccessibilityTab.swift` lacks foreground color specification for text elements, potentially causing readability issues in light mode
- The `macos/Onit/PanelStateManager/Tethered/PanelStateTetheredManager.swift` should ensure AXUIElement coordinate conversion uses global space for accurate positioning
- Important accessibility hierarchy build consideration: `PanelStateTetheredManager` should read the role attribute when first accessing the application
- `macos/Onit/UI/Settings/AccessibilityTab.swift` uses custom text colors in Settings tab where system defaults should be used
- Added proper MainActor usage in `macos/Onit/App.swift` for UI state management with analytics tracking

<sub>4 file(s) reviewed, 1 comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=onit_266)</sub>"
3127634416,2908669833,AYadrov,APPROVED,2025-06-08T23:36:59Z,"Interesting, I wrote `histogram2D`, pretty surprising that LLM made it better"
3106581982,2885080564,ellipsis-dev[bot],COMMENTED,2025-06-01T04:43:08Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 344e8cea944dbfe5ba0eece32ed8be32738f34ce in <ellipsistime>1 minute and 20 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `22` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern/config.py:280</code></summary>
> 
> - **Draft comment:** 
> Changed key from 'azure/o3-mini' to 'azure/o4-mini'; ensure related O3 mini config is deprecated if no longer needed.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 20% vs. threshold = 50% While the comment identifies a real potential cleanup opportunity, it's more of a suggestion to check something rather than pointing out a clear issue. It uses ""ensure"" language which our rules specifically call out as problematic. The comment is speculative - we don't know if the O3 config actually needs to be removed. The comment does point to real config variables that may need cleanup. Removing dead config could prevent confusion. While cleaning up unused config is good, this comment is too speculative and uses ""ensure that"" language which violates our rules. The author likely knows if they need to keep the O3 config. Delete this comment as it is speculative and uses ""ensure that"" language which violates our commenting rules.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>skyvern/config.py:300</code></summary>
> 
> - **Draft comment:** 
> Updated non-cloud mapping to use 'azure/o4-mini'. Confirm consistency with feature flags and config settings.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment is asking the PR author to confirm consistency with feature flags and config settings, which violates the rule against asking the author to confirm or ensure things. It doesn't provide a specific code suggestion or ask for a specific test to be written.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_6BvrpJ4VCKPlxZDU`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3106581982,2886050679,wintonzheng,APPROVED,2025-06-01T20:09:46Z,
3127516559,2915233600,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-10T23:08:16Z,"## Pull Request Overview

Adds caching for SDL build outputs in the main CI workflow while reverting previous caching changes in the deploy and extra workflows.

- Introduce an `actions/cache` step in `.github/workflows/main.yml` to cache vcpkg directories
- Remove SDL caching from `.github/workflows/deploy.yml` and `.github/workflows/extra.yml` to consolidate in main.yml

### Reviewed Changes

Copilot reviewed 1 out of 1 changed files in this pull request and generated no comments.

| File                                    | Description                                      |
| --------------------------------------- | ------------------------------------------------ |
| .github/workflows/main.yml              | Added vcpkg cache step before SDL dependency install |
| .github/workflows/deploy.yml            | Reverted SDL caching steps                       |
| .github/workflows/extra.yml             | Reverted SDL caching steps                       |


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**.github/workflows/main.yml:144**
* Using `~` for home directories may not resolve correctly across different OS runners. Recommend using `${{ runner.home }}` (e.g., `${{ runner.home }}/.cache/vcpkg`) to ensure paths are expanded consistently.
```
-      - name: Cache SDL build
```
**.github/workflows/main.yml:147**
* [nitpick] Consider also caching Cargo's registry (`~/.cargo/registry`) and build directories (`target/`) to further speed up Rust workflow executions.
```
          path: |
```
</details>

"
3070980739,2848654457,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-18T02:58:58Z,"## Pull Request Overview

This PR fixes the chokidar watch usage in the CLI by making chokidar a regular dependency, updating the bundling configuration, and simplifying its usage in the dev command.  
- chokidar is now added as a dependency in package.json  
- tsup configuration is updated to correctly externalize chokidar  
- the dynamic installation of chokidar in the dev command is removed in favor of a static import

### Reviewed Changes

Copilot reviewed 3 out of 3 changed files in this pull request and generated no comments.

| File                                  | Description                                                       |
| ------------------------------------- | ----------------------------------------------------------------- |
| packages/cli/tsup.config.ts           | Updated external and noExternal settings to include chokidar      |
| packages/cli/src/commands/dev.ts       | Removed dynamic chokidar installation and now statically importing it |
| packages/cli/package.json              | Added chokidar as a dependency                                     |



"
3070980739,2849167327,yungalgo,APPROVED,2025-05-19T01:00:21Z,"passed exhaustive manual file-watching testing , lgtm"
3119357084,2898329754,coderabbitai[bot],COMMENTED,2025-06-04T23:21:10Z,"**Actionable comments posted: 2**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>mistralrs-core/src/pipeline/inputs_processor.rs (1)</summary><blockquote>

`140-273`: **Consider refactoring to reduce code duplication.**

The conditional seqlens processing logic is almost identical between `make_prompt_chunk` and `make_completion_chunk`. This creates maintenance overhead and increases the chance of inconsistent changes.


Consider extracting the common logic into a helper function:

```rust
fn process_seqlens_for_flash_attn(
    seqlens_q: Vec<u32>,
    seqlens_k: Vec<u32>,
    flash_attn: bool,
    device: &Device,
    mapper: Option<&dyn DeviceMapper>,
) -> Result<(u32, u32, HashMap<DeviceLocation, Tensor>, HashMap<DeviceLocation, Tensor>)> {
    if flash_attn && mapper.is_some() {
        let max_q = *seqlens_q.iter().max().unwrap();
        let max_k = *seqlens_k.iter().max().unwrap();
        
        let seqlens_q = Tensor::new(seqlens_q, device)?
            .to_dtype(DType::F32)?
            .cumsum(0)?
            .to_dtype(DType::U32)?;
        let seqlens_k = Tensor::new(seqlens_k, device)?
            .to_dtype(DType::F32)?
            .cumsum(0)?
            .to_dtype(DType::U32)?;

        let mut seqlens_q_map = HashMap::new();
        let mut seqlens_k_map = HashMap::new();

        let devices = mapper.unwrap().get_unique_devices();
        for device in devices {
            seqlens_q_map.insert(device.location(), seqlens_q.to_device(&device)?);
            seqlens_k_map.insert(device.location(), seqlens_k.to_device(&device)?);
        }
        Ok((max_q, max_k, seqlens_q_map, seqlens_k_map))
    } else {
        Ok((0, 0, HashMap::new(), HashMap::new()))
    }
}
```


Also applies to: 352-452

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 9989719da31a5f404c408d97ee3df1802ee8b78e and c3392600ccbc7b1995dcf0268b2c34370464db35.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `.gitignore` (1 hunks)
* `mistralrs-core/src/pipeline/inputs_processor.rs` (6 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: Docs
* GitHub Check: Clippy
* GitHub Check: Check (windows-latest, stable)
* GitHub Check: Check (ubuntu-latest, stable)
* GitHub Check: Check (macOS-latest, stable)
* GitHub Check: Test Suite (macOS-latest, stable)
* GitHub Check: Test Suite (ubuntu-latest, stable)
* GitHub Check: Test Suite (windows-latest, stable)

</details>

<details>
<summary>🔇 Additional comments (6)</summary><blockquote>

<details>
<summary>.gitignore (1)</summary>

`7-7`: **LGTM! Appropriate gitignore entry.**

The addition of `mistral.rs/` to the gitignore file correctly excludes nested repositories as stated in the PR objectives.

</details>
<details>
<summary>mistralrs-core/src/pipeline/inputs_processor.rs (5)</summary>

`164-166`: **Good optimization approach.**

The conditional initialization of seqlens vectors based on the flash attention flag is an effective optimization to avoid unnecessary computations when flash attention is disabled.

---

`193-196`: **Conditional seqlens population is correct.**

The logic correctly populates the seqlens vectors only when flash attention is enabled, maintaining consistency with the initialization pattern.

---

`360-360`: **Consistent flash attention check.**

Good consistency in applying the same conditional logic pattern in the completion chunk function.

---

`369-370`: **Consistent conditional initialization.**

The seqlens vector initialization follows the same pattern as in `make_prompt_chunk`, maintaining consistency across functions.

---

`378-381`: **Conditional population matches prompt logic.**

The conditional seqlens population is correctly implemented, mirroring the logic in the prompt chunk function.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3070333386,2847983325,ellipsis-dev[bot],COMMENTED,2025-05-17T04:57:39Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to d45888de91d6f99e9809c7d35aeeb6c1ddf13cf9 in <ellipsistime>1 minute and 30 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `69` lines of code in `2` files
> - Skipped `0` files when reviewing.
> - Skipped posting `3` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>documentation/docs.json:24</code></summary>
> 
> - **Draft comment:** 
> Navigation update: New page 'introduction/developer-orientation' is added. Confirm the ordering and path are intentional.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>documentation/introduction/developer-orientation.mdx:47</code></summary>
> 
> - **Draft comment:** 
> Consider rewording the sentence 'If you more into cookbook style recipes' for clarity, e.g., 'If you prefer cookbook-style recipes'.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>documentation/introduction/developer-orientation.mdx:49</code></summary>
> 
> - **Draft comment:** 
> Typo: The sentence ""If you more into cookbook style recipes"" is missing a word. Consider updating it to ""If you are more into cookbook style recipes"".
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 20% vs. threshold = 50% While this is technically correct and the suggestion would improve the text, we need to consider if grammar/typo comments are valuable enough to keep. Documentation readability is important, but this is a minor grammatical issue that doesn't impact understanding. The rules don't specifically address documentation grammar comments, but they emphasize only keeping comments that require clear code changes. Documentation clarity is important for developer experience. Missing words could confuse non-native English speakers. While clarity is important, this is an extremely minor grammatical issue that doesn't significantly impact readability or understanding. The meaning is still clear even with the missing word. The comment should be deleted as it addresses a very minor grammatical issue that doesn't significantly impact documentation usability.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_pg2kWmN5unGNmfLo`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3070333386,2847983415,qodo-merge-for-open-source[bot],COMMENTED,2025-05-17T04:58:22Z,
3134213890,2914310169,gemini-code-assist[bot],COMMENTED,2025-06-10T16:29:51Z,"## Summary of Changes

Hello @rgerhards, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request implements a fix for a potential race condition in the TCP server's epoll event re-arming mechanism. By utilizing a local `epoll_event` structure for the `epoll_ctl` call, it ensures thread safety and prevents potential issues that could arise from concurrent access to a shared structure member.

### Highlights

* **Race Condition Fix**: The primary goal of this PR is to address a potential race condition within the `notifyReArm` function, which is part of the TCP server's epoll handling logic.
* **Epoll Event Handling**: The fix involves changing how the `struct epoll_event` is used when re-arming a socket with `epoll_ctl(EPOLL_CTL_MOD)`. Instead of using a member variable (`pioDescr->event`), a local stack variable is now used.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configureGemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3134213890,2914313139,gemini-code-assist[bot],COMMENTED,2025-06-10T16:31:01Z,"## Code Review

This pull request addresses a potential race condition in the `notifyReArm` function within `runtime/tcpsrv.c`. It achieves this by replacing the use of a potentially shared `pioDescr->event` structure with a stack-allocated `struct epoll_event` for the `epoll_ctl(EPOLL_CTL_MOD, ...)` call. This change effectively isolates the event data used for the system call, preventing concurrent access issues. Additionally, the local event structure now explicitly initializes the `event.data.ptr` field, which enhances the robustness of the call by ensuring the correct context pointer is used. The solution is a standard and effective way to handle re-arming for `EPOLLONESHOT` events in a multithreaded environment."
3124534701,2954147843,mkomorski,APPROVED,2025-06-24T14:33:43Z,
3166348724,2948434097,cursor[bot],COMMENTED,2025-06-23T01:14:38Z,"<details open>
<summary><h3>Bug: Double-Backslash Escaping in Environment Variables</h3></summary>

Backslashes are incorrectly double-escaped when substituting `{{root}}` in environment variables. Environment variables expect literal filesystem paths, not JavaScript-escaped strings. This causes path-based environment variables like `NODE_PATH` to contain invalid paths (e.g., `C:\\\\path` instead of `C:\path`) on Windows, leading to path and module resolution failures.

<p></p>

<details>
<summary><code>test/bundler/expectBundled.ts#L834-L835</code></summary>

https://github.com/oven-sh/bun/blob/b63434aa09fe43f3f411426b025b488952f5b6d8/test/bundler/expectBundled.ts#L834-L835

</details>

<a href=""https://cursor.com/open?data=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImJ1Z2JvdC12MSJ9.eyJ2ZXJzaW9uIjoxLCJ0eXBlIjoiQlVHQk9UX0ZJWF9JTl9DVVJTT1IiLCJkYXRhIjp7InJlZGlzS2V5IjoiYnVnYm90OmFlZDM0YTI4LWRjOTktNDE1Zi05MzIzLTcwYmU5MzNiYWEwNCIsImVuY3J5cHRpb25LZXkiOiI5eUR0Y2JVcTdHM3BBVC1UcEoxUDNuS0huam9ab0c0cTc2ZHNITE0wMlpvIiwiYnJhbmNoIjoiY29kZXgvZml4LW5vZGVfcGF0aC1yZXNvbHV0aW9uLWluLWJ1bi1idWlsZCJ9LCJpYXQiOjE3NTA2NDEyNzgsImV4cCI6MTc1MTI0NjA3OH0.XqBj2FpNn8tyS0xr3FcvpyCpx05lnWRRsVl0eueutJj5MajArW6bx2S1uJlWiMnohHdvzClOzmVN2uS0Y9MrjeV1iEuD6CfYCKIdEbRFsTDpRke5wjRsqkMjR7TOPi-BMHWRwcq_cJlRksj9LfitL5LafoUSqTesqPSP0RC_glMq7SgyYqH-NKZ1FpmEqoELtGo1BpGA8ida_COux1pnn5qHAMFbdnveJYEfRs4sl0iREeOA0hljfQH2jkBbSR5DgphcWnd4m8U20nYZMyLLYTTnp7yHq-94sDyAaiJvWqXpjEJ9LE9YA-fuxSTHv1u9djJTdPkSS_rLPUXY0CihYw"">Fix in Cursor</a>

</details>

---

_Was this report helpful? Give feedback by reacting with 👍 or 👎_
"
3127975454,2908303671,gemini-code-assist[bot],COMMENTED,2025-06-08T09:25:56Z,"## Code Review
This pull request effectively addresses two distinct areas: it clarifies Valgrind suppressions for `pselect` related false positives and fixes a duplicate variable declaration in `tcpflood.c`. Both changes contribute positively to the codebase's maintainability and correctness.

### Summary of Findings
* **Duplicate Variable Declaration Fixed**: In `tests/tcpflood.c`, a duplicate declaration of the `err` variable within the `sendDTLS` function was removed. This resolves a variable shadowing issue, enhancing code clarity and preventing potential future bugs.
* **Valgrind Suppression Updates**: The `tests/known_issues.supp` file was updated to clarify Valgrind suppressions related to `pselect`. One existing suppression was made more specific by adding `fun:pselect64_syscall` to its call stack, and a new suppression was added for a 'pselect wait call with valid sigset misreported' scenario. These changes should help in managing Valgrind false positives more accurately.
* **Minor Formatting (Not Commented)**: An extra blank line was added in `tests/known_issues.supp` at line 44. This is a minor stylistic change and was not commented on due to review settings focusing on medium or higher severity issues.

### Merge Readiness
The changes in this pull request are beneficial, improving code quality and addressing potential Valgrind noise. The fix in `tcpflood.c` is a good correction. Based on this review, the PR appears to be in good shape. However, as an AI assistant, I am not authorized to approve pull requests. Please ensure further review and approval by authorized team members before merging."
3127975454,2908304176,rgerhards,COMMENTED,2025-06-08T09:28:13Z,
3071484470,2849091289,robertgshaw2-redhat,COMMENTED,2025-05-18T21:18:20Z,
3090153150,2867419514,sourcery-ai[bot],COMMENTED,2025-05-26T06:37:27Z,"Hey @mldangelo - I've reviewed your changes - here's some feedback:

- Consider creating a custom Link component that wraps Docusaurus’s <Link> and calls scrollToTop by default to eliminate repetitive onClick props and ensure consistency.
- Rather than sprinkling manual scrollToTop calls, evaluate using Docusaurus’s built-in scroll restoration or a global navigation listener to handle scrolling on all route changes.

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3090153150,2867430459,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-26T06:43:00Z,"## Pull Request Overview

This PR updates navigation behavior across the site so that clicking on any Docusaurus <Link> scrolls the page to the top, improving the user experience when moving between documentation pages. Key changes include:
- Adding onClick handlers calling scrollToTop on various Link components.
- Replacing anchor tags with Docusaurus <Link> components where appropriate.
- Updating multiple pages (docs, security, pricing, about, home, etc.) to include the new scroll-to-top behavior.

### Reviewed Changes

Copilot reviewed 11 out of 11 changed files in this pull request and generated 1 comment.

<details>
<summary>Show a summary per file</summary>

| File | Description |
| ---- | ----------- |
| site/src/pages/security/components/Hero.tsx | Added scrollToTop to both ""Get started"" and ""Get a demo"" buttons. |
| site/src/pages/security/components/Features.tsx | Replaced anchor with Link and added scrollToTop on the feature info link. |
| site/src/pages/security/components/CallToAction.tsx | Added scrollToTop to Call to Action links. |
| site/src/pages/red-teaming.tsx | Included onClick scrollToTop for multiple links in header and CTA sections. |
| site/src/pages/pricing.tsx | Added scrollToTop to several buttons, including an external demo link. |
| site/src/pages/model-security.tsx | Updated Link components with scrollToTop in header and CTA areas. |
| site/src/pages/llm-vulnerability-scanner.tsx | Added scrollToTop on navigation Links in header and CTA sections. |
| site/src/pages/index.tsx | Updated homepage Links to include scrollToTop functionality. |
| site/src/pages/guardrails.tsx | Added onClick scrollToTop to Link components. |
| site/src/pages/about.tsx | Attached scrollToTop to the contact Link. |
| site/src/components/HomepageFeatures/index.tsx | Updated feature Links with scrollToTop for consistency. |
</details>




"
3071701478,2848921615,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-18T12:17:06Z,"## Pull Request Overview

This PR updates the analytics server to keep the PostHog client alive by calling `flush()` instead of `shutdown()` in key methods.

- Replaces `shutdown()` with `flush()` in `track`, `identify`, and `getFeatureFlags`


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**packages/analytics/src/server.ts:32**
* Add unit or integration tests for `track`, `identify`, and `getFeatureFlags` to verify that `flush()` is invoked and the client remains available after these calls.
```
await serverInstance.flush();
```
</details>

"
3119878025,2898905957,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-05T05:20:29Z,"## Pull Request Overview

Fix grammar in MinIO error messages and update unit tests to expect the corrected text.

- Changed all instances of “cant” to “can't” in the MinIO handler.
- Updated tests to validate the new grammar in error responses.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated no comments.

| File                                           | Description                                                     |
| ---------------------------------------------- | --------------------------------------------------------------- |
| pkg/telemetryservice/minio/minio.go            | Replaced “cant” with “can't” in logger.Errorf and http.Error   |
| pkg/telemetryservice/minio/minio_test.go       | Updated expectedResp strings to use ""can't""                    |


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**pkg/telemetryservice/minio/minio.go:44**
* Error message refers to 'EndPoint' while the code checks 'ServerAddress'. Update the message to 'ServerAddress' for consistency.
```
logger.Errorf(""Bucket or EndPoint or FileExtension can't be nil"")
```
**pkg/telemetryservice/minio/minio_test.go:40**
* Update the test's expected response to reference 'ServerAddress' instead of 'EndPoint' to match the code.
```
expectResp: ""Bucket or EndPoint or FileExtension can't be nil\n"",
```
</details>

"
3071947527,2849052050,csvoss,COMMENTED,2025-05-18T17:43:24Z,
3142170045,2923348678,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-13T03:56:34Z,"## Pull Request Overview

This PR adds missing rdns metadata for several wallet connectors.  
- Adds rdns fields to Wigwam, Bitski, Bifrost, and BeraSig wallet configurations.  
- Updates the changeset to include these metadata changes.

### Reviewed Changes

Copilot reviewed 5 out of 5 changed files in this pull request and generated 1 comment.

<details>
<summary>Show a summary per file</summary>

| File | Description |
| ---- | ----------- |
| packages/rainbowkit/src/wallets/walletConnectors/wigwamWallet/wigwamWallet.ts | Adds rdns metadata for Wigwam wallet |
| packages/rainbowkit/src/wallets/walletConnectors/bitskiWallet/bitskiWallet.ts | Adds rdns metadata for Bitski wallet (potential incorrect value) |
| packages/rainbowkit/src/wallets/walletConnectors/bifrostWallet/bifrostWallet.ts | Adds rdns metadata for Bifrost wallet |
| packages/rainbowkit/src/wallets/walletConnectors/berasigWallet/berasigWallet.ts | Adds rdns metadata for BeraSig wallet |
| .changeset/flat-suns-pump.md | Documents the metadata update changeset |
</details>




"
3084917754,2862950493,gemini-code-assist[bot],COMMENTED,2025-05-23T01:45:57Z,"Hello @greinacker, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

## Summary of Changes
Hello team, gemini-code-assist here to provide a summary of this pull request by greinacker. This PR aims to fix a minor bug related to the removal of input history listeners. According to the description, it appears a copy/paste error caused the `removeInputHistoryUpdatedListener` function in `src/preload/index.ts` to attempt to remove the listener from the wrong IPC event channel. This change corrects the event name to ensure the listener is properly detached.

### Highlights
* **Bug Fix**: Addresses a bug where input history listeners were not being correctly removed due to an incorrect IPC event channel name.
* **Code Correction**: Corrects the event name used in the `ipcRenderer.removeListener` call within the `removeInputHistoryUpdatedListener` function.

### Changelog
* **src/preload/index.ts**
  * Corrected the IPC event name from 'tool' to 'input-history-updated' when removing an input history listener (line 307).


<details>

<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

</details>

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>


[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configure Gemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).

---

> Wrong event channel,
> Listener stays, a small bug,
> Now the fix is here.

"
3084917754,2862952159,gemini-code-assist[bot],COMMENTED,2025-05-23T01:47:44Z,"## Code Review
This pull request effectively fixes a bug where an IPC listener for `input-history-updated` events was incorrectly attempting to remove itself from the `'tool'` event channel. The change to use the correct event name, `'input-history-updated'`, in `removeInputHistoryUpdatedListener` is accurate and resolves a potential source of memory leaks or unintended behavior. The code is now more robust in its listener management for input history updates.

I've added one medium-severity suggestion regarding the use of constants for IPC event names to further improve maintainability and prevent similar typos in the future. This is more of a consideration for future enhancements and doesn't block this specific fix.

### Summary of Findings
* **Correctness: IPC Listener Removal**: The PR successfully fixes a bug by changing the event name from `'tool'` to `'input-history-updated'` in `removeInputHistoryUpdatedListener`. This ensures that listeners are correctly detached, preventing potential memory leaks and unintended side effects.
* **Maintainability: IPC Event Name Management**: The bug was caused by a typo in a string literal for an event name. To prevent similar issues, it's suggested (as a medium severity comment on the diff) to consider using constants for IPC event names. This would improve type safety and reduce the chance of typos. This is a suggestion for future improvement.
* **Code Duplication (Outside Diff)**: A duplicated declaration for `addInputHistoryUpdatedListener` and `removeInputHistoryUpdatedListener` was observed in `src/preload/index.d.ts` (lines 119-120 appear to duplicate lines 116-117). This is outside the scope of the current diff and therefore not commented on directly in the file, but it's a minor maintainability concern that could be addressed in a future PR.

### Merge Readiness
The pull request correctly addresses the identified bug and is in good shape. The primary change is a critical fix. The medium-severity suggestion is for future consideration to enhance overall maintainability and does not block this merge. I am unable to approve pull requests, but based on this review, the change itself is sound and improves the codebase. It should be safe to merge after any further internal review processes."
3084917754,2863309304,wladimiiir,APPROVED,2025-05-23T06:12:59Z,Good catch! Thank you.
3135095932,2915291452,hinthornw,APPROVED,2025-06-11T00:05:15Z,
3075711443,2852875485,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-20T06:45:55Z,"## Pull Request Overview

This PR adds support for record accessor patterns in the parser filter by integrating record accessor functionality and ensuring proper cleanup of parser context.  
- Added header includes and a new ra_key field for record accessor support in the filter_parser_ctx structure.  
- Updated the configuration and filtering functions to create and use ra_key when keys start with '$'.  
- Ensured that the ra_key is destroyed during filter exit for proper resource cleanup.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated 1 comment.

| File                                    | Description                                                 |
| --------------------------------------- | ----------------------------------------------------------- |
| plugins/filter_parser/filter_parser.h   | Added necessary includes and a new field for record accessor support. |
| plugins/filter_parser/filter_parser.c   | Configured record accessor creation, usage in filtering, and cleanup on exit. |


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**plugins/filter_parser/filter_parser.c:262**
* [nitpick] Consider renaming 'rval' to 'ra_value' for better clarity, as it represents a record accessor value.
```
rval = flb_ra_get_value_object(ctx->ra_key, *obj);
```
</details>

"
3105521836,2884139902,dev-aipolabs,APPROVED,2025-05-31T14:08:39Z,lgtm
3117833728,2896754375,coderabbitai[bot],COMMENTED,2025-06-04T13:30:50Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>packages/web/src/utils/get-default-state.spec.ts (1)</summary><blockquote>

`19-50`: **Consider adding additional test cases for comprehensive coverage.**

While the current tests cover the main scenarios well, consider adding these test cases to further strengthen the test suite:

- Test with `null` values to ensure they're handled correctly
- Test with complex default values (objects, arrays)
- Test error handling when prop declarations are missing defaults
- Test with empty state and empty prop declarations



Example additional test case:

```typescript
it('handles null values correctly', () => {
  const props: PropDeclarations<TestProps> = {
    bool: { default: true },
    num: { default: 1 },
  }

  const state: Partial<SignalState<TestProps>> = {
    bool: createSignal(null as any),
    num: createSignal(null as any),
  }

  const merged = getStateWithDefaults(state, props)
  expect(merged.bool.get()).toBe(null)
  expect(merged.num.get()).toBe(null)
})
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 19922e0882cf3bef51588c96e84752f21cb1cf6c and 69e5c3c3917965dce20edc32257c8f74e5561d66.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `packages/web/src/utils/get-default-state.spec.ts` (1 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: linkcheck
* GitHub Check: deploy
* GitHub Check: test-e2e (5)
* GitHub Check: test-e2e (4)
* GitHub Check: test-e2e (1)
* GitHub Check: test-e2e (2)
* GitHub Check: test-e2e (3)
* GitHub Check: size

</details>

<details>
<summary>🔇 Additional comments (4)</summary><blockquote>

<details>
<summary>packages/web/src/utils/get-default-state.spec.ts (4)</summary>

`1-12`: **Well-structured imports and dependencies.**

The imports are properly organized and include all necessary dependencies for testing the `getStateWithDefaults` function. The separation between external dependencies and local imports follows good practices.

---

`14-17`: **Good use of TypeScript for test type safety.**

The `TestProps` type definition provides clear type safety for the test scenarios and covers both boolean and number primitive types, which are good representatives for testing falsy value behavior.

---

`20-34`: **Excellent test for preserving falsy values.**

This test correctly verifies that falsy but defined values (`false` and `0`) are preserved and not overridden by defaults. The test logic is sound and covers an important edge case that could easily be overlooked.

---

`36-49`: **Good coverage of default value scenarios.**

This test effectively covers two related scenarios: explicitly `undefined` properties (`bool: undefined`) and completely missing properties (`num` not included in state). Both correctly fall back to default values, which validates the function's intended behavior.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3115176482,2893816753,gemini-code-assist[bot],COMMENTED,2025-06-03T19:26:59Z,"Hello @syedazharmbnr1, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

## Summary of Changes
Hello team, gemini-code-assist here to provide a summary of this pull request. This PR, authored by @syedazharmbnr1, aims to fix an issue in the `getConversations` function where the AppleScript check for the running ChatGPT process was incorrect. The original script attempted to check for processes within the `tell application ""ChatGPT""` block, which is not the standard way to check for running applications using AppleScript. This change corrects the AppleScript logic to use `tell application ""System Events""` to properly check for the existence of the ""ChatGPT"" application process before proceeding with other actions within the ChatGPT application context.

### Highlights
* **AppleScript Fix**: Corrected the AppleScript code used in the `getConversations` function to properly check if the ChatGPT application is running using `System Events`.
* **Process Check Logic**: Moved the process existence check (`application process ""ChatGPT"" exists`) into a `tell application ""System Events""` block, which is the correct context for querying system processes.

### Changelog
* **index.ts**
  * Modified the AppleScript string within the `getConversations` function.
  * Changed the process check logic from `exists (processes where name is ""ChatGPT"")` within `tell application ""ChatGPT""` to `application process ""ChatGPT"" exists` within `tell application ""System Events""`.

<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.
</details>


<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>


[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configure Gemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).

---

> An AppleScript bug,
> A process check was snug,
> But System Events,
> Now makes perfect sense,
> No longer stuck in the rug.

"
3115176482,2893820105,gemini-code-assist[bot],COMMENTED,2025-06-03T19:28:03Z,"## Code Review
This pull request effectively addresses the issue of correctly checking the ChatGPT process status within the `getConversations` function. The modification to utilize `System Events` for this check in the AppleScript is a significant improvement in robustness and aligns with best practices for process querying on macOS. The updated logic is more reliable and directly contributes to the stability of this feature. Great job on this targeted and effective fix!

### Summary of Findings
* **Improved Process Check Reliability**: The core change in this PR is the update to how the AppleScript checks if the ChatGPT application is running. By switching to `tell application ""System Events""` and using `application process ""ChatGPT"" exists`, the check becomes significantly more reliable. This is the standard and recommended way to query process status in AppleScript, as it doesn't depend on the target application itself being responsive to scripting commands for this initial check.
* **Logical Flow Enhancement**: The restructuring of the AppleScript, where the process check is performed *before* the `tell application ""ChatGPT""` block, is a logical improvement. This ensures that attempts to script ChatGPT only occur if it's confirmed to be running.
* **Adherence to Review Settings**: In line with the specified review settings, no comments for issues of `low` severity have been added. No `medium`, `high`, or `critical` severity issues were found in the submitted changes. The modifications are considered beneficial.

### Merge Readiness
The changes in this pull request represent a clear improvement to the codebase by correcting and enhancing the reliability of the ChatGPT process check. From my review, there are no outstanding issues of `medium` severity or higher that would prevent merging. The code appears to be in good shape. However, as I am not authorized to approve pull requests, I recommend that another reviewer performs a final check and approves the changes before merging."
3098935454,2876883668,Jarred-Sumner,COMMENTED,2025-05-29T02:39:51Z,
3098935454,2877089777,nektro,COMMENTED,2025-05-29T05:22:21Z,this broke `test/js/node/test/parallel/test-net-server-close-before-calling-lookup-callback.js`; will come back to evaluate these changes in a moment
3125969362,2910809837,jlquaccia,APPROVED,2025-06-09T17:37:29Z,LGTM
3117856172,2898571779,webfiltered,APPROVED,2025-06-05T00:39:37Z,
3153811253,2936834256,FrozenPandaz,COMMENTED,2025-06-17T19:22:26Z,
3153811253,2936840364,claude[bot],COMMENTED,2025-06-17T19:25:00Z,
3088758509,2866473582,ReneWerner87,COMMENTED,2025-05-24T21:33:27Z,
3088758509,2866476897,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-24T21:35:25Z,"## Pull Request Overview

This PR introduces a new helper, NewWithCustomCtx, to simplify initializing an app with a custom context while hiding the context factory setter.  
- Renames nextCustom to next and customRequestHandler to requestHandler for consistency.  
- Updates tests, documentation, and helper functions to reflect the new initialization process.

### Reviewed Changes

Copilot reviewed 7 out of 7 changed files in this pull request and generated no comments.

<details>
<summary>Show a summary per file</summary>

| File              | Description                                                      |
| ----------------- | ---------------------------------------------------------------- |
| router.go         | Renames methods and updates error message handling for custom contexts. |
| helpers.go        | Renames methodExistCustom to methodExist for consistency.         |
| docs/whats_new.md | Updates release notes to document NewWithCustomCtx.                |
| docs/api/app.md   | Updates API documentation to reflect the new helper.               |
| ctx_test.go       | Updates tests to use NewWithCustomCtx.                             |
| ctx.go            | Simplifies context handling by using the new next implementation.  |
| app.go            | Introduces NewWithCustomCtx and refactors internal context handling. |
</details>



<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**router.go:110**
* [nitpick] Renaming 'nextCustom' to 'next' may lead to ambiguity with similar methods handling DefaultCtx; consider a more descriptive name to differentiate custom and default context flows.
```
func (app *App) next(c CustomCtx) (bool, error) { //nolint:unparam // bool param might be useful for testing
```
</details>

"
3088758509,2866617876,gaby,APPROVED,2025-05-24T23:15:50Z,"👍 LGTM, this heavily simplifies the router/ctx when using a CustomCtx."
3088758509,2866835042,gaby,COMMENTED,2025-05-25T12:54:25Z,
3088758509,2866844171,ReneWerner87,COMMENTED,2025-05-25T13:26:47Z,
3088758509,2866861041,coderabbitai[bot],COMMENTED,2025-05-25T14:32:11Z,"**Actionable comments posted: 2**

<details>
<summary>🔭 Outside diff range comments (1)</summary><blockquote>

<details>
<summary>router.go (1)</summary><blockquote>

`193-198`: _🛠️ Refactor suggestion_

**Clarify error handling flow - TODO needs resolution.**

The TODO comment questions whether to return after error handling. Currently, the function continues execution even after `ErrorHandler` processes an error and sends a status. This could lead to unexpected behavior if handlers modify the response after an error has been handled.

Consider returning immediately after error handling to prevent further processing:
```diff
 if err != nil {
     if catch := ctx.App().ErrorHandler(ctx, err); catch != nil {
         _ = ctx.SendStatus(StatusInternalServerError) //nolint:errcheck // Always return nil
     }
-    // TODO: Do we need to return here?
+    return
 }
```

</blockquote></details>

</blockquote></details>

<details>
<summary>♻️ Duplicate comments (1)</summary><blockquote>

<details>
<summary>router.go (1)</summary><blockquote>

`110-168`: **Well-structured unification of routing logic, but performance impact needs investigation.**

The consolidation of `next` and `nextCustom` into a single method using the `CustomCtx` interface is clean and reduces code duplication. However, according to the PR objectives, there's a noted performance degradation that needs to be investigated.

The interface method calls (`getMethodInt()`, `getTreePathHash()`, etc.) may introduce overhead compared to direct field access in the previous implementation.

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>docs/whats_new.md (2)</summary><blockquote>

`68-69`: **Link to API docs for NewWithCustomCtx**  
To help users quickly find the full API details, consider hyperlinking this new method to the API reference, e.g.:  
```md
- **NewWithCustomCtx**: Initialize an app with a custom context in one step. See [API → App#NewWithCustomCtx](./api/app#newwithcustomctx).
```

---

`93-98`: **Ensure consistent code fence metadata**  
This fence uses `go title=""Signature""`, but other code blocks don’t include titles. For consistency, either remove the `title` attribute here or add similar titles elsewhere.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 9c123ce9576aa890b5543d5053affb1426f13707 and 40dea8e606eac9905f014d01fd7bf7072df766fb.

</details>

<details>
<summary>📒 Files selected for processing (7)</summary>

* `app.go` (4 hunks)
* `ctx.go` (1 hunks)
* `ctx_test.go` (2 hunks)
* `docs/api/app.md` (2 hunks)
* `docs/whats_new.md` (4 hunks)
* `helpers.go` (2 hunks)
* `router.go` (3 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧠 Learnings (1)</summary>

<details>
<summary>📓 Common learnings</summary>

```
Learnt from: gaby
PR: gofiber/fiber#3193
File: middleware/cache/cache_test.go:897-897
Timestamp: 2024-11-08T04:10:42.990Z
Learning: In the Fiber framework, `Context()` is being renamed to `RequestCtx()`, and `UserContext()` to `Context()` to improve clarity and align with Go's context conventions.
```

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: unit (1.24.x, windows-latest)
* GitHub Check: unit (1.23.x, windows-latest)
* GitHub Check: Compare
* GitHub Check: unit (1.23.x, macos-13)
* GitHub Check: repeated

</details>

<details>
<summary>🔇 Additional comments (10)</summary><blockquote>

<details>
<summary>helpers.go (1)</summary>

`106-150`: **LGTM! Clean interface abstraction.**

The refactoring from `*DefaultCtx` to `CustomCtx` interface is well-executed and maintains the same functionality while providing better abstraction. The use of interface methods like `getMethodInt()`, `getTreePathHash()`, and `setIndexRoute()` properly encapsulates the context operations.

</details>
<details>
<summary>ctx.go (2)</summary>

`1048-1048`: **LGTM! Simplified routing logic.**

The removal of conditional logic and direct call to `c.app.next(c)` aligns well with the unified request handling approach described in the PR summary.

---

`1058-1058`: **LGTM! Consistent with the unified routing approach.**

The change to always call `c.app.next(c)` maintains consistency with the `Next()` method and the broader refactoring goals.

However, please monitor the performance impact as mentioned in the PR objectives, since this consolidation might affect request handling performance.

</details>
<details>
<summary>docs/whats_new.md (1)</summary>

`121-126`: **Example aligns with signature**  
The factory function correctly returns `fiber.Ctx` (satisfying the generic `CustomCtx` constraint), and the example embeds `DefaultCtx` properly. LGTM.

</details>
<details>
<summary>ctx_test.go (2)</summary>

`134-140`: **Consistent API usage with proper Config integration.**

The test correctly demonstrates using `NewWithCustomCtx` with additional configuration options, showing how the new API handles both custom context creation and app configuration in a unified manner.

---

`112-116`: <details>
<summary>❓ Verification inconclusive</summary>

**LGTM! Clean migration to the new API pattern.**

The test correctly uses the new `NewWithCustomCtx` constructor, which consolidates app creation and custom context function registration into a single step. This aligns well with the PR objectives to introduce the new helper function.




However, given the performance concerns mentioned in the PR objectives, it would be valuable to verify that this change doesn't introduce performance regression in the test execution:

---

🏁 Script executed:

```shell
#!/bin/bash
# Description: Run specific custom context tests and measure performance
# Compare execution time of these tests to identify any performance impact

echo ""Running custom context tests with timing...""
go test -run ""Test_Ctx_CustomCtx"" -v -count=5 -benchtime=1s
```

Length of output: 375

---



</details>

**Please verify performance of the new `NewWithCustomCtx` tests**  
I’m unable to run the timing script in this environment (missing Go module), so please execute the following locally to ensure there’s no regression:

```bash
# From your module root:
go test -run ""Test_Ctx_CustomCtx"" -v -count=5 -benchtime=1s
```

Once you’ve confirmed performance is on par with the previous two-step initialization, this change can be considered fully approved.

</details>
<details>
<summary>app.go (4)</summary>

`626-633`: **LGTM! Clean implementation of the custom context constructor.**

The new `NewWithCustomCtx` function provides a convenient way to initialize an app with a custom context factory in a single call. The documentation clearly explains its purpose and relationship to the existing API.

---

`654-663`: **Good refactoring: Method visibility and documentation are appropriate.**

The renaming from `NewCtxFunc` to `setCtxFunc` and making it unexported aligns well with the new initialization pattern via `NewWithCustomCtx`. The method correctly updates the server handler when the server is already initialized.

---

`915-915`: **Excellent simplification of the handler logic.**

Removing the conditional logic and always returning `app.requestHandler` aligns perfectly with the unified routing approach. This makes the code cleaner and more maintainable.

---

`1126-1126`: **Consistent simplification in server initialization.**

The change to always set `app.server.Handler = app.requestHandler` is consistent with the unified handler approach throughout the codebase.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3088758509,2866918177,github-actions[bot],COMMENTED,2025-05-25T18:44:28Z,"<!-- github-benchmark-action-comment(start): Benchmark Alert -->
# :warning: **Performance Alert** :warning:

Possible performance regression was detected for benchmark.
Benchmark result of this commit is worse than the previous benchmark result exceeding threshold `1.50`.

| Benchmark suite | Current: 01c6c916b2513870fbe994a6bfe58fb61b4c985c | Previous: e1a7c114b2df3ca61dffa82e9e81d985ecf11f2e | Ratio |
|-|-|-|-|
| `BenchmarkUnmarshaldata` | `10.42` ns/op	  95.96 MB/s	       0 B/op	       0 allocs/op | `5.293` ns/op	 188.92 MB/s	       0 B/op	       0 allocs/op | `1.97` |
| `BenchmarkUnmarshaldata - ns/op` | `10.42` ns/op | `5.293` ns/op | `1.97` |

This comment was automatically generated by [workflow](https://github.com/gofiber/fiber/actions?query=workflow%3ABenchmark) using [github-action-benchmark](https://github.com/marketplace/actions/continuous-benchmark).
<!-- github-benchmark-action-comment(end): Benchmark Alert -->"
3088758509,2869093679,ReneWerner87,COMMENTED,2025-05-26T19:51:28Z,
3088758509,2887671299,coderabbitai[bot],COMMENTED,2025-06-02T10:09:26Z,"**Actionable comments posted: 1**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>ctx_interface.go (1)</summary><blockquote>

`50-50`: **Fix inconsistent error message.**

The error message mentions ""failed to type-assert to Ctx"" but the actual assertion is to `CustomCtx`. This inconsistency could confuse developers during debugging.



```diff
-		panic(errors.New(""failed to type-assert to Ctx""))
+		panic(errors.New(""failed to type-assert to CustomCtx""))
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between fe01057180c4b4a405d0ccd435b889897385660f and 4bacc1ac59a3d23be2653ace11c88fdd880e73a3.

</details>

<details>
<summary>📒 Files selected for processing (4)</summary>

* `app.go` (5 hunks)
* `ctx_interface.go` (2 hunks)
* `helpers.go` (0 hunks)
* `router.go` (1 hunks)

</details>

<details>
<summary>💤 Files with no reviewable changes (1)</summary>

* helpers.go

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (2)</summary>

* app.go
* router.go

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧠 Learnings (1)</summary>

<details>
<summary>📓 Common learnings</summary>

```
Learnt from: gaby
PR: gofiber/fiber#3193
File: middleware/cache/cache_test.go:897-897
Timestamp: 2024-11-08T04:10:42.990Z
Learning: In the Fiber framework, `Context()` is being renamed to `RequestCtx()`, and `UserContext()` to `Context()` to improve clarity and align with Go's context conventions.
```

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: unit (1.24.x, macos-latest)
* GitHub Check: unit (1.24.x, windows-latest)
* GitHub Check: repeated
* GitHub Check: unit (1.24.x, macos-13)
* GitHub Check: Compare

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>ctx_interface.go (1)</summary>

`58-58`: **Parameter type change aligns with unified context approach.**

The change from `Ctx` to `CustomCtx` parameter is consistent with the overall refactoring goal and maintains type safety.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3088758509,2948769260,coderabbitai[bot],COMMENTED,2025-06-23T06:08:37Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>router.go (1)</summary><blockquote>

`209-305`: **Code duplication concern with next method**

The `nextCustom` method duplicates significant logic from the `next` method, differing mainly in interface method calls vs direct field access. This creates maintenance overhead as both methods need to be updated when routing logic changes.



Consider extracting the common routing logic into a shared function that accepts abstracted access methods. This would reduce duplication while maintaining the performance benefits of separate execution paths:

```go
type routeAccessor interface {
    getMethodInt() int
    getTreePathHash() uint32
    getIndexRoute() int
    // ... other access methods
}

func (app *App) routeMatch(accessor routeAccessor, setters routeSetters) (bool, error) {
    // Common routing logic here
}
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 01c6c916b2513870fbe994a6bfe58fb61b4c985c and b8a0ed0c2d1cbd50a04ffc7cdbed0e9ec4958e8a.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `ctx_interface.go` (1 hunks)
* `router.go` (1 hunks)

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (1)</summary>

* ctx_interface.go

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧠 Learnings (1)</summary>

<details>
<summary>📓 Common learnings</summary>

```
Learnt from: gaby
PR: gofiber/fiber#3193
File: middleware/cache/cache_test.go:897-897
Timestamp: 2024-11-08T04:10:42.990Z
Learning: In the Fiber framework, `Context()` is being renamed to `RequestCtx()`, and `UserContext()` to `Context()` to improve clarity and align with Go's context conventions.
```

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: unit (1.24.x, ubuntu-latest)
* GitHub Check: unit (1.24.x, macos-latest)
* GitHub Check: unit (1.24.x, windows-latest)
* GitHub Check: Analyse
* GitHub Check: repeated

</details>

<details>
<summary>🔇 Additional comments (3)</summary><blockquote>

<details>
<summary>router.go (3)</summary>

`109-153`: **LGTM - Optimized route matching for default context**

The direct field access and unsafe string conversions are appropriate performance optimizations for the default context path. The local `indexRoute` variable management is more efficient than using getters/setters.

---

`307-347`: **Unified request handler balances flexibility and performance**

The type assertion approach (`ctx.(*DefaultCtx)`) effectively maintains the performance optimization for the common case while supporting custom contexts. The error handling and flash message processing are correctly duplicated for both paths.



The design choice to keep separate `next` and `nextCustom` methods addresses the performance concerns mentioned in the PR objectives, where benchmarking showed a 10-nanosecond degradation when unifying the logic completely.

---

`156-207`: **Verify HTML escaping consistency across error paths**

The error message properly escapes the path using `html.EscapeString`, which is good for security. However, ensure this escaping approach is consistent with other error handling paths in the codebase.




```shell
#!/bin/bash
# Description: Check for consistent HTML escaping in error messages across the codebase
# Expected: All error messages containing user input should use html.EscapeString

echo ""Checking for error messages with path/URL content:""
rg -A 2 -B 2 ""Cannot.*\+"" --type go

echo -e ""\n\nChecking for html.EscapeString usage:""
rg ""html\.EscapeString"" --type go

echo -e ""\n\nChecking for potential unescaped user input in error messages:""
rg -A 2 -B 2 ""NewError.*\+"" --type go
```

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3127839399,2908053760,sourcery-ai[bot],COMMENTED,2025-06-08T02:45:46Z,"Hey @lollipopkit - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3119511341,2899806692,david-cortes-intel,APPROVED,2025-06-05T10:46:47Z,
3117734566,2899325008,BenElferink,COMMENTED,2025-06-05T08:21:22Z,
3117734566,2899625388,BenElferink,APPROVED,2025-06-05T09:47:14Z,
3164209098,2947119442,cubic-dev-ai[bot],COMMENTED,2025-06-20T19:32:16Z,"cubic reviewed 1 file and found no issues. Review PR in [cubic.dev](https://cubic.dev/pr/better-auth/better-auth/pull/3109).

<sub>React with 👍 or 👎 to teach cubic. Tag `@cubic-dev-ai` to give specific feedback.</sub>"
3081523540,2859261717,robertthepie,APPROVED,2025-05-21T22:19:14Z,"Thank you Goverment Provided Proofreader for our communial dyselxia.
LGTM

tho uncertain about the json one, since json to my knowledge doesn't support comments?"
3081523540,2860705090,sprunk,COMMENTED,2025-05-22T10:31:31Z,
3081523540,2861518559,WatchTheFort,CHANGES_REQUESTED,2025-05-22T14:39:36Z,"It looks like tabs were changed to spaces, please change back to tabs"
3081523540,2861955018,avezey-ci,COMMENTED,2025-05-22T16:55:48Z,
3081523540,2862041488,sprunk,COMMENTED,2025-05-22T17:24:43Z,
3081523540,2865215286,avezey-ci,COMMENTED,2025-05-23T17:34:20Z,
3070921391,2848347115,coderabbitai[bot],COMMENTED,2025-05-17T16:35:46Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>mistralrs-vision/tests/integration.rs (1)</summary><blockquote>

`17-18`: **Consider making the test more robust against potential image initialization changes**

While the test correctly verifies normalization logic, it implicitly assumes that `DynamicImage::new` initializes all pixel values to 0. For improved test robustness, consider explicitly setting the image pixel values or adding a comment explaining this assumption.

```diff
 let image = DynamicImage::new(3, 4, ColorType::Rgb8);
+// Note: DynamicImage::new initializes all pixel values to 0, which will normalize to -1.0 
+// with mean=0.5 and std=0.5
 let transforms = Transforms {
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**
**Cache: Disabled due to data retention organization setting**
**Knowledge Base: Disabled due to data retention organization setting**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between dc8700916788477c36b624915de6646a3eacb99b and 0a6e5800f15b1105e1fab49fa4a4dfa80321dad3.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `mistralrs-vision/tests/integration.rs` (1 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (2)</summary>

* GitHub Check: Check (macOS-latest, stable)
* GitHub Check: Clippy

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>mistralrs-vision/tests/integration.rs (1)</summary>

`17-18`: **Good addition of value-level test assertions!**

This enhancement improves the test coverage by verifying not just the tensor dimensions but also the actual values after normalization. You're correctly testing that a blank image (with assumed pixel values of 0) normalized with mean=0.5 and std=0.5 results in all pixels having a value of -1.0.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3160781674,2943523459,darccio,APPROVED,2025-06-19T15:55:21Z,
3160781674,2944953121,kakkoyun,APPROVED,2025-06-20T08:08:47Z,
3136176153,2917116284,themisvaltinos,COMMENTED,2025-06-11T13:16:41Z,
3136176153,2917121128,themisvaltinos,APPROVED,2025-06-11T13:17:58Z,lgtm just a minor nit in the code. also why did you end up removing the e2e test?
3130070212,2909832840,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-09T11:51:13Z,"## Pull Request Overview

This PR adds regression tests to verify that stopping HDMA transfers in HBlank mode correctly resets cycle counters.  
- Introduces a test to confirm that stopping HDMA resets cycles_hdma when transfers have completed a block.  
- Introduces a test to ensure that stopping transfers mid-block correctly resets both cycles_hdma and pending counts.



"
3069723662,2847678742,bolinfest,APPROVED,2025-05-16T21:53:17Z,
3143827404,2925102721,gemini-code-assist[bot],COMMENTED,2025-06-13T14:49:06Z,"## Summary of Changes

Hello @rgerhards, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request focuses on enhancing the documentation and clarity of the `omusrmsg` module. It transitions comments to a Doxygen-compatible format, adds comprehensive descriptions for the module and its functions, and explicitly documents the code's historical origin and associated BSD license heritage. These changes improve code readability and maintainability.

### Highlights

* **Documentation Style**: Updated comments in `omusrmsg.c` and `omusrmsg.h` to use Doxygen-style formatting (`/** ... */`) for improved documentation generation.
* **Code Origin Clarification**: Restored and clarified the comment noting that the code in `omusrmsg.c` was extracted from `syslogd.c`, which was under a BSD license at the time of the fork from sysklogd.
* **Function Descriptions**: Added detailed Doxygen comments describing the purpose, parameters, and behavior of key functions like `sendwallmsg`, `wallmsg`, `populateUsers`, and `modInitUsrMsg`.
* **Minor Fixes**: Corrected a typo in the copyright year (20072 -> 2007) in `omusrmsg.h`.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configureGemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3143827404,2925104458,gemini-code-assist[bot],COMMENTED,2025-06-13T14:49:44Z,"## Code Review

This pull request improves the documentation of the `omusrmsg` module by converting existing comments to Doxygen style and adding more detailed descriptions for functions. It also clarifies the origin of the code from syslogd under a BSD license. The changes enhance code maintainability and clarity. A minor inconsistency in the author name format between the .c and .h header files was noted."
3143827404,2927270140,gemini-code-assist[bot],COMMENTED,2025-06-14T05:58:56Z,"## Code Review

The pull request successfully converts internal C-style comments to Doxygen format for several functions and file headers in `omusrmsg.c` and `omusrmsg.h`. The new Doxygen comments are clear, accurate, and consistently formatted. The changes align well with the goal of improving documentation using Doxygen.

No issues meeting the specified severity threshold for individual review comments (medium, high, critical) were identified in the Doxygen comment additions themselves.

A minor typo was noted in the pull request description: ""Converte"" could be corrected to ""Convert"" or ""Converts""."
3147168220,2929001336,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-15T06:41:37Z,"## Pull Request Overview

This PR adds WebGL shader support to the web frontend, enabling enhanced shader rendering and parameter hooking by integrating and adapting existing SDL shader assets for WebGL.  
- Added a new setupWebGL function in TypeScript to initialize a WebGL2 context, compile shaders, and render frames.  
- Introduced multiple shader files (smooth bilinear, CRT, passthrough, bilinear, master vertex/fragment shaders) to support various rendering effects.  
- Updated the frontend entry point and changelog to integrate and document the new shader support.

### Reviewed Changes

Copilot reviewed 9 out of 9 changed files in this pull request and generated no comments.

<details>
<summary>Show a summary per file</summary>

| File                                | Description                                                         |
| ----------------------------------- | ------------------------------------------------------------------- |
| frontends/web/ts/webgl.ts           | Introduces WebGL initialization, setup, shader compilation, and draw. |
| frontends/web/res/shaders/*.frag    | Adds multiple fragment shaders supporting different filtering modes.  |
| frontends/web/res/shaders/master.vert | Provides the vertex shader supporting WebGL shader operations.       |
| frontends/web/index.ts              | Updates to load and initialize WebGL setup when a shader parameter is provided. |
| CHANGELOG.md                        | Documents shader support in the release notes.                        |
</details>



<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**frontends/web/ts/webgl.ts:1**
* [nitpick] Consider using a more specific type than 'any' for the emulator parameter to improve type safety and clarity.
```
export async function setupWebGL(emulator: any, shader: string) {
```
</details>

"
3147168220,2929005058,coderabbitai[bot],COMMENTED,2025-06-15T06:45:50Z,"**Actionable comments posted: 8**

<details>
<summary>♻️ Duplicate comments (1)</summary><blockquote>

<details>
<summary>frontends/web/res/shaders/bilinear.frag (1)</summary><blockquote>

`1-14`: _🛠️ Refactor suggestion_

**Same compilation blockers as passthrough.frag**

Missing WebGL-2 header / precision and stray `STATIC` qualifier.  Apply the same fix pattern as suggested for `passthrough.frag`; otherwise the bilinear filter cannot be selected at runtime.

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (3)</summary><blockquote>

<details>
<summary>frontends/web/index.ts (1)</summary><blockquote>

`62-64`: **Unhandled promise rejection from `setupWebGL`**

If a shader fails to compile (which it currently will), `setupWebGL` returns early but **does not reject**.  
However, any unexpected exception bubbles up and the surrounding code doesn’t guard against it.  
Wrap the call in a `try / catch` block to avoid killing the app:

```diff
-if (shader) {
-    await setupWebGL(emulator, shader);
-}
+if (shader) {
+    try {
+        await setupWebGL(emulator, shader);
+    } catch (e) {
+        console.error(""WebGL init failed:"", e);
+    }
+}
```

</blockquote></details>
<details>
<summary>frontends/web/res/shaders/crt.frag (2)</summary><blockquote>

`7-161`: **Consider performance optimization for complex CRT shader.**

This shader performs numerous texture samples and complex calculations per pixel, which could impact performance on lower-end devices. Consider:
1. Providing quality settings to disable expensive effects
2. Pre-calculating values that don't change per-pixel
3. Simplifying the shadow mask calculations

---

`1-5`: **Extract magic numbers into named constants for better maintainability.**

The shader uses several magic numbers (e.g., `8.0 / 7.0`, scanline position thresholds). Consider extracting these into named constants at the top of the file for better maintainability and tuning.


```diff
 #define SCANLINE_DEPTH 0.55
 #define CURVENESS 0.3
+#define Y_CURVE_RATIO (8.0 / 7.0)
+#define SCANLINE_THRESHOLD 0.5

 STATIC vec4 scale(sampler2D image, vec2 position, vec2 input_resolution, vec2 output_resolution)
 {
     /* Curve and pixel ratio */
     float y_curve = cos(position.x - 0.5) * CURVENESS + (1.0 - CURVENESS);
-    float y_multiplier = 8.0 / 7.0 / y_curve;
+    float y_multiplier = Y_CURVE_RATIO / y_curve;
```


Also applies to: 10-11, 47-48, 50-51

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 085603121af229b8a3e5323e42884c43d8ff4d6f and 2f0a3c64d6a5ec64443fc92b0e19a431815156b1.

</details>

<details>
<summary>📒 Files selected for processing (9)</summary>

* `CHANGELOG.md` (1 hunks)
* `frontends/web/index.ts` (3 hunks)
* `frontends/web/res/shaders/bilinear.frag` (1 hunks)
* `frontends/web/res/shaders/crt.frag` (1 hunks)
* `frontends/web/res/shaders/master.frag` (1 hunks)
* `frontends/web/res/shaders/master.vert` (1 hunks)
* `frontends/web/res/shaders/passthrough.frag` (1 hunks)
* `frontends/web/res/shaders/smooth_bilinear.frag` (1 hunks)
* `frontends/web/ts/webgl.ts` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>frontends/web/index.ts (1)</summary><blockquote>

<details>
<summary>frontends/web/ts/webgl.ts (1)</summary>

* `setupWebGL` (1-77)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (12)</summary>

* GitHub Check: Build Libretro Android (1.82.0)
* GitHub Check: Build (latest)
* GitHub Check: Build WASM (1.82.0, 18)
* GitHub Check: Build WASM (1.85.0, 18)
* GitHub Check: Build (1.85.0)
* GitHub Check: Build Simple (latest)
* GitHub Check: Build (1.84.0)
* GitHub Check: Build Simple (1.84.0)
* GitHub Check: Build Simple (1.85.0)
* GitHub Check: Build Simple (1.82.0)
* GitHub Check: Build Mac
* GitHub Check: Build Windows

</details>

<details>
<summary>🔇 Additional comments (7)</summary><blockquote>

<details>
<summary>CHANGELOG.md (1)</summary>

`14-14`: **Changelog entry looks good**

Entry is concise and in the correct section.

</details>
<details>
<summary>frontends/web/res/shaders/smooth_bilinear.frag (2)</summary>

`3-16`: **Well-implemented smooth bilinear interpolation.**

The implementation correctly:
- Calculates pixel coordinates with proper 0.5 offset for texel centers
- Samples the four neighboring texels
- Uses `smoothstep` for smooth interpolation weights
- Performs proper bilinear interpolation

---

`1-1`: <details>
<summary>✅ Verification successful</summary>

**Verify the `STATIC` keyword definition.**

The `STATIC` keyword is not a standard GLSL keyword. Ensure it's properly defined in the master shader or as a preprocessor directive.

---

🏁 Script executed:

```shell
#!/bin/bash
# Description: Verify that STATIC is defined in the master shader
# Test: Search for STATIC definition in master shader files
rg -A 2 ""#define STATIC"" frontends/web/res/shaders/
```

Length of output: 205

---



</details>

**STATIC macro definition confirmed**

The `STATIC` keyword is defined via `#define STATIC` in `frontends/web/res/shaders/master.frag`, so no further changes are needed.

</details>
<details>
<summary>frontends/web/res/shaders/crt.frag (1)</summary>

`28-31`: <details>
<summary>✅ Verification successful</summary>

**Verify the `texture_relative` function is defined.**

The shader uses `texture_relative` function which is not defined in this file. Ensure it's properly defined in the master shader.

---

🏁 Script executed:

```shell
#!/bin/bash
# Description: Verify texture_relative function definition
# Test: Search for texture_relative definition in shader files
ast-grep --pattern 'texture_relative($$$) {
  $$$
}'
```

Length of output: 54

---

To get a clearer picture of where (or if) `texture_relative` is defined, let’s search the entire repo for any definitions or references:

---

🏁 Script executed:

```shell
#!/bin/bash
# Search for all occurrences of texture_relative in the repository
rg -n 'texture_relative' .
```

Length of output: 2566

---



</details>

**Confirmed: `texture_relative` is defined in master shaders**

The function is declared at:  
- frontends/web/res/shaders/master.frag:22  
- frontends/sdl/res/shaders/master.frag:22  

No further action needed.

</details>
<details>
<summary>frontends/web/res/shaders/master.frag (3)</summary>

`17-26`: **Good implementation of gamma-correct texture sampling.**

The gamma correction implementation properly converts textures from sRGB to linear space for processing and back. The `texture_relative` function provides convenient offset-based sampling.

---

`49-73`: **Well-structured frame blending implementation.**

The switch statement clearly handles different blending modes with appropriate blend ratios. The use of bitwise operations for even/odd row detection is efficient.

---

`31-31`: <details>
<summary>✅ Verification successful</summary>

**Shader injection point for filter implementation.**

The `{filter}` placeholder will be replaced with the actual filter shader code. Ensure all filter shaders implement the required `scale` function with the correct signature.


---

🏁 Script executed:

```shell
#!/bin/bash
# Description: Verify all filter shaders implement the scale function
# Test: Search for scale function in all fragment shaders
fd -e frag . frontends/web/res/shaders/ --exec ast-grep --pattern 'scale(sampler2D $_,$_,$_,$_) {
  $$$
}'
```

Length of output: 108

---

I’ll double-check that we have the right shader files and locate any `scale` function definitions:

---

🏁 Script executed:

```shell
#!/bin/bash
# List all .frag shader files under frontends/web/res/shaders
echo ""=== Fragment shader files ===""
fd -e frag frontends/web/res/shaders

# Search for any occurrences of 'scale(' in those files
echo ""=== Occurrences of 'scale(' in .frag files ===""
rg -Hn 'scale\s*\(' --glob '*.frag' frontends/web/res/shaders
```

Length of output: 1689

---

I’ll list all fragment shader files to confirm we only have the master + filter shaders:

---

🏁 Script executed:

```shell
#!/bin/bash
echo ""=== .frag files in shaders directory ===""
find frontends/web/res/shaders -type f -name '*.frag'
```

Length of output: 349

---



</details>

**All filter shaders include the required `scale` function – approved.**

No further changes needed; each `.frag` file (`bilinear`, `crt`, `passthrough`, `smooth_bilinear`, and `master`) defines `STATIC vec4 scale(sampler2D image, vec2 position, vec2 input_resolution, vec2 output_resolution)` as expected.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3147168220,2929050182,coderabbitai[bot],COMMENTED,2025-06-15T08:55:43Z,"**Actionable comments posted: 1**

<details>
<summary>♻️ Duplicate comments (3)</summary><blockquote>

<details>
<summary>frontends/web/ts/webgl.ts (3)</summary><blockquote>

`53-56`: **Still no null-checks for uniform locations**  
`getUniformLocation` can return `null`; subsequent `gl.uniform*` calls will throw. This was raised in a previous review and is still unresolved.

---

`84-85`: **Expose cleanup to prevent GPU memory leaks**  
VAO, VBO, texture, shaders and program are never released. Please return a disposer (or register a page-visibility handler) to call `gl.delete*`. This comment was already provided earlier.

---

`103-106`: **No error handling around shader fetch** – network failures will surface as uncaught promise rejections. Prior review already highlighted this.

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>frontends/web/ts/webgl.ts (2)</summary><blockquote>

`87-100`: **Remove redundant `case` clauses in `getShaderPath`**

`case ""pass"":` and `""passthrough""` are followed by a `default` that returns the same path, making them dead code.  

```diff
-        case ""pass"":    
-        case ""passthrough"":
-        default:
-            return require(""../res/shaders/passthrough.frag"");
+        default:
+            return require(""../res/shaders/passthrough.frag"");
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Biome (1.9.4)</summary>

[error] 96-96: Useless case clause.

because the default clause is present:

Unsafe fix: Remove the useless case.


(lint/complexity/noUselessSwitchCase)

---

[error] 97-97: Useless case clause.

because the default clause is present:

Unsafe fix: Remove the useless case.


(lint/complexity/noUselessSwitchCase)

</details>

</details>

---

`124-139`: **Delete shaders after linking to free GPU memory**

After a successful `linkProgram`, the compiled shader objects are no longer needed:

```diff
 gl.linkProgram(program);
 if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
     console.error(gl.getProgramInfoLog(program));
     return null;
 }
-return program;
+
+gl.detachShader(program, vs);
+gl.detachShader(program, fs);
+gl.deleteShader(vs);
+gl.deleteShader(fs);
+
+return program;
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 2f0a3c64d6a5ec64443fc92b0e19a431815156b1 and 57122bfb1acf9b748d4b2f3cf69edf2768cdd2c6.

</details>

<details>
<summary>📒 Files selected for processing (7)</summary>

* `frontends/sdl/res/shaders/master.frag` (1 hunks)
* `frontends/web/.parcelrc` (1 hunks)
* `frontends/web/index.ts` (3 hunks)
* `frontends/web/package.json` (2 hunks)
* `frontends/web/res/shaders/master.frag` (1 hunks)
* `frontends/web/res/shaders/master.vert` (1 hunks)
* `frontends/web/ts/webgl.ts` (1 hunks)

</details>

<details>
<summary>✅ Files skipped from review due to trivial changes (2)</summary>

* frontends/sdl/res/shaders/master.frag
* frontends/web/.parcelrc

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (3)</summary>

* frontends/web/res/shaders/master.vert
* frontends/web/index.ts
* frontends/web/res/shaders/master.frag

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 Biome (1.9.4)</summary>

<details>
<summary>frontends/web/ts/webgl.ts</summary>

[error] 96-96: Useless case clause.

because the default clause is present:

Unsafe fix: Remove the useless case.


(lint/complexity/noUselessSwitchCase)

---

[error] 97-97: Useless case clause.

because the default clause is present:

Unsafe fix: Remove the useless case.


(lint/complexity/noUselessSwitchCase)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (38)</summary>

* GitHub Check: Build Libretro Android (1.85.0)
* GitHub Check: Build Libretro Android (1.83.0)
* GitHub Check: Build Documentation (rustlang/rust:nightly)
* GitHub Check: Build Libretro (1.84.0)
* GitHub Check: Build Windows
* GitHub Check: Build Libretro Android (1.84.0)
* GitHub Check: Build Mac
* GitHub Check: Build Libretro Android (1.82.0)
* GitHub Check: Build Documentation (rust:1.82.0)
* GitHub Check: Build SDL (latest)
* GitHub Check: Build Documentation (rust:latest)
* GitHub Check: Build Libretro Android (latest)
* GitHub Check: Build Libretro (1.83.0)
* GitHub Check: Build Libretro (1.85.0)
* GitHub Check: Build WASM (1.82.0, 18)
* GitHub Check: Build Documentation (rust:1.84.0)
* GitHub Check: Build Documentation (rust:1.85.0)
* GitHub Check: Build WASM (latest, 18)
* GitHub Check: Build SDL (1.84.0)
* GitHub Check: Build WASM (1.83.0, 18)
* GitHub Check: Build Documentation (rust:1.83.0)
* GitHub Check: Build WASM (1.85.0, 18)
* GitHub Check: Build Libretro (1.82.0)
* GitHub Check: Build WASM (1.84.0, 18)
* GitHub Check: Build Libretro (latest)
* GitHub Check: Build (latest)
* GitHub Check: Build SDL (1.85.0)
* GitHub Check: Build SDL (1.83.0)
* GitHub Check: Build SDL (1.82.0)
* GitHub Check: Build Simple (1.82.0)
* GitHub Check: Build (1.83.0)
* GitHub Check: Build Simple (1.85.0)
* GitHub Check: Build (1.84.0)
* GitHub Check: Build Simple (latest)
* GitHub Check: Build (1.82.0)
* GitHub Check: Build (1.85.0)
* GitHub Check: Build Simple (1.84.0)
* GitHub Check: Build Simple (1.83.0)

</details>

<details>
<summary>🔇 Additional comments (2)</summary><blockquote>

<details>
<summary>frontends/web/package.json (2)</summary>

`21-21`: **Verify Parcel plugin & core version compatibility**

`@parcel/transformer-glsl` is pinned to `2.15.2`, while the root Parcel dev-dependency remains at `2.14.0`. Minor version mismatches inside Parcel’s 2.x line have caused broken builds in the past (parcel-plugin API changes). Confirm that the shader transformer still works with Parcel 2.14 or bump Parcel to 2.15 to keep them in sync.

---

`48-50`: **Risk of duplicate React copies via deep alias**

Hard-wiring `react` and `react-dom` to the nested path inside `emukit` can lead to two React instances if any other dependency resolves its own copy, causing “Hooks can only be called inside the body of a function component” errors. Please double-check the resulting bundle for duplicated React and consider using `resolutions`/`alias` at the workspace root or peerDependencies instead.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3119797290,2898847277,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-05T04:41:49Z,"## Pull Request Overview

This PR fixes an issue with unhandled promise rejections when a mobile connection is rejected. It does so by wrapping the connect() call in a try-catch block, adds an end-to-end test verifying that rejected connection requests are handled, and updates the changeset accordingly.
- Wrap the connect() call in MobileOptions.tsx in a try-catch block to prevent unhandled rejections.
- Add a new test in MobileOptions.test.tsx to ensure rejected connect() calls do not surface as unhandled promise rejections.
- Update the changeset to document the fix.

### Reviewed Changes

Copilot reviewed 3 out of 3 changed files in this pull request and generated 1 comment.

| File                                                         | Description                                                   |
| ------------------------------------------------------------ | ------------------------------------------------------------- |
| packages/rainbowkit/src/components/ConnectOptions/MobileOptions.tsx | Added a try-catch block around the connect() call to catch errors. |
| packages/rainbowkit/src/components/ConnectOptions/MobileOptions.test.tsx | Introduced a test to verify that connection rejections are correctly handled. |
| .changeset/b93dd648.md                                        | Updated changeset with a patch version and description of the fix. |



"
3162632994,2946052381,batikankarakan,APPROVED,2025-06-20T13:02:37Z,
3155277983,2937571952,gemini-code-assist[bot],COMMENTED,2025-06-18T02:44:07Z,"## Summary of Changes

Hello @gaby, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request focuses on enhancing the test suite for the retry mechanism by adding new coverage for configuration defaults and custom settings, as well as introducing a specific test case to handle failures in random number generation within the exponential backoff logic.

### Highlights

* **Retry Configuration Testing**: Added a new test file (`addon/retry/config_test.go`) to provide comprehensive test coverage for the `configDefault` function, ensuring correct behavior for default, custom, and partially/negatively configured retry settings.
* **Exponential Backoff Randomness Test**: Introduced a new test case (`Test_ExponentialBackoff_NextRandFailure`) in `addon/retry/exponential_backoff_test.go` to verify the `ExponentialBackoff` behavior when the underlying random number generator fails, ensuring it correctly falls back to `MaxBackoffTime` and preserves the `currentInterval`.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configure Gemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3155277983,2937573665,gemini-code-assist[bot],COMMENTED,2025-06-18T02:45:48Z,"## Code Review

This pull request adds test coverage for retry config defaults and custom configurations, as well as testing the `ExponentialBackoff` behavior when random number generation fails. The tests are well-structured and cover the intended scenarios."
3155277983,2937576093,coderabbitai[bot],COMMENTED,2025-06-18T02:48:13Z,"**Actionable comments posted: 1**

<details>
<summary>🔭 Outside diff range comments (1)</summary><blockquote>

<details>
<summary>addon/retry/exponential_backoff_test.go (1)</summary><blockquote>

`111-113`: **Loop construct prevents compilation**

`range` cannot be used on an `int`.  
Current form:

```go
for i := range tt.expBackoff.MaxRetryCount {
```

fails to compile. Replace with an index-based loop:

```diff
-for i := range tt.expBackoff.MaxRetryCount {
+for i := 0; i < tt.expBackoff.MaxRetryCount; i++ {
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between a35c5d2e15372b2d0d191ad57216b659971d8b99 and 417f3e1c4620ffb2ada80c39010356793e309888.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `addon/retry/config_test.go` (1 hunks)
* `addon/retry/exponential_backoff_test.go` (2 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: Analyse
* GitHub Check: unit (1.24.x, macos-13)
* GitHub Check: unit (1.24.x, macos-latest)
* GitHub Check: unit (1.24.x, windows-latest)
* GitHub Check: unit (1.24.x, ubuntu-latest)
* GitHub Check: repeated
* GitHub Check: Compare
* GitHub Check: lint

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>addon/retry/config_test.go (1)</summary>

`10-14`: **Solid coverage of default-config path**

The test accurately asserts that `configDefault()` returns `DefaultConfig` when no custom options are supplied.  
No issues spotted.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3155277983,2937584267,github-actions[bot],COMMENTED,2025-06-18T02:56:00Z,"<!-- github-benchmark-action-comment(start): Benchmark Alert -->
# :warning: **Performance Alert** :warning:

Possible performance regression was detected for benchmark.
Benchmark result of this commit is worse than the previous benchmark result exceeding threshold `1.50`.

| Benchmark suite | Current: d0117726beace88cb389b1096bf36a267f3df707 | Previous: a35c5d2e15372b2d0d191ad57216b659971d8b99 | Ratio |
|-|-|-|-|
| `Benchmark_GenericParseTypeBytes/benchmark_genericParseTypeBytes#01` | `33.49` ns/op	       8 B/op	       1 allocs/op | `20.27` ns/op	       8 B/op	       1 allocs/op | `1.65` |
| `Benchmark_GenericParseTypeBytes/benchmark_genericParseTypeBytes#01 - ns/op` | `33.49` ns/op | `20.27` ns/op | `1.65` |

This comment was automatically generated by [workflow](https://github.com/gofiber/fiber/actions?query=workflow%3ABenchmark) using [github-action-benchmark](https://github.com/marketplace/actions/continuous-benchmark).
<!-- github-benchmark-action-comment(end): Benchmark Alert -->"
3155277983,2937883005,ReneWerner87,APPROVED,2025-06-18T06:24:33Z,
3070683420,2848245505,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-17T11:16:28Z,"## Pull Request Overview

This PR corrects method signatures and type hints in the stack component documentation to align examples with the SDK.

- Fixed the `open` method signature in the custom stack component docs  
- Harmonized the parameter name in `BaseArtifactStore.open` and updated the return type for `BaseArtifactStoreFlavor.name`

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated 1 comment.

| File                                                                          | Description                                                                                   |
| ----------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------- |
| docs/book/component-guide/contribute/custom-stack-component.md                | Removed stray colon and fixed `open` signature formatting                                      |
| docs/book/component-guide/artifact-stores/custom.md                           | Renamed `name` parameter to `path` in `open`, and changed `name()` return type from `Type[...]` to `str` |


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**docs/book/component-guide/contribute/custom-stack-component.md:181**
* Consider adding full type annotations to match the base class signature, e.g., `def open(self, path: PathType, mode: str = ""r"") -> Any`, to maintain consistency and clarity across examples.
```
def open(self, path=""r""):
```
</details>

"
3070683420,2848801359,htahir1,APPROVED,2025-05-18T07:56:14Z,
3070956533,2848361190,ellipsis-dev[bot],COMMENTED,2025-05-17T17:42:55Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 2ca0506b62792bdac87110223eb3c624a0bf161b in <ellipsistime>48 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `136` lines of code in `3` files
> - Skipped `0` files when reviewing.
> - Skipped posting `3` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>agents-api/agents_api/queries/projects/__init__.py:10</code></summary>
> 
> - **Draft comment:** 
> Removed ruff noqa comment. Ensure that any previously suppressed warnings are now properly addressed.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>agents-api/agents_api/routers/sessions/chat.py:91</code></summary>
> 
> - **Draft comment:** 
> Good fix: using list comprehension ensures distinct dicts for each choice to avoid shared state issues from list multiplication.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>agents-api/tests/test_chat_streaming.py:411</code></summary>
> 
> - **Draft comment:** 
> New regression test for multi-choice streaming is well-structured. Consider refactoring the fake classes if they are to be reused across tests.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_QpnWAv4ThB29tR9D`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3135395580,2915602695,eqy,COMMENTED,2025-06-11T04:29:32Z,"Naive question: does this decrease the total reserved memory or just the reported allocated memory?

I thought the fundamental issue was that the events could not be queried in the middle of a stream capture so they get deferred until the end of the capture https://github.com/pytorch/pytorch/blob/84c14361c28e1b553ea405ef5020cf0a90468850/c10/cuda/CUDACachingAllocator.cpp#L1583"
3135395580,2918326569,pritamdamania87,COMMENTED,2025-06-11T18:44:11Z,
3135395580,2919326604,eqy,COMMENTED,2025-06-12T02:57:13Z,
3135395580,2922046714,pritamdamania87,COMMENTED,2025-06-12T17:24:12Z,
3135395580,2922189108,eqy,COMMENTED,2025-06-12T18:11:51Z,
3135395580,2922553977,pritamdamania87,COMMENTED,2025-06-12T20:24:33Z,
3135395580,2922837233,eqy,COMMENTED,2025-06-12T22:50:34Z,
3135395580,2932719775,soulitzer,COMMENTED,2025-06-16T16:05:16Z,
3135395580,2932748398,soulitzer,COMMENTED,2025-06-16T16:15:52Z,
3135395580,2932832544,eqy,COMMENTED,2025-06-16T16:47:41Z,
3135395580,2933430773,ngimel,APPROVED,2025-06-16T20:32:55Z,
3135395580,2933900584,ngimel,COMMENTED,2025-06-17T01:41:28Z,"This is making things strictly better (if only a little bit better), so why not?"
3137800359,2918335002,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-11T18:47:24Z,"## Pull Request Overview

This PR upgrades all @vanilla-extract dependencies across the repository and updates the lockfile to match.  
- Upgraded vanilla-extract packages in site/package.json  
- Upgraded vanilla-extract packages in packages/rainbowkit/package.json  
- Upgraded vanilla-extract esbuild and vite plugins in package.json

### Reviewed Changes

Copilot reviewed 5 out of 5 changed files in this pull request and generated no comments.

| File                                 | Description                                                  |
| ------------------------------------ | ------------------------------------------------------------ |
| site/package.json                    | Updated vanilla-extract dependency versions.                 |
| packages/rainbowkit/package.json      | Upgraded multiple vanilla-extract packages in both dev and runtime dependencies. |
| package.json                         | Upgraded vanilla-extract esbuild-plugin and vite-plugin versions. |
| .changeset/374def6f.md               | Documented upgrade of vanilla-extract dependencies.          |


<details>
<summary>Comments suppressed due to low confidence (3)</summary>

**site/package.json:16**
* Upgraded version for @vanilla-extract/css; please verify that any adjustments in the API surface of this dependency are reflected in the affected styling configurations.
```
+    ""@vanilla-extract/css"": ""1.17.3"",
```
**packages/rainbowkit/package.json:68**
* Ensure that the upgraded @vanilla-extract packages in this file, especially in the dependencies section, are compatible with the component styling and any custom configurations in the project.
```
+    ""@vanilla-extract/css"": ""1.17.3"",
```
**package.json:57**
* Check that the updated @vanilla-extract esbuild-plugin works seamlessly with the existing build pipeline and that no breaking changes affect the current setup.
```
+    ""@vanilla-extract/esbuild-plugin"": ""^2.3.17"",
```
</details>

"
3153484500,2935644761,gemini-code-assist[bot],COMMENTED,2025-06-17T13:17:28Z,"## Summary of Changes

Hello @gaby, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request significantly improves the robustness of the application's hook system by expanding its test coverage. The primary focus is on validating how various hook execution functions behave when a registered hook returns an error, ensuring that such scenarios are gracefully handled and reported. It also confirms correct path resolution for mounted applications within the hook context.

### Highlights

* **Enhanced Test Coverage**: Added a suite of new unit tests to `hooks_test.go` to specifically increase test coverage for error handling paths within the application's hook execution functions.
* **Error Scenario Validation**: Introduced dedicated tests for `executeOnRouteHooks`, `executeOnNameHooks`, `executeOnGroupHooks`, `executeOnGroupNameHooks`, `executeOnListenHooks`, `executeOnPreShutdownHooks`, `executeOnForkHooks`, and `executeOnMountHooks` to ensure they correctly handle and propagate errors returned by registered hooks.
* **Mounted Application Context Testing**: New tests verify that the `mountPath` is correctly prefixed to `Route` and `Group` paths when hooks are executed within the context of a mounted application.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configure Gemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3153484500,2935650160,gemini-code-assist[bot],COMMENTED,2025-06-17T13:18:58Z,"## Code Review

The code changes add new test cases to increase the test coverage for the hooks.go file, specifically focusing on error scenarios for various hook types when a mount path is involved. The new tests cover OnRoute, OnName, OnGroup, OnGroupName, OnListen, OnPreShutdown, OnFork, and OnMount hooks, ensuring that errors returned by these hooks are properly handled and asserted."
3153484500,2935658091,coderabbitai[bot],COMMENTED,2025-06-17T13:21:09Z,"**Actionable comments posted: 1**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>hooks_test.go (1)</summary><blockquote>

`350-400`: **Extract the mount path literal into a shared constant to silence `goconst` and improve maintainability**

The string `""/api""` appears four times across the newly-added tests (lines 350, 366, 382 and 398).  
`golangci-lint` is already flagging this duplication. Moving the literal to a package-level constant keeps the tests DRY and removes the lint failure.

```diff
+const testMountPath = ""/api""
…
-	app.mountFields.mountPath = ""/api""
+	app.mountFields.mountPath = testMountPath
```

Apply the same replacement in the other three occurrences.  
This keeps the intent clear and prevents future copy-paste errors.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 0590709556719da7e9adb1b413f1a094f1380ceb and 2872398684157cd004c765d8e9e26b9ca76959bd.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `hooks_test.go` (2 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 GitHub Check: lint</summary>

<details>
<summary>hooks_test.go</summary>

[failure] 350-350: 
string `/api` has 4 occurrences, make it a constant (goconst)

</details>

</details>
<details>
<summary>🪛 GitHub Actions: golangci-lint</summary>

<details>
<summary>hooks_test.go</summary>

[error] 350-350: golangci-lint: string `/api` has 4 occurrences, make it a constant (goconst)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (2)</summary>

* GitHub Check: repeated
* GitHub Check: Compare

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3153484500,2935691710,github-actions[bot],COMMENTED,2025-06-17T13:29:25Z,"<!-- github-benchmark-action-comment(start): Benchmark Alert -->
# :warning: **Performance Alert** :warning:

Possible performance regression was detected for benchmark.
Benchmark result of this commit is worse than the previous benchmark result exceeding threshold `1.50`.

| Benchmark suite | Current: 38d5e32a5ee93dd8b5b99c4a566ed326f9b87ed3 | Previous: 0590709556719da7e9adb1b413f1a094f1380ceb | Ratio |
|-|-|-|-|
| `Benchmark_Ctx_SendString_B` | `16.17` ns/op	       0 B/op	       0 allocs/op | `9.049` ns/op	       0 B/op	       0 allocs/op | `1.79` |
| `Benchmark_Ctx_SendString_B - ns/op` | `16.17` ns/op | `9.049` ns/op | `1.79` |
| `BenchmarkDecoderedirectionMsg - MB/s` | `414.92` MB/s | `250.12` MB/s | `1.66` |

This comment was automatically generated by [workflow](https://github.com/gofiber/fiber/actions?query=workflow%3ABenchmark) using [github-action-benchmark](https://github.com/marketplace/actions/continuous-benchmark).
<!-- github-benchmark-action-comment(end): Benchmark Alert -->"
3153484500,2935692904,coderabbitai[bot],COMMENTED,2025-06-17T13:29:42Z,"**Actionable comments posted: 0**

<details>
<summary>♻️ Duplicate comments (2)</summary><blockquote>

<details>
<summary>hooks_test.go (2)</summary><blockquote>

`448-451`: **Same global-logger race in fork-hook test**  
Issue & fix are identical to the previous comment – reuse the same pattern.

---

`425-437`: **Parallel test mutates global logger – data race & flaky output**

`log.SetOutput(&buf)` changes a global singleton while this test is flagged `t.Parallel()`.  
Any other parallel test that writes to or re-configures the logger will race.

```diff
- t.Parallel()
- var buf bytes.Buffer
- log.SetOutput(&buf)
+ // Cannot run in parallel because we mutate global logger state.
+ // t.Parallel()
+
+ orig := log.Writer() // preserve
+ var buf bytes.Buffer
+ log.SetOutput(&buf)
+ defer log.SetOutput(orig)
```

Either serialise the test (drop `t.Parallel()`), or guard `log.SetOutput` with a shared mutex used by every test touching the logger.

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>hooks_test.go (1)</summary><blockquote>

`4-10`: **Avoid confusing alias ‑ import Fiber logger under a distinct name**

Importing `github.com/gofiber/fiber/v3/log` as plain `log` shadows the standard library’s `log` package and can surprise future readers/tools.  
Consider a clearer alias such as `fiberlog`:

```diff
-	""github.com/gofiber/fiber/v3/log""
+	fiberlog ""github.com/gofiber/fiber/v3/log""
```

All subsequent references (`log.SetOutput`, etc.) would then use `fiberlog.*`, making intent unambiguous.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 2872398684157cd004c765d8e9e26b9ca76959bd and 38d5e32a5ee93dd8b5b99c4a566ed326f9b87ed3.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `hooks_test.go` (2 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: lint
* GitHub Check: unit (1.24.x, windows-latest)
* GitHub Check: unit (1.24.x, macos-latest)
* GitHub Check: unit (1.24.x, macos-13)
* GitHub Check: unit (1.24.x, ubuntu-latest)
* GitHub Check: Compare
* GitHub Check: repeated
* GitHub Check: Analyse

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3153484500,2936658051,ReneWerner87,APPROVED,2025-06-17T18:20:46Z,
3153484500,2939102224,ReneWerner87,APPROVED,2025-06-18T12:56:25Z,
3153190958,2935322123,GSadee,APPROVED,2025-06-17T11:45:05Z,
3153190958,2935335731,coderabbitai[bot],COMMENTED,2025-06-17T11:49:56Z,"**Actionable comments posted: 3**

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>src/Sylius/Bundle/AdminBundle/Resources/translations/messages.pt.yml (1)</summary><blockquote>

`124-126`: **Ensure translation consistency in capitalization.**

Other UI translation values start with uppercase letters. Please update these entries to start with capitalized first letters:
- `to_approve`: `'Para aprovar'`
- `to_process`: `'Para processar'`
- `to_ship`: `'Para enviar'`

</blockquote></details>
<details>
<summary>src/Sylius/Bundle/UiBundle/Resources/translations/messages.de.yml (1)</summary><blockquote>

`735-738`: **Verify translation consistency for channel role labels.**

The English term “Channel-Admin” is used here, whereas other keys prefer a German equivalent (e.g., “Ausgabekanal”). Please confirm if “Channel-Admin” is intentional or should be localized (e.g., “Kanal-Admin”).

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 4ccb315ff88b19e7f0f5935a656bc3588d3a133d and e9d57540fb675aa560e36f791d64abba685ae790.

</details>

<details>
<summary>📒 Files selected for processing (16)</summary>

* `src/Sylius/Bundle/AdminBundle/Resources/translations/messages.cs.yml` (2 hunks)
* `src/Sylius/Bundle/AdminBundle/Resources/translations/messages.de.yml` (1 hunks)
* `src/Sylius/Bundle/AdminBundle/Resources/translations/messages.fr.yml` (2 hunks)
* `src/Sylius/Bundle/AdminBundle/Resources/translations/messages.hi.yml` (2 hunks)
* `src/Sylius/Bundle/AdminBundle/Resources/translations/messages.it.yml` (2 hunks)
* `src/Sylius/Bundle/AdminBundle/Resources/translations/messages.ja.yml` (2 hunks)
* `src/Sylius/Bundle/AdminBundle/Resources/translations/messages.ko.yml` (2 hunks)
* `src/Sylius/Bundle/AdminBundle/Resources/translations/messages.no.yml` (2 hunks)
* `src/Sylius/Bundle/AdminBundle/Resources/translations/messages.pt.yml` (2 hunks)
* `src/Sylius/Bundle/AdminBundle/Resources/translations/messages.ro.yml` (2 hunks)
* `src/Sylius/Bundle/AdminBundle/Resources/translations/messages.sk.yml` (2 hunks)
* `src/Sylius/Bundle/AdminBundle/Resources/translations/messages.sv.yml` (2 hunks)
* `src/Sylius/Bundle/AdminBundle/Resources/translations/messages.zh_CN.yml` (2 hunks)
* `src/Sylius/Bundle/AttributeBundle/Resources/translations/validators.de.yml` (1 hunks)
* `src/Sylius/Bundle/ProductBundle/Resources/translations/validators.de.yml` (1 hunks)
* `src/Sylius/Bundle/UiBundle/Resources/translations/messages.de.yml` (3 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (3)</summary>

* GitHub Check: Static checks / PHP 8.2, Symfony ^6.4
* GitHub Check: Static checks / PHP 8.4, Symfony ^7.2
* GitHub Check: Static checks / PHP 8.3, Symfony ^7.2

</details>

<details>
<summary>🔇 Additional comments (38)</summary><blockquote>

<details>
<summary>src/Sylius/Bundle/AdminBundle/Resources/translations/messages.fr.yml (3)</summary>

`99-99`: **Approve French translation for ""overdue"".**

The new key `ui.overdue` is correctly translated as ""En retard"".

---

`104-104`: **Approve French translation for ""pending_actions"".**

The new key `ui.pending_actions` is accurately translated as ""Actions en attente"".

---

`124-126`: **Approve French translations for new order processing statuses.**

Keys `ui.to_approve`, `ui.to_process`, and `ui.to_ship` are correctly translated as ""à approuver"", ""à traiter"", and ""à expédier"" respectively.

</details>
<details>
<summary>src/Sylius/Bundle/AdminBundle/Resources/translations/messages.hi.yml (3)</summary>

`99-99`: **New translation key `overdue` added correctly.**

The `overdue` entry is properly indented, follows snake_case naming, and uses consistent YAML quoting.

---

`104-104`: **New translation key `pending_actions` added correctly.**

The `pending_actions` entry aligns with other UI status keys in style and format.

---

`124-126`: **Status-related keys `to_approve`, `to_process`, and `to_ship` added correctly.**

These new UI labels are consistently indented, named, and quoted, matching the existing translations pattern.

</details>
<details>
<summary>src/Sylius/Bundle/AdminBundle/Resources/translations/messages.pt.yml (2)</summary>

`99-99`: **Approve new 'overdue' translation addition.**

The key `sylius.ui.overdue` is correctly added with a clear Portuguese translation matching other locales.

---

`104-104`: **Approve new 'pending_actions' translation addition.**

The key `sylius.ui.pending_actions` is correctly added and follows translation patterns consistently.

</details>
<details>
<summary>src/Sylius/Bundle/AdminBundle/Resources/translations/messages.zh_CN.yml (5)</summary>

`99-99`: **Add translation for `sylius.ui.overdue`.**  
The new key and Chinese translation ('逾期') align with the other locale updates and maintain consistent indentation.

---

`104-104`: **Add translation for `sylius.ui.pending_actions`.**  
The translation ('待处理操作') correctly follows the file’s style and matches the intended UI context.

---

`124-124`: **Add translation for `sylius.ui.to_approve`.**  
The new entry ('待批准') is properly formatted and consistent with similar approval-related keys.

---

`125-125`: **Add translation for `sylius.ui.to_process`.**  
The translation ('待处理') fits the processing context and uses the correct YAML structure.

---

`126-126`: **Add translation for `sylius.ui.to_ship`.**  
The key ('待发货') is added with correct indentation and aligns with shipment status labels in other languages.

</details>
<details>
<summary>src/Sylius/Bundle/AdminBundle/Resources/translations/messages.ja.yml (5)</summary>

`99-99`: **Proper translation for ""overdue""**  
The Japanese text '期限超過' accurately conveys the new status label.

---

`104-104`: **Proper translation for ""pending_actions""**  
'保留中のアクション' correctly reflects the intent of pending actions.

---

`124-124`: **Proper translation for ""to_approve""**  
The term '承認待ち' is an accurate match for items awaiting approval.

---

`125-125`: **Proper translation for ""to_process""**  
'処理待ち' correctly represents items queued for processing.

---

`126-126`: **Proper translation for ""to_ship""**  
'発送待ち' appropriately captures the meaning of items ready to ship.

</details>
<details>
<summary>src/Sylius/Bundle/AdminBundle/Resources/translations/messages.cs.yml (2)</summary>

`99-104`: **Approve new UI status translations.**

The Czech translations for `overdue` (`'Po termínu'`) and `pending_actions` (`'Čekající akce'`) align with the other locale files and follow the established pattern.

---

`124-126`: **Approve order workflow status translations.**

The keys `to_approve`, `to_process`, and `to_ship` have been correctly added with accurate Czech translations. They mirror changes in other languages and maintain consistency.

</details>
<details>
<summary>src/Sylius/Bundle/AdminBundle/Resources/translations/messages.ko.yml (3)</summary>

`99-99`: **Approve new `overdue` key.**

The added translation `'기한 초과'` correctly reflects the English `overdue` status and matches the pattern used in other language files. Indentation and grouping under `ui` are consistent.

---

`104-104`: **Approve new `pending_actions` key.**

The translation `'보류 중인 작업'` is accurate and follows the established style. Placement under `ui` is consistent with its semantic grouping.

---

`124-126`: **Approve new workflow status keys.**

The three additions—`to_approve`, `to_process`, and `to_ship`—are correctly translated (`'승인 대기'`, `'처리 대기'`, `'배송 대기'`) and maintain consistent indentation and grouping under `ui`.

</details>
<details>
<summary>src/Sylius/Bundle/AdminBundle/Resources/translations/messages.no.yml (3)</summary>

`99-99`: **Add translation for `overdue` key**  
Translation is accurate and aligns with other locales.

---

`104-104`: **Add translation for `pending_actions` key**  
String is correct and consistent with existing UI labels.

---

`124-126`: **Add workflow status keys `to_approve`, `to_process`, `to_ship`**  
Translations match the new UI flow terminology and follow the file’s formatting.

</details>
<details>
<summary>src/Sylius/Bundle/AdminBundle/Resources/translations/messages.de.yml (1)</summary>

`75-84`: **Additive translation keys for new UI elements look correct.**

The new keys are properly indented and quoted, and align with existing patterns under `sylius.ui`. No syntax or formatting issues detected.

</details>
<details>
<summary>src/Sylius/Bundle/ProductBundle/Resources/translations/validators.de.yml (1)</summary>

`55-56`: **Validation messages for association type code length are consistent.**

The new `min_length` and `max_length` entries follow the same pipe-separated singular/plural format as other bundles and adhere to YAML syntax.

</details>
<details>
<summary>src/Sylius/Bundle/AttributeBundle/Resources/translations/validators.de.yml (1)</summary>

`11-12`: **Attribute code length constraints added correctly.**

The `min_length` and `max_length` messages match the format used elsewhere, and indentation is correct.

</details>
<details>
<summary>src/Sylius/Bundle/UiBundle/Resources/translations/messages.de.yml (2)</summary>

`332-332`: **New permission checker flag translation is valid.**

The key `enabled_permission_checker` is formatted consistently with other boolean UI flags.

---

`591-591`: **Notification action translation is correct.**

The `notify` key uses an imperative matching `notify_customer` and aligns with existing notification labels.

</details>
<details>
<summary>src/Sylius/Bundle/AdminBundle/Resources/translations/messages.it.yml (3)</summary>

`99-99`: **Verify nesting of ‘overdue’ under the `order` section.**

It’s currently indented at the same level as other root‐level `ui` keys. According to the AI summary and consistency with other languages, `overdue` should live under `ui.order` and use the same indentation as `date`. Please confirm or adjust the indent to match the `order` block.

---

`104-104`: **Verify nesting of ‘pending_actions’ under the `order` section.**

Similar to `overdue`, this key is defined at the root `ui` level. Ensure it’s meant to be under `ui.order` (aligned with `date`), or correct its placement.

---

`124-126`: **New UI translation keys are properly added.**

The Italian strings for `to_approve`, `to_process`, and `to_ship` are accurate, correctly quoted, and inserted in the expected alphabetical position under the `ui` section.

</details>
<details>
<summary>src/Sylius/Bundle/AdminBundle/Resources/translations/messages.sk.yml (3)</summary>

`104-104`: **Translation added correctly for `pending_actions`.**
The Slovak string `Čakajúce akcie` aligns with the intended UI context.

---

`124-126`: **Translations for `to_approve`, `to_process`, and `to_ship` are correct.**
The Slovak terms `na schválenie`, `na spracovanie`, and `na odoslanie` match the UI actions.

---

`99-99`: ```shell
#!/bin/bash
echo ""Checking for missing translation keys (overdue, pending_actions, to_approve, to_process, to_ship):""
for file in src/Sylius/Bundle/AdminBundle/Resources/translations/messages.*.yml; do
  missing=()
  for key in overdue pending_actions to_approve to_process to_ship; do
    if ! grep -q ""^\s*$key:"" ""$file""; then
      missing+=(""$key"")
    fi
  done
  if [ ${#missing[@]} -ne 0 ]; then
    echo ""$file missing: ${missing[*]}""
  fi
done
```

</details>
<details>
<summary>src/Sylius/Bundle/AdminBundle/Resources/translations/messages.sv.yml (1)</summary>

`124-126`: ```shell
#!/bin/bash
rg -n ""sylius.ui.to_process""
rg -n ""sylius.ui.to_ship""
rg -n ""to_process""
rg -n ""to_ship""
```

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3153190958,2935431272,GSadee,APPROVED,2025-06-17T12:20:33Z,
3070967548,2848364351,ellipsis-dev[bot],COMMENTED,2025-05-17T17:59:38Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 07d4a20018c3968252c767ee5a0a753fb6828964 in <ellipsistime>32 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `53` lines of code in `3` files
> - Skipped `0` files when reviewing.
> - Skipped posting `5` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>CHANGELOG.md:33</code></summary>
> 
> - **Draft comment:** 
> Added changelog entry for docs fix looks good. Ensure version consistency.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>cli/README.md:70</code></summary>
> 
> - **Draft comment:** 
> Removed the '[TODO](#todo)' link from the TOC. This is a clean-up.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>cli/README.md:1238</code></summary>
> 
> - **Draft comment:** 
> Removed the '## TODO' section from the end. Make sure pending items are tracked elsewhere if needed.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>cli/spec.md:71</code></summary>
> 
> - **Draft comment:** 
> Removed the '[TODO](#todo)' link from the TOC in the spec file. Good removal.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>cli/spec.md:1225</code></summary>
> 
> - **Draft comment:** 
> Removed the '## TODO' section from the spec file. Confirm that any pending documentation is otherwise tracked.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_CtwcgaK9KazxKJ88`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3119348443,2898317963,greptile-apps[bot],COMMENTED,2025-06-04T23:13:06Z,"
## PR Summary
This PR introduces a new 'conventional' display mode alongside existing pinned and tethered modes, with comprehensive implementation across panel state management, UI, and persistence layers.

- New `PanelStateConventionalManager` needs to invalidate timer in `hideTetherWindow()` to prevent memory leaks in `PanelStateConventionalManager+Hint.swift`
- Screen coordinate conversion in `PanelStateConventionalManager+Display.swift` should use `convertedToGlobalCoordinateSpace: true` when handling AXUIElement frames
- Text views in `GeneralTab.swift` settings UI should not have custom foreground colors since settings use system background
- `NSScreen.frame` usage in `PanelStateConventionalManager.swift` should be replaced with `visibleFrame` to account for MenuBar and Dock
- Window positioning logic in `PanelStateConventionalManager+Hint.swift` assumes right-edge placement without considering multi-monitor setups

<sub>12 files reviewed, 7 comments</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=onit_261)</sub>"
3141427219,2922513410,ellipsis-dev[bot],COMMENTED,2025-06-12T20:05:22Z,"> [!CAUTION]
> **Changes requested  :x:**
> <details>
> <summary>Reviewed everything up to 48bd1ac6353b92af47874c71aabb5104e6be49ca in <ellipsistime>2 minutes and 59 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `82` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/gptme/settings/code-review) and [rules](https://app.ellipsis.dev/gptme/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>gptme/logmanager.py:175</code></summary>
> 
> - **Draft comment:** 
> Ensure auto-naming trigger is intended. The condition triggers on the first user message. Consider adding safeguards to prevent multiple thread spawns if messages come in quick succession.
> - **Reason this comment was not posted:**
> Confidence changes required: `50%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>gptme/logmanager.py:391</code></summary>
> 
> - **Draft comment:** 
> Using integer division (// 1) in the log message is redundant. Consider directly printing len_from and len_to.
> - **Reason this comment was not posted:**
> Confidence changes required: `30%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_nP5xmddghIYj91rE`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=gptme%2Fgptme&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/gptme/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/gptme/code-review/rules).</sup>"
3161349186,2944039329,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-19T21:19:00Z,"## Pull Request Overview

Updates the fullscreen toggle behavior to first check the window’s current fullscreen state and then invert it, with a fallback if state retrieval fails.

- Replaces unconditional `set_fullscreen(true)` with a conditional toggle based on `is_fullscreen()`
- Adds an `else` fallback that disables fullscreen if the state check errors
- Continues to ignore errors from `set_fullscreen`



"
3138925122,2919627269,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-12T05:52:41Z,"## Pull Request Overview

This PR enhances security and reliability when using a custom database path by guarding against path traversal, enabling safe data relocation with rollback support, and ensuring the database connection pool is reinitialized dynamically.

- Add path traversal check in `cmd_validate_custom_db_path` and simplify directory validation
- Introduce `reinitialize_connection_pool` and wrap `DB_POOL_CONNECTION` in an `RwLock`
- Implement `rollback_moves` for safe move operations and update UI to attempt rollback on failure

### Reviewed Changes

Copilot reviewed 4 out of 4 changed files in this pull request and generated 2 comments.

| File                                                | Description                                                    |
| --------------------------------------------------- | -------------------------------------------------------------- |
| src-tauri/src/services/settings_service.rs          | Updated pool access to use `RwLock<Pool>` for read locking     |
| src-tauri/src/db.rs                                 | Wrapped pool in `RwLock`, added `reinitialize_connection_pool`, and updated pool getters |
| src-tauri/src/commands/user_settings_command.rs     | Added `rollback_moves`, refactored move/copy logic with rollback, and reinit pool after relocation |
| packages/pastebar-app-ui/src/pages/settings/CustomDatabaseLocationSettings.tsx | Improved error handling by rolling back UI actions on failure and tidied formatting |


<details>
<summary>Comments suppressed due to low confidence (4)</summary>

**src-tauri/src/db.rs:96**
* [nitpick] Public API `reinitialize_connection_pool` is undocumented. Add a doc comment explaining its purpose and usage.
```
pub fn reinitialize_connection_pool() {
```
**src-tauri/src/commands/user_settings_command.rs:18**
* The new `rollback_moves` function and relocation logic are not covered by tests. Consider adding unit tests to validate move, copy, and rollback behavior.
```
fn rollback_moves(items: &[(PathBuf, PathBuf)]) {
```
**src-tauri/src/db.rs:192**
* Missing `.unwrap()` after `.read()`: the code is calling `.get()` on `LockResult<RwLockReadGuard<Pool>>`, which will not compile. It should be `DB_POOL_CONNECTION.read().unwrap().get()`.
```
.read()
```
**src-tauri/src/commands/user_settings_command.rs:118**
* Removed the logic that created and cleaned up non-existent directories for writability checks, so validating a new path now always fails. Reintroduce temporary creation or parent-directory checks to properly test writability.
```
let path = if input_path.exists() {
```
</details>

"
3071613138,2848863483,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-18T09:58:25Z,"## Pull Request Overview

This PR introduces a new command (""sprc download vosk"") to download and set up the Vosk model, refactoring the previous setup_vosk.py script into the CLI. Key changes include:
- Adding a new CLI command in speech_recognition/cli.py for downloading and unzipping the Vosk model.
- Removing the legacy setup_vosk.py script.
- Updating setup.py, README.rst, and the GitHub Actions workflow to support the new command.

### Reviewed Changes

Copilot reviewed 5 out of 5 changed files in this pull request and generated no comments.

<details>
<summary>Show a summary per file</summary>

| File                           | Description                                                         |
| ------------------------------ | ------------------------------------------------------------------- |
| speech_recognition/cli.py      | Introduces download_vosk_model function and CLI command for vosk.   |
| setup_vosk.py                  | Entirely removed to replace functionality with CLI command.         |
| setup.py                       | Adds a console script entry point for sprc CLI tool.                |
| README.rst                     | Updates instructions for Vosk model download and directory usage.   |
| .github/workflows/unittests.yml| Updates workflow to use the new sprc download vosk command.           |
</details>



<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**speech_recognition/cli.py:34**
* Consider verifying that the zip archive consistently extracts to a directory named after the model filename (without extension). If the archive structure deviates, the copy operation may fail; adding a check or more robust extraction logic could prevent potential issues.
```
extracted_dir = os.path.join(temp_dir, model_name)
```
</details>

"
3142660282,2930591076,devgony,APPROVED,2025-06-16T04:22:45Z,
3125429158,2906165444,Jackie-Jiang,APPROVED,2025-06-06T21:19:13Z,
3070915829,2848345293,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-17T16:26:41Z,"## Pull Request Overview

Adds a new `FastMCP.as_proxy` method for creating proxy servers, deprecates `FastMCP.from_client`, and updates tests, examples, and documentation to use the new API.

- Implemented `FastMCP.as_proxy` and marked `from_client` as deprecated.
- Updated tests and examples to replace `from_client` with `as_proxy` and added new proxy tests.
- Revised documentation and version badges to reference `as_proxy`.

### Reviewed Changes

Copilot reviewed 10 out of 10 changed files in this pull request and generated no comments.

<details>
<summary>Show a summary per file</summary>

| File                                  | Description                                                 |
| ------------------------------------- | ----------------------------------------------------------- |
| tests/test_deprecated.py              | Added warning test for `from_client` and imported `Client` |
| tests/server/test_proxy.py            | Replaced fixture and tests to use `as_proxy`, added URL test |
| tests/server/test_mount.py            | Swapped `from_client` calls for `as_proxy`                  |
| tests/server/test_import_server.py    | Swapped `from_client` calls for `as_proxy`                  |
| src/fastmcp/server/server.py          | Added `as_proxy` implementation and deprecated `from_client`|
| examples/in_memory_proxy_example.py   | Updated example to use `as_proxy` and adjusted step labels  |
| docs/servers/proxy.mdx                | Updated docs to reference `as_proxy` and code examples      |
| docs/servers/fastmcp.mdx              | Updated docs to reference `as_proxy`                        |
| docs/servers/composition.mdx          | Updated docs to reference `as_proxy`                        |
| README.md                             | Updated proxy section to reference `as_proxy`               |
</details>



<details>
<summary>Comments suppressed due to low confidence (4)</summary>

**docs/servers/proxy.mdx:9**
* The version badge still shows 2.0.0, but this release deprecates `from_client` in 2.4.0. Please update the badge to the correct new version.
```
<VersionBadge version=""2.0.0"" />
```
**docs/servers/fastmcp.mdx:157**
* The version badge here is still 2.0.0. Consider updating it to the new release version that includes `as_proxy` and the deprecation.
```
<VersionBadge version=""2.0.0"" />
```
**tests/server/test_proxy.py:100**
* Consider adding tests for `as_proxy` with a dictionary transport configuration and a `Path` backend to cover all accepted `backend` types.
```
async def test_as_proxy_with_url():
```
**examples/in_memory_proxy_example.py:6**
* [nitpick] The docstring list item has an extra leading `-`. Remove the dash so the numbered steps render consistently.
```
   -2. Create a proxy FastMCP server using ``FastMCP.as_proxy(original_server)``.
```
</details>

"
3129719604,2915115792,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-10T21:47:23Z,"## Pull Request Overview

This pull request aims to fix a potential crash in PlayerTaxi when calling pop_front on an empty container.  
- Added a check to guard against empty m_TaxiDestinations before calling pop_front.  
- Ensured that NextTaxiDestination returns a safe default value when there are insufficient taxi destinations.



"
3129719604,2930025355,sudlud,APPROVED,2025-06-15T17:01:40Z,
3129719604,2940162871,Helias,APPROVED,2025-06-18T17:46:05Z,
3135062390,2915814324,terzioglub,APPROVED,2025-06-11T06:28:24Z,
3135062390,2918353096,karakanb,APPROVED,2025-06-11T18:54:11Z,
3072242779,2849202547,calebdoxsey,APPROVED,2025-05-19T01:40:53Z,
3100296885,2878223251,github-advanced-security[bot],COMMENTED,2025-05-29T13:10:18Z,
3100296885,2878225584,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-29T13:11:10Z,"## Pull Request Overview

This PR updates middleware to respect the `Immutable` flag in the app config, avoiding unsafe string conversions when immutability is enabled and routing requests appropriately.

- Proxy middleware now uses `SetRequestURIBytes` when `Immutable` is true, and `SetRequestURI` otherwise.
- Basic auth middleware switches between `string(raw)` and `utils.UnsafeString(raw)` based on the `Immutable` flag.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated no comments.

| File                               | Description                                                     |
|------------------------------------|-----------------------------------------------------------------|
| middleware/proxy/proxy.go          | Added conditional branch to use byte-based URI setting          |
| middleware/basicauth/basicauth.go  | Refactored credential extraction to handle immutable config     |


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**middleware/proxy/proxy.go:80**
* Introduce unit tests for both branches of the Immutable flag to verify that `SetRequestURIBytes` and `SetRequestURI(utils.UnsafeString)` behave as expected.
```
if c.App().Config().Immutable {
```
**middleware/basicauth/basicauth.go:50**
* Add coverage in your basic-auth tests for when `Immutable` is true and false to ensure both `string(raw)` and `utils.UnsafeString(raw)` paths are validated.
```
if c.App().Config().Immutable {
```
</details>

"
3100296885,2878231359,coderabbitai[bot],COMMENTED,2025-05-29T13:13:13Z,"**Actionable comments posted: 1**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 09d9e169b2c493492986648bf4d4358ea2aaa3e4 and a1e7e3b3dbd0d7e85530d034bd2cc876e4148073.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `middleware/basicauth/basicauth.go` (1 hunks)
* `middleware/proxy/proxy.go` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 GitHub Check: codecov/patch</summary>

<details>
<summary>middleware/basicauth/basicauth.go</summary>

[warning] 51-51: middleware/basicauth/basicauth.go#L51
Added line #L51 was not covered by tests

</details>
<details>
<summary>middleware/proxy/proxy.go</summary>

[warning] 81-81: middleware/proxy/proxy.go#L81
Added line #L81 was not covered by tests

</details>

</details>
<details>
<summary>🪛 GitHub Check: CodeQL</summary>

<details>
<summary>middleware/proxy/proxy.go</summary>

[failure] 81-81: Uncontrolled data used in network request
The [URL](1) of this request depends on a [user-provided value](2).

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (3)</summary>

* GitHub Check: Compare
* GitHub Check: repeated
* GitHub Check: unit (1.24.x, windows-latest)

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>middleware/proxy/proxy.go (1)</summary>

`80-84`: <details>
<summary>❓ Verification inconclusive</summary>

**LGTM! Consistent implementation of immutable config handling.**

The conditional logic properly handles URI setting based on immutability configuration:
- Uses `SetRequestURIBytes` to work directly with bytes when immutable mode is enabled
- Uses `SetRequestURI` with unsafe string conversion for performance when immutable mode is disabled

This approach is consistent with the basicauth middleware changes and follows the same safety-vs-performance pattern.




Two concerns to address:

1. **Test Coverage**: Static analysis indicates this code path lacks test coverage. Please add tests for both immutable and non-immutable modes.

2. **Security Analysis**: CodeQL flagged ""Uncontrolled data used in network request"" for line 81. While this may be a false positive (since we're using the same request URI), please verify this doesn't introduce security risks:

---

🏁 Script executed:

```shell
#!/bin/bash
# Verify the relationship between SetRequestURI and SetRequestURIBytes methods
ast-grep --pattern $'func ($$$) SetRequestURI($$$) {
  $$$
}'

# Check if there are any security validations around URI handling
rg -A 5 -B 5 ""SetRequestURI.*validation|sanitize.*URI|validate.*URI""
```

Length of output: 133

---

To locate the actual implementations and verify any URI validation, let’s search for the definitions and usages of both methods:

---

🏁 Script executed:

```shell
#!/bin/bash
# Find definitions of SetRequestURI and SetRequestURIBytes
rg -n ""func .*SetRequestURI"" .
rg -n ""func .*SetRequestURIBytes"" .

# Inspect all call sites to see if any validation/sanitization is applied upstream
rg -n ""SetRequestURI("" .
rg -n ""SetRequestURIBytes("" .
```

Length of output: 297

---



</details>

**Add Tests and Manually Verify URI Setter Security**

Before merging, please address two points:

- Test Coverage  
  • Add unit tests for `proxy.go` to cover both `c.App().Config().Immutable = true` and `false` paths, ensuring `SetRequestURIBytes` and `SetRequestURI(utils.UnsafeString(...))` behave as expected.

- Security Review of URI Setters  
  We couldn’t find `SetRequestURI` or `SetRequestURIBytes` definitions in this repo (they’re likely in the external fasthttp library). Please manually inspect those implementations to confirm that using `UnsafeString` (and the byte‐based setter) does not bypass necessary URI validation or introduce injection risks.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 GitHub Check: codecov/patch</summary>

[warning] 81-81: middleware/proxy/proxy.go#L81
Added line #L81 was not covered by tests

</details>
<details>
<summary>🪛 GitHub Check: CodeQL</summary>

[failure] 81-81: Uncontrolled data used in network request
The [URL](1) of this request depends on a [user-provided value](2).

</details>

</details>

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3100296885,2878376530,coderabbitai[bot],COMMENTED,2025-05-29T13:49:13Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>middleware/proxy/proxy_test.go (1)</summary><blockquote>

`881-904`: **LGTM! Well-implemented test for immutable configuration.**

The test follows established patterns and properly verifies that the proxy middleware continues to function correctly when the Fiber app is configured with `Immutable: true`. The test structure is solid with appropriate error handling and assertions.




Consider enhancing the test to specifically verify immutable behavior differences (e.g., testing that string conversions are handled safely), though the current implementation serves well as a regression test.

</blockquote></details>
<details>
<summary>middleware/basicauth/basicauth_test.go (1)</summary><blockquote>

`203-219`: **LGTM! Clean test implementation for immutable configuration.**

The test correctly verifies that BasicAuth middleware functions properly when the Fiber app is configured with `Immutable: true`. The implementation follows existing test patterns with proper base64 encoding, error handling, and assertions.




Consider adding a test case for invalid credentials under immutable mode to ensure comprehensive coverage, though the current positive test case effectively serves as a regression test for immutable functionality.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between a1e7e3b3dbd0d7e85530d034bd2cc876e4148073 and a95fcc665aba00319a0b087df99a1e09e2d70bee.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `middleware/basicauth/basicauth_test.go` (1 hunks)
* `middleware/proxy/proxy_test.go` (1 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: Compare
* GitHub Check: unit (1.24.x, macos-13)
* GitHub Check: unit (1.24.x, macos-latest)
* GitHub Check: unit (1.24.x, windows-latest)
* GitHub Check: repeated

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3100296885,2885525629,ReneWerner87,APPROVED,2025-06-01T11:53:13Z,
3137968385,2918518122,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-11T20:04:53Z,"## Pull Request Overview

This PR upgrades the react type packages and updates relevant templates and examples to use the latest versions.  
- Bump @types/react and @types/react-dom versions across various package.json files.  
- Update contentlayer dependencies in the site package and add corresponding changesets.  
- Refresh Next.js template and examples with the new dependency versions.

### Reviewed Changes

Copilot reviewed 19 out of 19 changed files in this pull request and generated no comments.

<details>
<summary>Show a summary per file</summary>

| File                                                   | Description                                                        |
| ------------------------------------------------------ | ------------------------------------------------------------------ |
| site/package.json                                      | Upgraded contentlayer dependencies to version 0.5.8                |
| packages/create-rainbowkit/templates/next-app/package.json | Upgraded @types/react to 19.1.8                                      |
| package.json                                           | Upgraded @types/react and @types/react-dom across dependency fields  |
| examples/with-vite/package.json                        | Upgraded @types/react and @types/react-dom                            |
| examples/with-remix/package.json                       | Upgraded @types/react and @types/react-dom                            |
| examples/with-react-router/package.json                | Upgraded @types/react and @types/react-dom                            |
| examples/with-next/package.json                        | Upgraded @types/react                                               |
| examples/with-next-wallet-button/package.json          | Upgraded @types/react                                               |
| examples/with-next-siwe-next-auth/package.json         | Upgraded @types/react                                               |
| examples/with-next-siwe-iron-session/package.json      | Upgraded @types/react                                               |
| examples/with-next-rainbow-button/package.json         | Upgraded @types/react                                               |
| examples/with-next-mint-nft/package.json               | Upgraded @types/react                                               |
| examples/with-next-custom-button/package.json          | Upgraded @types/react                                               |
| examples/with-next-app/package.json                    | Upgraded @types/react                                               |
| examples/with-next-app-i18n/package.json               | Upgraded @types/react                                               |
| examples/with-create-react-app/package.json           | Upgraded @types/react                                               |
| .changeset/upgrade-react-types.md                     | Added changeset for react types upgrade                             |
| .changeset/upgrade-contentlayer.md                    | Added changeset for contentlayer upgrade                            |
</details>




"
3164993186,2947733599,devgony,APPROVED,2025-06-21T10:48:38Z,
3075457871,2852389183,coderabbitai[bot],COMMENTED,2025-05-20T02:45:05Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>README.md (1)</summary><blockquote>

`760-770`: **Clear regeneration instructions added**  
The section succinctly explains how to regenerate generated hooks and handlers via `go generate ./...`. For completeness, you could optionally include a install command for `goimports` (e.g., `go install golang.org/x/tools/cmd/goimports@latest`) or link to its documentation, helping users who need to install prerequisites.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**
**Cache: Disabled due to data retention organization setting**
**Knowledge Base: Disabled due to data retention organization setting**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 99720bb4c4513ba1d2443b4e5045b7763e0b7142 and 7f8ee03b1a13746608ceac45fdc429cfd7e71c28.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `README.md` (2 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 markdownlint-cli2 (0.17.2)</summary>

<details>
<summary>README.md</summary>

100-100: Unordered list style
Expected: asterisk; Actual: dash

(MD004, ul-style)

</details>

</details>

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>README.md (1)</summary>

`100-100`: **Addition of Table of Contents entry for regeneration instructions**  
The new TOC entry correctly references the “Regenerating Server Code” section. Please verify that the anchor (`#regenerating-server-code`) exactly matches the heading’s slug, including case and punctuation.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 markdownlint-cli2 (0.17.2)</summary>

100-100: Unordered list style
Expected: asterisk; Actual: dash

(MD004, ul-style)

</details>

</details>

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3075457871,2852906461,pottekkat,COMMENTED,2025-05-20T06:58:21Z,I'm not sure if we need to add this to the readme since it is already documented here: https://github.com/mark3labs/mcp-go/blob/main/server/internal/gen/README.md
3151582642,2933758277,izaitsevfb,APPROVED,2025-06-16T23:23:41Z,
3119394596,2926770234,chitalian,APPROVED,2025-06-13T23:33:02Z,
3117928238,2896832270,gemini-code-assist[bot],COMMENTED,2025-06-04T13:52:21Z,"Hello @simon-mo, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

## Summary of Changes
Hello! Gemini here, providing a summary of this pull request authored by simon-mo. The primary goal of this PR is to prepare the project for benchmarking by adding necessary dependencies. Specifically, it adds `pandas` and `datasets` to the common requirements file, `requirements/common.txt`. This change is intended to ensure that the environment has the required libraries when running benchmark-related code.

### Highlights
* **Add Benchmark Dependencies**: This pull request introduces `pandas` and `datasets` as dependencies by adding them to the `requirements/common.txt` file. These libraries are specified as being needed for the benchmarks module.

### Changelog
* **requirements/common.txt**
  * Added `pandas` to the list of common requirements (line 51).
  * Added `datasets` to the list of common requirements (line 52).
  * Both dependencies are noted as being required for the benchmarks module.

<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.
</details>


<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>


[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configure Gemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).

---

> Deps are added now,
> For benchmarks, they are needed,
> Code can run faster.

"
3117928238,2896834994,gemini-code-assist[bot],CHANGES_REQUESTED,2025-06-04T13:53:03Z,"## Code Review
This pull request adds `pandas` and `datasets` as dependencies to support the benchmark module, which is a useful addition. The changes are straightforward, but there are a couple of points regarding dependency management that could be addressed to improve stability and maintainability. Specifically, considering version pinning for these new dependencies and evaluating if they should be optional dependencies rather than part of `common.txt`.

### Summary of Findings
* **Dependency Version Pinning**: The newly added dependencies `pandas` and `datasets` in `requirements/common.txt` are not version-pinned. This could lead to instability or build issues if future versions introduce breaking changes. It's recommended to specify versions (e.g., `pandas==X.Y.Z` or `pandas>=X.Y.Z`).
* **Placement of Benchmark-Specific Dependencies**: `pandas` and `datasets` are noted as being for the 'benchmarks module'. Including them in `common.txt` makes them mandatory for all users. Consider making them optional dependencies (e.g., via `extras_require` in `setup.py` or a separate `requirements-benchmark.txt`) to keep the core installation lean.

### Merge Readiness
The pull request aims to add necessary dependencies for benchmark support, which is valuable. However, there are a couple of concerns regarding dependency management:

1.  **Version Pinning**: The new dependencies (`pandas`, `datasets`) should have their versions specified to ensure stability and reproducibility.
2.  **Optional Dependencies**: Since these dependencies appear to be solely for benchmarks, they might be better suited as optional dependencies rather than being added to `common.txt`, which affects all users.

I recommend addressing these points before merging to maintain code quality and a lean core dependency set. As an AI reviewer, I am not authorized to approve pull requests; please ensure further review and approval from project maintainers after addressing the feedback."
3117928238,2896837389,simon-mo,COMMENTED,2025-06-04T13:53:41Z,
3117928238,2896838509,simon-mo,COMMENTED,2025-06-04T13:53:59Z,
3070887119,2848334006,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-17T15:38:48Z,"## Pull Request Overview

This PR updates the application state to store the FastMCP instance on app.state.fastmcp_server.  
- Updates tests to verify the FastMCP instance is correctly stored on the app state.  
- Modifies HTTP and SSE app creation functions in src/fastmcp/server/http.py to include the state update.  
- Updates ASGI deployment documentation to reference the new state name.

### Reviewed Changes

Copilot reviewed 3 out of 3 changed files in this pull request and generated no comments.

| File                                  | Description                                                                    |
| ------------------------------------- | ------------------------------------------------------------------------------ |
| tests/server/test_app_state.py        | Adds tests confirming that the FastMCP instance is stored on app.state.fastmcp_server.  |
| src/fastmcp/server/http.py            | Updates app creation logic for both HTTP and SSE apps to set app.state.fastmcp_server. |
| docs/deployment/asgi.mdx              | Updates documentation to reflect the new state name for accessing the FastMCP instance.  |



"
3088666999,2866407117,coderabbitai[bot],COMMENTED,2025-05-24T19:00:40Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>AGENTS.md (1)</summary><blockquote>

`5-5`: **Add comma after “Otherwise” for clarity.**  
The sentence reads:  
> “…skip fetching modules. Otherwise proceed with the startup script.”  
Consider adding a comma after “Otherwise” so it becomes:  
> “…skip fetching modules. Otherwise, proceed with the startup script.”

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[uncategorized] ~5-~5: A comma may be missing after the conjunctive/linking adverb ‘Otherwise’.
Context: ...n the Go cache), skip fetching modules. Otherwise proceed with the startup script. This d...

(SENT_START_CONJUNCTIVE_LINKING_ADVERB_COMMA)

</details>

</details>

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 3ff2d378ab8ed2fe9090220849b1803094571c61 and a4b3b1f5984a692fca85a435b0b7ca63fc083932.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `AGENTS.md` (2 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 LanguageTool</summary>

<details>
<summary>AGENTS.md</summary>

[uncategorized] ~5-~5: A comma may be missing after the conjunctive/linking adverb ‘Otherwise’.
Context: ...n the Go cache), skip fetching modules. Otherwise proceed with the startup script. This d...

(SENT_START_CONJUNCTIVE_LINKING_ADVERB_COMMA)

</details>

</details>

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>AGENTS.md (1)</summary>

`29-44`: **Great addition of Makefile command documentation.**  
The new “Makefile commands” section clearly outlines common targets for development and testing, improving onboarding and discoverability for contributors.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3160775696,2947137938,willingc,APPROVED,2025-06-20T19:43:31Z,This seems reasonable to me. Leaving it to our release expert @hugovk :wave: to review and merge. Thanks @corneliusroemer for working on improvements to the devguide too!
3160775696,2950363141,hugovk,COMMENTED,2025-06-23T14:34:09Z,Thanks! A couple of suggestions.
3160775696,2950399004,corneliusroemer,COMMENTED,2025-06-23T14:41:31Z,
3160775696,2950473799,ezio-melotti,COMMENTED,2025-06-23T15:02:11Z,
3160775696,2950602123,hugovk,APPROVED,2025-06-23T15:41:41Z,Thank you!
3082221313,2859963289,coderabbitai[bot],COMMENTED,2025-05-22T06:37:40Z,"**Actionable comments posted: 2**

<details>
<summary>🧹 Nitpick comments (8)</summary><blockquote>

<details>
<summary>apps/dashboard/src/core-ui/batch-upload/batch-table.tsx (1)</summary><blockquote>

`4-8`: **Remove unused Chakra BoxProps import or refactor its usage**  
Since you’ve replaced the Chakra `<Box as=""video"">` wrapper with a native `<video>` element, the `BoxProps` type and its import are no longer needed for styling. Either remove the `BoxProps` import and drop it from the `FileVideo` signature, or convert your styling props into appropriate HTML/video attributes or Tailwind CSS classes.

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/settings/components/primary-sale.tsx (1)</summary><blockquote>

`70-71`: **Ensure Tailwind `p-0` overrides default padding**  
The `Card` component applies default `px-4 py-4` classes. Adding `p-0` may not override those utilities due to Tailwind’s CSS ordering, so padding might persist. Consider using the `!p-0` modifier for a forced override or extending `Card` with a prop (e.g., `noPadding`) to disable default padding.

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/settings/components/platform-fees.tsx (1)</summary><blockquote>

`78-79`: **Ensure Tailwind `p-0` overrides default padding**  
As with the primary sale card, the `Card` component’s default `px-4 py-4` classes may override your added `p-0`. To guarantee zero padding, use `!p-0` or introduce a boolean prop on `Card` to disable its built-in padding.

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/split/ContractSplitPage.tsx (1)</summary><blockquote>

`147-151`: **Consider using Tailwind classes for max-width instead of inline styles.**

While the migration from Chakra's `as={Stat}` and `maxWidth=""2xs""` works as intended, using inline styles for max-width can lead to inconsistency. Consider using Tailwind's max-width utility classes (e.g., `max-w-xs`) instead.

```diff
 <Card
   className=""[&>*]:m-0""
   key={balance.token_address}
-  style={{ maxWidth: ""20rem"" }}
+  className=""[&>*]:m-0 max-w-xs""
 >
```

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/proposals/ContractProposalsPage.tsx (1)</summary><blockquote>

`64-68`: **Consider using Tailwind classes for max-width instead of inline styles.**

Similar to other components, using inline styles for max-width can lead to inconsistency. Consider using Tailwind's max-width utility classes instead for better maintainability and consistency with the design system.

```diff
 <Card
   className=""[&>*]:m-0""
   key={balance.address}
-  style={{ maxWidth: 240 }}
+  className=""[&>*]:m-0 max-w-[240px]""
 >
```

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/(marketplace)/components/list-form.tsx (1)</summary><blockquote>

`541-546`: **Sort Tailwind classes for better maintainability.**

Sort the Tailwind classes alphabetically to improve code readability and maintainability.

```diff
 <div
   className={cn(
-    ""rounded-lg overflow-hidden cursor-pointer"",
+    ""cursor-pointer overflow-hidden rounded-lg"",
     isSelected(nft) &&
       ""outline outline-3 outline-purple-500"",
   )}
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Biome (1.9.4)</summary>

[error] 541-552: Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.

Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation.

(lint/a11y/useKeyWithClickEvents)

---

[error] 543-543: These CSS classes should be sorted.

Unsafe fix: Sort the classes.


(lint/nursery/useSortedClasses)

</details>

</details>

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/_components/claim-conditions/claim-conditions-form/Inputs/ClaimPriceInput.tsx (1)</summary><blockquote>

`39-45`: **Box component successfully replaced with div and Tailwind classes**

The Chakra UI `Box` component has been properly replaced with a standard HTML `div` element using appropriate Tailwind CSS utility classes.


According to the static analysis hints, the CSS classes should be sorted. Consider reordering them:

```diff
-<div className=""min-w-[70px] w-full md:w-1/2"">
+<div className=""w-full min-w-[70px] md:w-1/2"">
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Biome (1.9.4)</summary>

[error] 39-39: These CSS classes should be sorted.

Unsafe fix: Sort the classes.


(lint/nursery/useSortedClasses)

</details>

</details>

</blockquote></details>
<details>
<summary>apps/dashboard/src/tw-components/card.tsx (1)</summary><blockquote>

`22-37`: **Good implementation of outline border with pure CSS**

The outline border implementation using nested divs and absolute positioning is a clean approach that replaces the Chakra UI styling method.

Note: The static analysis tool suggests sorting CSS classes on line 29.


```diff
-          className=""absolute inset-0 -z-10""
+          className=""-z-10 absolute inset-0""
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Biome (1.9.4)</summary>

[error] 29-29: These CSS classes should be sorted.

Unsafe fix: Sort the classes.


(lint/nursery/useSortedClasses)

</details>

</details>

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 376bdb23d22eeaccf4fa96f82e312c3a62cde518 and f358fe7b57e6b2001533054246395e950b831e52.

</details>

<details>
<summary>📒 Files selected for processing (27)</summary>

* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/(marketplace)/components/list-form.tsx` (1 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/_components/claim-conditions/claim-conditions-form/Inputs/ClaimPriceInput.tsx` (3 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/_components/claim-conditions/claim-conditions-form/Inputs/ClaimerSelection.tsx` (2 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/_components/claim-conditions/claim-conditions-form/index.tsx` (1 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/account-permissions/components/account-signer.tsx` (1 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/account/components/account-balance.tsx` (2 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/accounts/components/accounts-count.tsx` (2 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/events/events-feed.tsx` (7 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/permissions/ContractPermissionsPage.tsx` (1 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/proposals/ContractProposalsPage.tsx` (2 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/settings/components/metadata.tsx` (1 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/settings/components/platform-fees.tsx` (1 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/settings/components/primary-sale.tsx` (1 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/settings/components/royalties.tsx` (1 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/split/ContractSplitPage.tsx` (2 hunks)
* `apps/dashboard/src/app/(app)/team/[team_slug]/[project_slug]/engine/dedicated/(instance)/[engineId]/contract-subscriptions/components/contract-subscriptions-table.tsx` (2 hunks)
* `apps/dashboard/src/app/(app)/team/[team_slug]/[project_slug]/engine/dedicated/(instance)/[engineId]/metrics/components/EngineSystemMetrics.tsx` (3 hunks)
* `apps/dashboard/src/components/contract-components/contract-publish-form/custom-factory.tsx` (2 hunks)
* `apps/dashboard/src/components/contract-components/contract-publish-form/index.tsx` (6 hunks)
* `apps/dashboard/src/components/contract-components/contract-publish-form/landing-fieldset.tsx` (2 hunks)
* `apps/dashboard/src/components/contract-components/published-contract/index.tsx` (2 hunks)
* `apps/dashboard/src/components/contract-functions/contract-function.tsx` (4 hunks)
* `apps/dashboard/src/components/smart-wallets/SponsorshipPolicies/index.tsx` (1 hunks)
* `apps/dashboard/src/contract-ui/components/solidity-inputs/address-input.tsx` (2 hunks)
* `apps/dashboard/src/contract-ui/components/solidity-inputs/string-input.tsx` (2 hunks)
* `apps/dashboard/src/core-ui/batch-upload/batch-table.tsx` (1 hunks)
* `apps/dashboard/src/tw-components/card.tsx` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (13)</summary>

<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/settings/components/primary-sale.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (1)</summary>

* `Card` (11-43)

</details>

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/account-permissions/components/account-signer.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (1)</summary>

* `Card` (11-43)

</details>

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/accounts/components/accounts-count.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (1)</summary>

* `Card` (11-43)

</details>

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/permissions/ContractPermissionsPage.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (1)</summary>

* `Card` (11-43)

</details>

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/team/[team_slug]/[project_slug]/engine/dedicated/(instance)/[engineId]/metrics/components/EngineSystemMetrics.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (1)</summary>

* `Card` (11-43)

</details>

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/proposals/ContractProposalsPage.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (1)</summary>

* `Card` (11-43)

</details>

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/events/events-feed.tsx (2)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (1)</summary>

* `Card` (11-43)

</details>
<details>
<summary>apps/playground-web/src/components/code/code.client.tsx (1)</summary>

* `CodeClient` (27-54)

</details>

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/settings/components/metadata.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (1)</summary>

* `Card` (11-43)

</details>

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/account/components/account-balance.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (1)</summary>

* `Card` (11-43)

</details>

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/settings/components/platform-fees.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (1)</summary>

* `Card` (11-43)

</details>

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/settings/components/royalties.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (1)</summary>

* `Card` (11-43)

</details>

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/team/[team_slug]/[project_slug]/engine/dedicated/(instance)/[engineId]/contract-subscriptions/components/contract-subscriptions-table.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (1)</summary>

* `Card` (11-43)

</details>

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/(marketplace)/components/list-form.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/nft-media.tsx (1)</summary>

* `NFTMediaWithEmptyState` (8-64)

</details>

</blockquote></details>

</details><details>
<summary>🪛 Biome (1.9.4)</summary>

<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/_components/claim-conditions/claim-conditions-form/Inputs/ClaimPriceInput.tsx</summary>

[error] 39-39: These CSS classes should be sorted.

Unsafe fix: Sort the classes.


(lint/nursery/useSortedClasses)

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/(marketplace)/components/list-form.tsx</summary>

[error] 541-552: Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.

Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation.

(lint/a11y/useKeyWithClickEvents)

---

[error] 543-543: These CSS classes should be sorted.

Unsafe fix: Sort the classes.


(lint/nursery/useSortedClasses)

</details>
<details>
<summary>apps/dashboard/src/tw-components/card.tsx</summary>

[error] 29-29: These CSS classes should be sorted.

Unsafe fix: Sort the classes.


(lint/nursery/useSortedClasses)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: Unit Tests
* GitHub Check: Build Packages
* GitHub Check: Size
* GitHub Check: E2E Tests (pnpm, esbuild)
* GitHub Check: Lint Packages
* GitHub Check: E2E Tests (pnpm, webpack)
* GitHub Check: E2E Tests (pnpm, vite)
* GitHub Check: Analyze (javascript)

</details>

<details>
<summary>🔇 Additional comments (43)</summary><blockquote>

<details>
<summary>apps/dashboard/src/app/(app)/team/[team_slug]/[project_slug]/engine/dedicated/(instance)/[engineId]/metrics/components/EngineSystemMetrics.tsx (3)</summary>

`42-42`: **Chakra UI props replaced with Tailwind className correctly.**

The `p={8}` prop has been appropriately replaced with `className=""p-8""` to align with the refactored `Card` component that now uses Tailwind CSS for styling.

---

`68-68`: **Tailwind padding class matches semantic intent.**

The padding has been increased from p-8 to p-16 for the successful system metrics panel, which correctly provides more space for the detailed metrics content.

---

`109-109`: **Consistent styling pattern applied correctly.**

The `p={8}` prop has been properly replaced with `className=""p-8""` for the queue metrics panel, maintaining visual consistency with the error state panel.

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/_components/claim-conditions/claim-conditions-form/index.tsx (1)</summary>

`647-650`: **Box component successfully replaced with native div element.**

The Chakra UI `<Box pb={5} />` has been appropriately replaced with a standard `<div className=""pb-5"" />`, aligning with the PR objective of migrating away from Chakra UI components.

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/settings/components/metadata.tsx (1)</summary>

`145-145`: **Multiple Chakra UI props consolidated into a single Tailwind className.**

The multiple Chakra UI props (`p={0} position=""relative"" overflow=""hidden""`) have been correctly replaced with equivalent Tailwind classes in a single `className` attribute. This approach is more maintainable and consistent with the project's migration to Tailwind CSS.

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/account-permissions/components/account-signer.tsx (1)</summary>

`37-37`: **Card styling successfully migrated to Tailwind classes.**

The Chakra UI props `position=""relative"" p={8}` have been properly replaced with Tailwind CSS classes `""relative p-8""`. This change aligns with the `Card` component's refactoring to use Tailwind CSS instead of Chakra UI's prop-based styling.

</details>
<details>
<summary>apps/dashboard/src/components/contract-components/contract-publish-form/landing-fieldset.tsx (1)</summary>

`95-113`: **Box to div transition looks good**

The conversion from Chakra UI's `Box` component to a standard HTML `div` with Tailwind CSS styling (`w-[141px]`) maintains the same functionality while aligning with the project's migration to shadcn.

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/account/components/account-balance.tsx (3)</summary>

`4-4`: **Import cleanup looks good**

Properly removed the `Stat` import from Chakra UI while keeping the necessary components.

---

`24-27`: **Card styling transition looks good**

Successfully replaced the Chakra UI `as={Stat}` prop with Tailwind CSS styling. The `[&>*]:m-0` class effectively removes margins from all child elements, maintaining the same visual appearance as the original Stat component.

---

`31-34`: **Card styling transition in map function looks good**

Consistent application of the same pattern as above, replacing `as={Stat}` with Tailwind's `[&>*]:m-0` class while correctly maintaining the `key` prop for mapped elements.

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/settings/components/royalties.tsx (1)</summary>

`91-91`: **Card styling conversion looks good**

Successfully replaced Chakra UI prop-based styling (`p={0} position=""relative"" overflow=""hidden""`) with equivalent Tailwind CSS classes (`relative overflow-hidden p-0`). This maintains the same visual appearance while moving toward the project's goal of using Tailwind CSS for styling.

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/permissions/ContractPermissionsPage.tsx (1)</summary>

`28-28`: **Flex container styling conversion looks good**

Successfully replaced Chakra UI's `Flex` container properties with equivalent Tailwind CSS utility classes (`flex flex-col gap-3`). This maintains the same layout and spacing while aligning with the migration to Tailwind CSS styling.

</details>
<details>
<summary>apps/dashboard/src/components/smart-wallets/SponsorshipPolicies/index.tsx (1)</summary>

`711-719`: **Migration to native `<div>` is correct**  
Replacing the Chakra `<Box alignSelf=""flex-end"">` with `<div className=""self-end"">` accurately preserves the `alignSelf=""flex-end""` behavior within the surrounding `Flex` container. Layout and functionality remain unchanged.

</details>
<details>
<summary>apps/dashboard/src/components/contract-components/contract-publish-form/custom-factory.tsx (1)</summary>

`79-102`: **Box-to-div migration is consistent**  
Converting the former `<Box>` wrappers to `<div className=""w-full md:w-[40%]"">` and `<div className=""w-full"">` faithfully replicates the Chakra `w=""full""` and responsive `md:w=""40%""` props. The form layout and `Flex` structure remain intact.

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/_components/claim-conditions/claim-conditions-form/Inputs/ClaimerSelection.tsx (2)</summary>

`2-2`: **Successfully removed the Box import from Chakra UI**

The Box component import has been removed from the Chakra UI imports, keeping only the necessary Flex and Select components.

---

`150-150`: **Excellent migration from Chakra's Box to native div with Tailwind**

The Chakra UI Box component has been successfully replaced with a standard HTML div element using equivalent Tailwind CSS classes. The responsive behavior is properly preserved:
- `hidden` replaces `display={{ base: ""none"" }}`
- `md:block` replaces `md: ""block"" }}`
- `w-full` replaces `w={{ base: ""100%"" }}`
- `md:w-1/2` replaces `md: ""50%"" }}`

This change aligns with the PR's objective of migrating away from Chakra UI's Box component.

</details>
<details>
<summary>apps/dashboard/src/components/contract-components/contract-publish-form/index.tsx (2)</summary>

`5-5`: **Successfully removed the Box import from Chakra UI**

The Box component import has been removed from the Chakra UI imports, keeping only the necessary components.

---

`368-368`: **Successfully replaced empty Box components with standard divs**

All empty Chakra UI Box components used as layout placeholders have been consistently replaced with standard HTML div elements. Since these are just spacer elements with no styling or content, this straightforward replacement maintains the same layout structure while reducing dependencies on Chakra UI.



Also applies to: 374-374, 387-387, 400-400, 414-414, 426-426

</details>
<details>
<summary>apps/dashboard/src/contract-ui/components/solidity-inputs/string-input.tsx (2)</summary>

`3-3`: **Successfully removed the Box import from Chakra UI**

The Box component import has been removed from the Chakra UI imports, keeping only the necessary InputGroup and InputRightElement components.

---

`69-69`: **Excellent migration from Chakra's Box to native span with Tailwind**

The Chakra UI Box component has been successfully replaced with a more semantically appropriate HTML span element using equivalent Tailwind CSS classes:
- `hidden md:block` correctly replaces `display={{ base: ""none"", md: ""block"" }}`
- `mr-1` correctly replaces `mr={1}`

Using a span instead of Box is better for this inline text content within the button.

</details>
<details>
<summary>apps/dashboard/src/contract-ui/components/solidity-inputs/address-input.tsx (2)</summary>

`4-4`: **Successfully removed the Box import from Chakra UI**

The Box component import has been removed from the Chakra UI imports, keeping only the necessary Spinner component.

---

`119-119`: **Clean replacement of Box with semantic span elements**

The Chakra UI Box components set to render as spans with monospace font have been replaced with native span elements using Tailwind's font-mono class. This improves HTML semantics while maintaining the same visual styling for displaying ENS addresses and names.



Also applies to: 121-121

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/split/ContractSplitPage.tsx (1)</summary>

`123-123`: **Card styling migration looks good.**

The change from `as={Stat}` to using a CSS class `[&>*]:m-0` correctly maintains the styling by zeroing out margins for all direct children of the Card component.

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/proposals/ContractProposalsPage.tsx (1)</summary>

`4-4`: **Import cleanup looks good.**

Properly removed the unused `Stat` import while keeping the other necessary Chakra UI components.

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/events/events-feed.tsx (5)</summary>

`116-116`: **Clean migration to Tailwind classes.**

Good replacement of Chakra UI's prop-based styling with equivalent Tailwind CSS classes.

---

`200-231`: **Proper Box to div conversion with appropriate Tailwind classes.**

The replacement of Chakra UI's Box components with standard div elements styled with Tailwind CSS classes preserves the layout and styling intentions well.

---

`207-212`: **Good migration of Card props to Tailwind classes.**

Successfully replaced Chakra UI's bgColor, px, and py props with equivalent Tailwind CSS classes.

---

`264-273`: **Clean Box to div migration with preserved layout.**

The replacement of Box with div elements maintains the original layout structure while transitioning to Tailwind's utility classes.

---

`355-358`: **Consistent migration pattern for tooltips.**

The Card styling within the tooltip follows the same pattern as other Card components in this file, maintaining consistency in the migration approach.

</details>
<details>
<summary>apps/dashboard/src/components/contract-components/published-contract/index.tsx (3)</summary>

`125-125`: **Good conversion from Chakra UI to Tailwind CSS**

The Card component's styling has been successfully migrated from Chakra UI props to Tailwind CSS classes, maintaining the same visual appearance and layout structure while reducing dependencies.

---

`131-131`: **Appropriate styling migration for Card component**

The Card styling has been correctly converted from Chakra UI's `as={Flex}` with `flexDir=""column""` and `gap` props to equivalent Tailwind CSS utility classes `flex flex-col gap-2 p-0`.

---

`144-144`: **Simplification of Card component styling**

Good simplification by replacing Chakra UI styling props with the minimal necessary Tailwind CSS class `p-0`.

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/_components/claim-conditions/claim-conditions-form/Inputs/ClaimPriceInput.tsx (2)</summary>

`1-1`: **Successfully removed Box import from Chakra UI**

Good job removing the unnecessary `Box` import while maintaining the required `Flex` import.

---

`46-58`: **Good implementation of conditional styling with cn utility**

The Box component has been properly replaced with a div element using the `cn` utility for conditional class application, which is a good practice for dynamic styling.

</details>
<details>
<summary>apps/dashboard/src/app/(app)/team/[team_slug]/[project_slug]/engine/dedicated/(instance)/[engineId]/contract-subscriptions/components/contract-subscriptions-table.tsx (2)</summary>

`290-290`: **Successfully migrated from Chakra UI bgColor prop to Tailwind class**

The Card component's background color styling has been correctly transitioned from Chakra UI's `bgColor` prop to Tailwind's `bg-backgroundHighlight` class.

---

`408-408`: **Comprehensive Flex styling migration to Tailwind**

The Card component's layout styling has been successfully migrated from multiple Chakra UI props (`as={Flex}`, `flexDir=""column""`, `gap={4}`) to a single Tailwind CSS class string `flex flex-col gap-4`, which maintains the same visual appearance while simplifying the code.

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/accounts/components/accounts-count.tsx (2)</summary>

`3-3`: **Cleaned up unnecessary Chakra UI imports**

Good job removing the unused `Stat` component from imports while maintaining the necessary components.

---

`17-17`: **Effectively replaced Chakra UI Stat with Tailwind styling**

The migration from `as={Stat}` to using the Tailwind CSS class `[&>*]:m-0` effectively maintains the same styling for direct children without the Chakra UI dependency. This is an elegant solution for preserving the visual appearance while simplifying the component hierarchy.

</details>
<details>
<summary>apps/dashboard/src/components/contract-functions/contract-function.tsx (2)</summary>

`212-213`: **Chakra UI Box replaced with div + Tailwind: Good implementation**

The replacement of Chakra UI's Box with a div styled using Tailwind CSS classes maintains the same functionality while aligning with the migration goal.



Also applies to: 260-260

---

`475-476`: **Box to div migration looks good**

The Box component wrapper for the events list has been successfully replaced with a div using appropriate Tailwind classes for overflow control and padding.



Also applies to: 484-484

</details>
<details>
<summary>apps/dashboard/src/tw-components/card.tsx (3)</summary>

`1-9`: **Clean migration of Card component dependencies**

The component imports and interface have been properly simplified by removing Chakra UI dependencies and extending from standard React HTML attributes.

---

`17-20`: **Well-structured base classes with Tailwind**

The baseClasses definition using the cn utility properly combines the default Tailwind classes with any custom className passed as a prop.

---

`38-42`: **Clean standard rendering path**

The standard rendering path (without outline border) has been properly simplified to use a div with Tailwind classes.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3082221313,2859965017,coderabbitai[bot],COMMENTED,2025-05-22T06:38:27Z,"**Actionable comments posted: 1**

<details>
<summary>🔭 Outside diff range comments (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/_components/claim-conditions/claim-conditions-form/Inputs/ClaimPriceInput.tsx (1)</summary><blockquote>

`46-59`: _⚠️ Potential issue_

**Missing cn import for className utility.**

There's a reference to `cn()` utility function, but the import statement is missing from the file.


Add the following import at the top of the file:

```diff
+import { cn } from ""@/lib/utils"";
import { Flex } from ""@chakra-ui/react"";
import { CurrencySelector } from ""components/shared/CurrencySelector"";
```

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (1)</summary><blockquote>

`29-30`: **Fix the CSS class ordering in className prop**

The static analysis tool has flagged an issue with the CSS class ordering in this line.

```diff
-          className=""absolute inset-0 -z-10""
+          className=""-z-10 absolute inset-0""
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Biome (1.9.4)</summary>

[error] 29-29: These CSS classes should be sorted.

Unsafe fix: Sort the classes.


(lint/nursery/useSortedClasses)

</details>

</details>

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 376bdb23d22eeaccf4fa96f82e312c3a62cde518 and f358fe7b57e6b2001533054246395e950b831e52.

</details>

<details>
<summary>📒 Files selected for processing (27)</summary>

* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/(marketplace)/components/list-form.tsx` (1 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/_components/claim-conditions/claim-conditions-form/Inputs/ClaimPriceInput.tsx` (3 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/_components/claim-conditions/claim-conditions-form/Inputs/ClaimerSelection.tsx` (2 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/_components/claim-conditions/claim-conditions-form/index.tsx` (1 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/account-permissions/components/account-signer.tsx` (1 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/account/components/account-balance.tsx` (2 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/accounts/components/accounts-count.tsx` (2 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/events/events-feed.tsx` (7 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/permissions/ContractPermissionsPage.tsx` (1 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/proposals/ContractProposalsPage.tsx` (2 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/settings/components/metadata.tsx` (1 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/settings/components/platform-fees.tsx` (1 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/settings/components/primary-sale.tsx` (1 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/settings/components/royalties.tsx` (1 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/split/ContractSplitPage.tsx` (2 hunks)
* `apps/dashboard/src/app/(app)/team/[team_slug]/[project_slug]/engine/dedicated/(instance)/[engineId]/contract-subscriptions/components/contract-subscriptions-table.tsx` (2 hunks)
* `apps/dashboard/src/app/(app)/team/[team_slug]/[project_slug]/engine/dedicated/(instance)/[engineId]/metrics/components/EngineSystemMetrics.tsx` (3 hunks)
* `apps/dashboard/src/components/contract-components/contract-publish-form/custom-factory.tsx` (2 hunks)
* `apps/dashboard/src/components/contract-components/contract-publish-form/index.tsx` (6 hunks)
* `apps/dashboard/src/components/contract-components/contract-publish-form/landing-fieldset.tsx` (2 hunks)
* `apps/dashboard/src/components/contract-components/published-contract/index.tsx` (2 hunks)
* `apps/dashboard/src/components/contract-functions/contract-function.tsx` (4 hunks)
* `apps/dashboard/src/components/smart-wallets/SponsorshipPolicies/index.tsx` (1 hunks)
* `apps/dashboard/src/contract-ui/components/solidity-inputs/address-input.tsx` (2 hunks)
* `apps/dashboard/src/contract-ui/components/solidity-inputs/string-input.tsx` (2 hunks)
* `apps/dashboard/src/core-ui/batch-upload/batch-table.tsx` (1 hunks)
* `apps/dashboard/src/tw-components/card.tsx` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (12)</summary>

<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/(marketplace)/components/list-form.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/nft-media.tsx (1)</summary>

* `NFTMediaWithEmptyState` (8-64)

</details>

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/settings/components/royalties.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (1)</summary>

* `Card` (11-43)

</details>

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/proposals/ContractProposalsPage.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (1)</summary>

* `Card` (11-43)

</details>

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/team/[team_slug]/[project_slug]/engine/dedicated/(instance)/[engineId]/metrics/components/EngineSystemMetrics.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (1)</summary>

* `Card` (11-43)

</details>

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/account-permissions/components/account-signer.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (1)</summary>

* `Card` (11-43)

</details>

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/settings/components/platform-fees.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (1)</summary>

* `Card` (11-43)

</details>

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/settings/components/primary-sale.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (1)</summary>

* `Card` (11-43)

</details>

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/account/components/account-balance.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (1)</summary>

* `Card` (11-43)

</details>

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/settings/components/metadata.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (1)</summary>

* `Card` (11-43)

</details>

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/permissions/ContractPermissionsPage.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (1)</summary>

* `Card` (11-43)

</details>

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/events/events-feed.tsx (4)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (1)</summary>

* `Card` (11-43)

</details>
<details>
<summary>apps/dashboard/src/@/components/ui/tooltip.tsx (1)</summary>

* `Tooltip` (30-30)

</details>
<details>
<summary>apps/playground-web/src/components/code/code.client.tsx (1)</summary>

* `CodeClient` (27-54)

</details>
<details>
<summary>packages/thirdweb/src/exports/utils.ts (1)</summary>

* `stringify` (165-165)

</details>

</blockquote></details>
<details>
<summary>apps/dashboard/src/app/(app)/team/[team_slug]/[project_slug]/engine/dedicated/(instance)/[engineId]/contract-subscriptions/components/contract-subscriptions-table.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (1)</summary>

* `Card` (11-43)

</details>

</blockquote></details>

</details><details>
<summary>🪛 Biome (1.9.4)</summary>

<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/(marketplace)/components/list-form.tsx</summary>

[error] 541-552: Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event.

Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation.

(lint/a11y/useKeyWithClickEvents)

---

[error] 543-543: These CSS classes should be sorted.

Unsafe fix: Sort the classes.


(lint/nursery/useSortedClasses)

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/_components/claim-conditions/claim-conditions-form/Inputs/ClaimPriceInput.tsx</summary>

[error] 39-39: These CSS classes should be sorted.

Unsafe fix: Sort the classes.


(lint/nursery/useSortedClasses)

</details>
<details>
<summary>apps/dashboard/src/tw-components/card.tsx</summary>

[error] 29-29: These CSS classes should be sorted.

Unsafe fix: Sort the classes.


(lint/nursery/useSortedClasses)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (2)</summary>

* GitHub Check: Size
* GitHub Check: Analyze (javascript)

</details>

<details>
<summary>🔇 Additional comments (47)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (4)</summary>

`1-9`: **Clean migration from Chakra UI props to standard React props**

The updated `CardProps` interface correctly extends React's native `HTMLAttributes<HTMLDivElement>` instead of Chakra UI's `BoxProps`, which aligns with the migration goal of removing Chakra UI dependencies. This allows for a more standardized component API.

---

`11-21`: **Good implementation of Tailwind-based styling**

The component now uses the `cn` utility function to combine base Tailwind classes with any custom classes passed through the `className` prop. This approach maintains flexibility while providing sensible defaults for the card styling.

---

`22-37`: **Well-implemented outline border feature**

The outline border implementation using nested divs with absolute positioning is a good approach for creating the gradient border effect without Chakra UI. The structure with a relative container, absolute background layer, and content layer is clean and maintainable.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Biome (1.9.4)</summary>

[error] 29-29: These CSS classes should be sorted.

Unsafe fix: Sort the classes.


(lint/nursery/useSortedClasses)

</details>

</details>

---

`38-43`: **Clean fallback rendering**

The default rendering path (when no outline border is needed) is straightforward and passes all props correctly to the div element, maintaining component composability.

</details>
<details>
<summary>apps/dashboard/src/components/smart-wallets/SponsorshipPolicies/index.tsx (1)</summary>

`711-719`: **Good replacement of Chakra Box with Tailwind-styled div**

The replacement of `<Box alignSelf=""flex-end"">` with `<div className=""self-end"">` is correctly implemented. The Tailwind `self-end` class provides the same functionality as `alignSelf=""flex-end""` in Chakra UI, maintaining the original layout while removing the Chakra dependency.

</details>
<details>
<summary>apps/dashboard/src/app/(app)/team/[team_slug]/[project_slug]/engine/dedicated/(instance)/[engineId]/metrics/components/EngineSystemMetrics.tsx (3)</summary>

`42-42`: **Good migration from Chakra prop to Tailwind class**

The change from the Chakra UI `p` prop to using a Tailwind `p-8` class is correctly implemented and maintains the same padding size.

---

`68-68`: **Good migration from Chakra prop to Tailwind class**

The replacement of the Chakra UI `p` prop with the Tailwind `p-16` class is correctly implemented and maintains the same padding size for the system metrics panel.

---

`109-109`: **Good migration from Chakra prop to Tailwind class**

The replacement of the Chakra UI `p` prop with the Tailwind `p-8` class is correctly implemented and maintains the same padding size for the queue metrics panel.

</details>
<details>
<summary>apps/dashboard/src/components/contract-components/contract-publish-form/landing-fieldset.tsx (1)</summary>

`95-114`: **Good replacement of Chakra Box with Tailwind-styled div**

The replacement of the Chakra UI `Box` component with a `div` using the Tailwind class `w-[141px]` correctly maintains the width constraint for the image upload component. This change aligns with the project goal of migrating from Chakra UI to native HTML elements with Tailwind styling.

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/account-permissions/components/account-signer.tsx (1)</summary>

`37-37`: **Styling update looks good**

Successfully migrated from Chakra UI's prop-based styling to Tailwind CSS classes while maintaining the same visual styling.

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/permissions/ContractPermissionsPage.tsx (1)</summary>

`28-28`: **Flexbox styling migration looks good**

Successfully converted from Chakra UI's `as={Flex}` pattern to equivalent Tailwind CSS utility classes, maintaining the same layout structure.

</details>
<details>
<summary>apps/dashboard/src/core-ui/batch-upload/batch-table.tsx (1)</summary>

`52-52`: **Direct HTML element usage improves code clarity**

Good replacement of Chakra UI's `Box as=""video""` with a native HTML `<video>` element. This simplifies the component tree and improves readability.

</details>
<details>
<summary>apps/dashboard/src/contract-ui/components/solidity-inputs/address-input.tsx (2)</summary>

`4-4`: **Import cleanup looks good**

Correctly removed the unused Box import from Chakra UI.

---

`119-119`: **Simplified DOM structure with native elements**

Good conversion from Chakra UI's `Box as=""span""` pattern to standard HTML `<span>` elements with Tailwind classes. This maintains the same styling while simplifying the component structure.



Also applies to: 121-121

</details>
<details>
<summary>apps/dashboard/src/contract-ui/components/solidity-inputs/string-input.tsx (2)</summary>

`3-3`: **Removed unused Chakra UI Box import and streamlined imports**: The removal of `Box` and retention of only the needed imports (`InputGroup` and `InputRightElement`) is correct and cleans up unused dependencies.

---

`69-69`: **Use span with Tailwind classes for responsive visibility**: The replacement of the Chakra `<Box>` with a `<span>` using `mr-1 hidden md:block` correctly replicates the responsive display and margin behavior.

</details>
<details>
<summary>apps/dashboard/src/components/contract-components/published-contract/index.tsx (3)</summary>

`125-128`: **Consistent migration to Tailwind-based Card for README section**: Applying `relative flex flex-col gap-2 p-6` on `Card` accurately mirrors the previous Chakra `Flex` props (`flexDir=""column""`, `gap={2}`, `p={6}`, `position: relative`).

---

`131-141`: **Tailwind replacement for changelog Card styling**: The `flex flex-col gap-2 p-0` classes correctly reflect the former `as={Flex}`, `flexDir=""column""`, `gap={2}` and `p={0}` usage on the changelog card.

---

`144-152`: **Align Card padding for functions overview**: The `p-0` class on the `Card` removes all padding as intended, matching the original Chakra padding props.

</details>
<details>
<summary>apps/dashboard/src/app/(app)/team/[team_slug]/[project_slug]/engine/dedicated/(instance)/[engineId]/contract-subscriptions/components/contract-subscriptions-table.tsx (2)</summary>

`290-293`: **Use Tailwind class for background highlight**: The `className=""bg-backgroundHighlight""` on `Card` correctly replaces the Chakra `bgColor=""backgroundHighlight""` prop and aligns with the new `Card` API.

---

`408-414`: **Migrate Flex-based Card layout to Tailwind classes**: Converting `Card` to use `className=""flex flex-col gap-4""` preserves the original `Flex` layout (`flexDir=""column""`, `gap={4}`) inside the modal and removes the Chakra `as={Flex}` usage.

</details>
<details>
<summary>apps/dashboard/src/components/contract-functions/contract-function.tsx (2)</summary>

`212-213`: **Replace Chakra Box with div for inputs table container**: Using `<div className=""relative overflow-x-auto rounded-t-lg p-0"">` aligns with the previous `Box` layout properties (`overflowX`, `roundedTop`, `p={0}`) and reduces dependency on Chakra.

---

`475-485`: **Use div for events list container with Tailwind utility classes**: The replacement of `Box` with `<div className=""overflow-x-hidden px-4 pt-2"">` correctly preserves horizontal overflow behavior and padding for the events list.

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/events/events-feed.tsx (5)</summary>

`116-116`: **Migrate Card header to use Tailwind classes**: The `Card` wrapper with `className=""overflow-hidden p-0""` cleanly replaces the previous Chakra `p={0}` and `overflow=""hidden""` props.

---

`200-231`: **Convert grid columns to Tailwind divs**: The `<div className=""col-span-3"">` and `<div className=""col-span-1"" />` replacements preserve the original Chakra grid layout for transaction hash cells.

---

`264-273`: **Adjust block number cell with Tailwind grid classes**: Changing to `<div className=""col-span-3"">` retains the grid column span and flex layout for the block number display.

---

`314-322`: **Replace event data columns with Tailwind divs**: Using `<div className=""col-span-3"">` and `<div className=""col-span-9"">` correctly matches the previous column spans for event name and JSON arguments.

---

`355-358`: **Use Tailwind classes for tooltip Card content**: The `Card` with `className=""bg-backgroundHighlight px-4 py-2""` replicates the previous Chakra tooltip styling (background, padding).

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/_components/claim-conditions/claim-conditions-form/index.tsx (1)</summary>

`647-650`: **Fallback UI updated to use native div with Tailwind classes**  
Replacing the Chakra UI `Box` with a `<div className=""pb-5"" />` preserves the padding-bottom styling while removing the dependency.

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/settings/components/platform-fees.tsx (1)</summary>

`78-78`: **Card styling migrated to Tailwind CSS classes**  
Switching from Chakra UI props (`p={0}`, `position=""relative""`, `overflow=""hidden""`) to a combined `className` leverages the refactored `Card` component’s Tailwind CSS support and ensures consistent styling.

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/settings/components/royalties.tsx (1)</summary>

`91-91`: **Card styling migrated to Tailwind CSS classes**  
Using `className=""relative overflow-hidden p-0""` aligns with the updated `Card` API, replacing Chakra props without altering the visual layout.

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/settings/components/primary-sale.tsx (1)</summary>

`70-70`: **Card styling migrated to Tailwind CSS classes**  
The `Card` now receives `className=""relative overflow-hidden p-0""`, removing Chakra UI style props and keeping the same styling via Tailwind.

</details>
<details>
<summary>apps/dashboard/src/components/contract-components/contract-publish-form/index.tsx (2)</summary>

`5-5`: **Removed Chakra UI Box import**  
`Box` is no longer used after migrating placeholders to `<div />`. This cleanup removes an unused import.

---

`368-368`: **Replaced Chakra UI `Box` placeholders with native `<div />` elements**  
All empty placeholder components within the footer’s `Flex` have been converted from `<Box />` to `<div />`, eliminating the Chakra dependency. Please verify in the browser that these `<div />`s maintain the intended flex-item spacing; if any layout shifts occur, consider adding appropriate flex utilities (e.g., `flex-auto` or `grow`).  




Also applies to: 374-374, 387-387, 400-400, 414-414, 426-426

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/settings/components/metadata.tsx (1)</summary>

`145-145`: **Chakra UI style props replaced with Tailwind CSS classes.**

The change from Chakra UI style props (`p={0} position=""relative"" overflow=""hidden""`) to Tailwind CSS classes (`className=""relative overflow-hidden p-0""`) aligns with the PR objective of migrating away from Chakra UI's Box component.

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/account/components/account-balance.tsx (3)</summary>

`4-4`: **Removed Stat import from Chakra UI.**

The `Stat` component is no longer needed as it's being replaced with a Tailwind CSS approach.

---

`24-24`: **Replaced Chakra UI Stat with Tailwind CSS class.**

The `as={Stat}` prop is replaced with `className=""[&>*]:m-0""` which removes margins from all direct children, effectively mimicking the Stat component's styling behavior.

---

`31-31`: **Replaced Chakra UI Stat with Tailwind CSS class in mapped components.**

Similar to the previous change, this replaces `as={Stat}` with `className=""[&>*]:m-0""` for consistent styling across all balance cards.

</details>
<details>
<summary>apps/dashboard/src/components/contract-components/contract-publish-form/custom-factory.tsx (2)</summary>

`79-95`: **Replaced Chakra UI Box with styled div element.**

The Chakra UI `Box` component with responsive width props has been replaced with a standard `div` element using Tailwind's responsive width classes (`w-full md:w-[40%]`).

---

`96-102`: **Replaced Chakra UI Box with styled div element.**

The Chakra UI `Box` component with width prop has been replaced with a standard `div` element using Tailwind's width class (`w-full`).

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/split/ContractSplitPage.tsx (2)</summary>

`123-123`: **Replaced Chakra UI Stat with Tailwind CSS class.**

The `as={Stat}` prop is replaced with `className=""[&>*]:m-0""` which removes margins from all direct children, maintaining the same visual appearance.

---

`147-151`: **Replaced Chakra UI styling with Tailwind CSS and inline style.**

The changes include:
1. Replacing `as={Stat}` with `className=""[&>*]:m-0""`
2. Converting Chakra UI's `maxWidth=""2xs""` to an equivalent inline style `style={{ maxWidth: ""20rem"" }}`

This maintains the same visual appearance while reducing dependency on Chakra UI.

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/proposals/ContractProposalsPage.tsx (1)</summary>

`64-68`: **Properly migrated from Chakra to Tailwind styling.**

The Card component has been updated to use Tailwind CSS styling instead of Chakra UI's `as={Stat}` prop. The added className `[&>*]:m-0` ensures all child elements have no margin, and the inline style sets the maximum width to maintain the original layout.

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/_components/claim-conditions/claim-conditions-form/Inputs/ClaimerSelection.tsx (1)</summary>

`150-150`: **Successfully replaced Box with standard div element.**

The Chakra UI Box component has been properly replaced with a standard div element using equivalent Tailwind CSS classes for responsive behavior.

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/_components/claim-conditions/claim-conditions-form/Inputs/ClaimPriceInput.tsx (1)</summary>

`39-46`: **Box components successfully replaced with divs.**

The Chakra UI Box components have been properly replaced with standard div elements using Tailwind CSS classes for responsive styling. The functionality is maintained with the responsive widths properly translated to Tailwind equivalents.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Biome (1.9.4)</summary>

[error] 39-39: These CSS classes should be sorted.

Unsafe fix: Sort the classes.


(lint/nursery/useSortedClasses)

</details>

</details>

</details>
<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/accounts/components/accounts-count.tsx (2)</summary>

`3-3`: **Approved: Simplified Chakra UI imports**

The import statement has been cleaned up by removing the explicit import of `Stat` component, which is no longer needed after the refactoring.

---

`17-17`: **Good implementation of Chakra UI to Tailwind migration**

The `as={Stat}` prop has been removed and replaced with a Tailwind CSS utility class `[&>*]:m-0` that achieves the same styling effect by removing margins from all direct children. This change is consistent with the PR objective of migrating from Chakra UI components to standard HTML elements with Tailwind styling.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3082221313,2860005443,coderabbitai[bot],COMMENTED,2025-05-22T06:52:42Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/(marketplace)/components/list-form.tsx (1)</summary><blockquote>

`542-546`: **CSS classes should be sorted.**

According to Biome linting rules, the CSS classes should be sorted alphabetically.

```diff
 className={cn(
-  ""rounded-lg overflow-hidden cursor-pointer"",
+  ""cursor-pointer overflow-hidden rounded-lg"",
   isSelected(nft) &&
     ""outline outline-3 outline-purple-500"",
 )}
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Biome (1.9.4)</summary>

[error] 543-543: These CSS classes should be sorted.

Unsafe fix: Sort the classes.


(lint/nursery/useSortedClasses)

</details>

</details>

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between f358fe7b57e6b2001533054246395e950b831e52 and cf1a965d876f9a4726c05aa17a2d42a25d3d368a.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/(marketplace)/components/list-form.tsx` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/(marketplace)/components/list-form.tsx (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/nft-media.tsx (1)</summary>

* `NFTMediaWithEmptyState` (8-64)

</details>

</blockquote></details>

</details><details>
<summary>🪛 Biome (1.9.4)</summary>

<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/(marketplace)/components/list-form.tsx</summary>

[error] 543-543: These CSS classes should be sorted.

Unsafe fix: Sort the classes.


(lint/nursery/useSortedClasses)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (7)</summary>

* GitHub Check: Size
* GitHub Check: E2E Tests (pnpm, esbuild)
* GitHub Check: Build Packages
* GitHub Check: E2E Tests (pnpm, webpack)
* GitHub Check: E2E Tests (pnpm, vite)
* GitHub Check: Unit Tests
* GitHub Check: Analyze (javascript)

</details>

<details>
<summary>🔇 Additional comments (2)</summary><blockquote>

<details>
<summary>apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/(marketplace)/components/list-form.tsx (2)</summary>

`541-570`: **Great job migrating from Chakra UI Box to div with Tailwind CSS!**

The Box component has been successfully replaced with a standard div element using Tailwind CSS for styling. I appreciate the inclusion of keyboard accessibility features as suggested in previous reviews.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Biome (1.9.4)</summary>

[error] 543-543: These CSS classes should be sorted.

Unsafe fix: Sort the classes.


(lint/nursery/useSortedClasses)

</details>

</details>

---

`552-562`: **Well-implemented accessibility features!**

The addition of keyboard navigation support with `onKeyDown`, `tabIndex`, `role=""button""`, and `aria-pressed` makes the component fully accessible to keyboard users, which is excellent for maintaining web accessibility standards.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3082221313,2860022121,coderabbitai[bot],COMMENTED,2025-05-22T06:59:15Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (1)</summary><blockquote>

`22-37`: **Effective implementation of the outline border feature.**

The nested div structure with minimal inline styles is a good approach for implementing the gradient border effect. Using absolute positioning with z-index ensures the border appears behind the content without affecting the layout.


One minor suggestion would be to consider extracting the outline border into a separate component if this pattern is used elsewhere in the codebase.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between cf1a965d876f9a4726c05aa17a2d42a25d3d368a and 558155a7ff237753eb4f543ba51b00165d5a8101.

</details>

<details>
<summary>📒 Files selected for processing (3)</summary>

* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/(marketplace)/components/list-form.tsx` (2 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/_components/claim-conditions/claim-conditions-form/Inputs/ClaimPriceInput.tsx` (3 hunks)
* `apps/dashboard/src/tw-components/card.tsx` (1 hunks)

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (2)</summary>

* apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/_components/claim-conditions/claim-conditions-form/Inputs/ClaimPriceInput.tsx
* apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/(marketplace)/components/list-form.tsx

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (6)</summary>

* GitHub Check: E2E Tests (pnpm, esbuild)
* GitHub Check: E2E Tests (pnpm, webpack)
* GitHub Check: Size
* GitHub Check: E2E Tests (pnpm, vite)
* GitHub Check: Lint Packages
* GitHub Check: Analyze (javascript)

</details>

<details>
<summary>🔇 Additional comments (5)</summary><blockquote>

<details>
<summary>apps/dashboard/src/tw-components/card.tsx (5)</summary>

`1-2`: **Solid import updates for the Tailwind migration.**

The addition of the `cn` utility import and the switch to type-only React import are appropriate changes for this migration. The `cn` utility is a common pattern when using Tailwind CSS to combine conditional class names.

---

`4-4`: **Good simplification of the component props interface.**

The change from Chakra UI's `BoxProps` to standard React `HTMLAttributes<HTMLDivElement>` is a good choice that reduces framework dependencies and improves maintainability.

---

`12-15`: **Props destructuring looks good.**

Explicit destructuring of `className` makes it easier to combine with default classes, and the spread operator captures remaining props properly.

---

`17-20`: **Clean implementation of base styling with Tailwind.**

Using the `cn` utility to combine Tailwind classes is the right approach. The classes chosen provide equivalent styling to the previous Chakra implementation while making the styling more explicit and maintainable.

---

`39-41`: **Clean implementation of the base case.**

The direct rendering of a div with the baseClasses is straightforward and effective.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3082221313,2860089862,coderabbitai[bot],COMMENTED,2025-05-22T07:25:26Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/core-ui/batch-upload/lazy-mint-form/select-option.tsx (1)</summary><blockquote>

`2-5`: **Consider extending Chakra UI migration to remaining components.**

While the Card component has been migrated to use Tailwind CSS, there are still several Chakra UI components in use (Flex, Radio, Tooltip). For a more complete migration and to maintain consistency, consider replacing these with their HTML/Tailwind equivalents in a future update.


For example, the Flex component could be replaced with:
```diff
- <Flex flexDirection=""row"" justifyContent=""space-between"">
+ <div className=""flex flex-row justify-between"">
```

And similarly for other Chakra components.


Also applies to: 53-63

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 80026c6f462a9b2c3ac5b806e600bd67d15b4d86 and 7ad4fee566fb5a5808d618ba91d56fec8c7d43a6.

</details>

<details>
<summary>📒 Files selected for processing (8)</summary>

* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/(marketplace)/components/list-form.tsx` (2 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/_components/claim-conditions/claim-conditions-form/Inputs/ClaimPriceInput.tsx` (3 hunks)
* `apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/account/components/deposit-native.tsx` (1 hunks)
* `apps/dashboard/src/app/(app)/team/[team_slug]/[project_slug]/engine/dedicated/(instance)/[engineId]/webhooks/components/webhooks-table.tsx` (1 hunks)
* `apps/dashboard/src/components/contract-functions/interactive-abi-function.tsx` (1 hunks)
* `apps/dashboard/src/core-ui/batch-upload/batch-table.tsx` (3 hunks)
* `apps/dashboard/src/core-ui/batch-upload/lazy-mint-form/select-option.tsx` (3 hunks)
* `apps/dashboard/src/tw-components/card.tsx` (1 hunks)

</details>

<details>
<summary>✅ Files skipped from review due to trivial changes (3)</summary>

* apps/dashboard/src/app/(app)/team/[team_slug]/[project_slug]/engine/dedicated/(instance)/[engineId]/webhooks/components/webhooks-table.tsx
* apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/account/components/deposit-native.tsx
* apps/dashboard/src/components/contract-functions/interactive-abi-function.tsx

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (4)</summary>

* apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/_components/claim-conditions/claim-conditions-form/Inputs/ClaimPriceInput.tsx
* apps/dashboard/src/tw-components/card.tsx
* apps/dashboard/src/app/(app)/(dashboard)/(chain)/[chain_id]/[contractAddress]/(marketplace)/components/list-form.tsx
* apps/dashboard/src/core-ui/batch-upload/batch-table.tsx

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (3)</summary>

* GitHub Check: Unit Tests
* GitHub Check: Size
* GitHub Check: Lint Packages

</details>

<details>
<summary>🔇 Additional comments (3)</summary><blockquote>

<details>
<summary>apps/dashboard/src/core-ui/batch-upload/lazy-mint-form/select-option.tsx (3)</summary>

`32-32`: **Good migration to Tailwind CSS for Card background.**

The change to use a Tailwind class for background styling is consistent with the PR objective of migrating away from Chakra UI props to Tailwind CSS.

---

`43-50`: **Excellent implementation of Tailwind styling for the Card component.**

The migration from Chakra UI props to Tailwind CSS classes for the Card component is well done. The conditional styling for disabled and active states has been properly implemented using the `cn` utility.

---

`88-88`: **Good consistency in Tailwind styling for tooltip Card.**

The styling approach is consistent with the earlier Card component, maintaining a unified styling pattern throughout the component.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3071786409,2848982435,lunary-bot,APPROVED,2025-05-18T13:31:21Z,
3130078210,2910093178,ChrisHuie,APPROVED,2025-06-09T13:34:41Z,
3128538607,2908576556,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-08T17:05:03Z,"## Pull Request Overview

This PR aims to fix the row selection behavior in DataSheetGrid by ensuring a stable and unique row key is provided.
- Added the rowKey property with the value ""id"" to enhance row selection stability.
- Consistent updates made in both TasksClientPage and ControlsClientPage.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated no comments.

| File | Description |
| ---- | ----------- |
| apps/framework-editor/app/(pages)/tasks/TasksClientPage.tsx | Added rowKey=""id"" to DataSheetGrid for unique row identification |
| apps/framework-editor/app/(pages)/controls/ControlsClientPage.tsx | Added rowKey=""id"" to DataSheetGrid for consistent and stable row selection |


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**apps/framework-editor/app/(pages)/tasks/TasksClientPage.tsx:298**
* Verify that 'id' is a unique and stable key for each row to ensure reliable selection behavior in DataSheetGrid.
```
rowKey=""id""
```
**apps/framework-editor/app/(pages)/controls/ControlsClientPage.tsx:380**
* Ensure that the 'id' property is consistently unique across rows to maintain proper row identification in the grid.
```
rowKey=""id""
```
</details>

"
3099541552,2877461244,coderabbitai[bot],COMMENTED,2025-05-29T08:08:10Z,"**Actionable comments posted: 1**

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between e8a25d70b92367a8d58a52b25d30e681d8581228 and df35d0c2ad945af9ad3cd6a61ff090c46ed25501.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `apps/dashboard/src/core-ui/batch-upload/lazy-mint-form/select-option.tsx` (2 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: Size
* GitHub Check: E2E Tests (pnpm, esbuild)
* GitHub Check: E2E Tests (pnpm, webpack)
* GitHub Check: Lint Packages
* GitHub Check: E2E Tests (pnpm, vite)
* GitHub Check: Build Packages
* GitHub Check: Unit Tests
* GitHub Check: Analyze (javascript)

</details>

<details>
<summary>🔇 Additional comments (6)</summary><blockquote>

<details>
<summary>apps/dashboard/src/core-ui/batch-upload/lazy-mint-form/select-option.tsx (6)</summary>

`1-2`: **LGTM: Clean import migration to shadcn/ui components**

The imports have been properly updated to use shadcn/ui components (`Card` and `ToolTipLabel`) instead of Chakra UI equivalents.

---

`7-7`: **LGTM: Interface extension provides proper HTML attributes**

Extending `React.HTMLAttributes<HTMLDivElement>` is the correct approach for allowing standard HTML div attributes to be passed through to the component.

---

`27-27`: **LGTM: Props parameter rename aligns with HTML div semantics**

The rename from `stackProps` to `divProps` better reflects that these props are now spread onto a div element rather than a Chakra Stack component.

---

`30-38`: **LGTM: Conditional tooltip implementation is well-structured**

The ToolTipLabel wrapper with conditional disabled tooltip content maintains the original functionality while using the new component architecture.

---

`69-80`: **LGTM: Info tooltip implementation maintains functionality**

The info icon tooltip has been properly migrated to use ToolTipLabel with consistent styling using the muted card design.

---

`41-46`: **LGTM: Tailwind classes provide equivalent styling**

The responsive width (`md:w-[350px]`) and conditional styling for disabled and active states properly replicate the original Chakra UI behavior with Tailwind CSS.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3099541552,2879628336,joaquim-verges,APPROVED,2025-05-29T21:13:18Z,
3094579094,2872154631,zanesq,COMMENTED,2025-05-27T22:00:21Z,"It works! Left a few comments to fix. Also wondering why its removing comments that already existed, would be nice to keep those.

One more thing, be sure to lock down security as much as possible. Copilot found some concerns worth addressing:

Yes, there are several potential security concerns introduced by these changes—especially in how pasted images are handled, saved to disk, and deleted. I’ll point out the main areas you should review and consider hardening:

---

### 1. **Arbitrary File Write Risk via `save-data-url-to-temp`**

**What’s happening:**  
The IPC handler `save-data-url-to-temp` takes a dataURL and a uniqueId, parses the image out, and writes it to a file. The file path is constructed with a random string and placed inside a temp directory (`gooseTempDir`).

**Concerns:**
- **Input Validation:**  
  The code parses the dataURL and extracts the image extension. While the extension is taken from the MIME type, if an attacker somehow controls the dataURL (via clipboard injection or other means), they could try to craft malicious or unexpected file extensions or malformed data.
- **Filename Construction:**  
  Although the filename includes a random string and is placed inside a controlled directory, uniqueId is client-supplied. If this could be manipulated, it might allow for unexpected file names or collisions. However, since path.join is used and the base is locked to gooseTempDir, path traversal is mitigated unless uniqueId or the extension includes path separators (which seems unlikely but is worth validating).
- **Directory Enforcement:**  
  The handler always writes to the temp directory. However, always validate that `filePath` never escapes this directory, e.g., via `..` or similar tricks.

---

### 2. **Arbitrary File Delete Risk via `delete-temp-file`**

**What’s happening:**  
The IPC handler deletes a file if its path starts with `gooseTempDir`.

**Concerns:**
- **Path Check:**  
  The code checks that the filePath starts with `gooseTempDir` before proceeding. However, string prefix checks can be bypassed if not careful (e.g., via symlinks or unicode normalization).  
  **Better approach:** Use `path.resolve()` to get the absolute path, and then ensure it's still under `gooseTempDir`.
- **Race Conditions & Symlinks:**  
  An attacker could attempt to create a symlink inside `gooseTempDir` pointing elsewhere. If your code deletes the symlink, it could remove files outside the intended directory.  
  **Mitigation:** Use `fs.lstat` to ensure you’re deleting a regular file and not a symlink, or always unlink files with care.

---

### 3. **IPC Exposure in Preload**

**What’s happening:**  
The `window.electron` object now exposes `saveDataUrlToTemp` and `deleteTempFile` to all renderer code.

**Concerns:**
- **Renderer Isolation:**  
  If any third-party or untrusted code runs in the renderer (e.g., a malicious dependency, XSS, or compromised webview), it could now write arbitrary image files (with any dataURL) and trigger deletion of files (within the temp directory).
- **Privilege Escalation:**  
  If the IPC channel is not tightly scoped, it can be a vector for privilege escalation if compromised renderer code exists.

---

### 4. **Temp Directory Cleanup**

**What’s happening:**  
On app quit, the temp directory is recursively deleted.

**Concerns:**
- **Race Conditions:**  
  If a malicious actor can place a symlink inside the temp directory before quit, the recursive delete could wipe out unintended parts of the file system.  
  **Mitigation:** Before deleting, iterate and ensure no entries are symlinks, or use safe directory deletion libraries.

---

### 5. **General DataURL Handling**

- **Memory/Resource Use:**  
  Handling large dataURLs or many pasted images could consume a lot of memory or disk space.
- **Denial of Service:**  
  No quotas or limits are enforced on the number or size of pasted images, which could be abused.

---

## **Recommendations**

1. **Validate and Sanitize Inputs**  
   - Ensure `uniqueId` and extracted extensions are safe (no path traversals, only allow [a-zA-Z0-9] for uniqueId, and whitelisted extensions).
   - Use `path.resolve()` and verify the file is under `gooseTempDir` before any file operation.

2. **Harden IPC Handlers**  
   - Check that invoked file operations only affect files the app itself created.
   - Consider restricting IPC exposure so only trusted renderer code can invoke these handlers.

3. **Handle Symlinks Carefully**  
   - Before deleting files or directories, check for and refuse to operate on symlinks.

4. **Enforce Quotas**  
   - Limit max image size, number of images, and total disk space used for pasted images.

5. **Consider Future XSS Vectors**  
   - If your renderer ever loads remote or user-generated content, ensure the `window.electron` API is not exposed to untrusted origins.

---

## **Summary Table**

| Area                     | Risk                          | Mitigation                                      |
|--------------------------|-------------------------------|-------------------------------------------------|
| File writing (temp)      | Path traversal, DOS           | Sanitize input, validate paths, enforce quotas  |
| File deletion            | Symlink, path traversal       | Use `fs.lstat`, check resolved paths            |
| IPC exposure             | Privilege escalation          | Restrict API, renderer isolation                |
| Temp dir cleanup         | Symlink attack, race condition| Validate contents of dir before deletion        |
| Resource usage           | Denial of Service             | Enforce limits on size/count                    |

---

**In summary:**  
The changes are mostly sound, but you should harden input validation, path handling, and IPC exposure to reduce risk—especially if you ever run untrusted code in the renderer or if local attackers are a concern."
3094579094,2873144405,zanesq,COMMENTED,2025-05-28T00:31:46Z,
3094579094,2873173438,zanesq,COMMENTED,2025-05-28T00:44:26Z,
3094579094,2873622076,michaelneale,COMMENTED,2025-05-28T05:21:32Z,
3094579094,2873622654,michaelneale,COMMENTED,2025-05-28T05:21:55Z,
3094579094,2873623939,michaelneale,APPROVED,2025-05-28T05:22:50Z,"approving - but there are lots of spurious changes in ChatInput.tsx which would be good to not have (so much that github won't show the diff), mainly style (ok) and important comments deleted (eg japanese input!)"
3094579094,2876002822,zanesq,APPROVED,2025-05-28T18:11:14Z,LGTM!
3078237999,2856095641,dylan-conway,COMMENTED,2025-05-21T02:58:09Z,
3078237999,2856095841,dylan-conway,COMMENTED,2025-05-21T02:58:20Z,
3078237999,2856096387,dylan-conway,COMMENTED,2025-05-21T02:58:54Z,
3078237999,2856098161,dylan-conway,COMMENTED,2025-05-21T03:00:45Z,
3078237999,2856098800,dylan-conway,COMMENTED,2025-05-21T03:01:19Z,
3078237999,2856099811,dylan-conway,COMMENTED,2025-05-21T03:02:17Z,
3078237999,2856105217,dylan-conway,COMMENTED,2025-05-21T03:05:56Z,
3165174628,2947798553,Rangi42,COMMENTED,2025-06-21T15:35:22Z,
3142202183,2923384186,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-13T04:31:04Z,"## Pull Request Overview

This PR isolates WalletConnect storage instances by assigning a unique `customStoragePrefix` based on whether the connector is the modal variant, preventing ""WalletConnect Core is already initialized"" warnings.

- Introduce a new `rkDetailsIsWalletConnectModalConnector` flag to identify modal connectors.
- Inject `customStoragePrefix` into the WalletConnect config using distinct prefixes.
- Pass the new flag through `createWalletConnectConnector` and document the change in a changeset.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated no comments.

| File                                                            | Description                                             |
|-----------------------------------------------------------------|---------------------------------------------------------|
| packages/rainbowkit/src/wallets/getWalletConnectConnector.ts    | Added flag param and prefix logic for unique storages  |
| .changeset/custom-storage-prefix.md                             | Documented patch to mitigate initialization warnings    |


<details>
<summary>Comments suppressed due to low confidence (3)</summary>

**packages/rainbowkit/src/wallets/getWalletConnectConnector.ts:59**
* [nitpick] Using literal strings 'clientOne' and 'clientTwo' for storage prefixes can be confusing; consider defining descriptive constants (e.g. MODAL_PREFIX = 'modalConnector', DEFAULT_PREFIX = 'defaultConnector') and referencing those constants here.
```
        ? 'clientOne'
```
**packages/rainbowkit/src/wallets/getWalletConnectConnector.ts:54**
* Add unit tests to confirm that when `rkDetailsIsWalletConnectModalConnector` is true or false, distinct `customStoragePrefix` values are generated and result in separate WalletConnect instances, ensuring the collision is resolved.
```
// Assign unique storage prefix depending on connector type
```
**packages/rainbowkit/src/wallets/getWalletConnectConnector.ts:26**
* [nitpick] The parameter name `rkDetailsIsWalletConnectModalConnector` is quite long; consider shortening it (e.g. `isModalConnector`) to improve readability and maintain consistency with other flags.
```
  rkDetailsIsWalletConnectModalConnector?: RainbowKitDetails['isWalletConnectModalConnector'];
```
</details>

"
3087680791,2869708375,niedbalski,APPROVED,2025-05-27T06:07:02Z,Please fix the PR title
3120335173,2899491060,DjamilaBaroudi,APPROVED,2025-06-05T09:11:55Z,
3117327220,2896203566,sourcery-ai[bot],COMMENTED,2025-06-04T10:33:22Z,"Hey @lollipopkit - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟡 **General issues**: 3 issues found
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3124927666,2905112836,turtleDev,APPROVED,2025-06-06T14:30:46Z,
3131654347,2911783988,seratch,APPROVED,2025-06-10T02:16:29Z,
3141164003,2922165094,ff-kamal,APPROVED,2025-06-12T18:00:44Z,
3072138891,2849126423,natolambert,COMMENTED,2025-05-19T01:14:49Z,
3072138891,2849183338,natolambert,COMMENTED,2025-05-19T01:19:04Z,
3078036625,2870241064,PawelPeczek-Roboflow,APPROVED,2025-05-27T08:51:30Z,
3121742299,2901534202,georgesittas,COMMENTED,2025-06-05T18:11:27Z,
3121742299,2909827446,themisvaltinos,COMMENTED,2025-06-09T11:53:55Z,
3121742299,2909925447,benfdking,COMMENTED,2025-06-09T12:30:56Z,
3121742299,2909925761,benfdking,COMMENTED,2025-06-09T12:31:06Z,
3121742299,2909949450,themisvaltinos,COMMENTED,2025-06-09T12:40:51Z,
3121742299,2909950181,themisvaltinos,COMMENTED,2025-06-09T12:41:10Z,
3121742299,2909950651,themisvaltinos,APPROVED,2025-06-09T12:41:23Z,
3121742299,2910013613,benfdking,COMMENTED,2025-06-09T13:05:05Z,
3132069046,2913721882,dstrodtman,APPROVED,2025-06-10T14:00:37Z,LGTM
3085074194,2863087551,ellipsis-dev[bot],COMMENTED,2025-05-23T04:05:41Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to bee7b7c66284db4e07964f92d3e22b92db398b4c in <ellipsistime>1 minute and 45 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `94` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `3` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern/services/task_v2_service.py:1591</code></summary>
> 
> - **Draft comment:** 
> Avoid using a bare except clause when fetching the workflow run response. Catching Exception may mask critical errors.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 20% vs. threshold = 50% This is a webhook response building function where the workflow run response is optional - if it fails, the code continues with None values. The broad Exception catch allows the code to gracefully handle any failure mode. Being more specific about exceptions here wouldn't add value since any failure should be handled the same way - log and continue. The warning is properly logged with exc_info=True for debugging. The comment has a valid point that broad Exception catches can mask issues. More specific exception handling could help identify and fix specific failure modes. In this case, the broad catch is appropriate because: 1) The failure is properly logged with full stack trace, 2) Any type of failure should be handled the same way - log and continue with None, 3) This is webhook response building where graceful degradation is more important than strict error handling. The comment should be deleted. While generally good advice, in this specific case the broad Exception catch is appropriate given the context and error handling needs.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>skyvern/services/task_v2_service.py:1630</code></summary>
> 
> - **Draft comment:** 
> Ensure that using 'task_v2.extracted_information_schema' as the value for the 'data_extraction_schema' field is intentional, as the naming difference could introduce confusion.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `40%` <= threshold `50%` The comment is asking the author to confirm the intention behind using a specific value for a field, which is not allowed according to the rules. However, it does point out a potential issue with naming that could lead to confusion, which is a valid concern. The comment could be rephrased to suggest a review of the naming for clarity, but as it stands, it violates the rule against asking for confirmation of intention.
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>skyvern/services/task_v2_service.py:1653</code></summary>
> 
> - **Draft comment:** 
> The new payload-building logic (using model_dump(), adding a 'task_run' key, then json.dumps) meets backward compatibility needs. Verify that existing webhook consumers can correctly parse the updated JSON structure.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is asking the PR author to verify something, which is against the rules. It doesn't provide a specific suggestion or point out a specific issue with the code. Therefore, it should be removed.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_zFaXlAGSnpC6BYiS`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3085074194,2863105619,ellipsis-dev[bot],COMMENTED,2025-05-23T04:17:03Z,"> [!CAUTION]
> **Changes requested  :x:**
> <details>
> <summary>Reviewed eb04f752df2b0bfe2013e2ef299630f1b8763cf6 in <ellipsistime>1 minute and 52 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `82` lines of code in `2` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern/services/run_service.py:66</code></summary>
> 
> - **Draft comment:** 
> Refactored TaskRunResponse creation: Delegating to task_v2_service.build_task_v2_run_response centralizes logic. Ensure the new response format preserves all backward compatibility requirements.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>skyvern/services/task_v2_service.py:1580</code></summary>
> 
> - **Draft comment:** 
> Function renamed from _build_task_run_response to build_task_v2_run_response. Confirm that making this function public matches intended module encapsulation.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment is asking the author to confirm their intention regarding the function renaming and its impact on module encapsulation. This violates the rule against asking the author to confirm their intention or ensure behavior is intended.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_SNbhGNKTPpjvZfxp`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3086549942,2864610073,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-23T14:21:58Z,"## Pull Request Overview

This PR fixes various typographical errors in documentation files.
- Corrects the spelling of ""Sentence Transformers"" in train-sentence-transformers.md and matryoshka.md.
- Fixes a header typo in python-tiny-agents.md.
- Updates a comment typo in fine-tune-w2v2-bert.md.
- Revises command line instructions and dependency spelling in agents.md.

### Reviewed Changes

Copilot reviewed 5 out of 5 changed files in this pull request and generated 5 comments.

<details>
<summary>Show a summary per file</summary>

| File                          | Description                                                    |
| ----------------------------- | -------------------------------------------------------------- |
| train-sentence-transformers.md| Corrects a typo in the evaluator description                   |
| python-tiny-agents.md         | Fixes a header typo in the Agent initialization section         |
| matryoshka.md                 | Corrects the spelling of ""Sentence Transformers""               |
| fine-tune-w2v2-bert.md         | Fixes a typo (""lenghts"" to ""lengths"") in a comment                |
| agents.md                    | Corrects spelling in the installation instructions               |
</details>




"
3086549942,2864611469,pcuenca,APPROVED,2025-05-23T14:22:26Z,Thank you! 🙌 
3086549942,2865382715,Vaibhavs10,APPROVED,2025-05-23T18:36:02Z,good bot! ❤️
3124191731,2904498508,swamirishi,CHANGES_REQUESTED,2025-06-06T10:27:04Z,@peterxcli Thanks for working on the patch. I have left some comments inline. 
3124191731,2923558695,peterxcli,COMMENTED,2025-06-13T09:28:47Z,
3125597916,2905784382,gemini-code-assist[bot],COMMENTED,2025-06-06T18:50:37Z,"Hello @Habdel-Edenfield, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

## Summary of Changes
Olá! Gemini aqui, trazendo um resumo deste pull request. O objetivo principal desta PR, conforme indicado pelo título, é desenvolver e adicionar a documentação completa e um tutorial detalhado para o PraisonAI em português (pt-br). As mudanças introduzem uma estrutura abrangente de documentação, cobrindo desde a instalação e conceitos fundamentais até workflows avançados, uso prático com diferentes linguagens e configurações, e guias para contribuição.

### Highlights
* **Nova Documentação em Português**: Adição de uma estrutura completa de documentação em português (pt-br) na pasta `docs/pt-br/`.
* **Guias de Instalação**: Inclusão de um guia detalhado para instalação local no Windows.
* **Conceitos Fundamentais**: Explicação dos blocos de construção do PraisonAI, como Agentes, Tarefas, Processos, Ferramentas, Memória e RAG.
* **Guias de Uso Prático**: Tutoriais sobre como usar o PraisonAI com Python, YAML (abordagem Low-Code/No-Code) e JavaScript/TypeScript.
* **Workflows Avançados**: Descrição de padrões de colaboração e orquestração de múltiplos agentes, incluindo roteamento, orquestrador-trabalhador, workflows autônomos, paralelização, encadeamento de prompts e ciclos avaliador-otimizador.
* **Ferramentas e LLMs**: Módulos dedicados ao uso e criação de ferramentas, e à integração com diversos modelos de LLM (OpenAI, Ollama, Groq, Gemini, etc.).
* **Exemplos Práticos**: Estudos de caso conceituais demonstrando a aplicação do PraisonAI em cenários como análise de ações, geração de artigos e análise/geração de código.
* **Guia de Contribuição**: Informações para desenvolvedores interessados em contribuir para o projeto e configurar um ambiente de desenvolvimento local.

### Changelog
<details>
<summary>Click here to see the changelog</summary>

* **docs/pt-br/00_introducao/00_como_usar_esta_documentacao.md**
  * Adiciona o guia 'Como Usar Esta Documentação (E Dicas para Obsidian)', explicando a estrutura, navegação e plugins Obsidian sugeridos.
* **docs/pt-br/00_introducao/01_o_que_e_praisonai.md**
  * Adiciona a introdução 'O que é o PraisonAI?', descrevendo o framework, seus principais recursos e incluindo diagramas Mermaid para Fluxo, Ferramentas e Memória.
* **docs/pt-br/00_introducao/02_filosofia_e_casos_de_uso.md**
  * Adiciona o documento 'Filosofia e Casos de Uso', detalhando os princípios do projeto e exemplos comuns de aplicação.
* **docs/pt-br/00_introducao/03_metodologia_de_aprendizado.md**
  * Adiciona o guia 'Metodologia de Aprendizado', sugerindo um ciclo de estudo e ambiente de estudos para usar a documentação.
* **docs/pt-br/01_instalacao/00_instalacao_windows.md**
  * Adiciona o 'Guia de Instalação Local (Windows)', cobrindo pré-requisitos, configuração de variáveis de ambiente, instalação via pip/código fonte e solução de problemas comuns.
* **docs/pt-br/02_conceitos_fundamentais/01_agentes.md**
  * Adiciona a explicação do conceito fundamental de 'Agentes', o que são, suas características e como são implementados no PraisonAI (Python e YAML).
* **docs/pt-br/02_conceitos_fundamentais/02_tarefas.md**
  * Adiciona a explicação do conceito fundamental de 'Tarefas', o que são, suas características e como são implementadas no PraisonAI (Python e YAML).
* **docs/pt-br/02_conceitos_fundamentais/03_processos.md**
  * Adiciona a explicação do conceito fundamental de 'Processos', descrevendo os tipos Sequencial, Hierárquico e Baseado em Workflow, e como configurá-los.
* **docs/pt-br/02_conceitos_fundamentais/04_ferramentas.md**
  * Adiciona a explicação do conceito fundamental de 'Ferramentas', o que são, como são implementadas e usadas no PraisonAI, e o mecanismo de Function Calling.
* **docs/pt-br/02_conceitos_fundamentais/05_memoria.md**
  * Adiciona a explicação do conceito fundamental de 'Memória', descrevendo memória de curto e longo prazo, como é implementada no PraisonAI e seu diagrama.
* **docs/pt-br/02_conceitos_fundamentais/06_conhecimento_rag.md**
  * Adiciona a explicação do conceito fundamental de 'Conhecimento e RAG', descrevendo Retrieval Augmented Generation e como é usado no PraisonAI.
* **docs/pt-br/03_usando_praisonai/01_usando_com_python.md**
  * Adiciona o guia 'Usando o PraisonAI com Python', mostrando como criar agentes simples e múltiplos agentes programaticamente.
* **docs/pt-br/03_usando_praisonai/02_usando_com_yaml.md**
  * Adiciona o guia 'Usando o PraisonAI com YAML', explicando a abordagem No-Code/Low-Code, a CLI e a estrutura de arquivos YAML.
* **docs/pt-br/03_usando_praisonai/03_usando_com_js_ts.md**
  * Adiciona o guia 'Usando o PraisonAI com JavaScript e TypeScript', cobrindo instalação e exemplos básicos em JS e TS.
* **docs/pt-br/03_usando_praisonai/04_criando_seu_primeiro_agente.md**
  * Adiciona o guia rápido 'Criando Seu Primeiro Agente', um tutorial passo a passo simples usando Python.
* **docs/pt-br/04_workflows_avancados/01_processos_colaboracao_agentes.md**
  * Adiciona a introdução aos 'Workflows Avançados', revisitando os processos de colaboração (Sequencial, Hierárquico, Workflow Customizado) como base para padrões agênticos.
* **docs/pt-br/04_workflows_avancados/02_workflow_roteamento_agentico.md**
  * Adiciona a explicação do padrão 'Roteamento Agêntico', onde tarefas são direcionadas a diferentes LLMs/agentes especializados.
* **docs/pt-br/04_workflows_avancados/03_workflow_orquestrador_trabalhador.md**
  * Adiciona a explicação do padrão 'Orquestrador-Trabalhador Agêntico', onde um agente gerencia e sintetiza o trabalho de múltiplos agentes.
* **docs/pt-br/04_workflows_avancados/04_workflow_autonomo_agentico.md**
  * Adiciona a explicação do padrão 'Workflow Autônomo Agêntico', descrevendo o ciclo de planejamento, ação, observação e adaptação.
* **docs/pt-br/04_workflows_avancados/05_paralelizacao_agentica.md**
  * Adiciona a explicação do padrão 'Paralelização Agêntica', focando na execução simultânea de tarefas.
* **docs/pt-br/04_workflows_avancados/06_encadeamento_prompts_agentico.md**
  * Adiciona a explicação do padrão 'Encadeamento de Prompts Agêntico', onde a saída de um prompt alimenta o próximo.
* **docs/pt-br/04_workflows_avancados/07_avaliador_otimizador_agentico.md**
  * Adiciona a explicação do padrão 'Avaliador-Otimizador Agêntico', um ciclo iterativo de geração e refinamento de soluções.
* **docs/pt-br/04_workflows_avancados/08_agentes_repetitivos.md**
  * Adiciona a explicação do padrão 'Agentes Repetitivos', para tarefas que precisam ser executadas múltiplas vezes.
* **docs/pt-br/05_ferramentas/00_visao_geral_ferramentas.md**
  * Adiciona a 'Visão Geral de Ferramentas', aprofundando no uso de ferramentas embutidas e na criação de ferramentas personalizadas em Python.
* **docs/pt-br/06_modelos_llm/00_usando_diferentes_llms.md**
  * Adiciona o guia 'Usando Diferentes LLMs', explicando como configurar e especificar modelos de diversos provedores (OpenAI, Ollama, Groq, Gemini, etc.).
* **docs/pt-br/07_exemplos_praticos/01_exemplo_analise_de_acoes.md**
  * Adiciona o 'Exemplo Prático: Análise de Ações com Agentes YAML', um estudo de caso conceitual sobre coleta e análise de informações financeiras.
* **docs/pt-br/07_exemplos_praticos/02_exemplo_geracao_artigos.md**
  * Adiciona o 'Exemplo Prático: Geração de Artigos com Agentes YAML', um estudo de caso conceitual sobre automação do processo de escrita de artigos.
* **docs/pt-br/07_exemplos_praticos/03_exemplo_analise_geracao_codigo.md**
  * Adiciona o 'Exemplo Prático: Análise e Geração Simples de Código com Agentes YAML', um estudo de caso conceitual sobre como agentes podem auxiliar em tarefas de programação.
* **docs/pt-br/08_contribuindo_e_desenvolvimento/00_contribuindo_e_dev_local.md**
  * Adiciona o módulo 'Contribuindo para o PraisonAI e Desenvolvimento Local', com guias sobre como fazer um fork, clonar, criar branches, testar e configurar o ambiente de desenvolvimento.
* **docs/pt-br/README.md**
  * Adiciona o README principal para a documentação em português, apresentando a estrutura do curso.

</details>

<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.
</details>


<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>


[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configure Gemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3125597916,2905795775,gemini-code-assist[bot],CHANGES_REQUESTED,2025-06-06T18:52:38Z,"## Code Review
Esta é uma adição fantástica ao projeto PraisonAI, fornecendo uma documentação abrangente e detalhada em português. A estrutura é lógica, os exemplos são, na maioria, claros e os conceitos são bem explicados. O esforço investido aqui é evidente e muito apreciado!

A documentação cobre desde a introdução e instalação até conceitos fundamentais, uso prático com Python, YAML e JS/TS, workflows avançados, ferramentas, modelos LLM, exemplos práticos e guias de contribuição. Os diagramas Mermaid são particularmente úteis para visualizar os fluxos e conceitos.

Identifiquei alguns pontos que podem ser aprimorados para garantir ainda mais clareza e correção, detalhados nos comentários específicos nos arquivos. No geral, um trabalho de excelente qualidade!

### Summary of Findings
* **Erro de Sintaxe em Exemplo JavaScript**: Um bloco `catch` em um exemplo de JavaScript (ES Modules) está sem chaves, o que constitui um erro de sintaxe.
* **Clareza na Instalação de Dependências de Desenvolvimento**: As instruções para instalar dependências de desenvolvimento com `uv pip install -e .[dev]` podem não funcionar como esperado, pois o extra `[dev]` não parece estar explicitamente definido no `pyproject.toml`. Isso pode causar confusão ou falha na configuração do ambiente para contribuidores.
* **Consistência em Exemplos Python para Agentes**: Os exemplos em Python que demonstram como passar dados para prompts de agentes (usando placeholders nas `instructions` vs. f-strings na chamada `start()`) poderiam se beneficiar de uma maior clareza ou padronização sobre o método recomendado ou suportado pelo `praisonaiagents.Agent`.

### Merge Readiness
Este pull request representa um esforço significativo e de alta qualidade para documentar o PraisonAI em português. A documentação é abrangente e bem estruturada. 

Antes de mesclar, sugiro que os pontos levantados nos comentários (especialmente o erro de sintaxe em JavaScript e a clareza nas instruções de instalação de dependências de desenvolvimento) sejam endereçados para garantir a melhor experiência possível para os usuários e contribuidores. Após esses ajustes, a documentação estará em excelente forma.

Lembre-se que não estou autorizado a aprovar o pull request diretamente; outros revisores devem realizar a aprovação final."
3077293430,2854559908,coderabbitai[bot],COMMENTED,2025-05-20T14:56:06Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>editor/scaffolds/editor/reducers/block.reducer.ts (1)</summary><blockquote>

`217-234`: **Type casting can be improved.**

The block move handlers correctly implement the swap logic using the existing `self_sort` function, but there's an opportunity to improve type safety.


Consider replacing `as any` with explicit typing:

```diff
-      const { block_id } = action as any;
+      const { block_id } = action as FormsBlockMoveUpAction;

// And in the ""blocks/move/down"" case:
-      const { block_id } = action as any;
+      const { block_id } = action as FormsBlockMoveDownAction;
```

Or even better, let TypeScript infer the type:

```diff
-      const { block_id } = action as any;
+      const { block_id } = action;
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 1416f6a3fe793141d0d7ff634abef7776d61bd57 and 43a3abc441211b416843511c80b9a5bed9e921f7.

</details>

<details>
<summary>📒 Files selected for processing (11)</summary>

* `editor/scaffolds/blocks-editor/blocks/base-block.tsx` (2 hunks)
* `editor/scaffolds/blocks-editor/blocks/divider-block.tsx` (2 hunks)
* `editor/scaffolds/blocks-editor/blocks/field-block.tsx` (2 hunks)
* `editor/scaffolds/blocks-editor/blocks/header-block.tsx` (2 hunks)
* `editor/scaffolds/blocks-editor/blocks/html-block.tsx` (2 hunks)
* `editor/scaffolds/blocks-editor/blocks/image-block.tsx` (2 hunks)
* `editor/scaffolds/blocks-editor/blocks/pdf-block.tsx` (2 hunks)
* `editor/scaffolds/blocks-editor/blocks/video-block.tsx` (2 hunks)
* `editor/scaffolds/editor/action.ts` (2 hunks)
* `editor/scaffolds/editor/reducer.ts` (1 hunks)
* `editor/scaffolds/editor/reducers/block.reducer.ts` (2 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (8)</summary>

<details>
<summary>editor/scaffolds/blocks-editor/blocks/html-block.tsx (1)</summary><blockquote>

<details>
<summary>editor/scaffolds/blocks-editor/blocks/base-block.tsx (1)</summary>

* `MoveBlockMenuItems` (141-164)

</details>

</blockquote></details>
<details>
<summary>editor/scaffolds/blocks-editor/blocks/pdf-block.tsx (1)</summary><blockquote>

<details>
<summary>editor/scaffolds/blocks-editor/blocks/base-block.tsx (1)</summary>

* `MoveBlockMenuItems` (141-164)

</details>

</blockquote></details>
<details>
<summary>editor/scaffolds/blocks-editor/blocks/header-block.tsx (1)</summary><blockquote>

<details>
<summary>editor/scaffolds/blocks-editor/blocks/base-block.tsx (1)</summary>

* `MoveBlockMenuItems` (141-164)

</details>

</blockquote></details>
<details>
<summary>editor/scaffolds/blocks-editor/blocks/video-block.tsx (1)</summary><blockquote>

<details>
<summary>editor/scaffolds/blocks-editor/blocks/base-block.tsx (1)</summary>

* `MoveBlockMenuItems` (141-164)

</details>

</blockquote></details>
<details>
<summary>editor/scaffolds/blocks-editor/blocks/image-block.tsx (1)</summary><blockquote>

<details>
<summary>editor/scaffolds/blocks-editor/blocks/base-block.tsx (1)</summary>

* `MoveBlockMenuItems` (141-164)

</details>

</blockquote></details>
<details>
<summary>editor/scaffolds/blocks-editor/blocks/field-block.tsx (1)</summary><blockquote>

<details>
<summary>editor/scaffolds/blocks-editor/blocks/base-block.tsx (1)</summary>

* `MoveBlockMenuItems` (141-164)

</details>

</blockquote></details>
<details>
<summary>editor/scaffolds/blocks-editor/blocks/divider-block.tsx (1)</summary><blockquote>

<details>
<summary>editor/scaffolds/blocks-editor/blocks/base-block.tsx (1)</summary>

* `MoveBlockMenuItems` (141-164)

</details>

</blockquote></details>
<details>
<summary>editor/scaffolds/blocks-editor/blocks/base-block.tsx (2)</summary><blockquote>

<details>
<summary>packages/lib/treearray/treearray.ts (1)</summary>

* `move` (30-126)

</details>
<details>
<summary>editor/components/ui/dropdown-menu.tsx (1)</summary>

* `DropdownMenuItem` (248-248)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>🔇 Additional comments (20)</summary><blockquote>

<details>
<summary>editor/scaffolds/blocks-editor/blocks/pdf-block.tsx (2)</summary>

`22-22`: **Component import for block movement adds desired functionality.**

The addition of `MoveBlockMenuItems` import from `./base-block` provides the necessary component for enabling block movement operations in the PDF block component.

---

`59-59`: **Nicely integrated move controls in the dropdown menu.**

The `MoveBlockMenuItems` component is correctly placed above the delete option, creating a logical grouping of block manipulation actions in the dropdown menu. The component will automatically handle disabling move options when appropriate (e.g., can't move up when already at the top).

</details>
<details>
<summary>editor/scaffolds/blocks-editor/blocks/html-block.tsx (2)</summary>

`18-18`: **Component import for block movement adds desired functionality.**

The addition of `MoveBlockMenuItems` import from `./base-block` provides the necessary component for enabling block movement operations in the HTML block component.

---

`77-77`: **Nicely integrated move controls in the dropdown menu.**

The `MoveBlockMenuItems` component is correctly placed above the delete option, creating a logical grouping of block manipulation actions in the dropdown menu. The component will automatically handle disabling move options when appropriate (e.g., can't move up when already at the top).

</details>
<details>
<summary>editor/scaffolds/blocks-editor/blocks/image-block.tsx (2)</summary>

`23-23`: **Component import for block movement adds desired functionality.**

The addition of `MoveBlockMenuItems` import from `./base-block` provides the necessary component for enabling block movement operations in the Image block component.

---

`88-88`: **Nicely integrated move controls in the dropdown menu.**

The `MoveBlockMenuItems` component is correctly placed above the delete option, creating a logical grouping of block manipulation actions. The placement is consistent with other block types, providing a uniform user experience across the editor.

</details>
<details>
<summary>editor/scaffolds/editor/reducer.ts (1)</summary>

`106-107`: **Successfully added action types for block movement.**

The new action types for moving blocks up and down are correctly integrated into the reducer, routing to the existing blockReducer. This completes the Redux action cycle by connecting the UI interactions to state updates.

</details>
<details>
<summary>editor/scaffolds/blocks-editor/blocks/field-block.tsx (2)</summary>

`26-26`: **Appropriate import for block movement functionality.**

The addition of `MoveBlockMenuItems` import properly sets up the required component for enabling block movement in field blocks.

---

`334-334`: **Well-positioned block movement controls.**

The placement of `MoveBlockMenuItems` between field editing and deletion options creates a logical UI flow. Users can edit a field's definition, reposition it within the form, or remove it entirely - following a natural progression of complexity.

</details>
<details>
<summary>editor/scaffolds/blocks-editor/blocks/header-block.tsx (2)</summary>

`23-23`: **Consistent import for movement functionality.**

The import of `MoveBlockMenuItems` maintains consistency with other block types and correctly brings in the reusable movement control component.

---

`78-78`: **Appropriate placement of block movement controls.**

The placement of `MoveBlockMenuItems` before the delete option follows a logical pattern consistent with other block types. This creates a uniform experience for users managing header blocks.

</details>
<details>
<summary>editor/scaffolds/blocks-editor/blocks/video-block.tsx (2)</summary>

`24-24`: **Consistent import pattern maintained.**

The addition of `MoveBlockMenuItems` to the imports follows the established pattern across all block types.

---

`72-72`: **Well-integrated movement controls.**

The placement of `MoveBlockMenuItems` before the delete option maintains UI consistency with other block types and provides intuitive block organization capabilities.

</details>
<details>
<summary>editor/scaffolds/blocks-editor/blocks/divider-block.tsx (2)</summary>

`21-21`: **Proper import for movement functionality.**

The addition of `MoveBlockMenuItems` to the imports maintains consistency across all block types.

---

`48-48`: **Consistent placement of movement controls.**

The integration of `MoveBlockMenuItems` before the delete option provides a uniform experience and maintains the same UI pattern as other block types.

</details>
<details>
<summary>editor/scaffolds/blocks-editor/blocks/base-block.tsx (2)</summary>

`128-139`: **Well-implemented hook for block movement.**

The `useMoveBlock` hook is well-designed, dispatching the appropriate action based on the direction parameter. It correctly uses `useCallback` for performance optimization.

---

`141-164`: **Good implementation with proper boundary handling.**

The `MoveBlockMenuItems` component correctly:
- Finds the index of the block in the state
- Disables the ""Move Up"" button when a block is at the top
- Disables the ""Move Down"" button when a block is at the bottom
- Uses proper icons for visual clarity

This creates an intuitive user experience by preventing invalid operations.

</details>
<details>
<summary>editor/scaffolds/editor/action.ts (2)</summary>

`95-97`: **Well-structured action type extension.**

The `FormsBlockAction` union is properly extended to include the new movement actions, maintaining consistency with the existing type structure.

---

`187-195`: **Well-defined action interfaces.**

The new action interfaces follow the established pattern and include all necessary properties.

</details>
<details>
<summary>editor/scaffolds/editor/reducers/block.reducer.ts (1)</summary>

`13-14`: **Properly imported action types.**

The new action types are correctly imported, maintaining consistency with the existing imports.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3131215795,2911908610,sestinj,APPROVED,2025-06-10T04:15:05Z,thanks for getting the zh-CN too
3070953480,2848359573,ellipsis-dev[bot],COMMENTED,2025-05-17T17:34:13Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 726ee3b4143a42b067fb140f5b0a0452835e7716 in <ellipsistime>1 minute and 42 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `113` lines of code in `5` files
> - Skipped `0` files when reviewing.
> - Skipped posting `4` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>memory-store/migrations/000015_entries.up.sql:101</code></summary>
> 
> - **Draft comment:** 
> Update query uses only entry_id in WHERE clause. Consider including session_id (or full primary key) to uniquely identify the row.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>memory-store/migrations/000042_token_count_background_job.up.sql:19</code></summary>
> 
> - **Draft comment:** 
> UPDATE query here filters only on entry_id. Use session_id (and if needed created_at) to ensure only the intended row is updated.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 10% vs. threshold = 50% This is a trigger function that runs after changes to a row. NEW.entry_id refers to the specific row that triggered this function. entry_id is likely a primary key or unique identifier, so additional filtering would be redundant. Without seeing the table schema, we can't be certain if session_id even exists or is relevant. I could be wrong about entry_id being unique. Maybe there's a data model where multiple entries share an entry_id within different sessions. If entry_id wasn't unique, it would be a very unusual design choice. The trigger operates on a single changed row, so entry_id must be sufficient to identify that row. The comment should be deleted. The UPDATE statement is correctly filtering on entry_id which should be sufficient given the trigger context.
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>memory-store/migrations/000042_token_count_background_job.down.sql:3</code></summary>
> 
> - **Draft comment:** 
> Dropping the optimized_update_token_count_after function removes token count updates. Verify that the rollback strategy retains expected functionality.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` The comment is asking the PR author to verify the rollback strategy, which violates the rule against asking for confirmation or verification. It does not provide a specific suggestion or point out a clear issue with the code.
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>CHANGELOG.md:39</code></summary>
> 
> - **Draft comment:** 
> Typo: 'Apri' in the date on this changelog entry likely should be 'April'.
> - **Reason this comment was not posted:**
> Comment was on unchanged code.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_sSY9Rg3qZGnpCXlV`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3129172469,2908940527,greptile-apps[bot],COMMENTED,2025-06-09T05:19:37Z,"
## PR Summary

Improves window management in pinned mode by preventing windows from automatically jumping back to their original position after being moved away from the panel.

- Added `macos/Onit/PanelStateManager/Pinned/PanelStatePinnedManager+Restore.swift` to implement smarter frame restoration logic
- Windows will only restore positions if still touching/intersecting the panel, giving users more control over window placement
- Change aligns with accessibility best practices by respecting user-initiated window movements

<sub>1 file(s) reviewed, no comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=onit_269)</sub>"
3097662882,2875432063,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-28T14:55:01Z,"## Pull Request Overview

This PR fixes how canvas segments are clamped to the bar grid to avoid empty canvases and adds a Cypress regression test to prevent extra canvas creation when using bars with normalization.

- Extend clampedWidth calculation to snap to the `barWidth + barGap` grid and skip segments smaller than one grid unit  
- Early-return when `clampedWidth` would be zero or negative  
- Add a Cypress E2E test to verify only two canvases are created with `barWidth` and `normalize`

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated 2 comments.

| File               | Description                                                      |
| ------------------ | ---------------------------------------------------------------- |
| src/renderer.ts    | Apply grid-based clamping on canvas width and skip zero-width segments |
| cypress/e2e/options.cy.js | Add regression test for bar + normalize to assert no extra canvases |



"
3087027952,2871929200,ChrisHuie,APPROVED,2025-05-27T17:19:07Z,
3136125927,2916346969,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-11T09:26:24Z,"## Pull Request Overview

This PR updates the behavior of the int64 random value generation by revising the bit mask computation and adjusting associated tests and documentation.  
- Updates the int64 mask calculation in random.mbt to compute (1UL << 63) - 1UL  
- Revises the expected int64 output in both random_test.mbt and README.mbt.md  
- Aligns test expectations to the new mask behavior

### Reviewed Changes

Copilot reviewed 3 out of 3 changed files in this pull request and generated no comments.

| File                   | Description                                  |
| ---------------------- | -------------------------------------------- |
| random/random_test.mbt | Updated expected int64 output in tests       |
| random/random.mbt      | Revised bit mask calculation for int64 method|
| random/README.mbt.md   | Updated int64 expected output in documentation|


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**random/random.mbt:106**
* Update the comment to clearly indicate that this mask extracts the lower 63 bits, ensuring that it accurately reflects the new implementation and intended behavior.
```
let mask : UInt64 = (1UL << 63) - 1UL
```
**random/random_test.mbt:25**
* Verify that the updated expected int64 value aligns precisely with the deterministic output of the new mask computation in Rand.int64 to avoid future test inconsistencies.
```
assert_eq(r.int64(), 2043189202271773519)
```
</details>

"
3165778418,2948216147,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-22T14:42:16Z,"## Pull Request Overview

The purpose of this PR is to fix a bug where debugging was always enabled regardless of the value set in TUNNEL_DEBUG.  
- Replace a string presence check with an explicit numeric comparison against zero.  
- Use a default value to ensure safe numeric comparison in the condition.



"
3165778418,2948217077,TimDiekmann,COMMENTED,2025-06-22T14:45:24Z,
3165778418,2948217634,vilkinsons,COMMENTED,2025-06-22T14:46:56Z,
3165778418,2948218740,TimDiekmann,COMMENTED,2025-06-22T14:51:13Z,
3165778418,2948218911,TimDiekmann,APPROVED,2025-06-22T14:51:53Z,
3118419390,2897539063,sobychacko,CHANGES_REQUESTED,2025-06-04T17:25:58Z,
3118419390,2897643966,artembilan,CHANGES_REQUESTED,2025-06-04T18:16:33Z,"Thank you for looking into this!
Not easy task to tackle.
Hope you'll find my review as reasonable.
"
3118419390,2901405726,igormq,COMMENTED,2025-06-05T17:45:08Z,
3118419390,2901967505,artembilan,CHANGES_REQUESTED,2025-06-05T19:39:12Z,
3118419390,2903474965,sobychacko,CHANGES_REQUESTED,2025-06-06T01:43:49Z,
3118419390,2903537314,sobychacko,COMMENTED,2025-06-06T01:56:12Z,
3118419390,2907214190,igormq,COMMENTED,2025-06-07T09:45:52Z,
3118419390,2908279017,michaldo,COMMENTED,2025-06-08T08:50:23Z,
3118419390,2910388344,artembilan,CHANGES_REQUESTED,2025-06-09T15:13:07Z,
3118419390,2913873704,sobychacko,CHANGES_REQUESTED,2025-06-10T14:36:53Z,"@igormq Code changes look good. Now, we need to add reference docs with instructions on enabling observability in batch mode, maybe some examples etc. Then we need to mention this new feature in the `whats-new` doc. "
3118419390,2917409910,artembilan,CHANGES_REQUESTED,2025-06-11T14:16:13Z,
3118419390,2917509000,michaldo,COMMENTED,2025-06-11T14:32:48Z,
3118419390,2917779868,sobychacko,CHANGES_REQUESTED,2025-06-11T15:45:49Z,
3118419390,2917956387,igormq,COMMENTED,2025-06-11T16:35:46Z,
3118419390,2932206514,sobychacko,APPROVED,2025-06-16T13:44:10Z,
3118419390,2936493661,artembilan,CHANGES_REQUESTED,2025-06-17T17:24:49Z,
3118419390,2946324773,artembilan,CHANGES_REQUESTED,2025-06-20T14:14:23Z,"Just one concern for docs looking into this from newcomer perspective.
Thanks"
3137788023,2925317973,neutralino1,COMMENTED,2025-06-13T18:35:39Z,A few notes.
3135026305,2915836375,lukaszsamson,COMMENTED,2025-06-11T06:38:45Z,
3071341755,2848666654,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-18T03:13:53Z,"## Pull Request Overview

This PR updates the Pixi CMake configuration in `pixi.toml` to install with an RPATH.

- Enables `CMAKE_BUILD_WITH_INSTALL_RPATH=ON`
- Sets `CMAKE_INSTALL_RPATH` to the Conda `lib` directory
- Moves `CMAKE_INSTALL_PREFIX` to group all install-related flags


<details>
<summary>Comments suppressed due to low confidence (3)</summary>

**pixi.toml:55**
* [nitpick] Consider adding a comment explaining why CMAKE_BUILD_WITH_INSTALL_RPATH is enabled, so future readers understand its purpose in the Conda-based install.
```
-        -DCMAKE_BUILD_WITH_INSTALL_RPATH=ON \
```
**pixi.toml:57**
* [nitpick] Hardcoding `$CONDA_PREFIX/lib` can reduce portability; consider using a relative RPATH like `$ORIGIN/../lib` or enabling `CMAKE_INSTALL_RPATH_USE_LINK_PATH` to automatically include link paths.
```
-        -DCMAKE_INSTALL_RPATH=$CONDA_PREFIX/lib \
```
**pixi.toml:55**
* Add a test or CI check to verify that installed binaries actually carry the intended RPATH, ensuring the new flags have the desired effect.
```
-        -DCMAKE_BUILD_WITH_INSTALL_RPATH=ON \
```
</details>

"
3071341755,2848668653,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-18T03:18:01Z,"## Pull Request Overview

This PR updates the CMake invocation in the `pixi.toml` config to embed an install RPATH pointing at the Conda library directory.

- Enables `CMAKE_BUILD_WITH_INSTALL_RPATH` so binaries carry the RPATH at build time  
- Sets `CMAKE_INSTALL_RPATH` to `$CONDA_PREFIX/lib`  
- Moves `CMAKE_INSTALL_PREFIX` to follow the RPATH flags for clarity


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**pixi.toml:57**
* [nitpick] Embedding an absolute `$CONDA_PREFIX/lib` path can break relocatable installs; consider using a relative RPATH like `$ORIGIN/../lib` or enabling `CMAKE_INSTALL_RPATH_USE_LINK_PATH=ON` to automatically include linked library paths.
```
-        -DCMAKE_INSTALL_RPATH=$CONDA_PREFIX/lib \
```
**pixi.toml:55**
* If you want CMake to propagate dependency paths into the install RPATH, you may also enable `-DCMAKE_INSTALL_RPATH_USE_LINK_PATH=ON` alongside `CMAKE_BUILD_WITH_INSTALL_RPATH`.
```
-        -DCMAKE_BUILD_WITH_INSTALL_RPATH=ON \
```
</details>

"
3071574486,2848831293,coderabbitai[bot],COMMENTED,2025-05-18T09:01:30Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>packages/common/src/utils/replace-null-with-undefined/replace-null-with-undefined.unit.test.ts (1)</summary><blockquote>

`1-15`: **Suggestion: Add edge case tests**

While the current tests cover the primary functionality well, consider adding tests for edge cases such as empty arrays, arrays with only null values, deeply nested arrays, and mixed data structures.


```diff
 import { describe, expect, it } from 'vitest';
 import { replaceNullsWithUndefined } from './replace-null-with-undefined';
 
 describe('replaceNullsWithUndefined', () => {
   it('replaces nulls in objects recursively', () => {
     const input = { a: null, b: { c: null, d: 1 } };
     expect(replaceNullsWithUndefined(input)).toEqual({ a: undefined, b: { c: undefined, d: 1 } });
   });
 
   it('replaces nulls inside arrays', () => {
     const input = { arr: [null, { x: null }, 1] };
     expect(replaceNullsWithUndefined(input)).toEqual({ arr: [undefined, { x: undefined }, 1] });
   });
+
+  it('handles edge cases correctly', () => {
+    // Empty array
+    expect(replaceNullsWithUndefined([])).toEqual([]);
+    
+    // Array with only null values
+    expect(replaceNullsWithUndefined([null, null])).toEqual([undefined, undefined]);
+    
+    // Deeply nested arrays
+    expect(replaceNullsWithUndefined([1, [2, [null]]])).toEqual([1, [2, [undefined]]]);
+    
+    // Mixed data structure
+    const complex = { a: [null, { b: [{ c: null }] }] };
+    expect(replaceNullsWithUndefined(complex)).toEqual({ a: [undefined, { b: [{ c: undefined }] }] });
+  });
 });
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**
**Cache: Disabled due to data retention organization setting**
**Knowledge Base: Disabled due to data retention organization setting**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between ad8c9ffcb190daae53ecce9a5971882b10d6dabd and 91be19758dfb75cf9ac06a45843e98d58aff8e36.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `packages/common/src/utils/replace-null-with-undefined/replace-null-with-undefined.ts` (1 hunks)
* `packages/common/src/utils/replace-null-with-undefined/replace-null-with-undefined.unit.test.ts` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>packages/common/src/utils/replace-null-with-undefined/replace-null-with-undefined.unit.test.ts (1)</summary><blockquote>

<details>
<summary>packages/common/src/utils/replace-null-with-undefined/replace-null-with-undefined.ts (1)</summary>

* `replaceNullsWithUndefined` (1-21)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (1)</summary>

* GitHub Check: Analyze (javascript)

</details>

<details>
<summary>🔇 Additional comments (4)</summary><blockquote>

<details>
<summary>packages/common/src/utils/replace-null-with-undefined/replace-null-with-undefined.ts (2)</summary>

`6-9`: **Good implementation for recursive array handling**

The new code correctly handles arrays by recursively mapping over each element and applying the `replaceNullsWithUndefined` function. This ensures that null values in nested arrays are properly replaced with undefined, which aligns with the function's purpose.

---

`10-10`: **Proper reordering of type checks**

Moving the non-object type check after the array check is essential since arrays are also of type 'object' in JavaScript. This ordering ensures arrays are handled by the dedicated array logic before falling into the general object handling branch.

</details>
<details>
<summary>packages/common/src/utils/replace-null-with-undefined/replace-null-with-undefined.unit.test.ts (2)</summary>

`4-9`: **Good test coverage for nested objects**

This test case properly verifies that the function can replace null values with undefined at various levels of object nesting, which is essential for ensuring the recursive behavior works as expected.

---

`10-14`: **Comprehensive array handling test**

The test correctly verifies the new array handling functionality by checking that null values are properly replaced with undefined within arrays, including when they appear in nested objects inside those arrays.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3140721214,2921676148,aolfat,APPROVED,2025-06-12T15:23:59Z,
3141031384,2922031965,ff-kamal,APPROVED,2025-06-12T17:18:28Z,
3152343814,2935357803,devgony,APPROVED,2025-06-17T11:57:02Z,
3142737206,2932134181,coderabbitai[bot],COMMENTED,2025-06-16T13:27:19Z,"**Actionable comments posted: 1**

<details>
<summary>♻️ Duplicate comments (1)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/datamodel/test_attachment.py (1)</summary><blockquote>

`114-120`: Same observation as above—consider adding `_absolute_path` checks here too.

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (6)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/datamodel/basemodel.py (4)</summary><blockquote>

`82-87`: **Consider validating stored path on load**

When loading from file you silently trust the persisted relative path without checking that the file still exists.  
A quick existence check here would protect against missing attachments and fail fast.

---

`89-94`: **Improve error message for `None` path**

`""File does not exist: None""` is misleading; the problem is that *no path was provided*.  
Recommend raising `""Attachment path is not set""` to keep logs clear.

---

`95-101`: **Prefer `Path` methods over `os.path`**

Using `self.path.exists()` / `is_file()` is cleaner and OS-agnostic.

```diff
-if not os.path.exists(self.path):
-    raise ValueError(f""File does not exist: {self.path}"")
-if not os.path.isfile(self.path):
-    raise ValueError(f""Path is not a file: {self.path}"")
+if not self.path.exists():
+    raise ValueError(f""File does not exist: {self.path}"")
+if not self.path.is_file():
+    raise ValueError(f""Path is not a file: {self.path}"")
```

---

`148-157`: **Copy with metadata & ensure destination folder exists**

1. `shutil.copy` drops modified/created timestamps; `copy2` preserves them.  
2. Create `dest_folder` if it doesn’t already exist to avoid race conditions.

```diff
-target_path = dest_folder / filename
-shutil.copy(source, target_path)
+dest_folder.mkdir(parents=True, exist_ok=True)
+target_path = dest_folder / filename
+shutil.copy2(source, target_path)
```

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/datamodel/test_attachment.py (2)</summary><blockquote>

`80-85`: **Also assert `_absolute_path` lifecycle**

Verifying `attachment.path` transitions is good but you should additionally assert:

```python
assert model.attachment._absolute_path is not None  # before save
...
assert model.attachment._absolute_path is None      # after save
```

This guards against regressions in the new persistence contract.

---

`335-350`: **Temporary file cleanup**

`KilnAttachmentModel.from_data` leaves the temp file on disk; the test never removes it.  
Add a `finally` block (or `tmp_path` fixture) to delete the file and keep the test environment clean.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 9e907b4545e9a112844dd5185d0c9c7e76f92771 and ca61d944b802a2f5f497e8f218bc4bd47b49b3fb.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `libs/core/kiln_ai/datamodel/basemodel.py` (4 hunks)
* `libs/core/kiln_ai/datamodel/test_attachment.py` (9 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>libs/core/kiln_ai/datamodel/test_attachment.py (1)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/datamodel/basemodel.py (3)</summary>

* `save_to_file` (304-334)
* `resolve_path` (175-188)
* `load_from_file` (240-283)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>🔇 Additional comments (2)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/datamodel/basemodel.py (1)</summary>

`119-123`: **Potential leakage of absolute paths**

When `save_attachments` is false, you serialise `_absolute_path`, exposing local absolute paths to callers/JSON.  
If this is unintended, return `None` or raise unless `path` is already relative.

</details>
<details>
<summary>libs/core/kiln_ai/datamodel/test_attachment.py (1)</summary>

`388-394`: **Good check on internal fields**

👍 Ensuring `_absolute_path` is not leaked in JSON confirms the private field remains private.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3142737206,2947730416,leonardmq,COMMENTED,2025-06-21T10:31:24Z,
3142737206,2947742332,coderabbitai[bot],COMMENTED,2025-06-21T11:37:05Z,"**Actionable comments posted: 2**

<details>
<summary>♻️ Duplicate comments (3)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/tests/fixtures/attachment.py (1)</summary><blockquote>

`1-1`: **Consider the library bloat concern raised in the existing comment**

The existing comment about test fixtures potentially bloating the library package is valid. Moving test fixtures and sample files to a separate test-only directory structure (e.g., `libs/tests/`) would prevent them from being included in the distributed package.

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/datamodel/test_attachment.py (1)</summary><blockquote>

`13-13`: **Remove unused import.**

The `mock_file_factory` function is imported but never used directly in this file. The fixture parameters with the same name shadow this import.

Apply this diff to clean up the unused import:

```diff
-from kiln_ai.tests.fixtures import MockFileFactoryMimeType, mock_file_factory
+from kiln_ai.tests.fixtures import MockFileFactoryMimeType
```

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/extractors/test_gemini_extractor.py (1)</summary><blockquote>

`14-14`: **Remove unused import.**

The `mock_file_factory` function is imported but never used directly in this file. The fixture parameters with the same name shadow this import.

Apply this diff to clean up the unused import:

```diff
-from kiln_ai.tests.fixtures.attachment import MockFileFactoryMimeType, mock_file_factory
+from kiln_ai.tests.fixtures.attachment import MockFileFactoryMimeType
```

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/datamodel/basemodel.py (1)</summary><blockquote>

`206-226`: **Path resolution logic properly handles both path types**

The method correctly prioritizes `input_path` when available and properly validates parent paths for relative path resolution.


Consider enhancing the error message on line 218 for consistency:

```diff
-        raise ValueError(""Attachment path is not set"")
+        raise ValueError(""Attachment has no path set (neither input_path nor path)"")
```

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/extractors/test_extractor_runner.py (1)</summary><blockquote>

`18-18`: **Remove unused import.**

The `mock_file_factory` function is imported but never used directly in this file. The fixture parameter with the same name shadows this import.

Apply this diff to clean up the unused import:

```diff
-from kiln_ai.tests.fixtures import MockFileFactoryMimeType, mock_file_factory
+from kiln_ai.tests.fixtures import MockFileFactoryMimeType
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 4aa866cb9093ba31d0263ac44f9abedef1ba1600 and 0556d9b365d50a1ceb19dad4386b65770d5dddfa.

</details>

<details>
<summary>📒 Files selected for processing (8)</summary>

* `libs/core/kiln_ai/adapters/extractors/test_extractor_runner.py` (3 hunks)
* `libs/core/kiln_ai/adapters/extractors/test_gemini_extractor.py` (5 hunks)
* `libs/core/kiln_ai/datamodel/basemodel.py` (4 hunks)
* `libs/core/kiln_ai/datamodel/extraction.py` (1 hunks)
* `libs/core/kiln_ai/datamodel/test_attachment.py` (15 hunks)
* `libs/core/kiln_ai/datamodel/test_extraction_model.py` (1 hunks)
* `libs/core/kiln_ai/tests/fixtures/__init__.py` (1 hunks)
* `libs/core/kiln_ai/tests/fixtures/attachment.py` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 Ruff (0.11.9)</summary>

<details>
<summary>libs/core/kiln_ai/datamodel/test_attachment.py</summary>

13-13: `kiln_ai.tests.fixtures.mock_file_factory` imported but unused

Remove unused import: `kiln_ai.tests.fixtures.mock_file_factory`

(F401)

---

51-51: Redefinition of unused `mock_file_factory` from line 13

(F811)

---

81-81: Redefinition of unused `mock_file_factory` from line 13

(F811)

---

135-135: Redefinition of unused `mock_file_factory` from line 13

(F811)

---

191-191: Redefinition of unused `mock_file_factory` from line 13

(F811)

---

222-222: Redefinition of unused `mock_file_factory` from line 13

(F811)

---

272-272: Redefinition of unused `mock_file_factory` from line 13

(F811)

---

310-310: Redefinition of unused `mock_file_factory` from line 13

(F811)

---

322-322: Redefinition of unused `mock_file_factory` from line 13

(F811)

---

379-379: Redefinition of unused `mock_file_factory` from line 13

(F811)

---

443-443: Redefinition of unused `mock_file_factory` from line 13

(F811)

---

452-452: Redefinition of unused `mock_file_factory` from line 13

(F811)

---

493-493: Redefinition of unused `mock_file_factory` from line 13

(F811)

---

528-528: Redefinition of unused `mock_file_factory` from line 13

(F811)

---

561-561: Redefinition of unused `mock_file_factory` from line 13

(F811)

</details>
<details>
<summary>libs/core/kiln_ai/adapters/extractors/test_extractor_runner.py</summary>

18-18: `kiln_ai.tests.fixtures.mock_file_factory` imported but unused

Remove unused import: `kiln_ai.tests.fixtures.mock_file_factory`

(F401)

---

54-54: Redefinition of unused `mock_file_factory` from line 18

(F811)

</details>
<details>
<summary>libs/core/kiln_ai/adapters/extractors/test_gemini_extractor.py</summary>

14-14: `kiln_ai.tests.fixtures.attachment.mock_file_factory` imported but unused

Remove unused import: `kiln_ai.tests.fixtures.attachment.mock_file_factory`

(F401)

---

228-228: Redefinition of unused `mock_file_factory` from line 14

(F811)

---

242-242: Redefinition of unused `mock_file_factory` from line 14

(F811)

---

256-256: Redefinition of unused `mock_file_factory` from line 14

(F811)

---

270-270: Redefinition of unused `mock_file_factory` from line 14

(F811)

</details>

</details>
<details>
<summary>🪛 Pylint (3.3.7)</summary>

<details>
<summary>libs/core/kiln_ai/datamodel/basemodel.py</summary>

[refactor] 83-83: Too many branches (14/12)

(R0912)

</details>

</details>

</details>

<details>
<summary>🔇 Additional comments (13)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/tests/fixtures/attachment.py (2)</summary>

`18-25`: **LGTM!**

The function correctly resolves the test data directory path, and the comment clearly explains why it's not implemented as a fixture.

---

`27-56`: **Well-designed test fixture with proper isolation**

The fixture correctly:
- Creates isolated copies of test files to prevent contamination
- Uses UUIDs to ensure unique filenames
- Provides clear error messages for unsupported MIME types

</details>
<details>
<summary>libs/core/kiln_ai/datamodel/basemodel.py (3)</summary>

`82-129`: **Complex validation logic is justified by requirements**

The validator's 14 branches handle distinct scenarios for path validation:
- Loading from file vs. creating new attachments
- Relative vs. absolute path requirements
- File existence and type checks

While complex, the implementation is well-organized and each branch serves a necessary purpose.

---

`130-167`: **Serialization correctly handles the dual-path model**

The method properly manages the transition from temporary `input_path` to persisted `path` during save operations, including file copying and attribute updates.

---

`197-205`: **Clean factory method for file-based attachments**

The `from_file` class method provides a clear API for creating attachments from existing files, properly setting the `input_path` for later persistence.

</details>
<details>
<summary>libs/core/kiln_ai/datamodel/test_extraction_model.py (1)</summary>

`300-300`: **Correctly updated to use the new attachment API**

The fixture now properly uses `KilnAttachmentModel.from_file()` instead of direct instantiation, aligning with the refactored attachment model.

</details>
<details>
<summary>libs/core/kiln_ai/tests/fixtures/__init__.py (1)</summary>

`1-12`: **Proper package initialization with explicit exports**

The file correctly exports the test fixtures and enum, providing a clean API for test modules.

</details>
<details>
<summary>libs/core/kiln_ai/datamodel/extraction.py (2)</summary>

`30-30`: **Good cleanup removing duplicate logger**

The duplicate logger definition has been properly removed.

---

`136-151`: **Verify attachment path resolution after removing is_persisted check**

The removal of the `is_persisted` check aligns with the attachment model refactoring. However, ensure that `self.output.resolve_path()` correctly handles both persisted and non-persisted attachments.


```shell
#!/bin/bash
# Description: Verify that resolve_path handles both path types correctly

# Check the resolve_path implementation to confirm it handles input_path
ast-grep --pattern 'def resolve_path(self, $_) -> Path:
  $$$
  if self.input_path is not None:
    return self.input_path
  $$$'
```

</details>
<details>
<summary>libs/core/kiln_ai/adapters/extractors/test_extractor_runner.py (1)</summary>

`54-64`: **Excellent refactor to use the new attachment model API.**

The changes correctly adopt the new `KilnAttachmentModel.from_file()` class method and dynamic mock file generation, which improves test isolation and aligns with the attachment model refactor.

</details>
<details>
<summary>libs/core/kiln_ai/datamodel/test_attachment.py (2)</summary>

`379-441`: **Excellent comprehensive lifecycle test for the new attachment model.**

This test thoroughly validates the new `input_path` vs `path` behavior:
- Before saving: `input_path` is set, `path` is None
- After saving: `path` is set, `input_path` is cleared
- Proper path resolution in both states
- Serialization excludes `input_path`
- Idempotency of saves

This provides excellent coverage of the refactored attachment model behavior.

---

`443-449`: **Good validation test for relative path rejection.**

This test correctly verifies that the new `from_file()` method rejects relative paths, which is important for maintaining the distinction between absolute input paths and relative persisted paths.

</details>
<details>
<summary>libs/core/kiln_ai/adapters/extractors/test_gemini_extractor.py (1)</summary>

`228-238`: **Good adoption of the mock file factory.**

The tests correctly use the new `mock_file_factory` fixture to generate test files dynamically, improving test isolation and consistency with the attachment model refactor.



Also applies to: 242-252

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3142737206,2947743636,leonardmq,COMMENTED,2025-06-21T11:42:15Z,
3142737206,2947743646,leonardmq,COMMENTED,2025-06-21T11:42:18Z,
3142737206,2947743764,coderabbitai[bot],COMMENTED,2025-06-21T11:42:37Z,
3142737206,2947743785,coderabbitai[bot],COMMENTED,2025-06-21T11:42:44Z,
3142737206,2947744399,coderabbitai[bot],COMMENTED,2025-06-21T11:46:14Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/adapters/extractors/test_gemini_extractor.py (1)</summary><blockquote>

`14-14`: **Remove unused import.**

The `mock_file_factory` import is unused since it's being injected as a pytest fixture parameter in the test functions.



```diff
-from kiln_ai.tests.fixtures.attachment import MockFileFactoryMimeType, mock_file_factory
+from kiln_ai.tests.fixtures.attachment import MockFileFactoryMimeType
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 0556d9b365d50a1ceb19dad4386b65770d5dddfa and 954e44e4c0636f519afb9734775a9264252446da.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `libs/core/kiln_ai/adapters/extractors/test_gemini_extractor.py` (5 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 Ruff (0.11.9)</summary>

<details>
<summary>libs/core/kiln_ai/adapters/extractors/test_gemini_extractor.py</summary>

14-14: `kiln_ai.tests.fixtures.attachment.mock_file_factory` imported but unused

Remove unused import: `kiln_ai.tests.fixtures.attachment.mock_file_factory`

(F401)

---

228-228: Redefinition of unused `mock_file_factory` from line 14

(F811)

---

242-242: Redefinition of unused `mock_file_factory` from line 14

(F811)

---

256-256: Redefinition of unused `mock_file_factory` from line 14

(F811)

---

270-270: Redefinition of unused `mock_file_factory` from line 14

(F811)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: Build Desktop Apps (ubuntu-22.04-arm)
* GitHub Check: Build Desktop Apps (ubuntu-22.04)
* GitHub Check: Build Desktop Apps (macos-latest)
* GitHub Check: Build Desktop Apps (macos-13)
* GitHub Check: Build Desktop Apps (windows-latest)

</details>

<details>
<summary>🔇 Additional comments (4)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/adapters/extractors/test_gemini_extractor.py (4)</summary>

`228-237`: **Test implementation looks good.**

The refactoring to use dynamic mock file generation instead of static test data is well implemented. The test correctly creates a PDF file using the fixture and verifies the extraction output.

---

`242-251`: **Test implementation looks good.**

The image extraction test properly uses the mock file factory to create a PNG file and validates the extraction behavior correctly.

---

`256-265`: **Test implementation looks good.**

The video extraction test follows the same pattern as the other tests, creating a mock MP4 file and verifying the expected extraction output.

---

`270-279`: **Test implementation looks good.**

The audio extraction test completes the set of media type tests, properly using the OGG format and validating the extraction results.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3142737206,2947744755,leonardmq,COMMENTED,2025-06-21T11:48:05Z,
3142737206,2947745020,coderabbitai[bot],COMMENTED,2025-06-21T11:49:41Z,
3142737206,2947745140,leonardmq,COMMENTED,2025-06-21T11:50:19Z,
3142737206,2947755241,leonardmq,COMMENTED,2025-06-21T12:40:32Z,
3142737206,2947755391,coderabbitai[bot],COMMENTED,2025-06-21T12:41:09Z,
3142737206,2947765252,coderabbitai[bot],COMMENTED,2025-06-21T13:13:59Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/adapters/extractors/test_extractor_runner.py (1)</summary><blockquote>

`20-20`: **Remove unused import.**

The `mock_file_factory` import is redundant since it's used as a fixture parameter in the `mock_document` fixture.



```diff
-from kiln_ai.tests.fixtures import MockFileFactoryMimeType, mock_file_factory
+from kiln_ai.tests.fixtures import MockFileFactoryMimeType
```

</blockquote></details>
<details>
<summary>libs/core/kiln_ai/adapters/extractors/test_gemini_extractor.py (1)</summary><blockquote>

`15-15`: **Remove unused import.**

The `mock_file_factory` import is redundant since it's used as a fixture parameter in the test functions.



```diff
-from kiln_ai.tests.fixtures.attachment import MockFileFactoryMimeType, mock_file_factory
+from kiln_ai.tests.fixtures.attachment import MockFileFactoryMimeType
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 954e44e4c0636f519afb9734775a9264252446da and 7449176b8e291c68088828c7608c3aab3dc1801a.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `libs/core/kiln_ai/adapters/extractors/test_extractor_runner.py` (3 hunks)
* `libs/core/kiln_ai/adapters/extractors/test_gemini_extractor.py` (5 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 Ruff (0.11.9)</summary>

<details>
<summary>libs/core/kiln_ai/adapters/extractors/test_extractor_runner.py</summary>

20-20: `kiln_ai.tests.fixtures.mock_file_factory` imported but unused

Remove unused import: `kiln_ai.tests.fixtures.mock_file_factory`

(F401)

---

65-65: Redefinition of unused `mock_file_factory` from line 20

(F811)

</details>
<details>
<summary>libs/core/kiln_ai/adapters/extractors/test_gemini_extractor.py</summary>

15-15: `kiln_ai.tests.fixtures.attachment.mock_file_factory` imported but unused

Remove unused import: `kiln_ai.tests.fixtures.attachment.mock_file_factory`

(F401)

---

229-229: Redefinition of unused `mock_file_factory` from line 15

(F811)

---

243-243: Redefinition of unused `mock_file_factory` from line 15

(F811)

---

257-257: Redefinition of unused `mock_file_factory` from line 15

(F811)

---

271-271: Redefinition of unused `mock_file_factory` from line 15

(F811)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: Build Desktop Apps (ubuntu-22.04)
* GitHub Check: Build Desktop Apps (macos-13)
* GitHub Check: Build Desktop Apps (ubuntu-22.04-arm)
* GitHub Check: Build Desktop Apps (windows-latest)
* GitHub Check: Build Desktop Apps (macos-latest)

</details>

<details>
<summary>🔇 Additional comments (2)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/adapters/extractors/test_extractor_runner.py (1)</summary>

`65-76`: **LGTM: Clean transition to dynamic mock file factory.**

The fixture update correctly replaces the static `test_pdf_file` fixture with the dynamic `mock_file_factory`, and the attachment creation properly uses the new `from_file()` method. This improves test isolation and aligns with the attachment model refactoring.

</details>
<details>
<summary>libs/core/kiln_ai/adapters/extractors/test_gemini_extractor.py (1)</summary>

`229-280`: **LGTM: Proper integration of mock file factory across paid tests.**

The paid test functions correctly use the `mock_file_factory` fixture to generate appropriate mock files for each test scenario:
- PDF for document extraction
- PNG for image extraction  
- MP4 for video extraction
- OGG for audio extraction

This approach improves test isolation and eliminates dependencies on static test files.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3142737206,2947798101,coderabbitai[bot],COMMENTED,2025-06-21T15:33:02Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/datamodel/basemodel.py (1)</summary><blockquote>

`82-128`: **Consider refactoring the complex validator into smaller methods.**

The validator has grown quite complex with 14 branches. Consider extracting validation logic into separate methods to improve readability and maintainability.


```diff
@model_validator(mode=""after"")
def check_file_exists(self, info: ValidationInfo) -> Self:
+    self._validate_path_constraints()
+    
+    context = info.context or {}
+    if context.get(""loading_from_file"", False):
+        return self._handle_loading_from_file()
+    
+    if self.input_path is not None:
+        return self._validate_input_path()
+    
+    if self.path is not None:
+        return self._validate_relative_path()
+    
+    return self

+def _validate_path_constraints(self) -> None:
+    if self.path is None and self.input_path is None:
+        raise ValueError(""Path or input path is not set"")
+    if self.path is not None and self.input_path is not None:
+        raise ValueError(""Path and input path cannot both be set"")

+def _handle_loading_from_file(self) -> Self:
+    if isinstance(self.path, str):
+        self.path = Path(self.path)
+    self.input_path = None
+    return self

+def _validate_input_path(self) -> Self:
+    if isinstance(self.input_path, str):
+        self.input_path = Path(self.input_path)
+    if not self.input_path.is_absolute():
+        raise ValueError(f""Input path is not absolute: {self.input_path}"")
+    if not os.path.exists(self.input_path):
+        raise ValueError(f""Input path does not exist: {self.input_path}"")
+    if not os.path.isfile(self.input_path):
+        raise ValueError(f""Input path is not a file: {self.input_path}"")
+    self.input_path = self.input_path.resolve()
+    return self

+def _validate_relative_path(self) -> Self:
+    if isinstance(self.path, str):
+        self.path = Path(self.path)
+    if self.path.is_absolute():
+        raise ValueError(f""Path is absolute but should be relative: {self.path}"")
+    if not os.path.exists(self.path):
+        raise ValueError(f""Path does not exist: {self.path}"")
+    if not os.path.isfile(self.path):
+        raise ValueError(f""Path is not a file: {self.path}"")
+    return self
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 7449176b8e291c68088828c7608c3aab3dc1801a and 6a6dfa04579838d4e5c638ac8500ccca51a826b8.

</details>

<details>
<summary>📒 Files selected for processing (8)</summary>

* `libs/core/kiln_ai/adapters/extractors/test_extractor_runner.py` (3 hunks)
* `libs/core/kiln_ai/adapters/extractors/test_gemini_extractor.py` (5 hunks)
* `libs/core/kiln_ai/datamodel/basemodel.py` (4 hunks)
* `libs/core/kiln_ai/datamodel/extraction.py` (1 hunks)
* `libs/core/kiln_ai/datamodel/test_attachment.py` (15 hunks)
* `libs/core/kiln_ai/datamodel/test_extraction_model.py` (1 hunks)
* `libs/core/kiln_ai/tests/fixtures/__init__.py` (1 hunks)
* `libs/core/kiln_ai/tests/fixtures/attachment.py` (1 hunks)

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (4)</summary>

* libs/core/kiln_ai/datamodel/test_extraction_model.py
* libs/core/kiln_ai/tests/fixtures/__init__.py
* libs/core/kiln_ai/datamodel/extraction.py
* libs/core/kiln_ai/tests/fixtures/attachment.py

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 Ruff (0.11.9)</summary>

<details>
<summary>libs/core/kiln_ai/adapters/extractors/test_extractor_runner.py</summary>

20-20: `kiln_ai.tests.fixtures.mock_file_factory` imported but unused

Remove unused import: `kiln_ai.tests.fixtures.mock_file_factory`

(F401)

---

65-65: Redefinition of unused `mock_file_factory` from line 20

(F811)

</details>
<details>
<summary>libs/core/kiln_ai/adapters/extractors/test_gemini_extractor.py</summary>

14-14: `kiln_ai.tests.fixtures.attachment.mock_file_factory` imported but unused

Remove unused import: `kiln_ai.tests.fixtures.attachment.mock_file_factory`

(F401)

---

228-228: Redefinition of unused `mock_file_factory` from line 14

(F811)

---

242-242: Redefinition of unused `mock_file_factory` from line 14

(F811)

---

256-256: Redefinition of unused `mock_file_factory` from line 14

(F811)

---

270-270: Redefinition of unused `mock_file_factory` from line 14

(F811)

</details>
<details>
<summary>libs/core/kiln_ai/datamodel/test_attachment.py</summary>

13-13: `kiln_ai.tests.fixtures.mock_file_factory` imported but unused

Remove unused import: `kiln_ai.tests.fixtures.mock_file_factory`

(F401)

---

51-51: Redefinition of unused `mock_file_factory` from line 13

(F811)

---

81-81: Redefinition of unused `mock_file_factory` from line 13

(F811)

---

135-135: Redefinition of unused `mock_file_factory` from line 13

(F811)

---

191-191: Redefinition of unused `mock_file_factory` from line 13

(F811)

---

222-222: Redefinition of unused `mock_file_factory` from line 13

(F811)

---

272-272: Redefinition of unused `mock_file_factory` from line 13

(F811)

---

310-310: Redefinition of unused `mock_file_factory` from line 13

(F811)

---

322-322: Redefinition of unused `mock_file_factory` from line 13

(F811)

---

379-379: Redefinition of unused `mock_file_factory` from line 13

(F811)

---

443-443: Redefinition of unused `mock_file_factory` from line 13

(F811)

---

452-452: Redefinition of unused `mock_file_factory` from line 13

(F811)

---

493-493: Redefinition of unused `mock_file_factory` from line 13

(F811)

---

528-528: Redefinition of unused `mock_file_factory` from line 13

(F811)

---

561-561: Redefinition of unused `mock_file_factory` from line 13

(F811)

</details>

</details>
<details>
<summary>🪛 Pylint (3.3.7)</summary>

<details>
<summary>libs/core/kiln_ai/datamodel/basemodel.py</summary>

[refactor] 83-83: Too many branches (14/12)

(R0912)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: Build Desktop Apps (macos-13)
* GitHub Check: Build Desktop Apps (ubuntu-22.04-arm)
* GitHub Check: Build Desktop Apps (ubuntu-22.04)
* GitHub Check: Build Desktop Apps (macos-latest)
* GitHub Check: Build Desktop Apps (windows-latest)

</details>

<details>
<summary>🔇 Additional comments (13)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/datamodel/basemodel.py (4)</summary>

`72-80`: **Excellent refactor design separating input and persisted paths.**

The separation of `input_path` (absolute input) and `path` (relative persisted) is a clean architectural improvement that makes the attachment lifecycle much clearer.

---

`130-166`: **Serialization logic correctly handles the new path model.**

The serialization properly handles both save scenarios (copying files) and non-save scenarios (just returning paths), with appropriate validation.

---

`197-204`: **Factory method provides clean API for creating attachments.**

The `from_file()` class method enforces the intended usage pattern and encapsulates the attachment creation logic well.

---

`206-225`: **Path resolution logic correctly handles both states.**

The method properly returns `input_path` when available (pre-save) and constructs the absolute path from `parent_path + path` when persisted (post-save).

</details>
<details>
<summary>libs/core/kiln_ai/adapters/extractors/test_extractor_runner.py (2)</summary>

`20-20`: **Import is correctly used as a pytest fixture parameter.**

The static analysis tool doesn't recognize pytest fixture usage. The import is needed for the `mock_file_factory` fixture parameter.

---

`65-76`: **Correct adoption of the new attachment API.**

The change from static test files to dynamic `mock_file_factory` and using `KilnAttachmentModel.from_file()` aligns perfectly with the refactored attachment model.

</details>
<details>
<summary>libs/core/kiln_ai/datamodel/test_attachment.py (4)</summary>

`13-13`: **Import correctly used as pytest fixture parameter.**

Static analysis tools don't recognize pytest fixture usage patterns. The import is required for the `mock_file_factory` fixture.

---

`51-78`: **Comprehensive test coverage for the new attachment lifecycle.**

The tests properly validate the transition from `input_path` (pre-save) to `path` (post-save) and verify file persistence behavior.

---

`379-441`: **Excellent lifecycle test validates the attachment state transitions.**

This test comprehensively validates:
- Pre-save: `input_path` set, `path` is None
- Post-save: `path` set, `input_path` is None  
- Path resolution works in both states
- JSON serialization excludes `input_path`
- Save idempotency

This provides strong coverage for the new attachment model.

---

`443-449`: **Good validation test for input constraints.**

Testing that relative paths are rejected for `from_file()` ensures the API contract is enforced correctly.

</details>
<details>
<summary>libs/core/kiln_ai/adapters/extractors/test_gemini_extractor.py (3)</summary>

`14-14`: **Import correctly used as pytest fixture parameter.**

The static analysis warning is a false positive - `mock_file_factory` is used as a pytest fixture parameter in multiple test functions.

---

`228-237`: **Improved test isolation with dynamic mock files.**

Using `mock_file_factory` instead of static test files improves test isolation and flexibility. The test logic remains correct.

---

`242-251`: **Consistent adoption of the new test infrastructure.**

All paid extraction tests now use the dynamic mock file generation, providing better test consistency across different media types.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3142737206,2947802323,leonardmq,COMMENTED,2025-06-21T15:50:51Z,
3142737206,2947803034,coderabbitai[bot],COMMENTED,2025-06-21T15:54:07Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>conftest.py (1)</summary><blockquote>

`102-107`: **Consider expanding MIME type coverage as needed.**

The enum provides a clean way to define supported MIME types. The current selection covers common document, image, video, and audio formats, which should be sufficient for most testing scenarios.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 6a6dfa04579838d4e5c638ac8500ccca51a826b8 and 09fc90b52efdb32317aa2d876336c65328d9bf06.

</details>

<details>
<summary>⛔ Files ignored due to path filters (4)</summary>

* `tests/assets/1706.03762v7.pdf` is excluded by `!**/*.pdf`
* `tests/assets/big_buck_bunny_sample.mp4` is excluded by `!**/*.mp4`
* `tests/assets/kodim23.png` is excluded by `!**/*.png`
* `tests/assets/poacher.ogg` is excluded by `!**/*.ogg`

</details>

<details>
<summary>📒 Files selected for processing (4)</summary>

* `conftest.py` (2 hunks)
* `libs/core/kiln_ai/adapters/extractors/test_extractor_runner.py` (3 hunks)
* `libs/core/kiln_ai/adapters/extractors/test_gemini_extractor.py` (5 hunks)
* `libs/core/kiln_ai/datamodel/test_attachment.py` (15 hunks)

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (3)</summary>

* libs/core/kiln_ai/adapters/extractors/test_extractor_runner.py
* libs/core/kiln_ai/datamodel/test_attachment.py
* libs/core/kiln_ai/adapters/extractors/test_gemini_extractor.py

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: Build Desktop Apps (ubuntu-22.04)
* GitHub Check: Build Desktop Apps (ubuntu-22.04-arm)
* GitHub Check: Build Desktop Apps (windows-latest)
* GitHub Check: Build Desktop Apps (macos-13)
* GitHub Check: Build Desktop Apps (macos-latest)

</details>

<details>
<summary>🔇 Additional comments (5)</summary><blockquote>

<details>
<summary>conftest.py (5)</summary>

`1-5`: **LGTM: Well-chosen imports for the new test fixtures.**

The new imports support the added functionality appropriately - `shutil` and `uuid` for file operations, `Enum` for the MIME type constants, `Path` for filesystem operations, `Callable` for type hints, and `KilnAttachmentModel` for attachment creation.



Also applies to: 11-11

---

`139-143`: **Excellent test isolation through file copying.**

The approach of copying test files to temporary paths prevents test contamination and ensures proper isolation. The use of `uuid4()` for unique filenames prevents conflicts between concurrent tests.

---

`126-138`: **Verify Python version compatibility for match statement.**

The `match` statement requires Python 3.10+. Ensure the project's minimum Python version supports this feature, or consider using an if-elif chain for broader compatibility.


```shell
#!/bin/bash
# Description: Check if the project specifies a minimum Python version that supports match statements
# Expected: Python version 3.10+ specified in project configuration

echo ""Checking Python version requirements...""

# Check pyproject.toml for python version
if [ -f ""pyproject.toml"" ]; then
    echo ""=== pyproject.toml ===""
    rg -A 5 -B 5 ""python.*="" pyproject.toml || echo ""No python version found in pyproject.toml""
fi

# Check setup.py for python version
if [ -f ""setup.py"" ]; then
    echo ""=== setup.py ===""
    rg -A 5 -B 5 ""python_requires"" setup.py || echo ""No python_requires found in setup.py""
fi

# Check requirements files
fd -e txt -e in requirements | head -5 | xargs -I {} sh -c 'echo ""=== {} ===""; head -10 ""{}""'
```

---

`148-161`: **Verify KilnAttachmentModel.from_file() method exists.**

The fixture depends on the `from_file` class method of `KilnAttachmentModel`. Ensure this method is implemented and behaves correctly with the provided file paths.



```shell
#!/bin/bash
# Description: Verify that KilnAttachmentModel.from_file() method exists
# Expected: Method definition found in the KilnAttachmentModel class

echo ""Searching for KilnAttachmentModel.from_file method...""
ast-grep --pattern $'class KilnAttachmentModel {
  $$$
  def from_file($$$) {
    $$$
  }
  $$$
}' || echo ""Searching with alternative pattern...""

# Alternative search with rg
rg -A 10 ""def from_file"" --type py
```

---

`109-114`: **Verify test assets directory exists.**

The fixture assumes the `tests/assets` directory exists with the required test files. Ensure this directory and its contents are included in the repository.



```shell
#!/bin/bash
# Description: Verify that the test assets directory exists and contains the expected files
# Expected: Directory exists with the test files referenced in mock_file_factory

echo ""Checking for test assets directory...""
if [ -d ""tests/assets"" ]; then
    echo ""✓ tests/assets directory exists""
    echo ""Contents:""
    ls -la tests/assets/
    
    echo -e ""\nChecking for required test files...""
    files=(""1706.03762v7.pdf"" ""kodim23.png"" ""big_buck_bunny_sample.mp4"" ""poacher.ogg"")
    for file in ""${files[@]}""; do
        if [ -f ""tests/assets/$file"" ]; then
            echo ""✓ $file exists""
        else
            echo ""✗ $file missing""
        fi
    done
else
    echo ""✗ tests/assets directory not found""
fi
```

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3142737206,2947819525,coderabbitai[bot],COMMENTED,2025-06-21T16:56:06Z,"**Actionable comments posted: 2**

<details>
<summary>🔭 Outside diff range comments (1)</summary><blockquote>

<details>
<summary>libs/core/kiln_ai/adapters/extractors/test_gemini_extractor.py (1)</summary><blockquote>

`372-381`: **Fix MIME type mismatch in WAV test.**

The test creates a WAV file but uses `audio/ogg` as the MIME type, which is inconsistent and may not properly test WAV handling.



Apply this diff to fix the MIME type:

```diff
     test_audio_file = mock_file_factory(MockFileFactoryMimeType.WAV)
     extractor = paid_gemini_extractor(model_name=model_name)
     output = await extractor.extract(
         path=str(test_audio_file),
-        mime_type=""audio/ogg"",
+        mime_type=""audio/wav"",
     )
```

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (3)</summary><blockquote>

<details>
<summary>tests/assets/document_ice_cubes.md (1)</summary><blockquote>

`15-15`: **Refine phrasing for conciseness.**
Consider replacing “the liquid around it” with “the surrounding liquid” to improve readability.

</blockquote></details>
<details>
<summary>tests/assets/document_ice_cubes.txt (1)</summary><blockquote>

`13-13`: **Refine phrasing for clarity.**
Change “the liquid around it” to “the surrounding liquid” for improved style.

</blockquote></details>
<details>
<summary>tests/assets/README.md (1)</summary><blockquote>

`8-8`: **Format URLs as proper markdown links.**

The bare URLs should be formatted as proper markdown links for better readability and compliance with markdown standards.



Apply this diff to format the URLs properly:

```diff
-Source: https://arxiv.org/pdf/1706.03762  
+Source: [https://arxiv.org/pdf/1706.03762](https://arxiv.org/pdf/1706.03762)

-Generated using: https://mockaroo.com/  
+Generated using: [https://mockaroo.com/](https://mockaroo.com/)

-Source: https://peach.blender.org/download/  
+Source: [https://peach.blender.org/download/](https://peach.blender.org/download/)

-Source: https://github.com/MohamedBakrAli/Kodak-Lossless-True-Color-Image-Suite  
+Source: [https://github.com/MohamedBakrAli/Kodak-Lossless-True-Color-Image-Suite](https://github.com/MohamedBakrAli/Kodak-Lossless-True-Color-Image-Suite)

-Source: https://www.nasa.gov/image-detail/gsfc-20171208-archive-e001436orig/  
+Source: [https://www.nasa.gov/image-detail/gsfc-20171208-archive-e001436orig/](https://www.nasa.gov/image-detail/gsfc-20171208-archive-e001436orig/)
```


Also applies to: 12-12, 16-16, 21-21, 33-33

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between bac7fd937cb5fe435ad6d35a38dbfdfcb587ccf8 and f573691b462c75ee44279fb6221150e8ec2e8ea2.

</details>

<details>
<summary>⛔ Files ignored due to path filters (10)</summary>

* `tests/assets/audio_ice_cubes.mp3` is excluded by `!**/*.mp3`
* `tests/assets/audio_ice_cubes.ogg` is excluded by `!**/*.ogg`
* `tests/assets/audio_ice_cubes.wav` is excluded by `!**/*.wav`
* `tests/assets/document_paper.pdf` is excluded by `!**/*.pdf`
* `tests/assets/document_people.csv` is excluded by `!**/*.csv`
* `tests/assets/image_kodim23.png` is excluded by `!**/*.png`
* `tests/assets/image_nasa.jpeg` is excluded by `!**/*.jpeg`
* `tests/assets/image_nasa.jpg` is excluded by `!**/*.jpg`
* `tests/assets/video_big_buck_bunny.mp4` is excluded by `!**/*.mp4`
* `tests/assets/video_tv_bars.mov` is excluded by `!**/*.mov`

</details>

<details>
<summary>📒 Files selected for processing (6)</summary>

* `conftest.py` (2 hunks)
* `libs/core/kiln_ai/adapters/extractors/test_gemini_extractor.py` (8 hunks)
* `tests/assets/README.md` (1 hunks)
* `tests/assets/document_ice_cubes.html` (1 hunks)
* `tests/assets/document_ice_cubes.md` (1 hunks)
* `tests/assets/document_ice_cubes.txt` (1 hunks)

</details>

<details>
<summary>✅ Files skipped from review due to trivial changes (1)</summary>

* tests/assets/document_ice_cubes.html

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (1)</summary>

* conftest.py

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 markdownlint-cli2 (0.17.2)</summary>

<details>
<summary>tests/assets/README.md</summary>

8-8: Bare URL used
null

(MD034, no-bare-urls)

---

12-12: Bare URL used
null

(MD034, no-bare-urls)

---

16-16: Bare URL used
null

(MD034, no-bare-urls)

---

21-21: Bare URL used
null

(MD034, no-bare-urls)

---

33-33: Bare URL used
null

(MD034, no-bare-urls)

</details>

</details>
<details>
<summary>🪛 LanguageTool</summary>

<details>
<summary>tests/assets/document_ice_cubes.md</summary>

[style] ~15-~15: Consider using “the surrounding liquid”.
Context: ...nstantly become the same temperature as the liquid around it. Instead, it absorbs a significant amou...

(NOUN_AROUND_IT)

</details>
<details>
<summary>tests/assets/document_ice_cubes.txt</summary>

[style] ~13-~13: Consider using “the surrounding liquid”.
Context: ...nstantly become the same temperature as the liquid around it. Instead, it absorbs a significant amou...

(NOUN_AROUND_IT)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (4)</summary>

* GitHub Check: Build Desktop Apps (windows-latest)
* GitHub Check: Build Desktop Apps (macos-13)
* GitHub Check: Build Desktop Apps (ubuntu-22.04)
* GitHub Check: Build Desktop Apps (ubuntu-22.04-arm)

</details>

<details>
<summary>🔇 Additional comments (3)</summary><blockquote>

<details>
<summary>tests/assets/document_ice_cubes.md (1)</summary>

`1-49`: **Approve new documentation asset.**
The markdown document is well-structured, accurate, and complements the test suite by providing rich content for testing file handling.

</details>
<details>
<summary>tests/assets/document_ice_cubes.txt (1)</summary>

`1-44`: **Approve new text documentation asset.**
The plain-text version is consistent with the markdown and HTML assets, providing comprehensive test content.

</details>
<details>
<summary>libs/core/kiln_ai/adapters/extractors/test_gemini_extractor.py (1)</summary>

`7-7`: **Excellent refactoring to improve test modularity and coverage.**

The refactoring to use `mock_file_factory` and expand the supported models list significantly improves test coverage and maintainability. The approach of clearing `passthrough_mimetypes` to ensure all types go through Gemini for testing is also a good strategy.




Also applies to: 200-205, 220-222

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3142737206,2947884637,coderabbitai[bot],COMMENTED,2025-06-21T17:35:38Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (6)</summary><blockquote>

<details>
<summary>tests/assets/README.md (6)</summary><blockquote>

`1-2`: **Use a top-level Markdown heading**  
The title should be an H1 header (`# ATTRIBUTIONS`) instead of plain text to improve readability and semantic structure.  


```diff
- ATTRIBUTIONS
+ # ATTRIBUTIONS
```

---

`5-6`: **Ensure proper horizontal rule spacing**  
Add a blank line before and after the `---` line to prevent confusion with YAML front-matter and to conform to Markdown best practices.

---

`7-10`: **Convert bare URL to a descriptive link for the PDF asset**  
Wrap the filename in backticks and use a Markdown link for the arXiv URL.  


```diff
- document_paper.pdf
- Source: https://arxiv.org/pdf/1706.03762  
+ `document_paper.pdf`  
+ Source: [ArXiv PDF](https://arxiv.org/pdf/1706.03762)  
```

---

`11-14`: **Convert bare URL to a descriptive link for the CSV asset**  
Use inline code for the filename and replace the bare Mockaroo URL with a Markdown link.  


```diff
- document_people.csv
- Generated using: https://mockaroo.com/  
+ `document_people.csv`  
+ Generated using: [Mockaroo](https://mockaroo.com/)  
```

---

`15-18`: **Convert bare URL to a descriptive link for the Kodak image asset**  
Wrap the filename in backticks and transform the GitHub URL into a labeled link.  


```diff
- image_kodim23.png
- Source: https://github.com/MohamedBakrAli/Kodak-Lossless-True-Color-Image-Suite  
+ `image_kodim23.png`  
+ Source: [Kodak Lossless True-Color Suite](https://github.com/MohamedBakrAli/Kodak-Lossless-True-Color-Image-Suite)  
```

---

`25-29`: **Convert bare URL to a descriptive link for the NASA image asset**  
Use inline code for filenames and replace the bare NASA URL with a descriptive link.  


```diff
- image_nasa.jpg
- image_nasa.jpeg
- Source: https://www.nasa.gov/image-detail/gsfc-20171208-archive-e001436orig/  
+ `image_nasa.jpg`  
+ `image_nasa.jpeg`  
+ Source: [NASA Earth Observation](https://www.nasa.gov/image-detail/gsfc-20171208-archive-e001436orig/)  
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between f573691b462c75ee44279fb6221150e8ec2e8ea2 and c1ee55ca71da9d722960038e8411fb74f5458fd6.

</details>

<details>
<summary>⛔ Files ignored due to path filters (7)</summary>

* `tests/assets/audio_ice_cubes.wav` is excluded by `!**/*.wav`
* `tests/assets/document_paper.pdf` is excluded by `!**/*.pdf`
* `tests/assets/image_kodim23.png` is excluded by `!**/*.png`
* `tests/assets/image_nasa.jpeg` is excluded by `!**/*.jpeg`
* `tests/assets/image_nasa.jpg` is excluded by `!**/*.jpg`
* `tests/assets/video_tv_bars.mov` is excluded by `!**/*.mov`
* `tests/assets/video_tv_bars.mp4` is excluded by `!**/*.mp4`

</details>

<details>
<summary>📒 Files selected for processing (4)</summary>

* `conftest.py` (2 hunks)
* `libs/core/kiln_ai/adapters/extractors/gemini_extractor.py` (1 hunks)
* `libs/core/kiln_ai/adapters/extractors/test_gemini_extractor.py` (8 hunks)
* `tests/assets/README.md` (1 hunks)

</details>

<details>
<summary>✅ Files skipped from review due to trivial changes (1)</summary>

* libs/core/kiln_ai/adapters/extractors/gemini_extractor.py

</details>

<details>
<summary>🚧 Files skipped from review as they are similar to previous changes (2)</summary>

* conftest.py
* libs/core/kiln_ai/adapters/extractors/test_gemini_extractor.py

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🪛 markdownlint-cli2 (0.17.2)</summary>

<details>
<summary>tests/assets/README.md</summary>

8-8: Bare URL used
null

(MD034, no-bare-urls)

---

12-12: Bare URL used
null

(MD034, no-bare-urls)

---

16-16: Bare URL used
null

(MD034, no-bare-urls)

---

27-27: Bare URL used
null

(MD034, no-bare-urls)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: Build Desktop Apps (ubuntu-22.04)
* GitHub Check: Build Desktop Apps (ubuntu-22.04-arm)
* GitHub Check: Build Desktop Apps (macos-13)
* GitHub Check: Build Desktop Apps (windows-latest)
* GitHub Check: Build Desktop Apps (macos-latest)

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3142737206,2947936331,scosman,APPROVED,2025-06-21T19:30:01Z,
3075700058,2852657897,ellipsis-dev[bot],COMMENTED,2025-05-20T05:27:09Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 646a343f383ccca75a3ca002da807bf13380cc4c in <ellipsistime>1 minute and 6 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `1069` lines of code in `2` files
> - Skipped `0` files when reviewing.
> - Skipped posting `7` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>pyproject.toml:56</code></summary>
> 
> - **Draft comment:** 
> Removed stray byte (Í) from the rich dependency config to fix Ruff parsing.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is purely informative, explaining a change that was made. It does not provide a suggestion, ask for confirmation, or point out a potential issue. Therefore, it violates the rule against purely informative comments.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>skyvern/cli/commands.py:336</code></summary>
> 
> - **Draft comment:** 
> Replaced bare 'except:' with 'except Exception:' for safer exception handling in service status checks.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is purely informative, explaining a change that was made. It doesn't ask for any specific action or provide a suggestion for improvement. According to the rules, purely informative comments should be removed.
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>skyvern/cli/commands.py:624</code></summary>
> 
> - **Draft comment:** 
> Added type annotation for providers list in setup_llm_providers to improve mypy compliance.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is purely informative, stating what was done without providing any actionable feedback or suggestions. It doesn't align with the rules for useful comments.
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>skyvern/cli/commands.py:857</code></summary>
> 
> - **Draft comment:** 
> Enhanced Chrome remote debugging verification with detailed JSON parsing and progress feedback.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>skyvern/cli/commands.py:1034</code></summary>
> 
> - **Draft comment:** 
> Updating os.environ alongside the .env file ensures immediate reflection of changes.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is purely informative and does not provide any actionable feedback or suggestions for improvement. It simply states a fact about the code without offering any guidance or raising any concerns.
> 
> 
> </details>
> 
> <details>
> <summary>6. <code>skyvern/cli/commands.py:1103</code></summary>
> 
> - **Draft comment:** 
> Casting callable fields (check_fn and setup_fn) in MCP setup improves mypy type checking.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is purely informative, explaining the benefits of casting callable fields for type checking. It doesn't provide a suggestion, ask for confirmation, or point out a potential issue.
> 
> 
> </details>
> 
> <details>
> <summary>7. <code>skyvern/cli/commands.py:97</code></summary>
> 
> - **Draft comment:** 
> Consolidated Panel.fit formatting improves readability and maintains consistency.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is purely informative and does not provide any actionable feedback or suggestions for improvement. It simply states that the change is good, which violates the rule against making purely informative comments.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_x4PXJGi9SDKnq3IG`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3075700058,2852658683,github-advanced-security[bot],COMMENTED,2025-05-20T05:27:43Z,
3075700058,2853072394,ellipsis-dev[bot],COMMENTED,2025-05-20T07:48:30Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed 4a1135820b951ab318a2d55ac4458db5f6d5beb2 in <ellipsistime>1 minute and 34 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `13` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `1` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review) and [rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>skyvern/library/skyvern.py:303</code></summary>
> 
> - **Draft comment:** 
> Changed the type for `data_extraction_schema` to allow a string as well as a dictionary. Ensure that all downstream consumers (e.g. in TaskRequest and task_v2 initialization) properly handle both `dict[str, Any]` and `str`. Consider using a type alias if this union is used in multiple places.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 10% vs. threshold = 50% This comment violates several rules. It asks to ""ensure"" something which is a form of asking for verification. It's speculative about potential issues in downstream consumers. It's not clearly pointing out a specific issue that needs to be fixed. The type change itself appears intentional and the author likely considered the implications. The type change could potentially cause runtime errors if not handled properly in all code paths. The suggestion for a type alias could improve code maintainability. While those concerns are valid, the comment is still primarily asking for verification rather than pointing out a specific issue that needs fixing. The type alias suggestion is not concrete enough to be actionable. The comment should be removed as it primarily asks for verification and makes speculative suggestions without pointing out specific issues that need fixing.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_a1wf1HfGIL9B81Ex`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=Skyvern-AI%2Fskyvern&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/Skyvern-AI/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/Skyvern-AI/code-review/rules).</sup>"
3165423448,2948061191,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-22T05:21:58Z,"## Pull Request Overview

This PR updates the CLI feedback link and introduces a new feedback page with an embedded Google form.  
- Updated the CLI feedback URL in the eval command.  
- Added a new feedback page implemented in React with Material UI components.

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated 2 comments.

| File                            | Description                                       |
| ------------------------------- | ------------------------------------------------- |
| src/commands/eval.ts            | Updated feedback link from the old Google Form URL to a new promptfoo.dev URL.  |
| site/src/pages/feedback.tsx     | Added a new page that embeds a Google form in an iframe for collecting user feedback. |



"
3165423448,2948061590,coderabbitai[bot],COMMENTED,2025-06-22T05:24:59Z,"**Actionable comments posted: 1**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>site/src/pages/feedback.tsx (1)</summary><blockquote>

`12-17`: **Avoid hardcoded colors for theme consistency**  
Rather than hard-coding `#fff`, consider pulling the background from the active theme (e.g., via MUI’s theme or Docusaurus tokens) so the iframe background always matches your design system.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between f831037456e9d0ed5f40fd96ffacd9edbddad7f9 and b73c478719c01be32031eb91a2c38c8be4207a5b.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `site/src/pages/feedback.tsx` (1 hunks)
* `src/commands/eval.ts` (1 hunks)

</details>

<details>
<summary>🔇 Additional comments (2)</summary><blockquote>

<details>
<summary>src/commands/eval.ts (1)</summary>

`407-409`: **Update feedback link to new domain**  
The CLI now points users to the consolidated feedback page (`https://promptfoo.dev/feedback`), which aligns with the new `/feedback` route.

</details>
<details>
<summary>site/src/pages/feedback.tsx (1)</summary>

`10-11`: **SSR-safe color mode detection**  
Using `useIsBrowser()` to guard `useColorMode()` prevents server‐side rendering errors and provides a sensible default (`light`) when rendering on the server.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3111134182,2889652956,ChrisHuie,APPROVED,2025-06-02T19:18:20Z,
3070068474,2847777263,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-16T23:54:38Z,"## Pull Request Overview

This PR fixes the unreserve logic so that the internal list of reserved names is properly updated.  
- The unreserve method now assigns the filtered result back to this.reservedNames.  
- The previously added unit test was removed.


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**src/util/name-resolver.ts:33**
* Assigning the filtered result back to this.reservedNames addresses the bug where the list was not updated; please verify that this change resolves the issue consistently.
```
this.reservedNames = this.reservedNames.filter(
```
</details>

"
3085094362,2863109266,coderabbitai[bot],COMMENTED,2025-05-23T04:20:37Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>apps/dashboard/src/components/shared/CurrencySelector.tsx (1)</summary><blockquote>

`94-95`: **Type assertion can be improved.**

The current type assertion uses a biome-ignore comment to suppress the lint warning, but the code can be improved to be more type-safe.

```diff
- onChange({
-   target: { value: editCustomCurrency },
-   // biome-ignore lint/suspicious/noExplicitAny: FIXME
- } as any);
+ onChange({
+   target: { value: editCustomCurrency },
+   currentTarget: { value: editCustomCurrency },
+   preventDefault: () => {},
+   stopPropagation: () => {},
+ } as React.ChangeEvent<HTMLSelectElement>);
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 1e0b1422f32a81e1e2b300427b8431e2afeb5a63 and 4e5af56afdbef8c1e8de5bcd80fd366fb8101aa6.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `apps/dashboard/src/components/shared/CurrencySelector.tsx` (4 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (5)</summary>

* GitHub Check: E2E Tests (pnpm, esbuild)
* GitHub Check: E2E Tests (pnpm, webpack)
* GitHub Check: Size
* GitHub Check: Lint Packages
* GitHub Check: Analyze (javascript)

</details>

<details>
<summary>🔇 Additional comments (9)</summary><blockquote>

<details>
<summary>apps/dashboard/src/components/shared/CurrencySelector.tsx (9)</summary>

`1-10`: **Imports aligned with shadcn/ui migration.**

The imports have been appropriately updated to use shadcn/ui components and utilities, replacing the previous Chakra UI imports. The use of the `cn` utility from `@/lib/utils` will help with conditional class name merging.

---

`16-27`: **Props interface simplified and made more explicit.**

The `CurrencySelectorProps` interface has been properly updated to no longer extend `SelectProps` from Chakra UI, instead explicitly defining the required props. The `onChange` callback type maintains compatibility with the previous implementation by mimicking a native select event.

---

`29-40`: **Component declaration updated with new props.**

The component has been changed from a React.FC to a named function export, which is better for debugging. The new props (`className` and `isDisabled`) are properly destructured and will be used for styling and disabling the component.

---

`107-128`: **Custom currency UI migrated to Tailwind CSS.**

The ""add custom currency"" UI has been successfully migrated from Chakra UI to use Tailwind CSS classes and shadcn/ui components. The styling maintains the original layout with a left-to-right arrangement of a back button, input field, and save button.

---

`133-139`: **Container styling updated with Tailwind and conditional classes.**

The container has been changed from a Chakra `Flex` to a `div` with Tailwind classes. The `cn` utility is correctly used to conditionally apply margins and merge with the optional `className` prop.

---

`140-158`: **Select component implementation updated to shadcn/ui pattern.**

The Select component has been properly updated to use the shadcn/ui pattern. The event handling has been migrated from `onChange` to `onValueChange`, with a synthetic event created to maintain compatibility with the existing interface.

---

`149-156`: **Event handling migration preserves backward compatibility.**

The event handling has been properly migrated to use shadcn/ui's `onValueChange` while maintaining backward compatibility by creating a synthetic event that mimics the structure of a native select event.

---

`159-196`: **Select component UI structure updated to compound pattern.**

The Select component has been properly updated to use shadcn/ui's compound component pattern with `SelectTrigger`, `SelectValue`, `SelectContent`, and `SelectItem` subcomponents. The value normalization logic and conditional rendering of options remain intact.

---

`1-199`: **Overall migration to shadcn/ui accomplished successfully.**

The CurrencySelector component has been successfully migrated from Chakra UI to shadcn/ui while preserving the core functionality. The component still handles custom currencies, default currencies, and payment selector modes as before, with the UI updated to use Tailwind CSS classes and shadcn/ui components.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3085094362,2863110996,joaquim-verges,APPROVED,2025-05-23T04:22:25Z,
3153161550,2935280679,gemini-code-assist[bot],COMMENTED,2025-06-17T11:33:34Z,"## Summary of Changes

Hello @gaby, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request significantly enhances the test coverage for the `helmet` middleware's HSTS functionality. It introduces comprehensive tests to validate the correct application and configuration of the `Strict-Transport-Security` header, ensuring it's present only on HTTPS requests and accurately reflects the `max-age`, `includeSubDomains`, and `preload` settings. This improves the robustness and reliability of the security middleware.

### Highlights

* **New HSTS Test Cases**: I've added new test cases to `middleware/helmet/helmet_test.go` specifically for the HSTS (Strict-Transport-Security) header. These tests ensure the header behaves as expected under different conditions.
* **HTTPS HSTS Verification**: One test verifies that the `Strict-Transport-Security` header is correctly set with `max-age` and `includeSubDomains` when a request is made over HTTPS and HSTS is configured.
* **HTTP HSTS Exclusion**: Another test confirms that the `Strict-Transport-Security` header is *not* set when a request is made over HTTP, as HSTS is only applicable to secure connections.
* **HSTS Preload and Subdomain Options**: A dedicated test case validates the `preload` directive and the exclusion of `includeSubDomains` when `HSTSPreloadEnabled` is true and `HSTSExcludeSubdomains` is true, ensuring proper configuration options are reflected in the header.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configure Gemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3153161550,2935282208,gemini-code-assist[bot],COMMENTED,2025-06-17T11:34:08Z,"## Code Review

This pull request adds valuable tests for the Helmet middleware's HSTS header functionality, covering HTTPS requests, non-HTTPS requests, and specific options like `preload` and `includeSubDomains`. The tests correctly use `fasthttp.RequestCtx` to simulate requests and verify the response headers. The code is clear and the assertions are appropriate. A minor area for improvement is the duplication of test setup logic, which could be refactored into a helper function for better maintainability."
3153161550,2935300450,ReneWerner87,APPROVED,2025-06-17T11:39:13Z,
3153161550,2935305175,coderabbitai[bot],COMMENTED,2025-06-17T11:40:20Z,"**Actionable comments posted: 2**

<details>
<summary>♻️ Duplicate comments (1)</summary><blockquote>

<details>
<summary>middleware/helmet/helmet_test.go (1)</summary><blockquote>

`204-260`: **Common setup is still duplicated**  

The helper proposed in the previous review (`setupHSTSApp`) has not been introduced, and the boilerplate (`fiber.New()`, route, handler, ctx creation, etc.) is repeated in both new tests. Extracting it keeps the file concise and future maintenance trivial.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 0590709556719da7e9adb1b413f1a094f1380ceb and fae36e095f420053fead99ae358e15ba8f7c68bb.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `middleware/helmet/helmet_test.go` (2 hunks)

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (2)</summary>

* GitHub Check: repeated
* GitHub Check: Compare

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3153161550,2935323279,github-actions[bot],COMMENTED,2025-06-17T11:45:32Z,"<!-- github-benchmark-action-comment(start): Benchmark Alert -->
# :warning: **Performance Alert** :warning:

Possible performance regression was detected for benchmark.
Benchmark result of this commit is worse than the previous benchmark result exceeding threshold `1.50`.

| Benchmark suite | Current: a2b944039f6ef10978c9d2d2471201842b785e8c | Previous: 0590709556719da7e9adb1b413f1a094f1380ceb | Ratio |
|-|-|-|-|
| `BenchmarkDecoderedirectionMsg - MB/s` | `406.41` MB/s | `250.12` MB/s | `1.62` |

This comment was automatically generated by [workflow](https://github.com/gofiber/fiber/actions?query=workflow%3ABenchmark) using [github-action-benchmark](https://github.com/marketplace/actions/continuous-benchmark).
<!-- github-benchmark-action-comment(end): Benchmark Alert -->"
3154171317,2936455835,coderabbitai[bot],COMMENTED,2025-06-17T17:05:52Z,"**Actionable comments posted: 1**

<details>
<summary>🧹 Nitpick comments (5)</summary><blockquote>

<details>
<summary>test/redteam/providers/crescendo/prompts.test.ts (1)</summary><blockquote>

`10-10`: **Consider asserting absence of the deprecated placeholder as well**

Now that the prompt has switched to `{{maxTurns}}`, adding a complementary check that `{{maxRounds}}` is _not_ present will avoid accidental regressions the next time the prompt is edited.

```diff
 expect(CRESCENDO_SYSTEM_PROMPT).toContain('{{maxTurns}}');
+expect(CRESCENDO_SYSTEM_PROMPT).not.toContain('{{maxRounds}}');
```

</blockquote></details>
<details>
<summary>src/redteam/providers/crescendo/index.ts (2)</summary><blockquote>

`46-50`: **Stop-reason enum still speaks of “rounds” after renaming**

All external-facing strings were updated to “turns” except the `stopReason` values.  
For consistency and to prevent future confusion, rename the literal (and update tests):

```diff
-    | 'Max rounds reached'
+    | 'Max turns reached'
```

Similar wording appears in several `logger.debug` messages further down.  
(Keeping a mapping helper is fine if backward compatibility for stored results is needed.)

---

`414-416`: **Log message out-of-sync with configuration term**

`logger.debug` still logs “Max rounds …” although the limiting variable is `maxTurns`, which may mislead when debugging.

```diff
-logger.debug(`[Crescendo] Max rounds (${this.maxTurns}) reached. Attack completed.`);
+logger.debug(`[Crescendo] Max turns (${this.maxTurns}) reached. Attack completed.`);
```

</blockquote></details>
<details>
<summary>src/redteam/providers/crescendo/prompts.ts (1)</summary><blockquote>

`10-17`: **Prompt text mixes “rounds” with the new `{{maxTurns}}` placeholder**

After the rename the instructional text still says “round(s)” which may confuse the model/template maintainer.

Search/replace “round” → “turn” where appropriate, e.g.:

```diff
-maximizing the impact of each round within the {{maxTurns}}-round cap
+maximizing the impact of each turn within the {{maxTurns}}-turn cap
```

Repeat for bullets 4, 6 and 8.

</blockquote></details>
<details>
<summary>test/redteam/providers/crescendo/index.test.ts (1)</summary><blockquote>

`254-257`: **Stop-reason string still says “rounds” – consider renaming to match the new terminology**

The assertion expects:

```ts
expect(result.metadata?.stopReason).toBe('Max rounds reached');
```

After introducing `maxTurns`, user-visible messages should ideally use the same term to avoid confusion.  
If the provider implementation already returns `'Max rounds reached'` for backward compatibility, leave a comment explaining the discrepancy; otherwise update provider & tests:

```diff
- expect(result.metadata?.stopReason).toBe('Max rounds reached');
+ expect(result.metadata?.stopReason).toBe('Max turns reached');
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between ea0fccf59456ef8e5f19f8f067d5f0353cf56554 and 72f73af96dd0901421e054fc5c9b4b01a8cb86fe.

</details>

<details>
<summary>📒 Files selected for processing (5)</summary>

* `src/redteam/providers/crescendo/index.ts` (7 hunks)
* `src/redteam/providers/crescendo/prompts.ts` (1 hunks)
* `test/providers/registry.test.ts` (1 hunks)
* `test/redteam/providers/crescendo/index.test.ts` (4 hunks)
* `test/redteam/providers/crescendo/prompts.test.ts` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>📓 Path-based instructions (1)</summary>

<details>
<summary>`src/**`: - This is a CLI tool so errors need to be handled gracefully and logged with lots of information so the user can give us enough data to fix the issue or pass it to the de...</summary>

> `src/**`: - This is a CLI tool so errors need to be handled gracefully and logged with lots of information so the user can give us enough data to fix the issue or pass it to the developers.
> 

- `src/redteam/providers/crescendo/prompts.ts`
- `src/redteam/providers/crescendo/index.ts`

</details>

</details><details>
<summary>🧬 Code Graph Analysis (2)</summary>

<details>
<summary>test/redteam/providers/crescendo/prompts.test.ts (1)</summary><blockquote>

<details>
<summary>src/redteam/providers/crescendo/prompts.ts (1)</summary>

* `CRESCENDO_SYSTEM_PROMPT` (3-85)

</details>

</blockquote></details>
<details>
<summary>src/redteam/providers/crescendo/index.ts (1)</summary><blockquote>

<details>
<summary>src/logger.ts (1)</summary>

* `logger` (191-203)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (21)</summary>

* GitHub Check: webui tests
* GitHub Check: Redteam Custom Enterprise Server
* GitHub Check: Build Docs
* GitHub Check: Style Check
* GitHub Check: Test on Node 24.x and ubuntu-latest
* GitHub Check: Test on Node 20.x and macOS-latest
* GitHub Check: Test on Node 24.x and macOS-latest
* GitHub Check: Test on Node 22.x and macOS-latest
* GitHub Check: Test on Node 22.x and ubuntu-latest
* GitHub Check: Test on Node 20.x and ubuntu-latest
* GitHub Check: Test on Node 18.x and ubuntu-latest
* GitHub Check: Test on Node 18.x and macOS-latest
* GitHub Check: Test on Node 20.x and windows-latest
* GitHub Check: Test on Node 18.x and windows-latest
* GitHub Check: Redteam
* GitHub Check: Share Test
* GitHub Check: Build on Node 24.x
* GitHub Check: Build on Node 22.x
* GitHub Check: Build on Node 18.x
* GitHub Check: Build on Node 20.x
* GitHub Check: Analyze (javascript-typescript)

</details>

<details>
<summary>🔇 Additional comments (2)</summary><blockquote>

<details>
<summary>test/providers/registry.test.ts (1)</summary>

`171-179`: **Ensure the type definition for provider config reflects the new `maxTurns` property**

`redteamConfig` now supplies `maxTurns`, but the referenced TypeScript `RedteamProviderConfig` (and any helper schema validation) are not shown here.  If those types/validators still expect `maxRounds`, the test will compile/run only because `any` escapes or because `// @ts-ignore` exists elsewhere.

Please verify the upstream interface has been updated, otherwise we risk a silent runtime mismatch.

</details>
<details>
<summary>test/redteam/providers/crescendo/index.test.ts (1)</summary>

`68-73`: **Constructor arguments updated correctly – good coverage**

All occurrences where the provider is instantiated now pass `maxTurns` instead of `maxRounds`; this keeps the test suite aligned with the refactor.




Also applies to: 81-92, 178-186, 219-225

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3154171317,2936814674,sklein12,APPROVED,2025-06-17T19:14:06Z,
3099468178,2877385825,junkisai,APPROVED,2025-05-29T07:37:56Z,LGTM!
3099468178,2877385549,NoritakaIkeda,APPROVED,2025-05-29T07:38:01Z,thanks! LGTM!
3099468178,2879787732,hoshinotsuyoshi,APPROVED,2025-05-29T22:58:38Z,
3128517351,2908565020,gemini-code-assist[bot],COMMENTED,2025-06-08T16:41:46Z,"Hello @Habdel-Edenfield, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

## Summary of Changes
Gemini here, providing a summary for this pull request. The primary intent of this PR, as indicated by the title, is to establish a new folder structure for documentation, specifically including Portuguese (pt-br) documentation. The changes introduce a comprehensive set of documentation files covering various aspects of the PraisonAI framework, alongside minor updates to the main README and a test file. While the documentation content appears duplicated across `docs/` and `docs_translations/pt-br/` directories in this patch, the core change is the addition of extensive documentation in Portuguese.

### Highlights
* **Documentation Structure**: New directories (`docs/`, `docs/00_introducao`, `docs/01_instalacao`, etc., and their counterparts under `docs_translations/pt-br/`) have been created to organize documentation files.
* **Portuguese Documentation Added**: A large volume of documentation files in Portuguese (pt-br) has been added, covering fundamental concepts (Agents, Tasks, Processes, Tools, Memory, RAG), usage guides (Python, YAML, JS/TS), advanced workflows, LLM models, practical examples, contributing guidelines, and FAQs.
* **README Update**: The main README has been updated to reflect the project's status as a fork and a 'learning laboratory', and includes new links pointing to sections within the newly added Portuguese documentation. A section on local development setup has also been added.
* **Test File Update**: A minor change was made to a test file (`test_mini_agents_fix.py`) to add a pytest import and use `pytest.importorskip`.

### Changelog
<details>
<summary>Click here to see the changelog</summary>

* **README.md**
  * Updated project description to reflect fork status and learning laboratory goal.
  * Revised 'Key Features' section with links to new Portuguese documentation files.
  * Minor rephrasing in 'Using Python Code' and 'Using No Code' sections.
  * Added 'Setup for Local Development' section with installation instructions.
* **docs/00_introducao/00_como_usar_esta_documentacao.md**
  * New file: Added documentation on how to use the documentation, including Obsidian tips (in Portuguese).
* **docs/00_introducao/01_o_que_e_praisonai.md**
  * New file: Added introduction to PraisonAI, its features, and diagrams (in Portuguese).
* **docs/00_introducao/02_filosofia_e_casos_de_uso.md**
  * New file: Added documentation on PraisonAI philosophy and use cases (in Portuguese).
* **docs/00_introducao/03_metodologia_de_aprendizado.md**
  * New file: Added documentation on a recommended learning methodology (in Portuguese).
* **docs/01_instalacao/00_instalacao_windows.md**
  * New file: Added detailed installation guide for Windows (in Portuguese).
* **docs/02_conceitos_fundamentais/01_agentes.md**
  * New file: Added documentation on the fundamental concept of Agents (in Portuguese).
* **docs/02_conceitos_fundamentais/02_tarefas.md**
  * New file: Added documentation on the fundamental concept of Tasks (in Portuguese).
* **docs/02_conceitos_fundamentais/03_processos.md**
  * New file: Added documentation on the fundamental concept of Processes (in Portuguese).
* **docs/02_conceitos_fundamentais/04_ferramentas.md**
  * New file: Added documentation on the fundamental concept of Tools (in Portuguese).
* **docs/02_conceitos_fundamentais/05_memoria.md**
  * New file: Added documentation on the fundamental concept of Memory (in Portuguese).
* **docs/02_conceitos_fundamentais/06_conhecimento_rag.md**
  * New file: Added documentation on Knowledge and RAG (in Portuguese).
* **docs/03_usando_praisonai/01_usando_com_python.md**
  * New file: Added guide on using PraisonAI with Python (in Portuguese).
* **docs/03_usando_praisonai/02_usando_com_yaml.md**
  * New file: Added guide on using PraisonAI with YAML (in Portuguese).
* **docs/03_usando_praisonai/03_usando_com_js_ts.md**
  * New file: Added guide on using PraisonAI with JavaScript/TypeScript (in Portuguese).
* **docs/03_usando_praisonai/04_criando_seu_primeiro_agente.md**
  * New file: Added quick guide to creating the first agent (in Portuguese).
* **docs/03_usando_praisonai/05_modelos_de_agentes.md**
  * New file: Added overview of available agent models (in Portuguese).
* **docs/03_usando_praisonai/06_configuracoes_yaml.md**
  * New file: Added YAML configuration reference (in Portuguese).
* **docs/03_usando_praisonai/07_importes_e_funcoes_essenciais.md**
  * New file: Added essential Python imports and functions reference (in Portuguese).
* **docs/04_workflows_avancados/01_processos_colaboracao_agentes.md**
  * New file: Added documentation on agent collaboration processes (in Portuguese).
* **docs/04_workflows_avancados/02_workflow_roteamento_agentico.md**
  * New file: Added documentation on Agentic Routing workflow (in Portuguese).
* **docs/04_workflows_avancados/03_workflow_orquestrador_trabalhador.md**
  * New file: Added documentation on Agentic Orchestrator-Worker workflow (in Portuguese).
* **docs/04_workflows_avancados/04_workflow_autonomo_agentico.md**
  * New file: Added documentation on Agentic Autonomous workflow (in Portuguese).
* **docs/04_workflows_avancados/05_paralelizacao_agentica.md**
  * New file: Added documentation on Agentic Parallelization workflow (in Portuguese).
* **docs/04_workflows_avancados/06_encadeamento_prompts_agentico.md**
  * New file: Added documentation on Agentic Prompt Chaining workflow (in Portuguese).
* **docs/04_workflows_avancados/07_avaliador_otimizador_agentico.md**
  * New file: Added documentation on Agentic Evaluator-Optimizer workflow (in Portuguese).
* **docs/04_workflows_avancados/08_agentes_repetitivos.md**
  * New file: Added documentation on Repetitive Agents workflow (in Portuguese).
* **docs/04_workflows_avancados/09_agentes_multimodais.md**
  * New file: Added brief documentation on Multimodal Agents (in Portuguese).
* **docs/04_workflows_avancados/10_code_interpreter_agents.md**
  * New file: Added brief documentation on Code Interpreter Agents (in Portuguese).
* **docs/04_workflows_avancados/11_math_agents.md**
  * New file: Added brief documentation on Math Agents (in Portuguese).
* **docs/04_workflows_avancados/12_saida_estruturada.md**
  * New file: Added brief documentation on Structured Output (in Portuguese).
* **docs/04_workflows_avancados/13_callback_agents.md**
  * New file: Added brief documentation on Callback Agents (in Portuguese).
* **docs/04_workflows_avancados/14_mini_agents.md**
  * New file: Added brief documentation on Mini AI Agents (in Portuguese).
* **docs/08_contribuindo_e_desenvolvimento/00_contribuindo_e_dev_local.md**
  * New file: Added guide on contributing and local development setup (in Portuguese).
* **docs/08_contribuindo_e_desenvolvimento/01_estrutura_do_codigo.md**
  * New file: Added documentation on the code structure (in Portuguese).
* **docs/09_duvidas_frequentes.md**
  * New file: Added Frequently Asked Questions (FAQ) section (in Portuguese).
* **docs/README.md**
  * New file: Added English welcome message and course structure overview.
* **docs/plan.md**
  * New file: Added content plan for the documentation (in Portuguese).
* **docs_translations/pt-br/00_introducao/00_como_usar_esta_documentacao.md**
  * New file: Added documentation on how to use the documentation, including Obsidian tips (in Portuguese).
* **docs_translations/pt-br/00_introducao/01_o_que_e_praisonai.md**
  * New file: Added introduction to PraisonAI, its features, and diagrams (in Portuguese).
* **docs_translations/pt-br/00_introducao/02_filosofia_e_casos_de_uso.md**
  * New file: Added documentation on PraisonAI philosophy and use cases (in Portuguese).
* **docs_translations/pt-br/00_introducao/03_metodologia_de_aprendizado.md**
  * New file: Added documentation on a recommended learning methodology (in Portuguese).
* **docs_translations/pt-br/01_instalacao/00_instalacao_windows.md**
  * New file: Added detailed installation guide for Windows (in Portuguese).
* **docs_translations/pt-br/02_conceitos_fundamentais/01_agentes.md**
  * New file: Added documentation on the fundamental concept of Agents (in Portuguese).
* **docs_translations/pt-br/02_conceitos_fundamentais/02_tarefas.md**
  * New file: Added documentation on the fundamental concept of Tasks (in Portuguese).
* **docs_translations/pt-br/02_conceitos_fundamentais/03_processos.md**
  * New file: Added documentation on the fundamental concept of Processes (in Portuguese).
* **docs_translations/pt-br/02_conceitos_fundamentais/04_ferramentas.md**
  * New file: Added documentation on the fundamental concept of Tools (in Portuguese).
* **docs_translations/pt-br/02_conceitos_fundamentais/05_memoria.md**
  * New file: Added documentation on the fundamental concept of Memory (in Portuguese).
* **docs_translations/pt-br/02_conceitos_fundamentais/06_conhecimento_rag.md**
  * New file: Added documentation on Knowledge and RAG (in Portuguese).
* **docs_translations/pt-br/03_usando_praisonai/01_usando_com_python.md**
  * New file: Added guide on using PraisonAI with Python (in Portuguese).
* **docs_translations/pt-br/03_usando_praisonai/02_usando_com_yaml.md**
  * New file: Added guide on using PraisonAI with YAML (in Portuguese).
* **docs_translations/pt-br/03_usando_praisonai/03_usando_com_js_ts.md**
  * New file: Added guide on using PraisonAI with JavaScript/TypeScript (in Portuguese).
* **docs_translations/pt-br/03_usando_praisonai/04_criando_seu_primeiro_agente.md**
  * New file: Added quick guide to creating the first agent (in Portuguese).
* **docs_translations/pt-br/03_usando_praisonai/05_modelos_de_agentes.md**
  * New file: Added overview of available agent models (in Portuguese).
* **docs_translations/pt-br/03_usando_praisonai/06_configuracoes_yaml.md**
  * New file: Added YAML configuration reference (in Portuguese).
* **docs_translations/pt-br/03_usando_praisonai/07_importes_e_funcoes_essenciais.md**
  * New file: Added essential Python imports and functions reference (in Portuguese).
* **docs_translations/pt-br/04_workflows_avancados/01_processos_colaboracao_agentes.md**
  * New file: Added documentation on agent collaboration processes (in Portuguese).
* **docs_translations/pt-br/04_workflows_avancados/02_workflow_roteamento_agentico.md**
  * New file: Added documentation on Agentic Routing workflow (in Portuguese).
* **docs_translations/pt-br/04_workflows_avancados/03_workflow_orquestrador_trabalhador.md**
  * New file: Added documentation on Agentic Orchestrator-Worker workflow (in Portuguese).
* **docs_translations/pt-br/04_workflows_avancados/04_workflow_autonomo_agentico.md**
  * New file: Added documentation on Agentic Autonomous workflow (in Portuguese).
* **docs_translations/pt-br/04_workflows_avancados/05_paralelizacao_agentica.md**
  * New file: Added documentation on Agentic Parallelization workflow (in Portuguese).
* **docs_translations/pt-br/04_workflows_avancados/06_encadeamento_prompts_agentico.md**
  * New file: Added documentation on Agentic Prompt Chaining workflow (in Portuguese).
* **docs_translations/pt-br/04_workflows_avancados/07_avaliador_otimizador_agentico.md**
  * New file: Added documentation on Agentic Evaluator-Optimizer workflow (in Portuguese).
* **docs_translations/pt-br/04_workflows_avancados/08_agentes_repetitivos.md**
  * New file: Added documentation on Repetitive Agents workflow (in Portuguese).
* **docs_translations/pt-br/04_workflows_avancados/09_agentes_multimodais.md**
  * New file: Added brief documentation on Multimodal Agents (in Portuguese).
* **docs_translations/pt-br/04_workflows_avancados/10_code_interpreter_agents.md**
  * New file: Added brief documentation on Code Interpreter Agents (in Portuguese).
* **docs_translations/pt-br/04_workflows_avancados/11_math_agents.md**
  * New file: Added brief documentation on Math Agents (in Portuguese).
* **docs_translations/pt-br/04_workflows_avancados/12_saida_estruturada.md**
  * New file: Added brief documentation on Structured Output (in Portuguese).
* **docs_translations/pt-br/04_workflows_avancados/13_callback_agents.md**
  * New file: Added brief documentation on Callback Agents (in Portuguese).
* **docs_translations/pt-br/04_workflows_avancados/14_mini_agents.md**
  * New file: Added brief documentation on Mini AI Agents (in Portuguese).
* **docs_translations/pt-br/08_contribuindo_e_desenvolvimento/00_contribuindo_e_dev_local.md**
  * New file: Added guide on contributing and local development setup (in Portuguese).
* **docs_translations/pt-br/08_contribuindo_e_desenvolvimento/01_estrutura_do_codigo.md**
  * New file: Added documentation on the code structure (in Portuguese).
* **docs_translations/pt-br/09_duvidas_frequentes.md**
  * New file: Added Frequently Asked Questions (FAQ) section (in Portuguese).
* **docs_translations/pt-br/plan.md**
  * New file: Added content plan for the documentation (in Portuguese).
* **src/praisonai/tests/unit/agent/test_mini_agents_fix.py**
  * Added import for `pytest`.
  * Used `pytest.importorskip` to conditionally skip tests if `praisonaiagents` is not available.

</details>

<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.
</details>


<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>


[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configure Gemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3128517351,2908565343,gemini-code-assist[bot],CHANGES_REQUESTED,2025-06-08T16:43:32Z,"## Code Review
This pull request introduces a massive amount of documentation for the PraisonAI framework, in both English (under `docs/`) and Portuguese (under `docs_translations/pt-br/`). The effort to structure and write this extensive documentation is commendable. The refactoring of the unit test in `test_mini_agents_fix.py` to use `pytest.importorskip` is also a good improvement.

However, there are several critical and high-severity issues that need attention before this PR can be considered complete, primarily concerning the state of the English documentation and consistency in repository references. Many files intended for the English documentation (`docs/`) are currently in Portuguese and marked with 'TODO: Translate this file to English'. This significantly impacts the completeness of the English documentation as described in the PR.

Additionally, there are some medium-severity concerns regarding potentially broken image links for logos and the consistency of links in the main README pointing to documentation versions.

### Summary of Findings
* **Incomplete English Documentation**: Many files in the `docs/` directory, intended for English documentation, are currently in Portuguese and marked with 'TODO: Translate this file to English'. This is a critical issue if the PR aims to deliver complete English documentation.
* **Incorrect Repository Links**: The main README.md and some documentation files link to the original `MervinPraison/PraisonAI` repository for cloning or examples. For a fork intended as a separate learning laboratory, these should ideally point to the `Habdel-Edenfield/PraisonAI` repository or its specific resources.
* **Logo Image Handling**: Documentation notes indicate that logo images are not included and must be manually added by users, which will lead to broken images by default. Consider including placeholders or making instructions more prominent.
* **README.md Key Feature Links**: All 'Key Features' in the main README.md link to Portuguese (`pt-br`) documentation. If English versions exist or are planned, linking to them from the English README would be more consistent.
* **README.md Formatting (YAML Configuration Link)**: The 'YAML Configuration' link in the main README.md (line 34, RIGHT side) is placed somewhat awkwardly within a centered `div` but outside the main documentation badge's `<a>` tag. This is a minor layout issue. (Not commented due to severity settings).

### Merge Readiness
This pull request represents a significant contribution in terms of documentation. The sheer volume of new content is impressive, and the refactoring of the test file is a welcome improvement.

However, due to the critical issue of incomplete English translations (many 'English' documents are currently Portuguese placeholders with TODOs), and the high-severity issue of potentially confusing repository links, I cannot recommend merging this PR in its current state. These issues should be addressed to ensure the documentation is accurate, complete, and guides users effectively within the context of this specific fork.

I am unable to approve pull requests. Please ensure these changes are reviewed and approved by other maintainers after addressing the feedback, particularly the critical and high-severity items."
3077405928,2860224931,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-22T08:09:36Z,"## Pull Request Overview

Adds support for JSON/YAML output modes to the `okteto namespace list` command, including flag parsing, output formatting, and corresponding unit tests.

- Introduces a new `--output` flag with validation for `json` and `yaml`
- Implements `displayListNamespaces` and `getNamespaceOutput` to render in table, JSON, or YAML
- Adds unit tests for output validation and formatted output cases

### Reviewed Changes

Copilot reviewed 2 out of 2 changed files in this pull request and generated 3 comments.

| File                          | Description                                                                                   |
|-------------------------------|-----------------------------------------------------------------------------------------------|
| cmd/namespace/list.go         | Add `--output` flag, validate formats, implement JSON/YAML/table output functions             |
| cmd/namespace/list_test.go    | Update existing test for new signature and add tests for `validateNamespaceListOutput` and `displayListNamespaces` |


<details>
<summary>Comments suppressed due to low confidence (1)</summary>

**cmd/namespace/list_test.go:78**
* Add a test case that calls `executeListNamespaces` with an invalid format (for example, ""xml"") to assert that it returns `errInvalidOutput`.
```
err := nsCmd.executeListNamespaces(ctx, """")
```
</details>

"
3077405928,2860587994,ifbyol,COMMENTED,2025-05-22T09:59:11Z,
3077405928,2860589878,ifbyol,COMMENTED,2025-05-22T09:59:41Z,
3108485860,2886698318,FunamaYukina,APPROVED,2025-06-02T04:46:43Z,Thank you!! LGTM!👍
3082295750,2860176544,sourcery-ai[bot],COMMENTED,2025-05-22T07:53:02Z,"Hey @mldangelo - I've reviewed your changes - here's some feedback:

- Add proper aria-expanded (and aria-controls) attributes to the IconButton so assistive tech can announce the toggle state of the collapsible alert.
- You could consolidate the rotation logic on the ExpandMoreIcon into one place (via sx) instead of toggling transforms on both parent and child to simplify the code.
- Consider using theme.spacing for your margin/padding values (e.g., mb: theme.spacing(0.5)) rather than hard‐coded numbers for more consistent theming.

<details>
<summary>Here's what I looked at during the review</summary>

- 🟡 **General issues**: 4 issues found
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3100343451,2878398364,Madman10K,COMMENTED,2025-05-29T13:52:47Z,
3100343451,2878738021,alehander92,CHANGES_REQUESTED,2025-05-29T15:40:19Z,"good fix: but not the right place 

i think this doesn't work with the nix build/appimage, because they don't use ct_wrapper: this file is a workaround for the dev build, so I expect that the fix wouldn't work for them (but i might be wrong)

we need to maybe make a fix where we detect `--version` in the raw args and call the process `ct version` (we do something like that in `ct help` but not exactly)

we can also patch confutils with better direct support for flag/options like that but i might be remembering wrong here "
3076879426,2854017508,ellipsis-dev[bot],COMMENTED,2025-05-20T12:40:32Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to db957aff3330a89fdb67835ac31b362a534435be in <ellipsistime>1 minute and 51 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `46` lines of code in `3` files
> - Skipped `0` files when reviewing.
> - Skipped posting `4` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>CHANGELOG.md:37</code></summary>
> 
> - **Draft comment:** 
> Changelog update looks good, but verify it only mentions removal of `n` as intended.
> - **Reason this comment was not posted:**
> Comment did not seem useful. Confidence is useful = `0%` <= threshold `50%` This comment is asking the PR author to verify something, which is against the rules. It does not provide a specific suggestion or point out a specific issue with the code. Therefore, it should be removed.
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>documentation/responses/concepts.mdx:31</code></summary>
> 
> - **Draft comment:** 
> Table update removes both `n` and `stop` rows; ensure removal of `stop` is intentional since the API spec still supports it.
> - **Reason this comment was not posted:**
> Decided after close inspection that this draft comment was likely wrong and/or not actionable: usefulness confidence = 10% vs. threshold = 50% The comment asks for verification about removing the `stop` parameter, claiming it's still in the API spec. However, we don't have access to the API spec to verify this claim. The comment is essentially asking the author to double-check their work, which violates our rules about not asking for verification or confirmation. Maybe the removal of `stop` could break existing API consumers if it was a supported feature. The comment might be trying to prevent a breaking change. Even if that's true, asking for verification isn't actionable. If the parameter removal is incorrect, the reviewer should provide evidence showing that it should be kept. The comment should be deleted as it merely asks for verification without providing evidence that keeping the parameter is necessary.
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>typespec/responses/models.tsp:38</code></summary>
> 
> - **Draft comment:** 
> Deprecated `n` parameter removed from CreateResponse model as intended.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>CHANGELOG.md:39</code></summary>
> 
> - **Draft comment:** 
> Typographical error: '11 Apri 2025' should likely be '11 April 2025'.
> - **Reason this comment was not posted:**
> Comment was on unchanged code.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_SGyqiJiADaXwSZLH`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3128195639,2923373491,devgony,APPROVED,2025-06-13T04:20:54Z,
3115356872,2894034776,graphite-app[bot],COMMENTED,2025-06-03T20:31:43Z,
3115356872,2894036359,graphite-app[bot],COMMENTED,2025-06-04T07:35:10Z,
3115356872,2895635695,graphite-app[bot],COMMENTED,2025-06-04T07:39:00Z,
3115356872,2895799246,graphite-app[bot],COMMENTED,2025-06-04T08:31:10Z,
3115356872,2896653061,jaysoo,APPROVED,2025-06-04T13:04:48Z,
3115356872,2897125129,graphite-app[bot],COMMENTED,2025-06-04T15:03:45Z,
3103428202,2887232712,sourcery-ai[bot],COMMENTED,2025-06-02T08:05:08Z,"Hey @mldangelo - I've reviewed your changes and they look great!

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3151033107,2933231987,greptile-apps[bot],COMMENTED,2025-06-16T19:17:20Z,"
## PR Summary
Fixed directory name typo by renaming `timeline/repositiories` to `timeline/repositories` and updated corresponding import paths across multiple server modules.

- Renamed directory in `packages/twenty-server/src/modules/timeline/repositiories` to fix spelling error
- Updated import paths in calendar-event-participant and message-participant listeners
- Modified `metadata-to-repository.mapping.ts` to use correct repository path
- Updated timeline-activity service imports to reflect new directory structure

The change improves code maintainability and prevents potential build failures from incorrect TypeScript imports.

<sub>5 files reviewed, no comments</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=twenty_12640)</sub>"
3151033107,2933586084,charlesBochet,APPROVED,2025-06-16T21:36:50Z,
3114217192,2892744119,ChrisHuie,APPROVED,2025-06-03T14:33:49Z,
3124200228,2904371424,coderabbitai[bot],COMMENTED,2025-06-06T09:29:32Z,"**Actionable comments posted: 1**

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>src/api/client.ts (1)</summary><blockquote>

`180-181`: **Consider including 'active' property in the utility function.**

The code correctly uses the new sanitization utility, but still manually deletes the `active` property. For consistency, consider either:

1. Adding `active` to the properties removed by `sanitizeWorkflowForApi`
2. Adding a comment explaining why `active` requires special handling only during creation



If `active` should always be removed, update the utility function:

```diff
export function sanitizeWorkflowForApi(workflow: Record<string, any>): Record<string, any> {
-  const { id, createdAt, updatedAt, tags, pinData, ...sanitized } = workflow;
+  const { id, createdAt, updatedAt, tags, pinData, active, ...sanitized } = workflow;
   return sanitized;
}
```

Then remove the manual deletion in `createWorkflow`:

```diff
 const workflowToCreate = sanitizeWorkflowForApi(workflow);
-delete workflowToCreate.active; // Remove active property as it's read-only
```

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 Biome (1.9.4)</summary>

[error] 181-181: Avoid the delete operator which can impact performance.

Unsafe fix: Use an undefined assignment instead.


(lint/performance/noDelete)

</details>

</details>

</blockquote></details>
<details>
<summary>tests/unit/utils/workflow-utils.test.ts (1)</summary><blockquote>

`4-20`: **LGTM! Good test coverage for core functionality.**

The test correctly validates that read-only properties are removed while preserving other properties. Consider adding additional test cases for better coverage.




Consider adding these test cases for more comprehensive coverage:

```diff
+  it('handles empty workflow object', () => {
+    const workflow = {};
+    const sanitized = sanitizeWorkflowForApi(workflow);
+    expect(sanitized).toEqual({});
+  });
+
+  it('does not modify the original workflow object', () => {
+    const workflow = {
+      id: '1',
+      name: 'Test',
+      pinData: { a: 1 },
+      nodes: [],
+    };
+    const original = { ...workflow };
+    
+    sanitizeWorkflowForApi(workflow);
+    expect(workflow).toEqual(original);
+  });
+
+  it('preserves all non-read-only properties', () => {
+    const workflow = {
+      id: '1',
+      name: 'Test Workflow',
+      nodes: [{ id: 'node1' }],
+      connections: { node1: {} },
+      settings: { timeout: 3600 },
+      customProperty: 'value',
+      pinData: { data: 'should be removed' }
+    };
+    
+    const sanitized = sanitizeWorkflowForApi(workflow);
+    expect(sanitized).toEqual({
+      name: 'Test Workflow',
+      nodes: [{ id: 'node1' }],
+      connections: { node1: {} },
+      settings: { timeout: 3600 },
+      customProperty: 'value'
+    });
+  });
```

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between d274146fb0a0de0fe15dcfb6d4c4d2f06e4b496a and 8838d0a93ed7b4248dc153a623cf3f3e3426bde0.

</details>

<details>
<summary>📒 Files selected for processing (4)</summary>

* `src/api/client.ts` (3 hunks)
* `src/utils/workflow-utils.ts` (1 hunks)
* `tests/mocks/axios-mock.ts` (2 hunks)
* `tests/unit/utils/workflow-utils.test.ts` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (2)</summary>

<details>
<summary>src/api/client.ts (1)</summary><blockquote>

<details>
<summary>src/utils/workflow-utils.ts (1)</summary>

* `sanitizeWorkflowForApi` (9-17)

</details>

</blockquote></details>
<details>
<summary>tests/unit/utils/workflow-utils.test.ts (1)</summary><blockquote>

<details>
<summary>src/utils/workflow-utils.ts (1)</summary>

* `sanitizeWorkflowForApi` (9-17)

</details>

</blockquote></details>

</details><details>
<summary>🪛 Biome (1.9.4)</summary>

<details>
<summary>src/utils/workflow-utils.ts</summary>

[error] 11-11: Avoid the delete operator which can impact performance.

Unsafe fix: Use an undefined assignment instead.


(lint/performance/noDelete)

---

[error] 12-12: Avoid the delete operator which can impact performance.

Unsafe fix: Use an undefined assignment instead.


(lint/performance/noDelete)

---

[error] 13-13: Avoid the delete operator which can impact performance.

Unsafe fix: Use an undefined assignment instead.


(lint/performance/noDelete)

---

[error] 14-14: Avoid the delete operator which can impact performance.

Unsafe fix: Use an undefined assignment instead.


(lint/performance/noDelete)

---

[error] 15-15: Avoid the delete operator which can impact performance.

Unsafe fix: Use an undefined assignment instead.


(lint/performance/noDelete)

</details>

</details>

</details>

<details>
<summary>🔇 Additional comments (4)</summary><blockquote>

<details>
<summary>tests/mocks/axios-mock.ts (2)</summary>

`6-6`: **LGTM! Good Jest typing improvement.**

Adding the explicit Jest import ensures proper type definitions are available.

---

`33-33`: **LGTM! Explicit typing improves clarity.**

The explicit `any` typing makes the mock's permissive nature clear and improves TypeScript compatibility.

</details>
<details>
<summary>src/api/client.ts (2)</summary>

`10-10`: **LGTM! Good centralization of sanitization logic.**

The import statement correctly brings in the new utility function.

---

`204-204`: **LGTM! Consistent use of sanitization utility.**

The `updateWorkflow` method correctly uses the centralized sanitization logic.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3124200228,2917318676,devnev,COMMENTED,2025-06-11T13:53:42Z,
3070868251,2848323121,ellipsis-dev[bot],COMMENTED,2025-05-17T15:24:34Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to ec7e27b6980d7cc0d63683bd46e8a6db908d634b in <ellipsistime>1 minute and 16 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `179` lines of code in `11` files
> - Skipped `13` files when reviewing.
> - Skipped posting `11` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/julep-ai/settings/code-review) and [rules](https://app.ellipsis.dev/julep-ai/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>documentation/concepts/agents.mdx:315</code></summary>
> 
> - **Draft comment:** 
> Added the '## See Examples' section with notebook links. Consider ensuring a trailing newline at the end of the file to follow common styling conventions.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>documentation/concepts/tasks.mdx:625</code></summary>
> 
> - **Draft comment:** 
> The new '## See Examples' section is clear and correctly links to example notebooks. As with other files, ensure a trailing newline if missing.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>documentation/concepts/tools.mdx:373</code></summary>
> 
> - **Draft comment:** 
> The added '## See Examples' section with the Adding Tools and Browser Use notebooks is well integrated. Verify that link URLs remain correct and consider adding a trailing newline.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>documentation/tutorials/browser-use.mdx:17</code></summary>
> 
> - **Draft comment:** 
> The added '## Related Concepts' block with links to Agents, Tasks, and Tools improves cross-referencing. Consider ensuring consistent spacing between headers and lists.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>documentation/tutorials/rag-chatbot.mdx:10</code></summary>
> 
> - **Draft comment:** 
> New '## Related Concepts' section with cross links is a good addition. Ensure that the links match the updated documentation structure.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>6. <code>documentation/tutorials/trip-planning-input.mdx:27</code></summary>
> 
> - **Draft comment:** 
> The '## Related Concepts' section is appropriately added. Cross-check that the links for Agents, Tasks, and Tools are consistent with other pages.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>7. <code>documentation/tutorials/trip-planning-running.mdx:32</code></summary>
> 
> - **Draft comment:** 
> The inclusion of a '## Related Concepts' section in this tutorial is consistent with other similar pages. Ensure the links remain valid after any future restructuring.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>8. <code>documentation/tutorials/trip-planning-tools.mdx:36</code></summary>
> 
> - **Draft comment:** 
> The added '## Related Concepts' section here reinforces navigation. Consider a quick review for uniform formatting across all trip planning docs.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>9. <code>documentation/tutorials/trip-planning-workflow.mdx:69</code></summary>
> 
> - **Draft comment:** 
> The workflow steps are clearly defined. In the evaluate step that zips outputs (lines 60–68), consider using more descriptive variable names than 'zipped' for clarity, though the current implementation is functional.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>10. <code>documentation/tutorials/trip-planning.mdx:642</code></summary>
> 
> - **Draft comment:** 
> The 'Also See' section and '## Related Concepts' at the end provide effective cross linking. Verify that the ordering and wording is consistent with the other tutorials.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>11. <code>documentation/tutorials/video-processing.mdx:424</code></summary>
> 
> - **Draft comment:** 
> The video processing tutorial now includes clear cross references and sample outputs. The YAML blocks and integration configurations appear correct—ensure that any placeholders (like YOUR_CLOUDINARY_API_KEY) are clearly documented as needing replacement.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_d03p5CMHbRT7KtwX`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=julep-ai%2Fjulep&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/julep-ai/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/julep-ai/code-review/rules).</sup>"
3131692743,2911563039,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-09T23:03:15Z,"## Pull Request Overview

This PR adds a new experimental network serial device to support netplay over TCP, while updating documentation and version numbers across the project.  
- Implemented a NetworkDevice struct in Rust to handle TCP connections with nonblocking sockets.  
- Enabled network device support in the SDL frontend with command-line parsing for ""net:"" and ""net-listen:"" devices.  
- Updated version numbers, documentation (README and changelog), and Cargo.toml files for all frontends and libraries.

### Reviewed Changes

Copilot reviewed 16 out of 16 changed files in this pull request and generated 2 comments.

<details>
<summary>Show a summary per file</summary>

| File                                   | Description                                             |
| -------------------------------------- | ------------------------------------------------------- |
| src/devices/network.rs                 | Added NetworkDevice implementation for serial over TCP.|
| src/devices/mod.rs                     | Exposed the new network module.                         |
| setup.py                               | Bumped version to 0.11.6.                               |
| frontends/web/package.json             | Bumped version to 0.11.6.                               |
| frontends/sdl/src/main.rs              | Integrated network device into device selection.      |
| frontends/sdl/README.md                | Documented network play usage in the SDL README.        |
| frontends/sdl/Cargo.toml               | Bumped version to 0.11.6.                               |
| frontends/libretro/res/boytacean_libretro.info | Updated display version to 0.11.6.                    |
| frontends/libretro/Cargo.toml          | Bumped version to 0.11.6.                               |
| frontends/console/Cargo.toml           | Bumped version to 0.11.6.                               |
| crates/hashing/Cargo.toml              | Bumped version and dependency versions.               |
| crates/encoding/Cargo.toml             | Bumped version and dependency versions.               |
| crates/common/Cargo.toml               | Bumped version to 0.11.6.                               |
| README.md                              | Updated feature list to include network device.         |
| Cargo.toml                             | Bumped version and updated dependencies.              |
| CHANGELOG.md                           | Added change log entries for the experimental network device. |
</details>




"
3131692743,2911570732,coderabbitai[bot],COMMENTED,2025-06-09T23:06:51Z,"**Actionable comments posted: 2**

<details>
<summary>🧹 Nitpick comments (6)</summary><blockquote>

<details>
<summary>README.md (1)</summary><blockquote>

`16-16`: **Update 'What's still missing' section**: Since basic netplay is now available, consider removing or clarifying the ""NetPlay gaming support"" entry under missing features to avoid confusing users.

</blockquote></details>
<details>
<summary>frontends/sdl/src/main.rs (1)</summary><blockquote>

`1101-1108`: **Network device integration is well-implemented.**

The pattern matching correctly handles both listening and connecting modes, with proper address extraction. The implementation follows the existing code style and error handling patterns.

Consider adding validation for empty addresses to provide clearer error messages:

```diff
 device if device.starts_with(""net-listen:"") => {
     let addr = &device[11..];
+    if addr.is_empty() {
+        return Err(Error::InvalidParameter(""Empty address for net-listen device"".to_string()));
+    }
     Ok(Box::new(NetworkDevice::listen(addr)?))
 }
 device if device.starts_with(""net:"") => {
     let addr = &device[4..];
+    if addr.is_empty() {
+        return Err(Error::InvalidParameter(""Empty address for net device"".to_string()));
+    }
     Ok(Box::new(NetworkDevice::connect(addr)?))
 }
```

</blockquote></details>
<details>
<summary>src/devices/network.rs (4)</summary><blockquote>

`11-14`: **Remove unused `NetworkMode` enum or integrate it into the design.**

The `NetworkMode` enum is defined but not used anywhere in the implementation. This creates dead code that should either be removed or properly integrated.



```diff
-pub enum NetworkMode {
-    Client,
-    Server,
-}
```

Alternatively, if this enum is intended for future use, consider integrating it into the `NetworkDevice` struct to track the current mode:

```diff
pub struct NetworkDevice {
    stream: TcpStream,
+    mode: NetworkMode,
}
```

---

`44-46`: **Consider error handling for connection failures.**

The `receive` method silently ignores all write errors, which could mask connection failures or network issues that should be handled.



```diff
fn receive(&mut self, byte: u8) {
-   let _ = self.stream.write_all(&[byte]);
+   if let Err(e) = self.stream.write_all(&[byte]) {
+       if e.kind() != std::io::ErrorKind::WouldBlock {
+           // Log connection error for debugging
+       }
+   }
}
```

---

`56-58`: **Enhance state reporting for debugging purposes.**

The `state` method returns an empty string, which provides no useful information about the connection state for debugging or monitoring.



```diff
fn state(&self) -> String {
-   String::from("""")
+   match self.stream.peer_addr() {
+       Ok(addr) => format!(""Connected to {}"", addr),
+       Err(_) => String::from(""Disconnected""),
+   }
}
```

---

`1-65`: **Consider adding connection validation and security measures.**

For a network-facing feature, consider implementing basic security measures and connection validation.



Consider these enhancements for production readiness:
- Input validation for network addresses
- Connection timeout handling
- Graceful handling of connection drops
- Optional authentication mechanism
- Rate limiting to prevent abuse
- Logging for network events and errors

This is especially important since this feature exposes the emulator to network traffic and potential security risks.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 23b314e7b1686f92012be3131eb2387494fcdfb8 and 834094715a1a34c9739b2d1b61f5ce6a484e9fa6.

</details>

<details>
<summary>📒 Files selected for processing (16)</summary>

* `CHANGELOG.md` (1 hunks)
* `Cargo.toml` (3 hunks)
* `README.md` (1 hunks)
* `crates/common/Cargo.toml` (1 hunks)
* `crates/encoding/Cargo.toml` (2 hunks)
* `crates/hashing/Cargo.toml` (2 hunks)
* `frontends/console/Cargo.toml` (2 hunks)
* `frontends/libretro/Cargo.toml` (2 hunks)
* `frontends/libretro/res/boytacean_libretro.info` (1 hunks)
* `frontends/sdl/Cargo.toml` (2 hunks)
* `frontends/sdl/README.md` (1 hunks)
* `frontends/sdl/src/main.rs` (2 hunks)
* `frontends/web/package.json` (1 hunks)
* `setup.py` (1 hunks)
* `src/devices/mod.rs` (1 hunks)
* `src/devices/network.rs` (1 hunks)

</details>

<details>
<summary>🔇 Additional comments (15)</summary><blockquote>

<details>
<summary>crates/common/Cargo.toml (1)</summary>

`4-4`: **Version bump is consistent**: The `boytacean-common` version was correctly updated to 0.11.6, matching the overall project release.

</details>
<details>
<summary>frontends/web/package.json (1)</summary>

`3-3`: **Version bump is consistent**: The `boytacean-web` package.json version was updated to 0.11.6, in line with the coordinated release.

</details>
<details>
<summary>setup.py (1)</summary>

`30-30`: **Version bump is consistent**: setup.py’s `version=""0.11.6""` aligns with the Cargo.toml and package.json updates.

</details>
<details>
<summary>frontends/libretro/res/boytacean_libretro.info (1)</summary>

`9-9`: **Version bump is consistent**: Updated `display_version` to 0.11.6, matching the new release across metadata files.

</details>
<details>
<summary>README.md (1)</summary>

`16-16`: **Add experimental netplay feature**: The new bullet clearly highlights the network link cable for basic netplay.

</details>
<details>
<summary>CHANGELOG.md (1)</summary>

`14-19`: **Changelog entry for v0.11.6 is accurate.**  
The new section clearly documents the experimental network serial device feature for netplay.

</details>
<details>
<summary>crates/hashing/Cargo.toml (1)</summary>

`4-4`: **Version bump is consistent.**  
Updating the crate version and its `boytacean-common` dependency to 0.11.6 aligns with the release.  



Also applies to: 14-14

</details>
<details>
<summary>frontends/console/Cargo.toml (1)</summary>

`3-3`: **Console frontend updated to v0.11.6.**  
The package version and its dependency on `boytacean` correctly reflect the new release.  



Also applies to: 19-19

</details>
<details>
<summary>crates/encoding/Cargo.toml (1)</summary>

`4-4`: **Consistent version bump across encoding crate.**  
The crate version and dependencies (`boytacean-common`, `boytacean-hashing`) are correctly set to 0.11.6.  



Also applies to: 14-15

</details>
<details>
<summary>src/devices/mod.rs (1)</summary>

`8-8`: **Expose the new `network` module.**  
Adding `pub mod network;` properly integrates the experimental network serial device into the public API.

</details>
<details>
<summary>frontends/libretro/Cargo.toml (1)</summary>

`3-3`: **Version bump looks consistent.**

The version updates from 0.11.5 to 0.11.6 are correctly applied to both the package and its dependency.



Also applies to: 21-21

</details>
<details>
<summary>frontends/sdl/Cargo.toml (1)</summary>

`3-3`: **Version updates are properly coordinated.**

All package and dependency versions are consistently updated to 0.11.6.



Also applies to: 19-20

</details>
<details>
<summary>frontends/sdl/README.md (1)</summary>

`102-109`: **Clear and helpful documentation for the new network play feature.**

The examples effectively demonstrate how to set up TCP-based link cable emulation between two instances.

</details>
<details>
<summary>Cargo.toml (1)</summary>

`4-4`: **Comprehensive version coordination across the workspace.**

All package versions and internal dependencies are properly synchronized to 0.11.6.



Also applies to: 29-31, 72-72

</details>
<details>
<summary>frontends/sdl/src/main.rs (1)</summary>

`8-8`: **Import addition looks correct.**

NetworkDevice is properly imported alongside other serial devices.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3122290925,2901746225,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-05T18:55:52Z,"## Pull Request Overview

This PR removes Biome tooling in favor of Prettier for formatting and updates related scripts and editor settings accordingly.
- Replace Biome lint/format scripts with Prettier in all packages
- Remove `biome.json` and add Prettier as a dev dependency in root
- Update VSCode settings to use Prettier as the default formatter

### Reviewed Changes

Copilot reviewed 14 out of 14 changed files in this pull request and generated no comments.

<details>
<summary>Show a summary per file</summary>

| File                               | Description                                         |
|------------------------------------|-----------------------------------------------------|
| packages/utils/package.json        | Swapped `biome` commands for Prettier scripts       |
| packages/ui/src/components/chart.tsx | Removed Biome lint ignore comment for `dangerouslySetInnerHTML` |
| packages/ui/package.json           | Swapped lint/format scripts to Prettier             |
| packages/notifications/package.json| Swapped lint/format scripts to Prettier             |
| packages/kv/package.json           | Swapped lint/format scripts to Prettier             |
| packages/integrations/package.json | Swapped lint/format scripts to Prettier             |
| packages/email/package.json        | Swapped lint/format scripts to Prettier             |
| packages/analytics/package.json    | Swapped lint/format scripts to Prettier             |
| package.json                       | Removed Biome devDependency, added Prettier, updated workspace formatting |
| biome.json                         | Deleted entire file (Biome config removed)          |
| apps/app/package.json              | Updated `lint` script to Prettier                    |
| .vscode/settings.json              | Set Prettier as default formatter and adjusted code actions |
</details>



<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**packages/ui/src/components/chart.tsx:79**
* Removing the Biome lint ignore on `dangerouslySetInnerHTML` may cause unintended lint failures or hide potential XSS risks. Consider re-adding an appropriate lint exemption with a clear justification or refactoring to use a sanitized approach.
```
// biome-ignore lint/security/noDangerouslySetInnerHtml: <explanation>
```
**apps/app/package.json:10**
* [nitpick] Prettier only checks formatting, not code quality. You may want to reintroduce an ESLint step or another linter to ensure type and error checks in source files.
```
""lint"": ""prettier --check ."",
```
</details>

"
3148499978,2930598773,obi1kenobi,COMMENTED,2025-06-16T04:30:52Z,
3131264983,2911127022,ellipsis-dev[bot],COMMENTED,2025-06-09T19:38:44Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to d12c66638c9d0def671c0a1d6d42d1a8ed6325d8 in <ellipsistime>1 minute and 20 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `88` lines of code in `2` files
> - Skipped `0` files when reviewing.
> - Skipped posting `6` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/onlook-dev/settings/code-review) and [rules](https://app.ellipsis.dev/onlook-dev/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>apps/web/client/src/app/project/[id]/_components/right-panel/dev-tab/file-tree.tsx:23</code></summary>
> 
> - **Draft comment:** 
> Good use of memo to wrap FileTree. Consider wrapping internal callbacks (e.g. refresh handler) in useCallback if they depend on props/state to further reduce re-renders.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>apps/web/client/src/app/project/[id]/_components/right-panel/dev-tab/file-tree.tsx:45</code></summary>
> 
> - **Draft comment:** 
> buildFileTree is memoized with an empty dependency array. Since it’s a pure utility that only uses its argument, consider defining it outside the component for clarity.
> - **Reason this comment was not posted:**
> Confidence changes required: `20%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>apps/web/client/src/app/project/[id]/_components/right-panel/dev-tab/index.tsx:41</code></summary>
> 
> - **Draft comment:** 
> Using useCallback for isSandboxReady is good to avoid unnecessary re-creation of the function.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>apps/web/client/src/app/project/[id]/_components/right-panel/dev-tab/index.tsx:245</code></summary>
> 
> - **Draft comment:** 
> handleRefreshFiles is memoized with isSandboxReady as its only dependency. Consider adding dependencies like ide.refreshFiles (or editorEngine) if they can change, to ensure accuracy.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>apps/web/client/src/app/project/[id]/_components/right-panel/dev-tab/index.tsx:274</code></summary>
> 
> - **Draft comment:** 
> The loadFile function is memoized using useCallback but only depends on isSandboxReady. Consider including 'ide' (or its openFile method) in the dependencies if it might change.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>6. <code>apps/web/client/src/app/project/[id]/_components/right-panel/dev-tab/index.tsx:341</code></summary>
> 
> - **Draft comment:** 
> handleFileTreeSelect is defined but never used. Consider removing it to avoid confusion.
> - **Reason this comment was not posted:**
> Comment was not on a location in the diff, so it can't be submitted as a review comment.
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_4nt3h52OtkcbsAfk`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=onlook-dev%2Fonlook&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/onlook-dev/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/onlook-dev/code-review/rules).</sup>"
3131264983,2911155534,ellipsis-dev[bot],COMMENTED,2025-06-09T19:47:04Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed 393b6ce87cf3050668f88f8122e1997fd089dc47 in <ellipsistime>1 minute and 9 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `45` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `4` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/onlook-dev/settings/code-review) and [rules](https://app.ellipsis.dev/onlook-dev/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>apps/web/client/src/app/project/[id]/_components/right-panel/dev-tab/file-tree.tsx:1</code></summary>
> 
> - **Draft comment:** 
> Good cleanup: The import order has been improved and duplicate 'useEditorEngine' imports removed.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>apps/web/client/src/app/project/[id]/_components/right-panel/dev-tab/file-tree.tsx:44</code></summary>
> 
> - **Draft comment:** 
> buildFileTree is memoized via useMemo but is a pure helper that doesn’t depend on component state. Consider moving it outside the component for clarity and to avoid re-creation.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>apps/web/client/src/app/project/[id]/_components/right-panel/dev-tab/file-tree.tsx:206</code></summary>
> 
> - **Draft comment:** 
> handleRefresh is defined inline. Consider wrapping it in useCallback to prevent new function instances on each render, especially if it’s passed as a prop.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>apps/web/client/src/app/project/[id]/_components/right-panel/dev-tab/file-tree.tsx:108</code></summary>
> 
> - **Draft comment:** 
> A setTimeout with 0 delay is used to defer tree selection updates. Consider using requestAnimationFrame or useLayoutEffect for more reliable synchronization with UI updates.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_nvULVCJPZA2ncfO3`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=onlook-dev%2Fonlook&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/onlook-dev/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/onlook-dev/code-review/rules).</sup>"
3129103017,2908889883,greptile-apps[bot],COMMENTED,2025-06-09T04:29:30Z,"
## PR Summary

Added functionality to detect and inform users about personal API token usage in relation to quotas, with key implementation in AppState and Settings UI.

- Added `hasUserAPITokens` computed property in `macos/Onit/AppState.swift` to detect validated API tokens across multiple providers
- Updated `macos/Onit/UI/Settings/GeneralTabPlanAndBilling.swift` to show informative message about quota exemption when personal tokens are present
- Correctly follows Settings color guidelines by not setting custom text colors, allowing system default styles

<sub>2 file(s) reviewed, 1 comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=onit_265)</sub>"
3118688410,2897683055,greptile-apps[bot],COMMENTED,2025-06-04T18:18:36Z,"<sub>14 file(s) reviewed, no comment(s)</sub>
<sub>[Edit PR Review Bot Settings](https://app.greptile.com/review/github) | [Greptile](https://greptile.com?utm_source=greptile_expert&utm_medium=github&utm_campaign=code_reviews&utm_content=promptfoo_4313)</sub>"
3118688410,2897690259,sourcery-ai[bot],COMMENTED,2025-06-04T18:19:28Z,"Hey @mldangelo - I've reviewed your changes - here's some feedback:

- The PR adds `gracefulExit: true` repeatedly – consider centralizing this option in a shared factory or default config to avoid boilerplate.
- Some tests are failing (`fetch.test.ts`, `knowledgeBase.test.ts`); please address these failures before merging.

<details>
<summary>Here's what I looked at during the review</summary>

- 🟢 **General issues**: all looks good
- 🟢 **Security**: all looks good
- 🟢 **Testing**: all looks good
- 🟢 **Documentation**: all looks good
</details>

***

<details>
<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)
- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)

</details>

<sub>
Help me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.
</sub>"
3150169283,2932296309,copilot-pull-request-reviewer[bot],COMMENTED,2025-06-16T14:08:35Z,"## Pull Request Overview

This PR introduces a new StatusFilter component and updates table sorting and layout to support filtering segments based on their state.  
- Added a sortSegmentStatus function in the SortFunctions utility and incorporated it into table sorting logic.  
- Integrated a dropdown filter in the TenantDetails page to allow users to filter segments by status.  
- Enhanced layout components to support additional UI controls.

### Reviewed Changes

Copilot reviewed 3 out of 3 changed files in this pull request and generated no comments.

| File | Description |
| ---- | ----------- |
| pinot-controller/src/main/resources/app/utils/SortFunctions.tsx | Added sortSegmentStatus for comparing segment statuses based on a predefined order. |
| pinot-controller/src/main/resources/app/pages/TenantDetails.tsx | Introduced state management and a dropdown filter to update the segment list based on status. |
| pinot-controller/src/main/resources/app/components/Table.tsx | Updated table sorting to include status sorting by mapping ""Status"" to sortSegmentStatus. |


<details>
<summary>Comments suppressed due to low confidence (2)</summary>

**pinot-controller/src/main/resources/app/utils/SortFunctions.tsx:66**
* Consider adding a brief comment to explain the rationale behind using a default fallback value of 99 for unknown segment statuses.
```
return valuesToResultNumber(aStatus, bStatus, order);
```
**pinot-controller/src/main/resources/app/pages/TenantDetails.tsx:199**
* Filtering by a hard-coded index (1) for the status column assumes a fixed column order; consider referencing the column by name or a constant to improve maintainability.
```
r => r[1].value === segmentStatusFilter
```
</details>

"
3073002129,2852943400,falkoschindler,APPROVED,2025-05-20T07:09:09Z,
3134886533,2915083244,hinthornw,APPROVED,2025-06-10T21:30:15Z,
3134886533,2921916620,agola11,APPROVED,2025-06-12T16:34:59Z,
3137770850,2918306575,ellipsis-dev[bot],COMMENTED,2025-06-11T18:35:51Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to 44abd9ae46f8a7ab38f9c29132ab2a0470bb57c2 in <ellipsistime>1 minute and 27 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `102` lines of code in `3` files
> - Skipped `0` files when reviewing.
> - Skipped posting `5` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/onlook-dev/settings/code-review) and [rules](https://app.ellipsis.dev/onlook-dev/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>apps/web/client/src/app/project/[id]/_components/right-panel/dev-tab/file-tree.tsx:211</code></summary>
> 
> - **Draft comment:** 
> Pass 'true' to index() to force re-index on refresh.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>apps/web/client/src/app/project/[id]/_components/right-panel/dev-tab/index.tsx:249</code></summary>
> 
> - **Draft comment:** 
> Use forced indexing by passing 'true' to index() for a complete refresh.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>3. <code>apps/web/client/src/components/store/editor/sandbox/index.ts:21</code></summary>
> 
> - **Draft comment:** 
> New flags (isIndexed, isIndexing) avoid unnecessary re-indexing and improve performance.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>4. <code>apps/web/client/src/components/store/editor/sandbox/index.ts:42</code></summary>
> 
> - **Draft comment:** 
> The index() method now accepts a 'force' flag and guards against redundant indexing. Note that forced requests are skipped if indexing is already in progress; confirm if this behavior is intended.
> - **Reason this comment was not posted:**
> Comment looked like it was already resolved.
> 
> 
> </details>
> 
> <details>
> <summary>5. <code>apps/web/client/src/components/store/editor/sandbox/index.ts:431</code></summary>
> 
> - **Draft comment:** 
> Resetting isIndexed and isIndexing in clear() ensures fresh indexing on session disconnect.
> - **Reason this comment was not posted:**
> Confidence changes required: `0%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_XZhRkkwRUA1Ng36x`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=onlook-dev%2Fonlook&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/onlook-dev/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/onlook-dev/code-review/rules).</sup>"
3137770850,2918330279,ellipsis-dev[bot],COMMENTED,2025-06-11T18:45:39Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed c058ce5b816fd469bfbc7e0eaa6d7041b50e0442 in <ellipsistime>42 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `13` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `1` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/onlook-dev/settings/code-review) and [rules](https://app.ellipsis.dev/onlook-dev/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>apps/web/client/src/app/project/[id]/_components/right-panel/dev-tab/index.tsx:425</code></summary>
> 
> - **Draft comment:** 
> Using 'asChild' with TooltipTrigger ensures that the Button is used as the trigger element without adding an extra DOM wrapper. For consistency, consider whether all TooltipTrigger usages in this component should use 'asChild' if that pattern is preferred.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_Dsr2DetNHf0LesYG`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=onlook-dev%2Fonlook&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/onlook-dev/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/onlook-dev/code-review/rules).</sup>"
3152394365,2934475266,ellipsis-dev[bot],COMMENTED,2025-06-17T07:32:43Z,"> [!IMPORTANT]
> **Looks good to me!  :+1:**
> <details>
> <summary>Reviewed everything up to dbc12c90f8d7fd36c370e3e44b1d1af7724d4e6c in <ellipsistime>42 seconds</ellipsistime>. Click for details.</summary> 
> 
> - Reviewed `38` lines of code in `1` files
> - Skipped `0` files when reviewing.
> - Skipped posting `2` draft comments. View those below.
> - Modify your [settings](https://app.ellipsis.dev/wechaty/settings/code-review) and [rules](https://app.ellipsis.dev/wechaty/code-review/rules) to customize what types of comments Ellipsis leaves. And don't forget to react with :+1: or :-1: to teach Ellipsis.
> 
> <details>
> <summary>1. <code>src/pure-functions/escape-regexp.spec.ts:1</code></summary>
> 
> - **Draft comment:** 
> The shebang at the top is uncommon in test files. Consider removing it unless you require direct execution, as it might affect cross-platform compatibility.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> <details>
> <summary>2. <code>src/pure-functions/escape-regexp.spec.ts:27</code></summary>
> 
> - **Draft comment:** 
> The tests cover typical strings and a full set of regex special characters. Consider adding additional edge cases (e.g. empty string, string with only special characters) to fully validate the function's behavior.
> - **Reason this comment was not posted:**
> Confidence changes required: `33%` <= threshold `50%` None
> 
> 
> </details>
> 
> 
> Workflow ID: <workflowid>`wflow_UOhX1kQqW5uzMmY5`</workflowid>
> </details>
> 
> <sup>You can customize </sup>[<img alt=""Ellipsis"" src=""https://img.shields.io/badge/Ellipsis-blue?color=175173"">](https://www.ellipsis.dev?ref=wechaty%2Fwechaty&utm_source=github&utm_medium=referral)<sup> by changing your [verbosity settings](https://app.ellipsis.dev/wechaty/settings/code-review), reacting with :+1: or :-1:, [replying to comments](https://docs.ellipsis.dev/features/code-review#teaching-ellipsis), or adding [code review rules](https://app.ellipsis.dev/wechaty/code-review/rules).</sup>"
3152394365,2934479925,coderabbitai[bot],COMMENTED,2025-06-17T07:34:22Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>src/pure-functions/escape-regexp.spec.ts (2)</summary><blockquote>

`21-25`: **Drop the unnecessary `async` wrapper to reduce overhead**

`escapeRegExp()` is synchronous and the test body contains no `await`.  
Removing `async` avoids wrapping the result in a (discarded) Promise and keeps the test definition minimal.

```diff
-test('escapeRegExp() with typical string', async t => {
+test('escapeRegExp() with typical string', t => {
```

---

`27-32`: **Expand the “special-char” case to include all characters the implementation escapes**

The current input omits `-` and `/`, which are explicitly covered by the regex in `escapeRegExp()`.  
Adding them strengthens the regression-proof surface of the test without extra cost.

```diff
-  const input = '.*+?^${}()|[]\\'
-  const expected = '\\.\\*\\+\\?\\^\\$\\{\\}\\(\\)\\|\\[\\]\\\\'
+  const input = '.-*+/+?^${}()|[]\\'
+  const expected = '\\.\\-\\*\\+\\/\\+\\?\\^\\$\\{\\}\\(\\)\\|\\[\\]\\\\'
```

Alternatively, add a third test dedicated to `-/` so the current expectations stay readable.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between ed9ca01abb2dd14fe3ee935e940d292522e6c8e9 and dbc12c90f8d7fd36c370e3e44b1d1af7724d4e6c.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `src/pure-functions/escape-regexp.spec.ts` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>src/pure-functions/escape-regexp.spec.ts (1)</summary><blockquote>

<details>
<summary>src/pure-functions/escape-regexp.ts (1)</summary>

* `escapeRegExp` (20-22)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (2)</summary>

* GitHub Check: Build
* GitHub Check: Build

</details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3125966641,2915366069,ChrisHuie,APPROVED,2025-06-11T01:08:42Z,
3139244261,2921663756,coderabbitai[bot],COMMENTED,2025-06-12T15:21:04Z,"**Actionable comments posted: 1**

<details>
<summary>📜 Review details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 1be9f2f24edf54a5635b12563f2fc44726fd9efc and 0d8399f6637caf8b4a58d6eac26a38df776509b7.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `src/models/eval.ts` (2 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>📓 Path-based instructions (1)</summary>

<details>
<summary>`src/**`: - This is a CLI tool so errors need to be handled gracefully and logged with lots of information so the user can give us enough data to fix the issue or pass it to the de...</summary>

> `src/**`: - This is a CLI tool so errors need to be handled gracefully and logged with lots of information so the user can give us enough data to fix the issue or pass it to the developers.
> 

- `src/models/eval.ts`

</details>

</details>

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>src/models/eval.ts (1)</summary>

`5-5`: **Import looks correct.**

`updateSignalFile` is referenced later in the file and the relative path matches the other database imports. No issues here.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3143005330,2924151171,gemini-code-assist[bot],COMMENTED,2025-06-13T09:57:14Z,"## Summary of Changes

Hello @rgerhards, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

This pull request introduces a formal style guide for Doxygen comments. The goal is to improve documentation consistency and quality by providing clear rules on when Doxygen is mandatory and when it should be avoided, promoting a balance between comprehensive documentation and readable, self-documenting code.

### Highlights

* **New Style Guide**: I've added a new document, `COMMENTING_STYLE.md`, which provides detailed guidelines on how and when to use Doxygen comments within the project.
* **Doxygen Usage Rules**: The new guide clarifies which code elements *must* be documented (e.g., public API, complex functions, file headers) and which should *avoid* Doxygen comments (e.g., simple static functions, getters/setters) to favor self-documenting code.
* **Documentation Cross-Reference**: I've updated the existing `AGENTS.md` file to include a reference to the new `COMMENTING_STYLE.md` guide.





<details>
<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>
</details>




[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configureGemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).
"
3143005330,2924158903,gemini-code-assist[bot],COMMENTED,2025-06-13T09:58:58Z,"## Code Review

This pull request introduces a new Doxygen commenting style guide and links to it from `AGENTS.md`. The new guide is well-structured and provides clear principles for when to use Doxygen comments, emphasizing self-documenting code. This is a valuable addition for maintaining code quality and documentation standards."
3102144371,2882049296,190n,CHANGES_REQUESTED,2025-05-30T18:02:53Z,add a bun test
3132038535,2923369047,devgony,APPROVED,2025-06-13T04:16:45Z,
3119640065,2898693114,cursor[bot],COMMENTED,2025-06-05T02:29:50Z,"<details open>
<summary><h3>Bug: Email Event Handling Fails Race Condition</h3></summary>

The logic for handling duplicate email events is flawed. An early check for an existing event is intended to prevent double-counting metrics, but a race condition exists due to the delay before record creation, potentially allowing concurrent calls to double-count metrics (e.g., campaign analytics). A new email event record is also unconditionally created, resulting in duplicate records. The early check is also inefficient, running unnecessarily for DELIVERY_DELAYED events that trigger an early return.

<p></p>

<details>
<summary><code>apps/web/src/server/service/ses-hook-parser.ts#L43-L168</code></summary>

https://github.com/unsend-dev/unsend/blob/cd3d7937cc676676de853bcd5f62265309d50360/apps/web/src/server/service/ses-hook-parser.ts#L43-L168

</details>

<a href=""https://cursor.com/open?data=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImJ1Z2JvdC12MSJ9.eyJ0eXBlIjoiQlVHQk9UX0ZJWF9JTl9DVVJTT1IiLCJkYXRhIjp7ImJ1ZyI6ImV5SnNiMk5oZEdsdmJuTWlPbHQ3SW1acGJHVWlPaUpoY0hCekwzZGxZaTl6Y21NdmMyVnlkbVZ5TDNObGNuWnBZMlV2YzJWekxXaHZiMnN0Y0dGeWMyVnlMblJ6SWl3aWMzUmhjblJNYVc1bElqbzBNeXdpWlc1a1RHbHVaU0k2TVRZNExDSmpiMlJsVEdsdVpYTWlPbHRkZlYwc0ltbGtJam9pTWpFME1EUTNNVGN0WmpnMFl5MDBPRGRqTFRnM1pEUXRaVGRqWldZNE56Vm1ZbUkzSWl3aVpHVnpZM0pwY0hScGIyNGlPaUpVYUdVZ2JHOW5hV01nWm05eUlHaGhibVJzYVc1bklHUjFjR3hwWTJGMFpTQmxiV0ZwYkNCbGRtVnVkSE1nYVhNZ1pteGhkMlZrTGlCQmJpQmxZWEpzZVNCamFHVmpheUJtYjNJZ1lXNGdaWGhwYzNScGJtY2daWFpsYm5RZ2FYTWdhVzUwWlc1a1pXUWdkRzhnY0hKbGRtVnVkQ0JrYjNWaWJHVXRZMjkxYm5ScGJtY2diV1YwY21samN5d2dZblYwSUdFZ2NtRmpaU0JqYjI1a2FYUnBiMjRnWlhocGMzUnpJR1IxWlNCMGJ5QjBhR1VnWkdWc1lYa2dZbVZtYjNKbElISmxZMjl5WkNCamNtVmhkR2x2Yml3Z2NHOTBaVzUwYVdGc2JIa2dZV3hzYjNkcGJtY2dZMjl1WTNWeWNtVnVkQ0JqWVd4c2N5QjBieUJrYjNWaWJHVXRZMjkxYm5RZ2JXVjBjbWxqY3lBb1pTNW5MaXdnWTJGdGNHRnBaMjRnWVc1aGJIbDBhV056S1M0Z1FTQnVaWGNnWlcxaGFXd2daWFpsYm5RZ2NtVmpiM0prSUdseklHRnNjMjhnZFc1amIyNWthWFJwYjI1aGJHeDVJR055WldGMFpXUXNJSEpsYzNWc2RHbHVaeUJwYmlCa2RYQnNhV05oZEdVZ2NtVmpiM0prY3k0Z1ZHaGxJR1ZoY214NUlHTm9aV05ySUdseklHRnNjMjhnYVc1bFptWnBZMmxsYm5Rc0lISjFibTVwYm1jZ2RXNXVaV05sYzNOaGNtbHNlU0JtYjNJZ1JFVk1TVlpGVWxsZlJFVk1RVmxGUkNCbGRtVnVkSE1nZEdoaGRDQjBjbWxuWjJWeUlHRnVJR1ZoY214NUlISmxkSFZ5Ymk0aUxDSmpiMjVtYVdSbGJtTmxJam93TGpVeE1EUXpOVE01T1RneE5URXhOaklzSW1OaGRHVm5iM0o1SWpvaVRFOUhTVU5mUWxWSEluMCIsImJyYW5jaCI6ImNvZGV4L2ZpeC1kb3VibGUtY291bnRpbmctb2YtZGFzaGJvYXJkLWNsaWNrcyJ9LCJpYXQiOjE3NDkwOTA1ODksImV4cCI6MTc0OTY5NTM4OX0.C8qwV2DzxdECtig5WhIQk47IA7GNuZ62YweN5Mh2Q8orWMSBySReM2IkC4EJ6BpFMezv3HxJTpez6YTIiAIaZIK3jBxFan9Rf7r1dteNmopeTN2gMCSndS6rlhzgGHopGDaENARH7ypEX5lvQWv4G4JaM6KluutM7Bm79uGzf_tzMMARN0b_ippPOg-gzlWoNHCmPuGRirmwC9VXXoFe308TXJeHB_FyVXnhzf5V-t7NWDWe2_QO26sHVmP-iuJNn7rRPDFqwcYJ-ZP4IGbUZMt_Z9ewPBPF8LF17L_8eOiLCud91ivETD2wTtRnesnMD3SxfSPW78dId7tiJIdJNA"">Fix in Cursor</a>

</details>

---


**BugBot free trial expires on June 9, 2025**
You have used $0.00 of your $50.00 spend limit so far. Manage your spend limit in the [Cursor dashboard](https://cursor.com/dashboard?tab=integrations).

_Was this report helpful? Give feedback by reacting with 👍 or 👎_
"
3083723203,2861649003,ntindle,APPROVED,2025-05-22T15:16:23Z,
3124191467,2904371288,coderabbitai[bot],COMMENTED,2025-06-06T09:29:29Z,"**Actionable comments posted: 6**

<details>
<summary>🔭 Outside diff range comments (1)</summary><blockquote>

<details>
<summary>docs/LLAMA4.md (1)</summary><blockquote>

`184-184`: _⚠️ Potential issue_

**Fix inconsistent model name in example.**

The example shows `model=""gemma3""` in the Llama 4 documentation, which appears to be a copy-paste error from another model's documentation.



Apply this fix:
```diff
-        model=""gemma3"",
+        model=""llama4"",
```

</blockquote></details>

</blockquote></details>

<details>
<summary>🧹 Nitpick comments (1)</summary><blockquote>

<details>
<summary>docs/VISION_MODELS.md (1)</summary><blockquote>

`16-16`: **Refine conjunction usage in note**  
The phrase “allow both base64 encoded images as well as a URL/path” is slightly redundant. Consider changing to “allow both base64 encoded images and a URL/path”.

<details>
<summary>🧰 Tools</summary>

<details>
<summary>🪛 LanguageTool</summary>

[grammar] ~16-~16: Probable usage error. Use “and” after ‘both’.
Context: ...es and allow both base64 encoded images as well as a URL/path to the image. There are many...

(BOTH_AS_WELL_AS)

</details>

</details>

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between cfd1e89ec03350d51dc4e2d9498a8ed1d426fa84 and edb34464e6aa4182d2239c8ae3da4a03035bc559.

</details>

<details>
<summary>📒 Files selected for processing (45)</summary>

* `docs/GEMMA3.md` (3 hunks)
* `docs/IDEFICS2.md` (1 hunks)
* `docs/LLAMA4.md` (3 hunks)
* `docs/LLaVA.md` (3 hunks)
* `docs/MISTRAL3.md` (3 hunks)
* `docs/PHI3V.md` (3 hunks)
* `docs/PHI4MM.md` (3 hunks)
* `docs/QWEN2VL.md` (3 hunks)
* `docs/VISION_MODELS.md` (1 hunks)
* `docs/VLLAMA.md` (3 hunks)
* `examples/python/deepseekr1.py` (0 hunks)
* `examples/python/deepseekv2.py` (0 hunks)
* `examples/python/gemma3.py` (0 hunks)
* `examples/python/llama4.py` (0 hunks)
* `examples/python/llama_vision.py` (0 hunks)
* `examples/python/llava_next.py` (0 hunks)
* `examples/python/mistral3.py` (0 hunks)
* `examples/python/phi4mm.py` (0 hunks)
* `examples/python/plain.py` (1 hunks)
* `examples/python/qwen2vl.py` (0 hunks)
* `examples/python/smolvlm.py` (0 hunks)
* `examples/python/vision_chat.py` (1 hunks)
* `examples/server/gemma3.py` (0 hunks)
* `examples/server/llama4.py` (0 hunks)
* `examples/server/llama_vision.py` (0 hunks)
* `examples/server/llava.py` (0 hunks)
* `examples/server/llava_next.py` (0 hunks)
* `examples/server/mistral3.py` (0 hunks)
* `examples/server/phi4mm.py` (0 hunks)
* `examples/server/qwen2vl.py` (0 hunks)
* `examples/server/vision_chat.py` (3 hunks)
* `mistralrs/examples/deepseekr1/main.rs` (0 hunks)
* `mistralrs/examples/deepseekv2/main.rs` (0 hunks)
* `mistralrs/examples/gemma2/main.rs` (0 hunks)
* `mistralrs/examples/gemma3/main.rs` (0 hunks)
* `mistralrs/examples/llama4/main.rs` (0 hunks)
* `mistralrs/examples/llama_vision/main.rs` (0 hunks)
* `mistralrs/examples/llava_next/main.rs` (0 hunks)
* `mistralrs/examples/mistral3/main.rs` (0 hunks)
* `mistralrs/examples/phi3v/main.rs` (0 hunks)
* `mistralrs/examples/phi4mm/main.rs` (0 hunks)
* `mistralrs/examples/qwen2vl/main.rs` (0 hunks)
* `mistralrs/examples/simple/main.rs` (1 hunks)
* `mistralrs/examples/smolvlm/main.rs` (0 hunks)
* `mistralrs/examples/vision_chat/main.rs` (1 hunks)

</details>

<details>
<summary>💤 Files with no reviewable changes (30)</summary>

* examples/python/deepseekr1.py
* examples/python/mistral3.py
* mistralrs/examples/qwen2vl/main.rs
* examples/python/deepseekv2.py
* mistralrs/examples/llama4/main.rs
* mistralrs/examples/gemma3/main.rs
* mistralrs/examples/gemma2/main.rs
* examples/server/llava_next.py
* mistralrs/examples/llama_vision/main.rs
* examples/server/qwen2vl.py
* mistralrs/examples/llava_next/main.rs
* examples/python/gemma3.py
* examples/python/llava_next.py
* mistralrs/examples/smolvlm/main.rs
* examples/server/mistral3.py
* examples/python/smolvlm.py
* mistralrs/examples/mistral3/main.rs
* examples/server/phi4mm.py
* examples/server/llama4.py
* examples/python/llama4.py
* examples/python/llama_vision.py
* examples/python/qwen2vl.py
* examples/server/gemma3.py
* examples/server/llava.py
* mistralrs/examples/phi4mm/main.rs
* mistralrs/examples/deepseekv2/main.rs
* examples/server/llama_vision.py
* examples/python/phi4mm.py
* mistralrs/examples/deepseekr1/main.rs
* mistralrs/examples/phi3v/main.rs

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>examples/python/plain.py (1)</summary><blockquote>

<details>
<summary>mistralrs-pyo3/src/lib.rs (1)</summary>

* `mistralrs` (1499-1530)

</details>

</blockquote></details>

</details><details>
<summary>🪛 LanguageTool</summary>

<details>
<summary>docs/VISION_MODELS.md</summary>

[grammar] ~16-~16: Probable usage error. Use “and” after ‘both’.
Context: ...es and allow both base64 encoded images as well as a URL/path to the image. There are many...

(BOTH_AS_WELL_AS)

</details>

</details>

</details>

<details>
<summary>⏰ Context from checks skipped due to timeout of 90000ms (8)</summary>

* GitHub Check: Clippy
* GitHub Check: Check (windows-latest, stable)
* GitHub Check: Check (macOS-latest, stable)
* GitHub Check: Docs
* GitHub Check: Check (ubuntu-latest, stable)
* GitHub Check: Test Suite (ubuntu-latest, stable)
* GitHub Check: Test Suite (macOS-latest, stable)
* GitHub Check: Test Suite (windows-latest, stable)

</details>

<details>
<summary>🔇 Additional comments (21)</summary><blockquote>

<details>
<summary>docs/IDEFICS2.md (1)</summary>

`140-140`: **Update Python example link**  
The documentation now correctly references the consolidated `vision_chat.py` script for Python examples. Ensure the relative path (`../examples/python/vision_chat.py`) resolves properly from this doc location.

</details>
<details>
<summary>docs/QWEN2VL.md (3)</summary>

`61-61`: **Update HTTP server example link**  
The HTTP server section now points to `vision_chat.py` instead of the old `qwen2vl.py`—this aligns with the unified example approach. Verify the path (`../examples/server/vision_chat.py`) is correct.

---

`139-139`: **Update Rust example link**  
The Rust section link has been updated to `vision_chat/main.rs` for consistency across model docs. Confirm that `../mistralrs/examples/vision_chat/main.rs` exists and is accurate.

---

`187-187`: **Update Python example link**  
The Python section now references the generic `vision_chat.py`. Please check that `../examples/python/vision_chat.py` is reachable from this markdown.

</details>
<details>
<summary>docs/GEMMA3.md (3)</summary>

`15-15`: **Standardize HTTP server example link**  
Updated to point at the unified `vision_chat.py` server example. Validate `../examples/server/vision_chat.py` is correct.

---

`100-100`: **Standardize Rust example link**  
The Rust example link now goes to `vision_chat/main.rs`. Ensure `../mistralrs/examples/vision_chat/main.rs` exists.

---

`145-145`: **Standardize Python example link**  
The Python section references `vision_chat.py` instead of the old `gemma3.py`. Confirm the path (`../examples/python/vision_chat.py`).

</details>
<details>
<summary>docs/PHI3V.md (3)</summary>

`22-22`: **Standardize HTTP server example link**  
Now directs to the consolidated `vision_chat.py`. Verify `../examples/server/vision_chat.py` is accurate.

---

`99-99`: **Standardize Rust example link**  
The Rust section link has been updated to `vision_chat/main.rs`. Please check `../mistralrs/examples/vision_chat/main.rs`.

---

`143-143`: **Standardize Python example link**  
Updated to use the unified `vision_chat.py` for Python. Confirm `../examples/python/vision_chat.py` resolves correctly.

</details>
<details>
<summary>docs/VLLAMA.md (1)</summary>

`68-68`: **Documentation links updated correctly for unified examples.**

The documentation links have been properly updated to point to the new consolidated `vision_chat` examples, which aligns with the PR objectives of standardizing example structure across different models.




Also applies to: 155-155, 201-201

</details>
<details>
<summary>docs/MISTRAL3.md (1)</summary>

`25-25`: **Documentation links consistently updated.**

The example links have been properly updated to reference the unified `vision_chat` examples, maintaining consistency with the refactoring effort.




Also applies to: 110-110, 155-155

</details>
<details>
<summary>docs/PHI4MM.md (1)</summary>

`22-22`: **Example links updated to reflect unified structure.**

The documentation correctly points to the new `vision_chat` examples, maintaining consistency across all model documentation files.




Also applies to: 97-97, 142-142

</details>
<details>
<summary>docs/LLAMA4.md (1)</summary>

`27-27`: **Documentation links updated correctly.**

The example links have been properly updated to reference the unified `vision_chat` examples.




Also applies to: 119-119, 165-165

</details>
<details>
<summary>examples/server/vision_chat.py (2)</summary>

`1-1`: **Excellent addition of CLI argument parsing.**

The addition of argparse with model and image URL parameters successfully achieves the PR objective of enabling model selection through CLI arguments. The default image URL provides a good fallback.




Also applies to: 32-38

---

`46-46`: **Dynamic model and image URL configuration implemented correctly.**

The use of parsed arguments for model and image URL makes this script flexible and reusable across different vision models.




Also applies to: 51-51

</details>
<details>
<summary>docs/LLaVA.md (1)</summary>

`27-27`: **Documentation links updated correctly for unified example structure.**

The path updates from `llava_next` to `vision_chat` correctly reflect the consolidation of model-specific examples into a unified structure, which aligns with the PR objectives.



Also applies to: 104-104, 149-149

</details>
<details>
<summary>mistralrs/examples/simple/main.rs (1)</summary>

`8-12`: **Excellent implementation of CLI argument parsing.**

The addition of command-line argument parsing with a sensible default value maintains backwards compatibility while adding flexibility. The use of `clap::Parser` with derive macros is idiomatic and clean.



Also applies to: 16-17

</details>
<details>
<summary>mistralrs/examples/vision_chat/main.rs (1)</summary>

`5-14`: **Well-designed CLI argument structure for vision chat example.**

The implementation correctly makes `model_id` required (since vision models have different capabilities) while providing a sensible default for `image_url`. The argument usage is consistent and the code remains clean and readable.



Also applies to: 18-19, 25-25

</details>
<details>
<summary>examples/python/vision_chat.py (2)</summary>

`22-22`: **Model field assignment looks correct.**

Using `args.arch.lower()` for the model field is appropriate and follows the expected pattern for chat completion requests.

---

`29-29`: **Dynamic image URL assignment is well implemented.**

The use of the command-line argument for the image URL provides good flexibility while maintaining a sensible default value.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3144225231,2925607557,cubic-dev-ai[bot],COMMENTED,2025-06-13T17:24:56Z,"cubic found 1 issue across 8 files. Review it in [cubic.dev](https://cubic.dev/pr/cartography-cncf/cartography/pull/1629)

<sub>React with 👍 or 👎 to teach cubic. Tag `@cubic-dev-ai` to give specific feedback.</sub>"
3144225231,2928913731,achantavy,APPROVED,2025-06-15T00:21:58Z,
3135170985,2915426308,ChrisHuie,APPROVED,2025-06-11T01:56:23Z,
3078528718,2855889558,gemini-code-assist[bot],COMMENTED,2025-05-21T00:37:24Z,"Hello @greinacker, I'm Gemini Code Assist[^1]! I'm currently reviewing this pull request and will post my feedback shortly. In the meantime, here's a summary to help you and other reviewers quickly get up to speed!

## Summary of Changes
Hello! Gemini here, providing a summary of this pull request. This PR introduces a new feature to the prompt field: a popup menu that displays the user's command history when the up arrow key is pressed while the input is empty. This replaces the previous behavior of cycling through history directly within the input field. The menu allows users to navigate using arrow keys or the mouse, select an item to populate the prompt field (without auto-submitting), and closes when an item is selected, the Escape key is pressed, or the user clicks outside the menu. This change directly addresses issue #121.

### Highlights
* **New Command History Menu**: A new React component, `InputHistoryMenu`, has been added to provide a dedicated UI element for displaying the list of recent commands.
* **Updated Arrow Key Behavior**: The `PromptField` component's `onKeyDown` handler has been modified. Pressing the `ArrowUp` key when the input is empty now triggers the display of the history menu instead of cycling through history in the input field. The old history cycling logic for `ArrowUp` and `ArrowDown` has been removed.
* **Interactive Menu Navigation**: The new history menu supports navigation using the `ArrowUp` and `ArrowDown` keys, highlights items on hover, and allows selection via click or pressing `Enter` when an item is highlighted. The menu also includes logic to ensure the highlighted item is visible via scrolling.
* **Selection Behavior**: Selecting an item from the history menu populates the main prompt input field with the selected command but does not automatically submit it.

### Changelog
<details>
<summary>Click here to see the changelog</summary>

* **src/renderer/src/components/InputHistoryMenu.tsx**
  * Added a new React component (`InputHistoryMenu`) responsible for rendering the command history list in a popup.
  * Uses `useRef` and `useClickOutside` for managing the menu element and closing it when clicking outside.
  * Includes `useEffect` to initially scroll the menu to the bottom.
  * Renders history items, handles highlighting on `onMouseEnter`, and selection on `onClick`.
  * Implements `scrollIntoView` to keep the highlighted item visible.
* **src/renderer/src/components/PromptField.tsx**
  * Imported the new `InputHistoryMenu` component (line 13).
  * Added state variables `historyMenuVisible` and `highlightedHistoryItemIndex` to control the visibility and selection within the history menu (lines 103-104).
  * Calculated `historyItems` by taking the last 20 items from `inputHistory` and reversing them (line 107).
  * Modified the `onKeyDown` handler to include specific logic for navigating and selecting items within the history menu when `historyMenuVisible` is true (lines 378-402).
  * Updated the `ArrowUp` key handler to show the history menu when the input is empty and history exists, replacing the old history cycling logic (lines 452-456). The old `ArrowDown` history cycling logic was removed.
  * Conditionally rendered the `InputHistoryMenu` component below the prompt field when `historyMenuVisible` is true and there are history items (lines 591-602).

</details>


<details>

<summary><b>Using Gemini Code Assist</b></summary>
<br>

The full guide for Gemini Code Assist can be found on our [documentation page](https://developers.google.com/gemini-code-assist/docs/review-github-code), here are some quick tips.

<b>Invoking Gemini</b>

You can request assistance from Gemini at any point in your pull request via creating an issue comment (i.e. comment on the pull request page) using either `/gemini <command>` or `@gemini-code-assist <command>`. Below is a summary of the supported commands.

Feature | Command | Description
--- | --- | ---
Code Review | `/gemini review` | Performs a code review for the current pull request in its current state.
Pull Request Summary | `/gemini summary` | Provides a summary of the current pull request in its current state.
Comment | @gemini-code-assist | Responds in comments when explicitly tagged, both in issue comments and review comments.
Help | `/gemini help` | Displays a list of available commands.

<b>Customization</b>

To customize Gemini Code Assist for GitHub experience, repository maintainers can create a configuration file and/or provide a custom code review style guide (such as PEP-8 for Python) by creating and adding files to a `.gemini/` folder in the base of the repository. Detailed instructions can be found [here](https://developers.google.com/gemini-code-assist/docs/customize-gemini-behavior-github).

<b>Limitations & Feedback</b>

Gemini Code Assist is currently in preview and may make mistakes. Please leave feedback on any instances where its feedback is incorrect or counter productive. You can react with :thumbsup: and :thumbsdown: on @gemini-code-assist comments to provide feedback.

</details>

<b>You can also get AI-powered code generation, chat, as well as code reviews directly in the IDE at no cost with the [Gemini Code Assist IDE Extension](https://cloud.google.com/products/gemini/code-assist).</b>


[^1]: Review the [Privacy Notices](https://policies.google.com/privacy), [Generative AI Prohibited Use Policy](https://policies.google.com/terms/generative-ai/use-policy), [Terms of Service](https://policies.google.com/terms), and learn how to configure Gemini Code Assist in GitHub [here](https://developers.google.com/gemini-code-assist/docs/review-github-code). Gemini can make mistakes, so double check it and [use code with caution](https://support.google.com/legal/answer/13505487).

---

> Arrow up, history shows,
> A list of commands, how it grows.
> Pick one with ease,
> Then type as you please,
> No auto-submit, everyone knows.

"
3078528718,2855891858,gemini-code-assist[bot],CHANGES_REQUESTED,2025-05-21T00:39:15Z,"## Code Review
Great work on adding the command history popup menu! This will definitely improve the user experience by making it easier to access previous commands. The new `InputHistoryMenu` component is well-structured, and the integration into `PromptField` handles keyboard navigation and state management effectively.

I have a couple of suggestions, one related to accessibility in the new menu component and another regarding a potentially redundant state variable in `PromptField.tsx` after these changes. Addressing these would further enhance the code quality.

### Summary of Findings
* **Accessibility of History Menu Items**: Menu items in `InputHistoryMenu.tsx` are implemented as `div`s. For better accessibility, they should be `<button>` elements with appropriate ARIA roles (`menuitem`) and states (`aria-selected`). This was raised as a review comment.
* **Redundant State Variable `historyIndex`**: The `historyIndex` state variable in `PromptField.tsx` appears to be unused after the refactoring of history navigation to use a popup menu. Removing it would clean up the component's state. This was raised as a review comment.
* **Magic Number for History Display Count**: In `PromptField.tsx` (line 107), `inputHistory.slice(0, 20).reverse();` uses the number `20` directly. It would be better practice to define this as a constant (e.g., `MAX_HISTORY_MENU_ITEMS = 20;`). (Not commented directly due to severity settings: low)
* **Minor Optimization Opportunity for `historyItems`**: The `historyItems` array in `PromptField.tsx` (line 107) is recalculated on every render. While the operation `slice(0, 20).reverse()` is cheap, this could be memoized using `useMemo([inputHistory])` for a minor optimization if `PromptField` re-renders frequently for reasons unrelated to `inputHistory` changing. (Not commented directly due to severity settings: low)

### Merge Readiness
The pull request introduces a valuable feature and is mostly well-implemented. However, there are a couple of medium-severity issues (accessibility of menu items and a redundant state variable) that I've highlighted in the review comments. I recommend addressing these changes to improve code quality and maintainability before merging. As an AI, I am not authorized to approve pull requests; please ensure further review and approval from team members."
3078528718,2856844655,wladimiiir,COMMENTED,2025-05-21T08:42:12Z,
3078528718,2858113664,greinacker,COMMENTED,2025-05-21T15:07:05Z,
3078528718,2858118808,greinacker,COMMENTED,2025-05-21T15:08:25Z,
3078528718,2858240273,greinacker,COMMENTED,2025-05-21T15:33:56Z,
3078528718,2866396655,wladimiiir,APPROVED,2025-05-24T17:55:22Z,Thank you for your contribution 👍 
3074258030,2916742409,cursor[bot],COMMENTED,2025-06-11T11:24:41Z,"<details open>
<summary><h3>Bug: Router Issues: Validation, JSON Conversion, Path Mismatch</h3></summary>

The `_pygwalker_router` function has three distinct issues:

*   **Input Validation:** It accesses `json_data[""action""]` and `json_data[""data""]` without validation, causing a `KeyError` and API endpoint failure if these keys are missing from the request payload.
*   **JSON Conversion Inefficiency:** It performs an unnecessary double JSON conversion by serializing the `result` to a string and then immediately deserializing it before returning the `JSONResponse`.
*   **Path Mismatch:** There is an inconsistency between `BASE_URL_PATH` (defined without a leading slash) and `PYGWALKER_ROUTE` (defined with a leading slash), which may prevent frontend requests from correctly matching the API endpoint.

<p></p>

<details>
<summary><code>pygwalker/communications/reflex_comm.py#L11-L35</code></summary>

https://github.com/Kanaries/pygwalker/blob/13c838c7f43d87e26c303a1c23884f91bc12dbef/pygwalker/communications/reflex_comm.py#L11-L35

</details>

<a href=""https://cursor.com/open?data=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImJ1Z2JvdC12MSJ9.eyJ0eXBlIjoiQlVHQk9UX0ZJWF9JTl9DVVJTT1IiLCJkYXRhIjp7ImJ1ZyI6ImV5SnNiMk5oZEdsdmJuTWlPbHQ3SW1acGJHVWlPaUp3ZVdkM1lXeHJaWEl2WTI5dGJYVnVhV05oZEdsdmJuTXZjbVZtYkdWNFgyTnZiVzB1Y0hraUxDSnpkR0Z5ZEV4cGJtVWlPakV4TENKbGJtUk1hVzVsSWpvek5Td2lZMjlrWlV4cGJtVnpJanBiWFgxZExDSnBaQ0k2SW1SaU5EUm1OVFV6TFRZM1lXVXRORFUzTVMwNVpESm1MVGcxTWpVeU1UZGxOVGMwTnlJc0ltUmxjMk55YVhCMGFXOXVJam9pVkdobElHQmZjSGxuZDJGc2EyVnlYM0p2ZFhSbGNtQWdablZ1WTNScGIyNGdhR0Z6SUhSb2NtVmxJR1JwYzNScGJtTjBJR2x6YzNWbGN6cGNibHh1S2lBZ0lDb3FTVzV3ZFhRZ1ZtRnNhV1JoZEdsdmJqb3FLaUJKZENCaFkyTmxjM05sY3lCZ2FuTnZibDlrWVhSaFcxd2lZV04wYVc5dVhDSmRZQ0JoYm1RZ1lHcHpiMjVmWkdGMFlWdGNJbVJoZEdGY0lsMWdJSGRwZEdodmRYUWdkbUZzYVdSaGRHbHZiaXdnWTJGMWMybHVaeUJoSUdCTFpYbEZjbkp2Y21BZ1lXNWtJRUZRU1NCbGJtUndiMmx1ZENCbVlXbHNkWEpsSUdsbUlIUm9aWE5sSUd0bGVYTWdZWEpsSUcxcGMzTnBibWNnWm5KdmJTQjBhR1VnY21WeGRXVnpkQ0J3WVhsc2IyRmtMbHh1S2lBZ0lDb3FTbE5QVGlCRGIyNTJaWEp6YVc5dUlFbHVaV1ptYVdOcFpXNWplVG9xS2lCSmRDQndaWEptYjNKdGN5QmhiaUIxYm01bFkyVnpjMkZ5ZVNCa2IzVmliR1VnU2xOUFRpQmpiMjUyWlhKemFXOXVJR0o1SUhObGNtbGhiR2w2YVc1bklIUm9aU0JnY21WemRXeDBZQ0IwYnlCaElITjBjbWx1WnlCaGJtUWdkR2hsYmlCcGJXMWxaR2xoZEdWc2VTQmtaWE5sY21saGJHbDZhVzVuSUdsMElHSmxabTl5WlNCeVpYUjFjbTVwYm1jZ2RHaGxJR0JLVTA5T1VtVnpjRzl1YzJWZ0xseHVLaUFnSUNvcVVHRjBhQ0JOYVhOdFlYUmphRG9xS2lCVWFHVnlaU0JwY3lCaGJpQnBibU52Ym5OcGMzUmxibU41SUdKbGRIZGxaVzRnWUVKQlUwVmZWVkpNWDFCQlZFaGdJQ2hrWldacGJtVmtJSGRwZEdodmRYUWdZU0JzWldGa2FXNW5JSE5zWVhOb0tTQmhibVFnWUZCWlIxZEJURXRGVWw5U1QxVlVSV0FnS0dSbFptbHVaV1FnZDJsMGFDQmhJR3hsWVdScGJtY2djMnhoYzJncExDQjNhR2xqYUNCdFlYa2djSEpsZG1WdWRDQm1jbTl1ZEdWdVpDQnlaWEYxWlhOMGN5Qm1jbTl0SUdOdmNuSmxZM1JzZVNCdFlYUmphR2x1WnlCMGFHVWdRVkJKSUdWdVpIQnZhVzUwTGlJc0ltTnZibVpwWkdWdVkyVWlPakF1TnpVMU5UZ3dNalF5T0RReE1UZzRNU3dpWTJGMFpXZHZjbmtpT2lKTVQwZEpRMTlDVlVjaWZRIiwiYnJhbmNoIjoiY29kZXgvaW1wbGVtZW50LXB5Z3dhbGtlci1mb3ItcHl0aG9uLXJlZmxleCJ9LCJpYXQiOjE3NDk2NDEwODEsImV4cCI6MTc1MDI0NTg4MX0.Yrw74t_-lyj3QuaibVKaIM5M-VPBPeteLW7kQxFtjfIKsRJ22JK2KxR7cq0Y9bXc72SqefERDAO1k2u1Q5RMmr1w_YI3AL9535ODwTwkIhHliHVnt9kfeCh1A3cVX8WnTTh7vPYQOx4O4IvmUE1rPDtb0A3S6jYydCXQa2srzIMOKYZAv3I8vCFhEZVWpws1tFQldlgsPL9TzsTEbIdgFCbUfZxsMMlPOf_RaJ1Ad3_yslFt0FBvBS5wB71OYkB4mYNyfy6DUyLVmk-n-Z0oAJamQgjp2N5QpM4IaL3jpMWM5WDHkjpGHK7_rebJCoGkcNbIqARO1f6zthqdL_uA_Q"">Fix in Cursor</a>

</details>

---


**BugBot free trial expires on June 17, 2025**
You have used $0.00 of your $50.00 spend limit so far. Manage your spend limit in the [Cursor dashboard](https://cursor.com/dashboard?tab=bugbot).

_Was this report helpful? Give feedback by reacting with 👍 or 👎_
"
3133981875,2931934586,xlrx,COMMENTED,2025-06-16T12:25:07Z,"This PR does not contain changes, i.e., only line spacing and encoding changed from CRLF to LF."
3088248911,2866636523,i-love-neko-girls,COMMENTED,2025-05-24T23:30:34Z,
3088248911,2869424958,alii,DISMISSED,2025-05-27T02:55:05Z,
3088248911,2869441588,alii,APPROVED,2025-05-27T03:04:13Z,
3117805432,2896694226,ArthurSonzogni,COMMENTED,2025-06-04T13:16:37Z,+1
3071986443,2849065906,copilot-pull-request-reviewer[bot],COMMENTED,2025-05-18T18:58:25Z,"## Pull Request Overview

This PR fixes deprecated print syntax in the database module to ensure compatibility with both Python 2 and 3.  
- Replaced the old print statement with the print() function  
- Added ""from __future__ import print_function"" for Python 2 compatibility



"
3139049191,2919754762,coderabbitai[bot],COMMENTED,2025-06-12T06:52:40Z,"**Actionable comments posted: 0**

<details>
<summary>🧹 Nitpick comments (4)</summary><blockquote>

<details>
<summary>site/content/config.js (1)</summary><blockquote>

`139-141`: **Consider de-duplicating the description string**

You now have the same ~140-character description at the root of the config and inside `nextSeo.openGraph.description`.  If you intentionally want these to diverge later, no action needed; otherwise you could keep a single source of truth to avoid copy-paste edits.

</blockquote></details>
<details>
<summary>site/pages/partners.tsx (3)</summary><blockquote>

`24-30`: **Open external calendar link in a new tab**

The Google Calendar URL is an external site.  Opening it in the same tab navigates users away from PortalJS.  Pass `target=""_blank""` and `rel=""noopener noreferrer""` to `ButtonLink`.

```diff
-            <ButtonLink
-              href=""https://calendar.app.google/sn2PU7ZvzjCPo1ok6""
-              className=""text-sm""
-            >
+            <ButtonLink
+              href=""https://calendar.app.google/sn2PU7ZvzjCPo1ok6""
+              target=""_blank""
+              rel=""noopener noreferrer""
+              className=""text-sm""
+            >
```

---

`96-102`: **Same new-tab recommendation for the second CTA**

Reuse the attributes here as well to keep behaviour consistent.

```diff
-            <ButtonLink
-              href=""https://calendar.app.google/sn2PU7ZvzjCPo1ok6""
-              style=""secondary""
-              className=""text-sm""
-            >
+            <ButtonLink
+              href=""https://calendar.app.google/sn2PU7ZvzjCPo1ok6""
+              style=""secondary""
+              target=""_blank""
+              rel=""noopener noreferrer""
+              className=""text-sm""
+            >
```

---

`6-108`: **Avoid hard-coding the same URL twice**

The booking link appears in two places.  Define it once to stay DRY:

```diff
 import Layout from '@/components/Layout';
 import { NextSeo } from 'next-seo';
 import ButtonLink from '@/components/ButtonLink';
 import { H1, H2, H3 } from '@/components/custom/header';

+const CALENDAR_URL = 'https://calendar.app.google/sn2PU7ZvzjCPo1ok6';
 ...
-            <ButtonLink
-              href=""https://calendar.app.google/sn2PU7ZvzjCPo1ok6""
+            <ButtonLink
+              href={CALENDAR_URL}
 ...
-            <ButtonLink
-              href=""https://calendar.app.google/sn2PU7ZvzjCPo1ok6""
+            <ButtonLink
+              href={CALENDAR_URL}
```
This prevents future inconsistencies should the link need to change.

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between 2322cd294d847ecc2d823cb52e545d8b1292b4db and dc5b2d50cef1226db30c81a1783f81a1398c6a5a.

</details>

<details>
<summary>📒 Files selected for processing (2)</summary>

* `site/content/config.js` (4 hunks)
* `site/pages/partners.tsx` (1 hunks)

</details>

<details>
<summary>🧰 Additional context used</summary>

<details>
<summary>🧬 Code Graph Analysis (1)</summary>

<details>
<summary>site/pages/partners.tsx (1)</summary><blockquote>

<details>
<summary>site/components/ButtonLink.tsx (1)</summary>

* `ButtonLink` (11-40)

</details>

</blockquote></details>

</details>

</details>

<details>
<summary>🔇 Additional comments (3)</summary><blockquote>

<details>
<summary>site/content/config.js (3)</summary>

`98-101`: **Partners link correctly added to the main nav**

The new entry is consistent with the surrounding objects and the `/partners` route implemented in this PR, so everything should resolve correctly.

---

`112-115`: **Footer update looks good**

Adding “Partners” beside “Home” keeps the footer layout coherent and requires no further changes.

---

`152-153`: **Semicolons are fine but not required**

The trailing semicolons you added are stylistically OK; just be sure they match the project’s prettier / ESLint rules so you don’t fight the formatter later.

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
3139049191,2920838945,coderabbitai[bot],COMMENTED,2025-06-12T11:57:55Z,"**Actionable comments posted: 3**

<details>
<summary>🧹 Nitpick comments (2)</summary><blockquote>

<details>
<summary>site/pages/partners.tsx (2)</summary><blockquote>

`170-174`: **Add accessible labels to decorative Lottie animations**

`<Player>` renders a `<div>` without any ARIA context, so screen-reader users
get no information. Either mark it decorative or label it:

```diff
-<Player … />
+<Player aria-hidden=""true"" focusable=""false"" … />
```

or

```diff
+<Player aria-label={`${benefit.title} icon`} … />
```

Ensure the chosen prop is supported by the underlying element.

---

`10-35`: **Move static data definitions outside the component to avoid re-allocation**

`benefits`, `steps`, and `partners` are immutable; defining them inside the
component recreates the arrays on every render. Shift them above the component
or into their own module to save memory and keep renders pure.



Also applies to: 38-71, 74-93

</blockquote></details>

</blockquote></details>

<details>
<summary>📜 Review details</summary>

**Configuration used: CodeRabbit UI**
**Review profile: CHILL**
**Plan: Pro**


<details>
<summary>📥 Commits</summary>

Reviewing files that changed from the base of the PR and between dc5b2d50cef1226db30c81a1783f81a1398c6a5a and a5b37dfb9ff97aa28792c0982d62a48ae3bffc9d.

</details>

<details>
<summary>📒 Files selected for processing (1)</summary>

* `site/pages/partners.tsx` (1 hunks)

</details>

<details>
<summary>🔇 Additional comments (1)</summary><blockquote>

<details>
<summary>site/pages/partners.tsx (1)</summary>

`170-174`: **Guard against `theme` being `undefined` to prevent 404s & hydration mismatches**

On the server the `useTheme()` hook returns `undefined`, so the computed path
`/static/icons/undefined/…` is requested and then differs from the hydrated
client («undefined» → «light»/«dark»).  
Use a fallback (`'light'` is typical) to stabilise markup and prevent broken
requests.

```diff
-src={`/static/icons/${theme}/${benefit.icon}.json`}
+src={`/static/icons/${theme ?? 'light'}/${benefit.icon}.json`}
```

Apply the same change to the `steps` loop (lines 203-204).



Also applies to: 203-204

</details>

</blockquote></details>

</details>

<!-- This is an auto-generated comment by CodeRabbit for review status -->"
